<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Terrasoft.Core</name>
    </assembly>
    <members>
        <member name="T:Terrasoft.Core.BaseExtraPropertyCollection`1">
            <summary>
            Base collection for extra property items.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <seealso cref="T:System.Collections.ObjectModel.Collection`1"/>
        </member>
        <member name="M:Terrasoft.Core.BaseExtraPropertyCollection`1.FindByName(System.String)">
            <summary>
            Finds the item of the given name.
            </summary>
            <param name="name">The name.</param>
            <returns>The found item or <c>null</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.BaseExtraPropertyCollection`1.GetByName(System.String)">
            <summary>
            Gets the item the given name.
            </summary>
            <param name="name">The name.</param>
            <returns>The found item.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">The given name is empty.</exception>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">The item was not found.</exception>
        </member>
        <member name="M:Terrasoft.Core.BaseExtraPropertyCollection`1.GetValueByName``1(System.String,``0)">
            <summary>
            Gets the item's value by it's name with default value in case the value is <c>null</c>.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="extraPropertyName">Name of the extra property.</param>
            <param name="defValue">The default value.</param>
            <returns>The value or the given defValue if the value is <c>null</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.BaseExtraPropertyCollection`1.FindValueByName``1(System.String,``0)">
            <summary>
            Finds the item's value by it's name with default value in case the value is <c>null</c> or it is not found.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="extraPropertyName">Name of the extra property.</param>
            <param name="defValue">The default value.</param>
            <returns>The value or the given defValue if the value is <c>null</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.BaseExtraPropertyCollection`1.GetValueByName``1(System.String)">
            <summary>
            Gets the item's value by it's name.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="extraPropertyName">Name of the extra property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Terrasoft.Core.BaseExtraPropertyCollection`1.GetValueByName(System.String)">
            <summary>
            Gets the item's value by it's name.
            </summary>
            <param name="extraPropertyName">Name of the extra property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Terrasoft.Core.BaseExtraPropertyCollection`1.SetValueByName(System.String,System.Object)">
            <summary>
            Sets the value for the item with the given name.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Terrasoft.Core.BaseExtraPropertyCollection`1.SetValues``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Sets the values for the items related with the given dictionary.
            </summary>
            <typeparam name="T">The type of the values.</typeparam>
            <param name="values">The values. The keys are related to the property names and values are related to the
            property values.</param>
        </member>
        <member name="M:Terrasoft.Core.BaseExtraPropertyCollection`1.ParseObject(System.Object)">
            <summary>
            Parses the object.
            </summary>
            <param name="parsingObject">The parsing object.</param>
            <exception cref="T:System.ArgumentNullException">parsingObject</exception>
        </member>
        <member name="M:Terrasoft.Core.BaseExtraPropertyCollection`1.SafeGetExtraPropertyValue``1(System.String)">
            <summary>
            Safely gets the extra property value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="name">The name.</param>
            <returns>
            The value of the extra property or the type default value if it is absent.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.BaseExtraPropertyCollection`1.SafeGetExtraPropertyValue``1(System.String,``0)">
            <summary>
            Safely gets the property value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            The value of the extra property or <c>defaultValue</c> if it is absent.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Abstract.Actions.IBusinessRuleAction">
            <summary>
            IBusinessRuleAction interface.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Abstract.IBusinessRuleExecutable">
            <summary>
            BusinessRuleExecutable interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.Actions.IBusinessRuleAction.Enabled">
            <summary>
            Is action enabled.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.Actions.IBusinessRuleAction.Description">
            <summary>
            Action description.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Abstract.Actions.IDefaultValueBusinessRuleAction`1">
            <summary>
            IDefaultValueBusinessRuleAction interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.Actions.IDefaultValueBusinessRuleAction`1.Column">
            <summary>
            Entity schema column.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.Actions.IDefaultValueBusinessRuleAction`1.Value">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Abstract.Conditions.IBusinessRuleConditionGroup`1">
            <summary>
            BusinessRuleComparisonCondition interface.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Abstract.Conditions.IBusinessRuleCondition">
            <summary>
            BusinessRuleCondition interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.Conditions.IBusinessRuleConditionGroup`1.LogicalOperation">
            <summary>
            Condition logical operation.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.Conditions.IBusinessRuleConditionGroup`1.Items">
            <summary>
            Condition items.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Abstract.Conditions.IComparisonBusinessRuleCondition`1">
            <summary>
            BusinessRuleComparisonCondition interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.Conditions.IComparisonBusinessRuleCondition`1.LeftExpression">
            <summary>
            Left expression.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.Conditions.IComparisonBusinessRuleCondition`1.ComparisonType">
            <summary>
            Expression comparison type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.Conditions.IComparisonBusinessRuleCondition`1.RightExpression">
            <summary>
            Right expression.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Abstract.Expressions.IBusinessRuleExpression">
            <summary>
            BusinessRuleExpression interface.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Abstract.Expressions.IColumnBusinessRuleExpression">
            <summary>
            ColumnBusinessRuleExpression interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.Expressions.IColumnBusinessRuleExpression.ColumnMetaPath">
            <summary>
            Parent object meta path.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Abstract.Expressions.IConstantBusinessRuleExpression">
            <summary>
            ConstantBusinessRuleExpression interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.Expressions.IConstantBusinessRuleExpression.DataValueType">
            <summary>
            Data value type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.Expressions.IConstantBusinessRuleExpression.Value">
            <summary>
            Constant value.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Abstract.Cases.IBusinessRuleCase`2">
            <summary>
            IBusinessRuleCase interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.Cases.IBusinessRuleCase`2.Condition">
            <summary>
            Business rule case condition.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.Cases.IBusinessRuleCase`2.Executable">
            <summary>
            Business rule case execute.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Abstract.IBusinessRule`2">
            <summary>
            BusinessRuleExpression interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.IBusinessRule`2.Name">
            <summary>
            Business rule name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.IBusinessRule`2.Description">
            <summary>
            Business rule description.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.IBusinessRule`2.EntitySchemaUId">
            <summary>
            Entity schema UId.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.IBusinessRule`2.Type">
            <summary>
            Business rule usage type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.IBusinessRule`2.Trigger">
            <summary>
            Business rule trigger.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Abstract.IBusinessRule`2.Executable">
            <summary>
            Business rule execution.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.BusinessRuleUsageType">
            <summary>
            Business rule usage types.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.BusinessRules.Meta.BusinessRuleUsageType.Server">
            <summary>
            Use only on server side.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.BusinessRules.Meta.BusinessRuleUsageType.Client">
            <summary>
            Use only on client side.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.BusinessRules.Meta.BusinessRuleUsageType.General">
            <summary>
            Use on both side.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.BusinessRuleElementType">
            <summary>
            Business rule element types.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.BusinessRules.Meta.BusinessRuleElementType.UndefinedType">
            <summary>
            Undefined type.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.BusinessRules.Meta.BusinessRuleElementType.ConstantBusinessRuleExpression">
            <summary>
            ConstantBusinessRuleExpression type.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.BusinessRules.Meta.BusinessRuleElementType.ColumnBusinessRuleExpression">
            <summary>
            ColumnBusinessRuleExpression type.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.BusinessRules.Meta.BusinessRuleElementType.ComparisonBusinessRuleCondition">
            <summary>
            ComparisonBusinessRuleCondition type.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.BusinessRules.Meta.BusinessRuleElementType.BusinessRuleConditionGroup">
            <summary>
            BusinessRuleConditionGroup type.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.BusinessRules.Meta.BusinessRuleElementType.DefaultValueBusinessRuleAction">
            <summary>
            DefaultValueBusinessRuleAction type.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.BusinessRuleComparisonType">
            <summary>
            Business rule comparison type.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.BusinessRules.Meta.BusinessRuleComparisonType.Equal">
            <summary>
            Equal comparison type.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.BusinessRuleLogicalOperation">
            <summary>
            Business rule logical operation.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.BusinessRules.Meta.BusinessRuleLogicalOperation.And">
            <summary>
            Equal comparison.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.BusinessRules.Meta.BusinessRuleLogicalOperation.Or">
            <summary>
            One of the conditions comparison.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.BaseBusinessRuleAction">
            <summary>
            BaseBusinessRuleAction abstract class.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.BaseBusinessRuleExecutable">
            <summary>
            BaseBusinessRuleExecutable abstract class.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.BaseBusinessRuleElement">
            <summary>
            BaseBusinessRuleElement abstract class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BaseBusinessRuleElement.#ctor">
            <summary>
            Creates an instance of BaseBusinessRuleElement class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BaseBusinessRuleElement.#ctor(Terrasoft.Core.BusinessRules.Meta.Concrete.BaseBusinessRuleElement)">
            <summary>
            Creates an instance of BaseBusinessRuleElement class.
            </summary>
            <param name="source">BaseBusinessRuleElement item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BaseBusinessRuleElement.WriteWrappedValue``1(Terrasoft.Common.DataWriter,``0)">
            <summary>
            Write wrapped value.
            </summary>
            <param name="writer">DataWriter item.</param>
            <param name="businessRuleElement">BaseBusinessRuleElement item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BaseBusinessRuleElement.ReadWrappedValue``1(Terrasoft.Common.DataReader)">
            <summary>
            Read wrapped value.
            </summary>
            <param name="reader">DataReader item.</param>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.BaseBusinessRuleElement.EntitySchema">
            <summary>
            Entity schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BaseBusinessRuleExecutable.#ctor">
            <summary>
            Creates an instance of BaseBusinessRuleExecutable class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BaseBusinessRuleExecutable.#ctor(Terrasoft.Core.BusinessRules.Meta.Concrete.BaseBusinessRuleExecutable)">
            <summary>
            Creates an instance of BaseBusinessRuleExecutable class.
            </summary>
            <param name="source">BaseBusinessRuleExecutable item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.BaseBusinessRuleAction.#ctor">
            <summary>
            Creates an instance of BaseBusinessRuleAction class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.BaseBusinessRuleAction.#ctor(Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.BaseBusinessRuleAction)">
            <summary>
            Creates an instance of BaseBusinessRuleAction class.
            </summary>
            <param name="source">BaseBusinessRuleAction item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.BaseBusinessRuleAction.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Apply meta data value.
            </summary>
            <param name="reader">DataReader item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.BaseBusinessRuleAction.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Write meta data values.
            </summary>
            <param name="writer">DataWriter item.</param>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.BaseBusinessRuleAction.Enabled">
            <summary>
            Is action enabled.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.BaseBusinessRuleAction.Description">
            <summary>
            Action localizable description.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.DefaultValueBusinessRuleAction">
            <summary>
            BaseBusinessRuleAction class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.DefaultValueBusinessRuleAction.#ctor(Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.DefaultValueBusinessRuleAction)">
            <summary>
            Creates an instance of DefaultValueBusinessRuleAction class.
            </summary>
            <param name="source">DefaultValueBusinessRuleAction item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.DefaultValueBusinessRuleAction.#ctor">
            <summary>
            Creates an instance of DefaultValueBusinessRuleAction class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.DefaultValueBusinessRuleAction.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Apply meta data value.
            </summary>
            <param name="reader">DataReader item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.DefaultValueBusinessRuleAction.Clone">
            <summary>
            Returns copy of DefaultValueBusinessRuleAction instance.
            </summary>
            <returns>DefaultValueBusinessRuleAction instance copy.</returns>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.DefaultValueBusinessRuleAction.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Write meta data values.
            </summary>
            <param name="writer">DataWriter item.</param>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.DefaultValueBusinessRuleAction.ColumnUId">
            <summary>
            Entity schema column UId.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.DefaultValueBusinessRuleAction.Column">
            <summary>
            Entity schema column.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Actions.DefaultValueBusinessRuleAction.Value">
            <summary>
            Default expression value.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementFactory">
            <summary>
            BusinessRuleElementFactory static class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementFactory.FindTypeByEnumType(Terrasoft.Core.BusinessRules.Meta.BusinessRuleElementType)">
            <summary>
            Returns business rule element class type.
            </summary>
            <param name="enumType">Business rule element type.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementFactory.FindEnumTypeByType(System.Type)">
            <summary>
            Returns business rule element type.
            </summary>
            <param name="type">Business rule element class type.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementFactory.CreateBusinessRuleElement``1(Terrasoft.Core.BusinessRules.Meta.BusinessRuleElementType,Terrasoft.Core.Entities.EntitySchema)">
            <summary>
            Creates business rule element.
            </summary>
            <param name="enumType">Business rule element class type.</param>
            <param name="entitySchema">Entity schema.</param>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementFactory.BusinessRuleElementFactorySettings">
            <summary>
            BusinessRuleElementFactorySettings private class.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementFactory.BusinessRuleElementFactorySettings.Type">
            <summary>
            Business rule element class type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementFactory.BusinessRuleElementFactorySettings.EnumType">
            <summary>
            Business rule element type.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementWrapper`1">
            <summary>
            BaseBusinessRuleElement class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementWrapper`1.#ctor(Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementWrapper{`0})">
            <summary>
            Creates an instance of BusinessRuleElementWrapper class.
            </summary>
            <param name="source">BusinessRuleElementWrapper item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementWrapper`1.#ctor">
            <summary>
            Creates an instance of BusinessRuleElementWrapper class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementWrapper`1.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Apply meta data value.
            </summary>
            <param name="reader">DataReader item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementWrapper`1.Clone">
            <summary>
            Returns copy of BusinessRuleElementWrapper instance.
            </summary>
            <returns>BusinessRuleElementWrapper instance copy.</returns>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementWrapper`1.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Write meta data values.
            </summary>
            <param name="writer">DataWriter item.</param>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementWrapper`1.Type">
            <summary>
            Business rule element type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleElementWrapper`1.Data">
            <summary>
            Base business rule element.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema">
            <summary>
            BusinessRuleSchema class.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Schema">
            <summary>
            Базовый класс схемы.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.IManagerItemInstance">
            <summary>
            Предоставляет свойства экземпляра элемента менеджера.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.IManagerItemInstance.ManagerItem">
            <summary>
            Элемент менеджера.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.IManagerItemInstance.Manager">
            <summary>
            Менеджер.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Schema.#ctor(Terrasoft.Core.ISchemaManager)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Schema"/> с заданным менеджером схем.
            </summary>
            <param name="schemaManager">Менеджер схем.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="schemaManager"/> передано 
            значение <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Schema.#ctor(Terrasoft.Core.Schema)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Schema"/>, являющийся клоном заданной схемы 
            <paramref name="source"/>.
            </summary>
            <param name="source">Схема, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Schema.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Вычитка значений свойств схемы из метаданных с помощью заданного 
            <see cref="T:Terrasoft.Common.DataReader"/>.
            </summary>
            <param name="reader">Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется 
            вычитка метаданных.</param>
        </member>
        <member name="M:Terrasoft.Core.Schema.InitializeMethods">
            <summary>
            Инициализация методов схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Schema.InitializeLocalizableStrings">
            <summary>
            Инициализация локализуемых строк схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Schema.InitializeUsings">
            <summary>
            Инициализация коллекции пространств имен, используемых схемой.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Schema.SetLocalizableStringsDefInheritance">
            <summary>
            Для локализуемых строк схемы устанавливает свойства наследования.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Schema.GenerateItemNamePrefix(Terrasoft.Core.IDesignItem,Terrasoft.Core.DesignModeClassDescriptor)">
            <summary>
            Для заданного элемента времени разработки генерирует префикс, используя заданное описание класса 
            объекта времени разработки.
            </summary>
            <param name="item">Элемент времени разработки.</param>
            <param name="classDescriptor">Описание класса объекта времени разработки.</param>
            <returns>Сгенерированный префикс для <paramref name="item"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Schema.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Осуществляет запись метаданных схемы с помощью заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого записываются 
            метаданные схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.Schema.HandleNameChanging(System.String)">
            <summary>
            Актуализирует имена всех локализуемых свойств схемы при ее переименовании.
            </summary>
            <param name="oldName">Старое имя схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.Schema.SetDefInheritance">
            <summary>
            Для всех элементов схемы, у которых не установлен идентификатор родительской схемы, устанавливает 
            идентификатор текущей схемы как родительской. 
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Schema.InitializeLocalizableValues(System.String,System.String)">
            <summary>
            Выполняет инициализацию локализуемых значений схемы из заданной группы заданного менеджера ресурсов.
            </summary>
            <param name="resourceManagerName">Имя менеджера ресурсов.</param>
            <param name="resourceGroupName">Имя группы ресурсов.</param>
        </member>
        <member name="M:Terrasoft.Core.Schema.InitializeLocalizableValues(System.String)">
            <summary>
            Initializes schema localizable values.
            </summary>
            <param name="resourceManagerName">Resource manager name.</param>
        </member>
        <member name="M:Terrasoft.Core.Schema.ReInitializeLocalizableValues(System.String,System.String)">
            <summary>
            Выполняет переинициализацию локализуемых значений схемы из заданной группы заданного менеджера ресурсов.
            </summary>
            <param name="resourceManagerName">Имя менеджера ресурсов.</param>
            <param name="resourceGroupName">Имя группы ресурсов.</param>
        </member>
        <member name="M:Terrasoft.Core.Schema.GetLocalizableValues(System.Collections.Generic.ICollection{Terrasoft.Common.LocalizableValue},System.Boolean)">
            <summary>
            Загружает локализуемые значения схемы в заданную коллекцию.
            </summary>
            <param name="values">Коллекция возвращаемых локализуемых значений схемы.</param>
            <param name="includeInherited">Включать ли в коллекцию возвращаемых локализуемых значений унаследованные 
            свойства (по умолчанию - нет).</param>
        </member>
        <member name="M:Terrasoft.Core.Schema.LoadLocalizableValues">
            <summary>
            Загружает значения для локализуемых элементов схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Schema.InitializeLocalizableValues">
            <summary>
            Выполняет инициализацию локализуемых значений схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Schema.RenameLocalizedProperty(System.String,Terrasoft.Core.IMetaItem)">
            <summary>
            Актуализирует имя заданного локализуемого свойства схемы при переименовании схемы.
            </summary>
            <param name="oldName">Старое имя схемы.</param>
            <param name="childProperty">Локализуемое свойство схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.Schema.InitializePrimaryInfo">
            <summary>
            Осуществляет инициализацию основных свойств схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Schema.GetSchemaReferences">
            <summary>
            Возвращает коллекцию ссылок на сборки, которые необходимы для компиляции схемы.
            </summary>
            <returns>Коллекция ссылок на сборки, которые необходимы для компиляции схемы. </returns>
        </member>
        <member name="M:Terrasoft.Core.Schema.GenerateItemCaption(Terrasoft.Core.DesignModeClassDescriptor,System.Int32)">
            <summary>
            Генерирует последовательный заголовок схемы, используя заданные индекс и описание класса 
            объекта времени разработки.
            </summary>
            <param name="classDescriptor">Описание класса объекта времени разработки.</param>
            <param name="index">Индекс схемы.</param>
            <returns>Локализуемая строка заголовка схемы.</returns>
        </member>
        <member name="M:Terrasoft.Core.Schema.SetUniqueNameAndCaptionForItem(Terrasoft.Core.IDesignItem,Terrasoft.Core.DesignModeClassDescriptor,System.Int32)">
            <summary>
            Для заданного элемента времени разработки устанавливает уникальные имя и заголовок, используя заданные 
            индекс и описание класса объекта времени разработки.
            </summary>
            <param name="item">Элемент времени разработки, которому устанавливаются имя и заголовок.</param>
            <param name="classDescriptor">Описание класса объекта времени разработки</param>
            <param name="index">Индекс элемента.</param>
            <remarks>Перегруженный метод.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Schema.SetUniqueNameAndCaptionForItem(Terrasoft.Core.IDesignItem)">
            <summary>
            Для заданного элемента времени разработки устанавливает уникальные имя и заголовок.
            </summary>
            <param name="item">Элемент времени разработки, которому устанавливаются имя и заголовок.</param>
            <remarks>Перегруженный метод.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Schema.SetUniqueNameAndCaptionForItem``1(``0,Terrasoft.Core.MetaItemCollection{``0})">
            <summary>
            Для элемента времени разработки заданного типа из переданной коллекции устанавливает уникальные имя и 
            заголовок.</summary>
            <typeparam name="TItemType">Тип элемента времени разработки.</typeparam>
            <param name="item">Элемент времени разработки, для которого устанавливаются имя 
            и заголовок.</param>
            <param name="items">Коллекция элементов времени разработки, которой принадлежит <paramref name="item"/>.
            </param>
            <remarks>Перегруженный метод.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Schema.GenerateItemUniqueIndex(System.String)">
            <summary>
            Генерирует уникальный индекс элемента для заданного префикса.
            </summary>
            <param name="prefix">Префикс.</param>
            <returns>Уникальный индекс элемента для префикса <paramref name="prefix"/>.</returns>
            <remarks>Метод не реализован.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Schema.GetMetaItems(System.Collections.Generic.ICollection{Terrasoft.Core.IMetaItem})">
            <summary>
            Заполняет переданную коллекцию всеми метаэлементами текущей схемы.
            </summary>
            <param name="metaItems">Коллекция, которая заполняется метаэлементами текущей схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.Schema.GetIsNamePrefixValid(System.String)">
            <summary>
            Проверяет, совпадает ли префикс имени объекта с префиксом, указанным в системной настройке
            "Префикс названия объекта".
            </summary>
            <param name="name">Имя объекта.</param>
            <returns><c>true</c>, если префикс имени объекта <paramref name="name"/> совпадает с префиксом, указанным 
            в системной настройке "Префикс названия объекта".</returns>
        </member>
        <member name="P:Terrasoft.Core.Schema.ItemsSequentiallyNumbered">
            <summary>
            Признак генерации для схемы последовательного имени.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.SystemUserConnection">
            <summary>
            Системное пользовательское подключение.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.SchemaManager">
            <summary>
            Менеджер схем.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.ManagerItem">
            <summary>
            Представление схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.SchemaManagerItem">
            <summary>
            Представление схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.IsCoreSchema">
            <summary>
            Признак, является ли схема системной.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.ResourceManager">
            <summary>
            Менеджер ресурсов схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.Storage">
            <summary>
            Хранилище ресурсов схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.PackageUId">
            <summary>
            Уникальный идентификатор пакета.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.ReferenceSchemaUIds">
            <summary>
            Коллекция идентификаторов схем, на которые ссылается схема.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.Caption">
            <summary>
            Заголовок схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.Methods">
            <summary>
            Коллекция методов схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.HasMethods">
            <summary>
            Признак наличия у схемы методов.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.Usings">
            <summary>
            Коллекция пространств имен, используемых схемой.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.LocalizableStrings">
            <summary>
            Коллекция локализуемых строк схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.IsInitialized">
            <summary>
            Определяет, является ли схема инициализированной. 
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.Description">
            <summary>
            Описание схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.AppManagerProvider">
            <summary>
            Провайдер менеджера схем уровня приложения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.SchemaManagerProvider">
            <summary>
            Провайдер менеджера схем уровня конфигурации.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.SchemaNamePrefix">
            <summary>
            Префикс названия объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.CreatedInVersion">
            <summary>
            Created in the product version.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Schema.DenyExtending">
            <summary>
            Запретить замещение.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.ISchemaManagerSchema`1">
            <summary>
            Typed intefrace of schema manager schemas.
            </summary>
            <typeparam name="TSchemaManagerSchema">Type which implements
            <see cref="T:Terrasoft.Core.ISchemaManagerSchema`1"/>
            and <see cref="T:Terrasoft.Core.IManagerItemInstance"/>interfaces.</typeparam>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerSchema`1.InitializePrimaryInfo">
            <summary>
            Initializes schema main properties.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerSchema`1.SetDefInheritance">
            <summary>
            Sets the current schema as a parent for all schema elements that do not have parent identifier defined.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerSchema`1.AssignParentSchema(`0)">
            <summary>
            Assigns parent schema to the current schema.
            </summary>
            <param name="parentSchema">Parent schema.</param>
            <returns>
            <c>true</c>, if a parent schema was successfully assigned.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerSchema`1.InitializeLocalizableValues(System.String,System.String)">
            <summary>
            Initializes schema localizable values from the specified resource manager group.
            </summary>
            <param name="resourceManagerName">Resource manager name.</param>
            <param name="resourceGroupName">Resource group name.</param>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerSchema`1.InitializeLocalizableValues(System.String)">
            <summary>
            Initializes schema localizable values.
            </summary>
            <param name="resourceManagerName">Resource manager name.</param>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerSchema`1.GetLocalizableValues(System.Collections.Generic.ICollection{Terrasoft.Common.LocalizableValue},System.Boolean)">
            <summary>
            Loads schema localizable values into specified collection.
            </summary>
            <param name="values">Collection to load localizable values to.</param>
            <param name="includeInherited">Indicates whether to include inherited properties.</param>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerSchema`1.UId">
            <summary>
            Global unique identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerSchema`1.Name">
            <summary>
            Schema name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerSchema`1.IsCoreSchema">
            <summary>
            Attribute which identifies whether it is a system schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerSchema`1.Caption">
            <summary>
            Schema caption.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerSchema`1.Description">
            <summary>
            Schema description.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerSchema`1.ParentSchemaUId">
            <summary>
            Parent schema unique identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerSchema`1.ParentSchema">
            <summary>
            Parent schema instance reference.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerSchema`1.ResourceManager">
            <summary>
            Resource manager instance reference.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerSchema`1.ReferenceSchemaUIds">
            <summary>
            Schemas unique identifiers referenced by the current schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema.#ctor(Terrasoft.Core.ISchemaManager)">
            <summary>
            Creates an instance of BusinessRuleSchema class.
            </summary>
            <param name="schemaManager">SchemaManager item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema.#ctor(Terrasoft.Core.Schema)">
            <summary>
            Creates an instance of BusinessRuleSchema class.
            </summary>
            <param name="source">Schema item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema.Clone">
            <summary>
            Returns copy of BusinessRuleSchema instance.
            </summary>
            <returns>BusinessRuleSchema instance copy.</returns>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema.InitializeCreatedInSchemaUId">
            <summary>
            Sets schema UId for created columns.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema.InitializeModifiedInSchemaUId">
            <summary>
            Sets schema UId for modified columns.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema.AssignParentSchema(Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema)">
            <summary>
            Sets patent schema for current schema.
            </summary>
            <param name="parentSchema">BusinessRuleSchema item.</param>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema.Manager">
            <summary>
            Schema manager.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema.ParentSchemaUId">
            <summary>
            Parent schema UId.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema.ParentSchema">
            <summary>
            Business rule schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema.EntitySchemaUId">
            <summary>
            Entity schema UId.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema.Type">
            <summary>
            Business rule usage type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema.Trigger">
            <summary>
            Business rule condition.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.BusinessRuleSchema.Executable">
            <summary>
            Business rule execution.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.BaseBusinessRuleCondition">
            <summary>
            BaseBusinessRuleCondition class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.BaseBusinessRuleCondition.#ctor">
            <summary>
            Creates an instance of BaseBusinessRuleCondition class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.BaseBusinessRuleCondition.#ctor(Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.BaseBusinessRuleCondition)">
            <summary>
            Creates an instance of BaseBusinessRuleCondition class.
            </summary>
            <param name="source">BaseBusinessRuleCondition item.</param>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.BusinessRuleConditionGroup">
            <summary>
            BusinessRuleConditionGroup class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.BusinessRuleConditionGroup.#ctor(Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.BusinessRuleConditionGroup)">
            <summary>
            Creates an instance of BusinessRuleConditionGroup class.
            </summary>
            <param name="source">BusinessRuleConditionGroup item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.BusinessRuleConditionGroup.#ctor">
            <summary>
            Creates an instance of BusinessRuleConditionGroup class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.BusinessRuleConditionGroup.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Apply meta data value.
            </summary>
            <param name="reader">DataReader item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.BusinessRuleConditionGroup.Clone">
            <summary>
            Returns copy of BusinessRuleConditionGroup instance.
            </summary>
            <returns>BusinessRuleConditionGroup instance copy.</returns>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.BusinessRuleConditionGroup.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Write meta data values.
            </summary>
            <param name="writer">DataWriter item.</param>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.BusinessRuleConditionGroup.LogicalOperation">
            <summary>
            Condition logical operation.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.BusinessRuleConditionGroup.Items">
            <summary>
            Condition items.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.ComparisonBusinessRuleCondition">
            <summary>
            ComparisonBusinessRuleCondition class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.ComparisonBusinessRuleCondition.#ctor(Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.ComparisonBusinessRuleCondition)">
            <summary>
            Creates an instance of ComparisonBusinessRuleCondition class.
            </summary>
            <param name="source">ComparisonBusinessRuleCondition item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.ComparisonBusinessRuleCondition.#ctor">
            <summary>
            Creates an instance of ComparisonBusinessRuleCondition class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.ComparisonBusinessRuleCondition.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Apply meta data value.
            </summary>
            <param name="reader">DataReader item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.ComparisonBusinessRuleCondition.Clone">
            <summary>
            Returns copy of ComparisonBusinessRuleCondition instance.
            </summary>
            <returns>ComparisonBusinessRuleCondition instance copy.</returns>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.ComparisonBusinessRuleCondition.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Write meta data values.
            </summary>
            <param name="writer">DataWriter item.</param>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.ComparisonBusinessRuleCondition.LeftExpression">
            <summary>
            Left expression.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.ComparisonBusinessRuleCondition.ComparisonType">
            <summary>
            Expression comparison type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Conditions.ComparisonBusinessRuleCondition.RightExpression">
            <summary>
            Right expression.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.BaseBusinessRuleExpression">
            <summary>
            BaseBusinessRuleExpression class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.BaseBusinessRuleExpression.#ctor">
            <summary>
            Creates an instance of BaseBusinessRuleExpression class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.BaseBusinessRuleExpression.#ctor(Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.BaseBusinessRuleExpression)">
            <summary>
            Creates an instance of BaseBusinessRuleExpression class.
            </summary>
            <param name="source">BaseBusinessRuleExpression item.</param>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ColumnBusinessRuleExpression">
            <summary>
            ColumnBusinessRuleExpression class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ColumnBusinessRuleExpression.#ctor(Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ColumnBusinessRuleExpression)">
            <summary>
            Creates an instance of ColumnBusinessRuleExpression class.
            </summary>
            <param name="source">ColumnBusinessRuleExpression item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ColumnBusinessRuleExpression.#ctor">
            <summary>
            Creates an instance of ColumnBusinessRuleExpression class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ColumnBusinessRuleExpression.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Apply meta data value.
            </summary>
            <param name="reader">DataReader item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ColumnBusinessRuleExpression.Clone">
            <summary>
            Returns copy of ColumnBusinessRuleExpression instance.
            </summary>
            <returns>ColumnBusinessRuleExpression instance copy.</returns>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ColumnBusinessRuleExpression.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Write meta data values.
            </summary>
            <param name="writer">DataWriter item.</param>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ColumnBusinessRuleExpression.ColumnMetaPath">
            <summary>
            Parent object meta path.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ConstantBusinessRuleExpression">
            <summary>
            ConstantBusinessRuleExpression class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ConstantBusinessRuleExpression.#ctor(Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ConstantBusinessRuleExpression)">
            <summary>
            Creates an instance of ConstantBusinessRuleExpression class.
            </summary>
            <param name="source">ConstantBusinessRuleExpression item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ConstantBusinessRuleExpression.#ctor">
            <summary>
            Creates an instance of ConstantBusinessRuleExpression class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ConstantBusinessRuleExpression.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Apply meta data value.
            </summary>
            <param name="reader">DataReader item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ConstantBusinessRuleExpression.Clone">
            <summary>
            Returns copy of ConstantBusinessRuleExpression instance.
            </summary>
            <returns>ConstantBusinessRuleExpression instance copy.</returns>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ConstantBusinessRuleExpression.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Write meta data values.
            </summary>
            <param name="writer">DataWriter item.</param>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ConstantBusinessRuleExpression.DataValueTypeUId">
            <summary>
            Data value type UId.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ConstantBusinessRuleExpression.DataValueType">
            <summary>
            Data value type UId.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Expressions.ConstantBusinessRuleExpression.Value">
            <summary>
            Constant value.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.BusinessRules.Meta.Concrete.Cases.BusinessRuleCase">
            <summary>
            BusinessRuleCase abstract class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Cases.BusinessRuleCase.#ctor(Terrasoft.Core.BusinessRules.Meta.Concrete.Cases.BusinessRuleCase)">
            <summary>
            Creates an instance of BusinessRuleCase class.
            </summary>
            <param name="source">BusinessRuleCase item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Cases.BusinessRuleCase.#ctor">
            <summary>
            Creates an instance of BusinessRuleCase class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Cases.BusinessRuleCase.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Apply meta data value.
            </summary>
            <param name="reader">DataReader item.</param>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Cases.BusinessRuleCase.Clone">
            <summary>
            Returns copy of DefaultValueBusinessRuleAction instance.
            </summary>
            <returns>DefaultValueBusinessRuleAction instance copy.</returns>
        </member>
        <member name="M:Terrasoft.Core.BusinessRules.Meta.Concrete.Cases.BusinessRuleCase.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Write meta data values.
            </summary>
            <param name="writer">DataWriter item.</param>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Cases.BusinessRuleCase.Condition">
            <summary>
            Business rule case condition.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.BusinessRules.Meta.Concrete.Cases.BusinessRuleCase.Executable">
            <summary>
            Business rule case execute.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Campaign.BaseCampaignActionHandler">
            <summary>
            Base class for handle campaign and campaign's elements actions in configuration.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.BaseCampaignActionHandler.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Campaign.BaseCampaignActionHandler"/> class.
            </summary>
            <param name="userConnection"></param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.BaseCampaignActionHandler.OnBeforeSave(Terrasoft.Core.Campaign.CampaignSchema)">
            <summary>
            Launches methods from Configuration ActionHandler class before saving.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.BaseCampaignActionHandler.OnAfterSave(Terrasoft.Core.Campaign.CampaignSchema)">
            <summary>
            Launches for apply methods from Configuration ActionHandler class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.BaseCampaignActionHandler.OnBeforeDelete(Terrasoft.Core.Campaign.CampaignSchema)">
            <summary>
            Launches methods from Configuration ActionHandler class before delete.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.BaseCampaignActionHandler.OnAfterDelete(Terrasoft.Core.Campaign.CampaignSchema)">
            <summary>
            Launches methods from Configuration ActionHandler class after delete.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.BaseCampaignActionHandler.OnLaunch(System.Guid)">
            <summary>
            Executes methods before campaign start.
            </summary>
            <param name="campaignId">Unique identifier of campaign.</param>
            <returns>Error message if validation fails.</returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.BaseCampaignActionHandler.OnCompleted(System.Guid)">
            <summary>
            Executes methods after campaign complition.
            </summary>
            <param name="campaignId">Unique identifier of campaign.</param>
        </member>
        <member name="P:Terrasoft.Core.Campaign.BaseCampaignActionHandler.UserConnection">
            <summary>
            Gets instance of UserConnection class.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.BaseCampaignActionHandler.Schema">
            <summary>
            Gets instance of CampaignSchema class.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Campaign.CampaignEngine">
            <summary>
            Represents methods to manage campaigns.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Campaign.ICampaignEngine">
            <summary>
            Represents methods to manage campaigns.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.ICampaignEngine.GetInvalidSchemaElementsIdentifiers(Terrasoft.Core.Campaign.CampaignSchema)">
            <summary>
            Returns names of not valid <see cref="T:Terrasoft.Core.Campaign.CampaignSchemaElement"/> from <see cref="T:Terrasoft.Core.Campaign.CampaignSchema"/>.
            </summary>
            <param name="schema">Schema that should be validated.</param>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">FlowElements in CampaignSchema can not be null or empty.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Campaign.ICampaignEngine.Run(Terrasoft.Core.Campaign.CampaignSchema,System.DateTime)">
            <summary>
            Runs the specified campaign to execute its elements and schedules next run.
            </summary>
            <param name="schema">The campaign schema.</param>
            <param name="currentFireTime">The time of scheduling current run process.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.ICampaignEngine.SheduleJob(Terrasoft.Core.Campaign.CampaignSchema,System.String,System.Nullable{System.DateTime})">
            <summary>
            Schedule next job for the specified campaign.
            </summary>
            <param name="schema">The <see cref="T:Terrasoft.Core.Campaign.CampaignSchema"/> object for wich Job plans.</param>
            <param name="runProcessName">The name of runner.</param>
            <param name="previousFireTime">Last fire time</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.ICampaignEngine.RemoveJob(System.Guid)">
            <summary>
            Remove scheduled job for the specified campaign.
            </summary>
            <param name="campaignId">The <see cref="T:Terrasoft.Core.Campaign.CampaignSchema"/> UId which job should be deleted.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignEngine.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Campaign.CampaignEngine"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignEngine.GetInvalidSchemaElementsIdentifiers(Terrasoft.Core.Campaign.CampaignSchema)">
            <summary>
            Returns names of not valid <see cref="T:Terrasoft.Core.Campaign.CampaignSchemaElement"/> from <see cref="T:Terrasoft.Core.Campaign.CampaignSchema"/>.
            </summary>
            <param name="schema">Schema that should be validated.</param>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">FlowElements in CampaignSchema can not be null or empty.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignEngine.Run(Terrasoft.Core.Campaign.CampaignSchema,System.DateTime)">
            <summary>
            Runs the specified campaign to execute its elements and schedules next run.
            </summary>
            <param name="schema">The campaign schema.</param>
            <param name="currentFireTime">The time of scheduling current run process.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignEngine.SheduleJob(Terrasoft.Core.Campaign.CampaignSchema,System.String,System.Nullable{System.DateTime})">
            <summary>
            Schedule next job for the specified campaign.
            </summary>
            <param name="schema">The <see cref="T:Terrasoft.Core.Campaign.CampaignSchema"/> object for wich Job plans.</param>
            <param name="runProcessName">The name of runner.</param>
            <param name="previousFireTime">Last fire time</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignEngine.RemoveJob(System.Guid)">
            <summary>
            Remove scheduled job for the specified campaign.
            </summary>
            <param name="campaignId">The <see cref="T:Terrasoft.Core.Campaign.CampaignSchema"/> UId which job should be deleted.</param>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignEngine.AppScheduler">
            <summary>
            Gets or sets the process service provider.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignEngine.StateService">
            <summary>
            Gets or sets the state service.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignEngine.CampaignScheduleProvider">
            <summary>
            Gets the instance of CampaignScheduleProvider
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignEngine.FlowEngine">
            <summary>
            Gets or sets flow engine using to run campaign process.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Attributes.UtcConversionAttribute">
            <summary>
            Attribute that indicates that the DateTime property should be converted to Utc before saving
            and converted to local time after reading from database.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Campaign.ICampaignExecutionLogger">
            <summary>
            The interface for campaign execution logger.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.ICampaignExecutionLogger.LogAction(Terrasoft.Core.Campaign.CampaignLogInfo)">
            <summary>
            Common log action method.
            </summary>
            <param name="info">Instance of <see cref="T:Terrasoft.Core.Campaign.CampaignLogInfo"/>.</param>
        </member>
        <member name="T:Terrasoft.Core.Campaign.CampaignScheduleProvider">
            <summary>
            Represents methods to manage campaign scheduling.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignScheduleProvider.RoundedToDefault(System.Int32,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns DateTime rounded to default campaign fire time.
            </summary>
            <param name="defaultCampaignFireTime">Default fire time for the campaign.</param>
            <param name="benchmarkUtcDateTime">DateTime which needed rounding.</param>
            <param name="isCurrentFireTime">Shows round direction.</param>
            <param name="isFirstStart"></param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignScheduleProvider.GetElementConditionFireTime(Terrasoft.Core.Campaign.CampaignSchemaElement)">
            <summary>
            Returns null when time condition empty or <see cref="T:System.TimeSpan"/> fire time.
            </summary>
            <param name="campaignSchemaElement">Instance of <see cref="T:Terrasoft.Core.Campaign.CampaignSchemaElement"/> 
            with possible time condition.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignScheduleProvider.GetNextJobUtcFireTime(Terrasoft.Core.Campaign.CampaignSchema,System.Nullable{System.DateTime})">
            <summary>
            Returns next fire DateTime for the scheduled campaign job.
            </summary>
            <param name="schema">Instance of <see cref="T:Terrasoft.Core.Campaign.CampaignSchema"/>.</param>
            <param name="previousFireTime">Previous fire time. Can be null when first run.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignScheduleProvider.GetElementFireTime(Terrasoft.Core.Campaign.CampaignSchemaElement,System.Int32,System.DateTime,System.Boolean)">
            <summary>
            Returns next fire DateTime for the <see cref="T:Terrasoft.Core.Campaign.CampaignSchemaElement"/>.
            </summary>
            <param name="campaignSchemaElement">Instance of <see cref="T:Terrasoft.Core.Campaign.CampaignSchemaElement"/>.</param>
            <param name="defaultCampaignFireTime">Default fire time for the campaign.</param>
            <param name="benchmarkUtcDateTime">Previous fire time.</param>
            <param name="isCurrentFireTime">Shows round direction.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1">
            <summary>
            Base class for the flow schema generator.
            </summary>
            <typeparam name="T">The type of the schema.</typeparam>
            <seealso cref="T:Terrasoft.Core.Process.IFlowSchemaGenerator"/>
        </member>
        <member name="T:Terrasoft.Core.Process.IFlowSchemaGenerator">
            <summary>
            Provides methods of the flow schema generator.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaGenerator.Generate">
            <summary>
            Generates the process flow schema.
            </summary>
            <returns>Process flow schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaGenerator.GetParametrizedProcessSchemaElement(System.Guid)">
            <summary>
            Gets the parametrized process schema element by the its identifier.
            </summary>
            <param name="schemaElementUId">The element's identifier.</param>
            <returns>"The process schema element implemented interface
            <see cref="T:Terrasoft.Core.Process.IParametrizedProcessSchemaElement"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaGenerator.GetParametrizedSchemaElements">
            <summary>
            Returns the process schema elements that implement <see cref="T:Terrasoft.Core.Process.IParametrizedProcessSchemaElement"/>.
            </summary>
            <returns>The list of the elements.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaGenerator.FindProcessSchemaParameter(Terrasoft.Core.Process.ProcessParameterMapInfo)">
            <summary>
            Finds the process schema parameter by its map info.
            </summary>
            <param name="parameterMapInfo">The process schema parameter path.</param>
            <returns>The found process schema parameter or <c>null</c> if its not found.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaGenerator.GetProcessSchemaParameter(System.String)">
            <summary>
            Gets the process schema parameter by its path.
            </summary>
            <param name="parameterMapPath">The process schema parameter path.</param>
            <returns>The found process schema parameter.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaGenerator.GetProcessSchemaParameter(Terrasoft.Core.Process.ProcessParameterMapInfo)">
            <summary>
            Gets the process schema parameter by its map info.
            </summary>
            <param name="parameterMapInfo">The process schema parameter map info.</param>
            <returns>The found process schema parameter.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaGenerator.TryGetProcessItemName(System.String,System.String@)">
            <summary>
            Attempts to get process schema parameter name or process element parameter name.
            </summary>
            <param name="parameterMapPath">Represents parameter mapping path.</param>
            <param name="itemName">Represents a string consisting of comma-separated parameter names.</param>
            <returns><c>true</c> if the parameter exists, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaGenerator.TryGenerate(Terrasoft.Core.Process.FlowSchemaGeneratorResult@)">
            <summary>
            Generates a new flow schema. A return value indicates whether the generation succeeded or failed.
            </summary>
            <param name="generatorResult">Represents data of the flow schema generation results.</param>
            <returns><c>true</c> if flow schema is generated, otherwise - <c>false</c>.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.IFlowSchemaGenerator.ExpressionConvertors">
            <summary>
            Gets the read only list of conversion methods.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1.Log">
            <summary>
            The log.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1.BaseExpressionConvertors">
            <summary>
            The list of the conversion methods.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1"/> class with the specified schema.
            </summary>
            <param name="schema">Schema of the process.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1.GetParameterMapPath(System.String,System.String)">
            <summary>
            Returns the mapping path of the parameter.
            </summary>
            <returns>String that represents the mapping path of the parameter.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1.Generate">
            <summary>
            Generates the process flow schema.
            </summary>
            <returns>Process flow schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1.GetParametrizedProcessSchemaElement(System.Guid)">
            <summary>
            Gets the parametrized process schema element by the its identifier.
            </summary>
            <param name="schemaElementUId">The element's identifier.</param>
            <returns>
            "The process schema element implemented interface
            <see cref="T:Terrasoft.Core.Process.IParametrizedProcessSchemaElement"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1.GetParametrizedSchemaElements">
            <summary>
            Returns the process schema elements that implement <see cref="T:Terrasoft.Core.Process.IParametrizedProcessSchemaElement"/>.
            </summary>
            <returns>
            The list of the elements.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1.TryGetProcessItemName(System.String,System.String@)">
            <summary>
            Attempts to get process schema parameter name or process element parameter name.
            </summary>
            <param name="parameterMapPath">Represents parameter mapping path.</param>
            <param name="itemName">Represents a string consisting of comma-separated parameter names.</param>
            <returns>
            <c>true</c> if the parameter exists, otherwise - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1.FindProcessSchemaParameter(Terrasoft.Core.Process.ProcessParameterMapInfo)">
            <summary>
            Finds the process schema parameter by its map info.
            </summary>
            <param name="parameterMapInfo">The process schema parameter path.</param>
            <returns>
            The found process schema parameter or <c>null</c> if its not found.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1.GetProcessSchemaParameter(Terrasoft.Core.Process.ProcessParameterMapInfo)">
            <summary>
            Gets the process parameter by its map info.
            </summary>
            <param name="parameterMapInfo">The process parameter map info.</param>
            <returns>
            The found process parameter.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1.GetProcessSchemaParameter(System.String)">
            <summary>
            Gets the process parameter by its path.
            </summary>
            <param name="parameterMapPath">The process parameter path.</param>
            <returns>
            The found process parameter.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1.TryGenerate(Terrasoft.Core.Process.FlowSchemaGeneratorResult@)">
            <summary>
            Generates a new flow schema. A return value indicates whether the generation succeeded or failed.
            </summary>
            <param name="generatorResult">Represents data of the flow schema generation results.</param>
            <returns><c>true</c> if flow schema is generated, otherwise - <c>false</c>.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>
            The schema.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1.ExpressionConvertors">
            <summary>
            Gets the read only list of conversion methods.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignFlowSchemaGenerator.#ctor(Terrasoft.Core.Campaign.CampaignSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Campaign.CampaignFlowSchemaGenerator"/> class with
            the specified campaign schema.
            </summary>
            <param name="campaignSchema">Current campaign schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignFlowSchemaGenerator.Generate(System.DateTime)">
            <summary>
            Generates the process flow schema.
            </summary>
            <param name="planeTime">Current job fire time.</param>>
            <returns>Process flow schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignFlowSchemaGenerator.Generate">
            <summary>
            Generates the process flow schema.
            </summary>
            <returns>Process flow schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseInterpretationValidator`1.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Инициализирует пользовательские настройки.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseInterpretationValidator`1.Validate(`0,System.Collections.Generic.List{Terrasoft.Core.Process.IProcessSchemaValidationRule},System.Boolean)">
            <summary>
            Validates that the process schema is correct and interpretable. Fills the
            <see cref="P:Terrasoft.Core.Process.ProcessValidationResult.Results"/> collection with the validation info about the process items.
            </summary>
            <param name="processSchema">The process schema.</param>
            <param name="validationRules">The validation functions chain.</param>
            <param name="checkAllRules">Indicates that all validation rules should be checked. If <c>false</c>, stops
            on the first rule that found incorrect or non-interpretable process schema item.
            </param>
            <returns><c>true</c>, if all rules were passed, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseInterpretationValidator`1.Validate(`0,System.Boolean)">
            <summary>
            Валидирует схему процесса на предмет возможности интерпретации и заполняет коллекцию ValidatorInfo 
            сообщениями об элементах, которые требуют компиляции, - если таковые были найдены.
            </summary>
            <param name="processSchema">Схема бизнес процесса.</param>
            <param name="checkAllRules">Признак, указывающий на необходимость проверить все правила валидации. Если
            равен <c>false</c> - прекращает валидацию на первом правиле, которое обнаружило неинтерпретируемый элемент.
            </param>
            <returns><c>true</c> - если все правила валидации успешно пройдены и </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseInterpretationValidator`1.Validate(`0)">
            <summary>
            Validates the specified process schema.
            </summary>
            <param name="processSchema">The process schema.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignInterpretationValidator.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Campaign.CampaignInterpretationValidator"/> class.
            </summary>
            <param name="userConnection">Instance of the <see cref="T:Terrasoft.Core.Campaign.CampaignInterpretationValidator"/>.</param>
        </member>
        <member name="T:Terrasoft.Core.Campaign.CampaignProcessElementFactory">
            <summary>
            Implements interface <see cref="T:Terrasoft.Core.Process.IProcessElementFactory"/> for process based on dcm schema.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.BaseProcessElementFactory"/>
        </member>
        <member name="T:Terrasoft.Core.Process.BaseProcessElementFactory">
            <summary>
            Base type for <see cref="T:Terrasoft.Core.Process.IProcessElementFactory"/> implementations.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.IProcessElementFactory"/>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessElementFactory">
            <summary>
            Creates instance of ProcessFlowElement using its metadata information defined in schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessElementFactory.CreateProcessElement(Terrasoft.Core.Process.BaseProcessSchemaElement)">
            <summary>
            Creates the process element depending on its meta data.
            </summary>
            <param name="schemaElement">The schema element meta data.</param>
            <returns>The process element instance.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessElementFactory.CreateProcessElement(Terrasoft.Core.Process.BaseProcessSchemaElement)">
            <summary>
            Creates the process element depending on its meta data.
            </summary>
            <param name="schemaElement">The schema element meta data.</param>
            <returns>
            The process element instance.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignProcessElementFactory.#ctor(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Campaign.CampaignProcessElementFactory"/> class.
            </summary>
            <param name="process">Instance of <see cref="T:Terrasoft.Core.Process.ProcessComponentSet"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignProcessElementFactory.CreateProcessElement(Terrasoft.Core.Process.BaseProcessSchemaElement)">
            <summary>
            Creates the process element dependent on metadata.
            </summary>
            <param name="schemaElement">The schema element meta data.</param>
            <returns>
            The process element instance.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.Campaign.CampaignProcessFlowElement">
            <summary>
            Base class for executable campaign elements.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessFlowElement">
            <summary>
            Represents a process element.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.ProcessFlowElement.UIdPropertyName">
            <summary>
            The meta data index for the "UId" property.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.ProcessFlowElement.NamePropertyName">
            <summary>
            The meta data index for the "Name" property.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.ProcessFlowElement.StatusPropertyName">
            <summary>
            The meta data index for the "Status" property.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.#ctor(Terrasoft.Core.Process.ProcessFlowElementStrategy)">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> class.
            </summary>
            <param name="processFlowElementStrategy">The process element strategy.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> class.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.OnExecuted(Terrasoft.Core.Process.ProcessActivityAfterEventArgs)">
            <summary>
            This method is called after the current process element is executed.
            </summary>
            <param name="e">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessActivityAfterEventArgs"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.ReadPropertiesData(Terrasoft.Common.DataReader,System.Action{Terrasoft.Common.DataReader})">
            <summary>
            Reads state of the current process element.
            </summary>
            <param name="reader">Instance that provides sequential reading of data.</param>		
            <param name="action">Action that performs while reading.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.CompleteApplyingPropertiesDataValues">
            <summary>
            Method does nothing.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.InternalExecute(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Method does nothing.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.ApplyPropertiesDataValues(Terrasoft.Common.DataReader)">
            <summary>
            Applies state of the current process element.
            </summary>
            <param name="reader">Instance that provides sequential reading of data.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.WritePropertyValues(Terrasoft.Common.DataWriter)">
            <summary>
            Method does nothing.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.SetDurationQueryParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Sets value of the duration query parameter.
            </summary>
            <param name="parameters">Query parameters.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.RegisterInDB(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessStatus)">
            <summary>
            Performs registration of the process data in DB.
            <param name="userConnection">The user connection.</param>
            <param name="status">The process status.</param>
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.RegisterInDB(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessStatus,System.String)">
            <summary>
            Performs registration of the process data in DB.
            <param name="userConnection">The user connection.</param>
            <param name="status">The process status.</param>
            <param name="error">The description of the error.</param>
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.UpdateStatusInLog(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessStatus)">
            <summary>
            Updates status of the process element in DB.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="newStatus">Status of the process.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.UpdateStatusInLog(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessStatus,System.String)">
            <summary>
            Updates status of the process element in DB.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="newStatus">Status of the process.</param>
            <param name="error">Description of the error.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.UpdateOwnerStatus(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.Process,Terrasoft.Core.Process.ProcessStatus,System.String)">
            <summary>
            Updates status of the owner process.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="owner">Owner process.</param>
            <param name="status">Status of the process.</param>
            <param name="description">Description of the error.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.WriteErrorToProcessLog(Terrasoft.Core.UserConnection,System.String)">
            <summary>
            Changes the state of the element and its owner process to error. Writes the error message to process log.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.ActualizeOwnerState(System.Boolean)">
            <summary>
            Actualizes state of the owner process.
            </summary>
            <param name="isCloned">Flag that indicates whether the process elemenet is cloned.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.SetPrivateFieldValue(System.String,System.Object,System.Object)">
            <summary>
            Sets the value of private field of a process instance. 
            </summary>
            <param name="fieldName">Field name that is declared in the "source" argument.</param>
            <param name="source">Instance of the <see cref="T:Terrasoft.Core.Process.Process"/> type.</param>
            <param name="value">The new field value.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.Assign(Terrasoft.Core.Process.ProcessFlowElement)">
            <summary>
            Assigns the property values of the current process element to the properties of the specified element.
            </summary>
            <param name="processElement">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.ReadPropertiesData">
            <summary>
            Method does nothing.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.ReadPropertiesData(Terrasoft.Common.DataReader)">
            <summary>
            Reads state of the current process element.
            </summary>
            <param name="reader">Instance that provides sequential reading of data.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.WritePropertiesData">
            <summary>
            Method does nothing.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.WritePropertiesData(Terrasoft.Common.DataWriter,System.Boolean)">
            <summary>
            Writes state of the current process element.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
            <param name="shouldWriteElements">Indicates whether to write other process elements.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.CloneShallow">
            <summary>
            Creates a shallow copy of the current process element.
            </summary>
            <returns>Instance that is a copy of the current process element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.WritePropertiesData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes state of the current process element.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.Execute(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Executes current flow element.
            </summary>
            <param name="context">The execution context.</param>
            <returns><c>true</c>, if element was successfully executed and conditions for moving to the next step were
            satisfied. Otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElement.TryGetPerformer(System.Guid@)">
            <summary>
            Attempts to get performer user.
            </summary>
            <param name="performerUId">Unique identifier of the performer user.</param>
            <returns><c>true</c> if current performer is defined; otherwise<c>false</c>.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.IsRegisteredElementInLog">
            <summary>
            Gets or sets value that indicates whether the process element needs to be logged.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.UId">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>
            The unique identifier.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.Caption">
            <summary>
            Gets or sets the caption.
            </summary>
            <value>
            The caption.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.Type">
            <summary>
            Gets or sets the name of the current member type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.SerializeToDB">
            <summary>
            Gets or sets value that determines whether it is required to serialize the current element in DB.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.IsLogging">
            <summary>
            Gets or sets value determines whether it is required to log the current element in DB.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.Owner">
            <summary>
            Gets or sets the owner of the current element.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.IsProcess">
            <summary>
            Gets value that determines whether the element is a process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.SchemaElementUId">
            <summary>
            Gets or sets unique identifier of the schema element.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.Status">
            <summary>
            Gets or sets the execution state.
            </summary>
            <value>
            The execution state.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.IsExecuted">
            <summary>
            Gets or sets value that determines whether the current element has been executed.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.ExecutionResult">
            <summary>
            Gets or sets execution result.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.LoopCounter">
            <summary>
            Gets or sets number of process element repetitions.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.SchemaUId">
            <summary>
            Gets or sets unique identifier of schema element.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.CreatedInSchemaUId">
            <summary>
            Gets or sets unique identifier of the owner process schema where the current element has been created.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.PreviousFlowElements">
            <summary>
            Gets or sets a set of previous elements of the process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.ExecutedEventHandler">
            <summary>
            Gets or sets event handler. It is triggered when current process element has been executed.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElement.StartDate">
            <summary>
            Gets or sets date and time of the day when the current process element has been started.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Process.ProcessFlowElement.TryActualizeOwnerState">
            <summary>
            Occurs when the element is needed to actualize state of the owner process.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Process.ProcessFlowElement.Executed">
            <summary>
            Occurs when the Execute method is called in the process element.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignProcessFlowElement.InternalExecute(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Protected method that contains all the execution logic.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignProcessFlowElement.SafeExecute(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Executes current flow element.
            </summary>
            <param name="context">The execution context.</param>
            <returns><c>true</c>, if element was successfully executed and conditions for moving to the next step were
            satisfied. Otherwise - <c>false</c>.</returns>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignProcessFlowElement.UserConnection">
            <summary>
            User connection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignProcessFlowElement.CampaignId">
            <summary>
            Unique identifier of the associated campaign.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignProcessFlowElement.CampaignItemId">
            <summary>
            Unique identifier of the element of campaign.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignProcessFlowElement.Action">
            <summary>
            The message about element execution.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignProcessFlowElement.ScheduledDate">
            <summary>
            The utc time when campaign should be started.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Campaign.CampaignSchema">
            <summary>
            Represents class for the Campaign diagram.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.BaseProcessSchema">
            <summary>
            Represents base class for the process diagram.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessUserTaskSchema.InitializeCreatedInSchemaUId">
            <summary>
            The method is not used.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessUserTaskSchema.InitializeModifiedInSchemaUId">
            <summary>
            The method is not used.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessParametersMetaInfo">
            <summary>
            Represents meta info of the process parameters.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParametersMetaInfo.ForceGetParameters">
            <summary>
            Forcibly obtains process parameters.
            </summary>
            <returns>
            Collection of process parameters.
            </returns>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchema.SerializeToDBPropertyName">
            <summary>
            The meta data index for the "SerializeToDB" property.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchema.MaxLoopCountPropertyName">
            <summary>
            The meta data index for the "MaxLoopCount" property.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchema.IsLoggingPropertyName">
            <summary>
            The meta data index for the "IsLogging" property.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchema.SerializeToMemoryPropertyName">
            <summary>
            The meta data index for the "SerializeToMemory" property.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchema.IsActiveVersionName">
            <summary>
            The meta data index for the "IsActiveVersion" property.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchema.IsDeliveredName">
            <summary>
            The meta data index for the "IsDelivered" property.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchema.VersionName">
            <summary>
            The meta data index for the "Version" property.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchema.IsActiveVersionPropertyName">
            <summary>
            The constant value that indicates the "IsActiveVersion" property name.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchema.IsDeliveredPropertyName">
            <summary>
            The constant value that indicates the "IsDelivered" property name.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchema.VersionPropertyName">
            <summary>
            The constant value that indicates the "Version" property name.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.#ctor(Terrasoft.Core.ISchemaManager)">
            <summary>
            Creates a new instance with specified schema manager.
            </summary>
            <param name="schemaManager">Instance that implements the <see cref="T:Terrasoft.Core.ISchemaManager"/> interface.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.#ctor(Terrasoft.Core.Process.BaseProcessSchema)">
            <summary>
            Creates a new instance that is a copy of another instance.
            </summary>
            <param name="source">Instance that inherites the <see cref="T:Terrasoft.Core.Process.BaseProcessSchema"/> type.</param>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchema._isMaxLoopCountInitialized">
            <summary>
            Gets or sets maximum number of process item repetitions.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchema._isLogging">
            <summary>
            Gets or sets flag that indicates whether the process needs to be logged.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchema._serializeToMemory">
            <summary>
            Gets or sets flag that indicates whether the process needs to be serialized to memory.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Applies meta data values.
            </summary>
            <param name="reader">Instance of the <see cref="T:Terrasoft.Common.DataReader"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.CompleteApplyingMetaDataValues">
            <summary>
            Loads resurces and synhronizes elements parametrs. Called at the end of meta data initialization.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.LoadResources">
            <summary>
            Loads schema resources.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.CheckSchemaHasInvalidElements">
            <summary>
            Checks whether the current schema has invalid elements.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.GetIsEnabled">
            <summary>
            Returns the enabled state.
            </summary>
            <returns><c>true</c> if current schema is enabled; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.GetStartSignalsMetaInfo">
            <summary>
            Gets the collection of meta information items for each start signal.
            </summary>
            <returns>The collection of meta information items for each start signal.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.GetInvalidElementNames(System.String)">
            <summary>
            Returns list of invalid process elements.
            </summary>
            <param name="ownerProcessSchemaName">Sub-process owner schema name.</param>
            <returns>List of invalid process elements.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.GenerateFlowSchema(Terrasoft.Core.Process.IProcessComponentSetStateService)">
            <summary>
            Generates the flow schema.
            </summary>
            <param name="stateService">The state service.</param>
            <returns>Generated flow schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.GetFlowEngineStateService">
            <summary>
            Returns the flow engine state service.
            </summary>
            <returns>Flow engine state service.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.Verify">
            <summary>
            Verifies the current schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.GetHasInvalidElements">
            <summary>
            Returns flag that indicates invalid elements.
            </summary>
            <returns>Flag that indicates invalid elements.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.SynchronizeParameters">
            <summary>
            Synchronizes elements parameters.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes meta data values.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchema.ForceGetParameters">
            <summary>
            Forcibly obtains process parameters.
            </summary>
            <returns>
            Collection of process parameters.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchema.CaptionParameterUId">
            <summary>
            Unique identifier of the caption parameter.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchema.DependencyFactory">
            <summary>
            Gets the dependency factory.
            </summary>
            <value>
            The dependency factory.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchema.BaseElements">
            <summary>
            Gets the base elements.
            </summary>
            <value>
            The base elements.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchema.IsInterpretable">
            <summary>
            Gets or sets flag that indicates whether the process can be interpreted.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchema.Manager">
            <summary>
            Gets instance that implements the <see cref="T:Terrasoft.Core.IManager"/> interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchema.SerializeToDB">
            <summary>
            Gets or sets flag that indicates whether the process needs to be serialized to DB.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchema.ParentSchemaUId">
            <summary>
            Gets or sets UId of the parent schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchema.IsValid">
            <summary>
            Flag determines whether the current schema is valid.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchema.IsActiveVersion">
            <summary>
            Gets the value indicating whether this schema is active.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchema.IsDelivered">
            <summary>
            Gets the value indicating whether this schema is delivered.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchema.Version">
            <summary>
            Gets or sets the version number of the current schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.IFlowElementsContainer.FlowElements">
            <summary>
            Gets flow elements of the current schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.IFlowElementsContainer.IsExpanded">
            <summary>
            Gets or sets sign that container is expanded.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.IFlowElementsContainer.Name">
            <summary>
            Name of the schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.IFlowElementsContainer.UId">
            <summary>
            Unique identifier of the schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.#ctor(Terrasoft.Core.ISchemaManager)">
            <summary>
            Creates a new instance with specified schema manager.
            </summary>
            <param name="schemaManager">Instance that implements the <see cref="T:Terrasoft.Core.ISchemaManager"/> interface.</param>
        </member>
        <member name="F:Terrasoft.Core.Campaign.CampaignSchema._flowElements">
            <summary>
            Gets flow elements of the current schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.InitializeProperties">
            <summary>
            Initializes properties.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.GetStartSignalsMetaInfo">
            <summary>
            Gets the collection of meta information items for each start signal.
            </summary>
            <returns>
            The collection of meta information items for each start signal.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.GetInvalidElementNames(System.String)">
            <summary>
            Gets the collection of meta information items for each start signal.
            </summary>
            <returns>
            The collection of meta information items for each start signal.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.GetIsEnabled">
            <summary>
            Returns the enabled state.
            </summary>
            <returns><c>true</c> if current schema is enabled; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.GetBaseElements">
            <summary>
            Gets collection of <see cref="T:Terrasoft.Core.Process.BaseProcessSchemaElement"/>.
            </summary>
            <returns>Collection of base elements.</returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes meta data values.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.SynchronizeParameters">
            <summary>
            Synchronizes elements parameters.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.InitializeLocalizableValues(System.String,System.String)">
            <summary>
            Performs initialization of localizable values from specified group <paramref name="resourceGroupName"/> in
            <paramref name="resourceManagerName"/> resource manager.
            </summary>
            <param name="resourceManagerName">Resource manager name.</param>
            <param name="resourceGroupName">Resource group name.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.InitializeLocalizableValues(System.String)">
            <summary>
            Performs initialization of localizable values in <paramref name="resourceManagerName"/> resource manager.
            </summary>
            <param name="resourceManagerName">Resource manager name.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.GetLocalizableValues(System.Collections.Generic.ICollection{Terrasoft.Common.LocalizableValue},System.Boolean)">
            <summary>
            Returns localizable values list.
            </summary>
            <param name="values">Localizable values list.</param>
            <param name="includeInherited">Flag that indicates include inherited resources or not.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.LoadLocalizableValues">
            <summary>
            Loads values for localizable schema elements.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.GetMetaItems(System.Collections.Generic.ICollection{Terrasoft.Core.IMetaItem})">
            <summary>
            Fills collection with items of the meta data.
            </summary>
            <param name="metaItems">Collection of the meta items.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.GetBaseElementByUId(System.Guid)">
            <summary>
            Gets schema element by UId.
            </summary>
            <param name="uid">UId of schema element.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchema.AssignParentSchema(Terrasoft.Core.Campaign.CampaignSchema)">
            <summary>
            Assigns the given schema as a parent for the current one.
            </summary>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchema.BaseElements">
            <summary>
            Gets the base elements.
            </summary>
            <value>
            The base elements.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchema.DependencyFactory">
            <summary>
            Gets the dependency factory.
            </summary>
            <value>
            The dependency factory.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchema.TerminateEventSchema">
            <summary>
            Gets the terminate event schema.
            </summary>
            <value>
            The terminate event schema.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchema.StartEventSchema">
            <summary>
            Gets the start signal event schema.
            </summary>
            <value>
            The start signal event schema.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchema.IsInterpretable">
            <summary>
            Gets whether the process is interpretable.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchema.CampaignConfiguration">
            <summary>
            Gets or sets the dictionary for the storing personalized configuration for the campaign.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchema.ParentSchema">
            <summary>
            Gets the parent schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchema.IsExpanded">
            <summary>
            Gets or sets sign that container is expanded.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchema.EntitySchemaUId">
            <summary>
            Unique identifier of the schema associated with the current schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchema.EntityId">
            <summary>
            Unique identifier of the schema instance associated with the current schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchema.DefaultCampaignFirePeriod">
            <summary>
            Default fire period in minutes for whole campaign.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchema.DefaultCampaignFirePeriodId">
            <summary>
            Default fire period record idetifier.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Campaign.CampaignSchemaBaseElements">
            <summary>
            The class for the base elements of the <see cref="T:Terrasoft.Core.Campaign.CampaignSchema"/>.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.BaseProcessSchemaElements`1">
            <summary>
            Class for base elements of the process schema.
            </summary>
            <typeparam name="T">The type of the process schema.</typeparam>
            <seealso cref="T:Terrasoft.Core.Process.IBaseProcessSchemaElements"/>
        </member>
        <member name="T:Terrasoft.Core.Process.IBaseProcessSchemaElements">
            <summary>
            The interface for the process schema base elements.
            </summary>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
        </member>
        <member name="M:Terrasoft.Core.Process.IBaseProcessSchemaElements.FindByUId(System.Guid)">
            <summary>
            Finds the element by identifier.
            </summary>
            <param name="uid">The identifier of the element.</param>
            <returns>Found element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IBaseProcessSchemaElements.GetByUId(System.Guid)">
            <summary>
            Gets the element by identifier.
            </summary>
            <param name="uid">The identifier of the element.</param>
            <returns>Found element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IBaseProcessSchemaElements.FindByName(System.String)">
            <summary>
            Finds the element by name.
            </summary>
            <param name="name">The name of the element.</param>
            <returns>Found element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IBaseProcessSchemaElements.GetByName(System.String)">
            <summary>
            Gets the element by name.
            </summary>
            <param name="name">The name of the element.</param>
            <returns>Found element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElements`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.BaseProcessSchemaElements`1"/> class.
            </summary>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElements`1.Find(System.Func{Terrasoft.Core.Process.BaseProcessSchemaElement,System.Boolean})">
            <summary>
            Finds element if condition returns true.
            </summary>
            <param name="condition">Condition function.</param>
            <returns>Process element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElements`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElements`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the
            collection.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElements`1.FindByUId(System.Guid)">
            <summary>
            Finds the element by identifier.
            </summary>
            <param name="uid">The identifier of the element.</param>
            <returns>Found element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElements`1.GetByUId(System.Guid)">
            <summary>
            Gets the element by identifier.
            </summary>
            <param name="uid">The identifier of the element.</param>
            <returns>Found element.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Element was not found.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElements`1.FindByName(System.String)">
            <summary>
            Finds the element by name.
            </summary>
            <param name="name">The name of the element.</param>
            <returns>Found element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElements`1.GetByName(System.String)">
            <summary>
            Gets the element by name.
            </summary>
            <param name="name">The name of the element.</param>
            <returns>Found element.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Element was not found.</exception>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchemaElements`1.Schema">
            <summary>
            Gets the schema.
            </summary>
            <value>
            The schema.
            </value>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaBaseElements.#ctor(Terrasoft.Core.Campaign.CampaignSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaBaseElements"/> class.
            </summary>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaBaseElements.FindByUId(System.Guid)">
            <summary>
            Finds the element by identifier.
            </summary>
            <param name="uid">The uid of the element.</param>
            <returns>Found element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaBaseElements.FindByName(System.String)">
            <summary>
            Finds the element by name.
            </summary>
            <param name="name">The name of the element.</param>
            <returns>Found element.</returns>
        </member>
        <member name="T:Terrasoft.Core.Campaign.CampaignSchemaDependencyFactory">
            <summary>
            The class for the <see cref="T:Terrasoft.Core.Campaign.CampaignSchema"/> dependency factory.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.BaseProcessSchemaDependencyFactory`1"/>
        </member>
        <member name="T:Terrasoft.Core.Process.BaseProcessSchemaDependencyFactory`1">
            <summary>
            Base class for process schema dependency factories.
            </summary>
            <typeparam name="T">The type of schema.</typeparam>
            <seealso cref="T:Terrasoft.Core.Process.IProcessSchemaDependencyFactory"/>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessSchemaDependencyFactory">
            <summary>
            Provides properties for a process schema dependency factory.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessSchemaDependencyFactory.CreateProcessElementFactory(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Creates the process element factory.
            </summary>
            <param name="process">The process instance.</param>
            <returns>The process element factory.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessSchemaDependencyFactory.FlowSchemaGenerator">
            <summary>
            Gets the flow schema generator.
            </summary>
            <value>
            The flow schema generator.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessSchemaDependencyFactory.ElementsEnumerator">
            <summary>
            Gets the elements enumerator.
            </summary>
            <value>
            The elements enumerator.
            </value>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaDependencyFactory`1.CreateProcessElementFactory(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Creates the process element factory.
            </summary>
            <param name="process">The process instance.</param>
            <returns>
            The process element factory.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchemaDependencyFactory`1.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>
            The schema.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchemaDependencyFactory`1.FlowSchemaGenerator">
            <summary>
            Gets the flow schema generator.
            </summary>
            <value>
            The flow schema generator.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchemaDependencyFactory`1.ElementsEnumerator">
            <summary>
            Gets the elements enumerator.
            </summary>
            <value>
            The elements enumerator.
            </value>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaDependencyFactory.#ctor(Terrasoft.Core.Campaign.CampaignSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Campaign.CampaignSchemaDependencyFactory"/> class.
            </summary>
            <param name="schema">The campaign schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaDependencyFactory.CreateProcessElementFactory(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Creates the process element factory.
            </summary>
            <param name="process">The process instance.</param>
            <returns>
            The process element factory.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchemaDependencyFactory.ElementsEnumerator">
            <summary>
            Gets the elements enumerator.
            </summary>
            <value>
            The elements enumerator.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchemaDependencyFactory.FlowSchemaGenerator">
            <summary>
            Creates concreete implementation of <see cref="T:Terrasoft.Core.Process.IFlowSchemaGenerator"/>.
            </summary>
            <returns>
            Instance of <see cref="T:Terrasoft.Core.Campaign.CampaignFlowSchemaGenerator"/>.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.Campaign.CampaignSchemaElementType">
            <summary>
            Type of campaign schema element.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Campaign.CampaignSchemaManagerItem">
            <summary>
            Represents class for CampaignSchema manipulating
            </summary>
        </member>
        <member name="T:Terrasoft.Core.SchemaManagerItem`1">
            <summary>
            Schema manager item.
            </summary>
            <seealso cref="T:Terrasoft.Core.ManagerItem`1"/>
            <seealso cref="T:Terrasoft.Core.ISchemaManagerItem`1"/>
        </member>
        <member name="T:Terrasoft.Core.ManagerItem`1">
            <summary>
            Элемент менеджера.
            </summary>
            <typeparam name="TInstance">Класс, реализующий интерфейс <see cref="T:Terrasoft.Core.IManagerItemInstance"/>.</typeparam>
        </member>
        <member name="T:Terrasoft.Core.IManagerItem`1">
            <summary>
            Предоставляет свойства элемента менеджера заданного типа.
            </summary>
            <typeparam name="TInstance">Любой класс.</typeparam>
        </member>
        <member name="T:Terrasoft.Core.IManagerItem">
            <summary>
            Предоставляет свойства элемента менеджера.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.IManagerItem.UId">
            <summary>
            Уникальный идентификатор элемента менеджера.
            </summary>
            <remarks>
            Если схема замещает родителя, то поле <see cref="P:Terrasoft.Core.IManagerItem.UId"/> равно полю <see cref="P:Terrasoft.Core.IManagerItem.RealUId"/> родительской
            "настоящей" схемы, иначе поле <see cref="P:Terrasoft.Core.IManagerItem.UId"/> равно текущему значению поля <see cref="P:Terrasoft.Core.IManagerItem.RealUId"/>.
            </remarks>
        </member>
        <member name="P:Terrasoft.Core.IManagerItem.RealUId">
            <summary>
            Уникальный идентификатор расширяющего элемента менеджера.
            </summary>
            <remarks>
            Если элемент не является расширяющим, значение равно уникальному идентификатору этого элемента.
            </remarks>
        </member>
        <member name="P:Terrasoft.Core.IManagerItem.Name">
            <summary>
            Имя элемента менеджера.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.IManagerItem.Caption">
            <summary>
            Заголовок элемента менеджера.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.IManagerItem.Instance">
            <summary>
            Экземпляр элемента менеджера. Если ссылка на экземпляр элемента менеджера равна <c>null</c>, генерируется 
            исключение.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.IManagerItem.SafeInstance">
            <summary>
            Безопасный экземпляр элемента менеджера. Если ссылка на экземпляр элемента менеджера равна <c>null</c>, 
            возвращается <c>null</c>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.IManagerItem.Manager">
            <summary>
            Менеджер.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.IManagerItem`1.Instance">
            <summary>
            Экземпляр элемента менеджера текущего типа. Если ссылка на экземпляр элемента менеджера равна <c>null</c>, 
            генерируется исключение.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.IManagerItem`1.SafeInstance">
            <summary>
            Безопасный экземпляр элемента менеджера текущего типа. Если ссылка на экземпляр элемента менеджера равна 
            <c>null</c>, возвращается <c>null</c>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ManagerItem`1.HandleNameChanging(System.String)">
            <summary>
            Актуализирует содержимое элемента менеджера при его переименовании.
            </summary>
            <param name="oldName">Старое имя элемента менеджера.</param>
        </member>
        <member name="P:Terrasoft.Core.ManagerItem`1.UId">
            <summary>
            Идентификатор элемента менеджера, значение которого зависит от типа схемы.
            Если схема замещает родителя, то поле <see cref="P:Terrasoft.Core.ManagerItem`1.UId"/> равно полю <see cref="P:Terrasoft.Core.ManagerItem`1.RealUId"/> родительской
            "настоящей" схемы, иначе поле <see cref="P:Terrasoft.Core.ManagerItem`1.UId"/> равно текущему значению поля <see cref="P:Terrasoft.Core.ManagerItem`1.RealUId"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ManagerItem`1.RealUId">
            <summary>
            Уникальный идентификатор элемента менеджера, который содержит UId схемы, присвоенное ей при создании.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ManagerItem`1.Name">
            <summary>
            Имя.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ManagerItem`1.Caption">
            <summary>
            Заголовок.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ManagerItem`1.Instance">
            <summary>
            Экземпляр типа элемента менеджера. Если ссылка на экземпляр элемента менеджера равна <c>null</c>, 
            генерируется исключение.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ManagerItem`1.SafeInstance">
            <summary>
            Безопасный экземпляр типа элемента менеджера. Если ссылка на экземпляр элемента менеджера равна 
            <c>null</c>, возвращается <c>null</c>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ManagerItem`1.Terrasoft#Core#IManagerItem#Instance">
            <summary>
            Manager item instance of type <see cref="T:System.Object"/>. If manager item instance is <c>null</c>,
            exception is thrown.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ManagerItem`1.Terrasoft#Core#IManagerItem#SafeInstance">
            <summary>
            Безопасный экземпляр элемента менеджера типа <see cref="T:System.Object"/>. Если ссылка на экземпляр элемента 
            менеджера равна <c>null</c>, возвращается <c>null</c>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ManagerItem`1.Manager">
            <summary>
            Менеджер.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.ISchemaManagerItem`1">
            <summary>
            Typed interface of the item.
            </summary>
            <typeparam name="TSchemaManagerSchema">The class that is inherited from <see cref="T:Terrasoft.Core.Schema"/> and implements the 
            <see cref="T:Terrasoft.Core.ISchemaManagerSchema`1"/>, <see cref="T:Terrasoft.Core.IManagerItemInstance"/>.</typeparam>
        </member>
        <member name="T:Terrasoft.Core.ISchemaManagerItem">
            <summary>
            Interface of schema manager item.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerItem.GetHash">
            <summary>
            Returns the hash for this item.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerItem.Invalidate">
            <summary>
            Invalidates instance.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.UserConnection">
            <summary>
            User connection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.IsInstanceInitialized">
            <summary>
            Determines initialization status of schema manager item instance.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.TypeName">
            <summary>
            Name of schema item type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.ManagerName">
            <summary>
            Manager name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.ParentUId">
            <summary>
            Identifier of parent item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.UserId">
            <summary>
            Identifier of user.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.FolderId">
            <summary>
            Identifier of folder.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.IsCoreSchema">
            <summary>
            Determines if schema is a system one.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.ReferenceSchemaUIds">
            <summary>
            List of schemas referenced by schema manager item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.ExtraProperties">
            <summary>
            Additional properties collection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.UserProperties">
            <summary>
            User properties collection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.Assembly">
            <summary>
            Assembly in which the type is declared.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.AssemblyRefCount">
            <summary>
            Number of assemblies referenced by schema item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.Description">
            <summary>
            Description of schema manager item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.SysSchemaInSolutionId">
            <summary>
            Unique identifier of SysSchemaInSolution database table record bound to schema manager item instance.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.ExtendParent">
            <summary>
            Extending or substitution indicator.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.PackageUId">
            <summary>
            Unique identifier of package in which schema manager item is declared.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.PackageName">
            <summary>
            Name of package in which schema manager item is declared.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.PackagePosition">
            <summary>
            Position of package in which schema manager item is declared.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.Descriptor">
            <summary>
            Schema manager item descriptor.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.RealParentItemUId">
            <summary>
            Unique identifier of parent item of manager with UId of parent schema from creating.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.DenyExtending">
            <summary>
            Substitution prohibition.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.IncludeDependenciesSource">
            <summary>
            Include codes of dependencies schemas.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.ModifiedOn">
            <summary>
            Schema manager item modification date.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.ResourceModifiedOn">
            <summary>
            Resource modification date.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerItem.Checksum">
            <summary>
            Schema manager item checksum.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerItem`1.ForceGetInstance">
            <summary>
            Returns schema instance. Initializes schema if it is not initialized.
            </summary>
            <returns>Instance of schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerItem`1.Assign(Terrasoft.Core.ISchemaManagerItem{`0})">
            <summary>
            Sets properties of specified item instance to current one.
            </summary>
            <param name="source">Specified schema instance.</param>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerItem`1.Assign(`0)">
            <summary>
            Sets properties of schema to current item of manager.
            </summary>
            <param name="source">Schema manager item descriptor.</param>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerItem`1.AssignUserProperties(Terrasoft.Core.UserPropertyCollection)">
            <summary>
            Sets user properties from source collection.
            </summary>
            <param name="source">User properties source.</param>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerItem`1.DropInstance">
            <summary>
            Removes instance of schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerItem`1.CloneShallow">
            <summary>
            Performs shallow cloning of current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerItem`1.SetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Sets the property value by instance expression.
            </summary>
            <typeparam name="TValue">The type of property to set.</typeparam>
            <param name="propertyExpression">Expression that locates property.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerItem`1.GetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the property value by instance expression.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="propertyExpression">Expression that locates property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.#ctor(Terrasoft.Core.SchemaManager{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.SchemaManagerItem`1"/> class.
            </summary>
            <param name="manager">Schema manager in which this instance is created
            <see cref="T:Terrasoft.Core.SchemaManagerItem`1"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.#ctor(Terrasoft.Core.ISchemaManagerItem{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.SchemaManagerItem`1"/> class.
            </summary>
            <param name="source">Manager item to initialize current item from.</param>
            <param name="isShallowClone">
            Flag that indicates whether the item's instance will not be cloned too.
            </param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.AssignSchemaUserProperties(`0)">
            <summary>
            Sets user properties from source schema.
            </summary>
            <param name="source">Source schema.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.GetHashData">
            <summary>
            Prepares data for hashing.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.Actualize(Terrasoft.Core.ISchemaManagerItem{`0})">
            <summary>
            Launch actualization of source item
            Used for apply actions of source item's children 
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.ForceGetInstance">
            <summary>
            Returns instance of current Schema
            if it not exists initializes it
            </summary>
            <returns>Instance of schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.DropInstance">
            <summary>
            Removes instance
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.Assign(Terrasoft.Core.ISchemaManagerItem{`0})">
            <summary>
            Sets properties from source maanger item. 
            </summary>
            <param name="source">Manager item source.
            </param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.AssignShallow(Terrasoft.Core.ISchemaManagerItem{`0})">
            <summary>
            Sets properties from source maanger item. 
            </summary>
            <param name="source">Manager item source.
            </param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.Assign(`0)">
            <summary>
            Sets for current manager element properties of transmitted schema
            </summary>
            <param name="source">Schema which properties are translated for current manager element.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.AssignUserProperties(Terrasoft.Core.UserPropertyCollection)">
            <summary>
            Sets user properties from source collection.
            </summary>
            <param name="source">User properties source.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.GetHash">
            <summary>
            Returns the hash for this item.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.Invalidate">
            <summary>
            Invalidates manager item instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.SetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Sets the property value by instance expression.
            </summary>
            <typeparam name="TValue">The type of property to set.</typeparam>
            <param name="propertyExpression">Expression that locates property.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItem`1.GetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the property value by instance expression.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="propertyExpression">Expression that locates property.</param>
            <returns>Property value.</returns>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.UserConnection">
            <summary>
            User connection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.IsInstanceInitialized">
            <summary>
            Shows is this schema initialized
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.Instance">
            <summary>
            Initialized schema instance 
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.SafeInstance">
            <summary>
            Initialized safe schema instance If not initialized returns <c>null</c>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.Name">
            <summary>
            Name of manager element
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.Caption">
            <summary>
            Title of manager element
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.Manager">
            <summary>
            Manager instance
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.Description">
            <summary>
            Description of manager instance
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.FolderId">
            <summary>
            Manager Catalog 
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.IsCoreSchema">
            <summary>
            Is schema system
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.Terrasoft#Core#IManagerItem#Manager">
            <summary>
            Schema manager
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.ManagerItem">
            <summary>
            Manager element
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.UserId">
            <summary>
            Unique User Identifier
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.Assembly">
            <summary>
            Schema assembly
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.AssemblyRefCount">
            <summary>
            Linked Assembly count
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.ManagerName">
            <summary>
            Schema manager name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.ParentUId">
            <summary>
            Parent schema identifier
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.ReferenceSchemaUIds">
            <summary>
            List of Linked schemas
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.TypeName">
            <summary>
            Schema type name
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.ExtraProperties">
            <summary>
            Schema additional properties
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.UserProperties">
            <summary>
            Item user properties.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.SysSchemaInSolutionId">
            <summary>
            Identifier in table SysSchemaInSolution.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.Descriptor">
            <summary>
            Manager element descriptor
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.RealParentItemUId">
            <summary>
            Unique identifier parent manager element
            which contains unique Id parent schema
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.DenyExtending">
            <summary>
            Deny extending
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.IncludeDependenciesSource">
            <summary>
            Include dependencies source
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.ModifiedOn">
            <summary>
            Item's modification time.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.ResourceModifiedOn">
            <summary>
            Resource modification date
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItem`1.Checksum">
            <summary>
            Schema manager item checksum.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaManagerItem.#ctor(Terrasoft.Core.SchemaManager{Terrasoft.Core.Campaign.CampaignSchema})">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.SchemaManagerItem`1"/>
            </summary>
            <param name="manager">Schema manager in which current item exists
            <see cref="T:Terrasoft.Core.SchemaManagerItem`1"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaManagerItem.#ctor(Terrasoft.Core.ISchemaManagerItem{Terrasoft.Core.Campaign.CampaignSchema},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.SchemaManagerItem`1"/> class.
            </summary>
            <param name="source">Manager item to initialize current item from.</param>
            <param name="isShallowClone">
            Flag that indicates whether the item's instance will not be cloned too.
            </param>
        </member>
        <member name="T:Terrasoft.Core.Campaign.CampaignSchemaElement">
            <summary>
            Represents class for the element of the Campaign schema.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.BaseProcessSchemaElement">
            <summary>
            Represents base class for the process diagram elements.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.BaseProcessSchemaItem">
            <summary>
            Represents base class for the process items.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowElementFactory.CreateFlowElement(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Creates flow element.
            </summary>
            <param name="flowSchema">Instance of the <see cref="T:Terrasoft.Core.Process.FlowSchema"/> type.</param>
            <returns>Instance of the <see cref="T:Terrasoft.Core.Process.FlowElement"/> type.</returns>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchemaItem.TypeNamePropertyName">
            <summary>
            The meta data index for the "TypeName" property.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaItem.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaItem.#ctor(Terrasoft.Core.Process.BaseProcessSchemaItem)">
            <summary>
            Creates a new instance that is a copy of another instance.
            </summary>
            <param name="source">Instance of the <see cref="T:Terrasoft.Core.Process.BaseProcessSchemaItem"/> type.</param>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchemaItem._type">
            <summary>
            Gets the <see cref="T:System.Type"/> instance.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchemaItem._isValid">
            <summary>
            Indicates element valid state.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaItem.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Applies meta data values.
            </summary>
            <param name="reader">Instance of the <see cref="T:Terrasoft.Common.DataReader"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaItem.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes meta data values.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaItem.GetMetaItems(System.Collections.Generic.ICollection{Terrasoft.Core.IMetaItem})">
            <summary>
            Fills collection with items of the meta data.
            </summary>
            <param name="metaItems">Collection of the meta items.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaItem.CreateFlowElement(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Creates flow element.
            </summary>
            <param name="flowSchema">Instance of the <see cref="T:Terrasoft.Core.Process.FlowSchema"/> type.</param>
            <returns>Instance of the <see cref="T:Terrasoft.Core.Process.FlowElement"/> type.</returns>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchemaItem.TypeName">
            <summary>
            Gets full name of the <see cref="T:System.Type"/> instance.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchemaElement.ContainerUIdMetaIndex">
            <summary>
            The meta data index for the "ContainerUId" property.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElement.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElement.#ctor(Terrasoft.Core.Process.BaseProcessSchemaElement)">
            <summary>
            Creates a new instance that is a copy of another instance.
            </summary>
            <param name="source">Instance of the <see cref="T:Terrasoft.Core.Process.BaseProcessSchemaElement"/> type.</param>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchemaElement._caption">
            <summary>
            Caption.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElement.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Applies meta data values.
            </summary>
            <param name="reader">Instance of the <see cref="T:Terrasoft.Common.DataReader"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElement.CreateSequenceFlowElement(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Creates element of the process transition.
            </summary>
            <param name="flowSchema">Instance of the <see cref="T:Terrasoft.Core.Process.FlowSchema"/> type.</param>
            <returns>Instance of the <see cref="T:Terrasoft.Core.Process.SequenceFlow"/> type.</returns>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElement.InitializeLocalizableValues(Terrasoft.Common.IResourceStorage,System.String,System.String)">
            <summary>
            Initializes resources from the specified storage from the specified manager and resorce group name.
            </summary>
            <param name="storage">Resource storage.</param>
            <param name="resourceManagerName">Resource manager name.</param>
            <param name="resourceGroupName">Resource group name.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElement.GetLocalizableValues(System.Collections.Generic.ICollection{Terrasoft.Common.LocalizableValue},System.Boolean)">
            <summary>
            Returns localizable values list.
            </summary>
            <param name="values">Localizable values list.</param>
            <param name="includeInherited">Flag that indicates include inherited resources or not.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElement.LoadLocalizableValues">
            <summary>
            Loads localizable value.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElement.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes meta data values.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElement.GetOutgoingsDefaultFlows">
            <summary>
            Returns outgoing default flows for the current element.
            </summary>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElement.GetOutgoingsConditionalFlows">
            <summary>
            Returns outgoing conditional sequence flows for the current element.
            </summary>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElement.GetOutgoingsDefaultFlows(Terrasoft.Core.Process.ProcessSchemaFlowNode)">
            <summary>
            Returns outgoing default flows for the specified element.
            </summary>
            <param name="flowNode">Process element.</param>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaElement.GetOutgoingsConditionalFlows(Terrasoft.Core.Process.ProcessSchemaFlowNode)">
            <summary>
            Returns outgoing conditional sequence flows for the specified element.
            </summary>
            <param name="flowNode">Process element.</param>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchemaElement.ContainerUId">
            <summary>
            Gets or sets container UId for the current element.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaElement.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Campaign.CampaignSchemaElement._typeName">
            <summary>
            Gets full name of the <see cref="T:System.Type"/> instance.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Campaign.CampaignSchemaElement._incomings">
            <summary>
            Gets incoming connections of the element.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Campaign.CampaignSchemaElement._outgoings">
            <summary>
            Gets outgoing connections of the element.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaElement.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes meta data values.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaElement.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaElement.CreateFlowElement(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Creates flow element.
            </summary>
            <param name="flowSchema">Instance of the <see cref="T:Terrasoft.Core.Process.FlowSchema"/> type.</param>
            <returns>Instance of the <see cref="T:Terrasoft.Core.Process.FlowElement"/> type.</returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaElement.CreateProcessFlowElement(Terrasoft.Core.UserConnection)">
            <summary>
            Creates specific <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaElement.GetFireTime">
            <summary>
            Returns null when time condition empty or <see cref="T:System.TimeSpan"/> fire time.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchemaElement.Action">
            <summary>
            Identifier of element action.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchemaElement.Position">
            <summary>
            Element's position on diagram.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchemaElement.ParentSchema">
            <summary>
            Element's parent schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchemaElement.IsExpanded">
            <summary>
            Sign that element is expanded.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchemaElement.Size">
            <summary>
            Element's size.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchemaElement.ScheduledUtcFireTime">
            <summary>
            Gets time when parent schema shout be executed.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.BaseProcessSchemaFactoryMetaItemCollection`1">
            <summary>
            Represents collection of items of the meta data.
            </summary>
            <typeparam name="T">Instance that derives the <see cref="T:Terrasoft.Core.Process.BaseProcessSchemaItem"/> type.</typeparam>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaFactoryMetaItemCollection`1.CreateItem(Terrasoft.Common.DataReader)">
            <summary>
            Creates instace of the item at the current position in the meta data set.
            </summary>
            <param name="reader">Instance of the <see cref="T:Terrasoft.Common.DataReader"/> type.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaFactoryMetaItemCollection`1.CreateItemInstance(System.String)">
            <summary>
            Creates instace of the item by its type name.
            </summary>
            <param name="typeName">Type name of the item.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaFactoryMetaItemCollection`1.GetMetaItems(System.Collections.Generic.ICollection{Terrasoft.Core.IMetaItem})">
            <summary>
            Fills collection with items of the meta data.
            </summary>
            <param name="metaItems">Collection of the meta items.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaFactoryMetaItemCollection`1.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes meta data values.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaFactoryMetaItemCollection`1.ReadMetaData(Terrasoft.Common.DataReader)">
            <summary>
            Reads meta data values.
            </summary>
            <param name="reader">Instance of the <see cref="T:Terrasoft.Common.DataReader"/> type.</param>
        </member>
        <member name="F:Terrasoft.Core.Campaign.FlowElementCollection._container">
            <summary>
            Gets flow elements container.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Campaign.FlowElementCollection.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.BaseProcessSchemaManager`1">
            <summary>
            Represents base class for the process manager.
            </summary>
            <typeparam name="TBaseProcessSchema">The value of any type.</typeparam>
        </member>
        <member name="T:Terrasoft.Core.SchemaManager`1">
            <summary>
            Base class of schema manager.
            </summary>
            <typeparam name="TSchemaManagerSchema">Class, inherites from <see cref="T:Terrasoft.Core.Schema"/>, implements interface
            <see cref="T:Terrasoft.Core.ISchemaManagerSchema`1"/>, <see cref="T:Terrasoft.Core.IManagerItemInstance"/>, 
            <see cref="T:System.ICloneable"/>.</typeparam>
        </member>
        <member name="T:Terrasoft.Core.Manager`2">
            <summary>
            Менеджер.
            </summary>
            <typeparam name="TItem">Класс, реализующий интерфейс <see cref="T:Terrasoft.Core.IManagerItem"/>.</typeparam>
            <typeparam name="TInstance">Любой тип.</typeparam>
        </member>
        <member name="T:Terrasoft.Core.IManager`2">
            <summary>
            Параметризованный класс интерфейса <see cref="T:Terrasoft.Core.IManager"/>.
            </summary>
            <typeparam name="TItem">Тип элемента менеджера</typeparam>
            <typeparam name="TInstance">Экземпляр элемента менеджера соответствующего типа.</typeparam>
        </member>
        <member name="T:Terrasoft.Core.IManager">
            <summary>
            Предоставляет методы и свойства менеджера.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IManager.Initialize(Terrasoft.Core.ManagerProvider,Terrasoft.Core.ManagerProviderConfigurationElement)">
            <summary>
            Инициализирует менеджер, используя заданные провайдер менеджера и информацию конфигурационного файла.
            </summary>
            <param name="provider">Провайдер менеджера.</param>
            <param name="configuration">Информация конфигурационного файла.</param>
        </member>
        <member name="M:Terrasoft.Core.IManager.FindItemByUId(System.Guid)">
            <summary>
            Осуществляет поиск элемента менеджера с заданным уникальным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор искомого элемента менеджера.</param>
            <returns>
            Элемент менеджера типа <see cref="T:Terrasoft.Core.IManagerItem"/> с уникальным идентификатором <paramref name="uid"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.IManager.GetItemByUId(System.Guid)">
            <summary>
            Возвращает элемент менеджера с заданным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор элемента менеджера.</param>
            <returns>
            Элемент менеджера типа <see cref="T:Terrasoft.Core.IManagerItem"/> с уникальным идентификатором <paramref name="uid"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.IManager.GetItemByRealUId(System.Guid)">
            <summary>
            Возвращает элемент менеджера для заданного уникального идентификатора расширения схемы.
            </summary>
            <param name="itemUId">Уникальный идентификатор расширения схемы.</param>
            <returns>
            Элемент менеджера для расширения схемы с уникальным идентификатором <paramref name = "itemUId"/>
            </returns>
        </member>
        <member name="M:Terrasoft.Core.IManager.FindItemByName(System.String)">
            <summary>
            Осуществляет поиск элемента менеджера с заданным именем.
            </summary>
            <param name="name">Имя элемента менеджера.</param>
            <returns>Элемент менеджера типа <see cref="T:Terrasoft.Core.IManagerItem"/> с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.IManager.GetItemByName(System.String)">
            <summary>
            Возвращает элемент менеджера с заданным именем.
            </summary>
            <param name="name">Имя элемента менеджера.</param>
            <returns>Элемент менеджера типа <see cref="T:Terrasoft.Core.IManagerItem"/> с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.IManager.FindInstanceByUId(System.Guid)">
            <summary>
            Осуществляет поиск экземпляра элемента менеджера с заданным уникальным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор искомого экземпляра элемента менеджера.</param>
            <returns>Экземпляр элемента менеджера с уникальным идентификатором <paramref name="uid"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.IManager.GetInstanceByUId(System.Guid)">
            <summary>
            Возвращает экземпляр элемента менеджера с заданным уникальным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор экземпляра элемента менеджера.</param>
            <returns>Экземпляр элемента менеджера с уникальным идентификатором <paramref name="uid"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.IManager.FindInstanceByName(System.String)">
            <summary>
            Осуществляет поиск экземпляра элемента менеджера с заданным именем.
            </summary>
            <param name="name">Имя искомого экземпляра элемента менеджера.</param>
            <returns>Экземпляр элемента менеджера с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.IManager.GetInstanceByName(System.String)">
            <summary>
            Возвращает экземпляр элемента менеджера с заданным именем.
            </summary>
            <param name="name">Имя экземпляра элемента менеджера с именем <paramref name="name"/>.</param>
            <returns>Экземпляр элемента менеджера с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.IManager.GetItems">
            <summary>
            Возвращает перечисление элементов менеджера.
            </summary>
            <returns>Перечисление элементов менеджера.</returns>
        </member>
        <member name="M:Terrasoft.Core.IManager.GetItems(System.Predicate{Terrasoft.Core.IManagerItem})">
            <summary>
            Возвращает перечисление элементов менеджера, которые соответствуют заданным критериям.
            </summary>
            <param name="match">Критерии, которым должны соответствовать возвращаемые элементы перечисления.</param>
            <returns>Перечисление элементов менеджера, которые соответствуют критериям <paramref name="match"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.IManager.Clear">
            <summary>
            Удаляет все элементы из коллекции элементов менеджера.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.IManager.Name">
            <summary>
            Имя.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.IManager.Provider">
            <summary>
            Провайдер.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.IManager.ItemCount">
            <summary>
            Количество элементов.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IManager`2.FindItemByUId(System.Guid)">
            <summary>
            Замещение метода <see cref="M:Terrasoft.Core.IManager.FindItemByUId(System.Guid)"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IManager`2.GetItemByUId(System.Guid)">
            <summary>
            Замещение метода <see cref="M:Terrasoft.Core.IManager.GetItemByUId(System.Guid)"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IManager`2.FindItemByName(System.String)">
            <summary>
            Замещение метода <see cref="M:Terrasoft.Core.IManager.FindItemByName(System.String)"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IManager`2.GetItemByName(System.String)">
            <summary>
            Замещение метода <see cref="M:Terrasoft.Core.IManager.GetItemByName(System.String)"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IManager`2.FindInstanceByUId(System.Guid)">
            <summary>
            Замещение метода <see cref="M:Terrasoft.Core.IManager.FindInstanceByUId(System.Guid)"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IManager`2.GetInstanceByUId(System.Guid)">
            <summary>
            Замещение метода <see cref="M:Terrasoft.Core.IManager.GetInstanceByUId(System.Guid)"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IManager`2.FindInstanceByName(System.String)">
            <summary>
            Замещение метода <see cref="M:Terrasoft.Core.IManager.FindInstanceByName(System.String)"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IManager`2.GetInstanceByName(System.String)">
            <summary>
            Замещение метода <see cref="M:Terrasoft.Core.IManager.GetInstanceByName(System.String)"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.CreateItemCollection">
            <summary>
            Создает коллекцию элементов менеджера типа <see cref="T:Terrasoft.Core.IManagerItem"/>.
            </summary>
            <returns>Коллекция элементов менеджера типа <see cref="T:Terrasoft.Core.IManagerItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.InitializeInstance(`0)">
            <summary>
            Создает экземпляр заданного	элемента менеджера.
            </summary>
            <param name="item">Элемент менеджера, экземпляр которого создается.</param>
            <returns>Экземпляр элемента менеджера <paramref name="item"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.InitializeSafeInstance(`0)">
            <summary>
            Создает безопасный экземпляр заданного элемента менеджера. 
            </summary>
            <param name="item">Элемент менеджера, безопасный экземпляр которого создается.</param>
            <returns>
            Безопасный экземпляр элемента менеджера <paramref name="item"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.InitializeAllItemCollection(Terrasoft.Core.IManagerItemCollection{Terrasoft.Core.IManagerItem})">
            <summary>
            Инициализирует коллекцию элементов менеджера.
            </summary>
            <param name="items">Коллекция элементов менеджера для инициализации.</param>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.ClearItems(System.Object,System.EventArgs)">
            <summary>
            Удаляет все элементы в коллекции элементов менеджера.
            </summary>
            <param name="sender">Ссылка на объект, инициировавший удаление.</param>
            <param name="eventArgs">Аргументы события удаления элементов.</param>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.Initialize(Terrasoft.Core.ManagerProvider,Terrasoft.Core.ManagerProviderConfigurationElement)">
            <summary>
            Инициализирует менеджер схем, используя заданные провайдер менеджера и информацию конфигурационного файла.
            </summary>
            <param name="provider">Провайдер менеджера.</param>
            <param name="configuration">Информация конфигурационного файла.</param>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.FindItem(System.Predicate{`0})">
            <summary>
            Searches for the manager item by match predicate.
            </summary>
            <param name="match">Predicate to search with.</param>
            <returns>Found manager item.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.FindItemByUId(System.Guid)">
            <summary>
            Осуществляет поиск элемента менеджера текущего типа с заданным уникальным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор искомого элемента менеджера.</param>
            <returns>Элемент менеджера текущего типа с уникальным идентификатором <paramref name="uid"/>. Если 
            элемент с уникальным идентификатором <paramref name="uid"/> не найден, возвращается значение по умолчанию 
            для текущего типа элемента менеджера.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.Terrasoft#Core#IManager#FindItemByUId(System.Guid)">
            <summary>
            Осуществляет поиск элемента менеджера с заданным уникальным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор искомого элемента менеджера.</param>
            <returns>
            Элемент менеджера типа <see cref="T:Terrasoft.Core.IManagerItem"/> с уникальным идентификатором <paramref name="uid"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.Terrasoft#Core#IManager#GetItemByUId(System.Guid)">
            <summary>
            Возвращает элемент менеджера с заданным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор элемента менеджера.</param>
            <returns>
            Элемент менеджера типа <see cref="T:Terrasoft.Core.IManagerItem"/> с уникальным идентификатором <paramref name="uid"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.GetItemByUId(System.Guid)">
            <summary>
            Возвращает элемент менеджера с заданным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор элемента менеджера.</param>
            <returns>
            Элемент менеджера текущего типа с уникальным идентификатором <paramref name="uid"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.Terrasoft#Core#IManager#GetItemByRealUId(System.Guid)">
            <summary>
            Возвращает элемент менеджера для заданного уникального идентификатора расширения схемы.
            </summary>
            <param name="itemUId">Уникальный идентификатор расширения схемы.</param>
            <returns>
            Элемент менеджера для расширения схемы с уникальным идентификатором <paramref name = "itemUId"/>
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.FindItemByName(System.String)">
            <summary>
            Осуществляет поиск элемента менеджера с заданным именем.
            </summary>
            <param name="name">Имя элемента менеджера.</param>
            <returns>Элемент менеджера текущего типа с именем <paramref name="name"/>. Если элемент с именем 
            <paramref name="name"/> не найден, возвращается значение по умолчанию для текущего типа элемента менеджера.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.Terrasoft#Core#IManager#FindItemByName(System.String)">
            <summary>
            Осуществляет поиск элемента менеджера с заданным именем.
            </summary>
            <param name="name">Имя элемента менеджера.</param>
            <returns>Элемент менеджера типа <see cref="T:Terrasoft.Core.IManagerItem"/> с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.Terrasoft#Core#IManager#GetItemByName(System.String)">
            <summary>
            Возвращает элемент менеджера с заданным именем.
            </summary>
            <param name="name">Имя элемента менеджера.</param>
            <returns>Элемент менеджера типа <see cref="T:Terrasoft.Core.IManagerItem"/> с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.GetItemByName(System.String)">
            <summary>
            Возвращает элемент менеджера с заданным именем.
            </summary>
            <param name="name">Имя элемента менеджера.</param>
            <returns>Элемент менеджера универсального типа с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.FindInstanceByUId(System.Guid)">
            <summary>
            Возвращает экземпляр элемента менеджера по заданному уникальному идентификатору.
            </summary>
            <param name="uid">Уникальный идентификатор экземпляра элемента менеджера.</param>
            <returns>Экземпляр элемента менеджера с уникальным идентификатором <paramref name="uid"/>. Если элемент 
            менеджера с уникальным идентификатором <paramref name="uid"/> не найден, возвращается экземпляр по 
            умолчанию текущего типа элемента менеджера.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.Terrasoft#Core#IManager#FindInstanceByUId(System.Guid)">
            <summary>
            Осуществляет поиск экземпляра элемента менеджера с заданным уникальным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор искомого экземпляра элемента менеджера.</param>
            <returns>Экземпляр элемента менеджера с уникальным идентификатором <paramref name="uid"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.Terrasoft#Core#IManager#GetInstanceByUId(System.Guid)">
            <summary>
            Возвращает экземпляр элемента менеджера с заданным уникальным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор экземпляра элемента менеджера.</param>
            <returns>Экземпляр элемента менеджера с уникальным идентификатором <paramref name="uid"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.GetInstanceByUId(System.Guid)">
            <summary>
            Возвращает экземпляр элемента менеджера с заданным уникальным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор экземпляра элемента менеджера.</param>
            <returns>Экземпляр элемента менеджера с уникальным идентификатором <paramref name="uid"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.FindInstanceByName(System.String)">
            <summary>
            Осуществляет поиск экземпляра элемента менеджера с заданным именем.
            </summary>
            <param name="name">Имя искомого экземпляра элемента менеджера.</param>
            <returns>Экземпляр элемента менеджера с именем <paramref name="name"/>. Если экземпляр элемента менеджера с 
            уникальным идентификатором <paramref name="name"/> не найден, возвращается экземпляр по умолчанию для 
            текущего типа элемента менеджера.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.Terrasoft#Core#IManager#FindInstanceByName(System.String)">
            <summary>
            Осуществляет поиск экземпляра элемента менеджера с заданным именем.
            </summary>
            <param name="name">Имя искомого экземпляра элемента менеджера.</param>
            <returns>Экземпляр элемента менеджера с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.Terrasoft#Core#IManager#GetInstanceByName(System.String)">
            <summary>
            Возвращает экземпляр элемента менеджера с заданным именем.
            </summary>
            <param name="name">Имя экземпляра элемента менеджера с именем <paramref name="name"/>.</param>
            <returns>Экземпляр элемента менеджера с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.GetInstanceByName(System.String)">
            <summary>
            Возвращает экземпляр элемента менеджера с заданным именем.
            </summary>
            <param name="name">Имя экземпляра элемента менеджера.</param>
            <returns>Экземпляр элемента менеджера с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.FindItemByCaption(System.String)">
            <summary>
            Осуществляет поиск элемента менеджера с заданным заголовком.
            </summary>
            <param name="caption">Заголовок элемента менеджера.</param>
            <returns>Элемент менеджера текущего типа с заголовком <paramref name="caption"/>. Если элемент с заголовком
            <paramref name="caption"/> не найден, возвращается значение по умолчанию для текущего типа элемента
            менеджера.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.Terrasoft#Core#IManager#GetItems">
            <summary>
            Возвращает перечислитель элементов менеджера.
            </summary>
            <returns>Перечислитель элементов менеджера.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.GetItems(System.Predicate{Terrasoft.Core.IManagerItem})">
            <summary>
            Возвращает перечислитель элементов менеджера, которые соответствуют заданным критериям. 
            </summary>
            <param name="match">Критерии, которым должны соответствовать возвращаемые элементы перечисления.</param>
            <returns>Перечислитель элементов менеджера, которые соответствуют критериям <paramref name="match"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.GetItems">
            <summary>
            Возвращает перечислитель элементов менеджера текущего типа.
            </summary>
            <returns>Перечислитель элементов менеджера текущего типа.</returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.Add(`0)">
            <summary>
            Добавляет новый элемент менеджера в конец коллекции.
            </summary>
            <param name="item">Элемент, который добавляется в коллекцию.</param>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.Remove(`0)">
            <summary>
            Удаляет из коллекции элементов менеджера заданный элемент.
            </summary>
            <param name="item">Элемент, который должен быть удален из коллекции.</param>
            <returns>
            <c>true</c>, если <paramref name="item"/> успешно удален; иначе - <c>false</c>. Этот метод также может 
            возвратить <c>false</c>, если <paramref name="item"/> не найден в коллекции элементов менеджера.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Manager`2.Clear">
            <summary>
            Удаляет все элементы из коллекции элементов менеджера.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Manager`2.Items">
            <summary>
            Коллекция элементов менеджера.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Manager`2.AllItems">
            <summary>
            Коллекция элементов менеджера.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Manager`2.Name">
            <summary>
            Имя.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Manager`2.Provider">
            <summary>
            Провайдер.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Manager`2.ItemCount">
            <summary>
            Количество элементов.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.ISchemaManager">
            <summary>
            Interface of the manager of schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.Initialize(Terrasoft.Core.SchemaManagerProvider,Terrasoft.Core.SchemaManagerProviderConfigurationElement)">
            <summary>
            Creates the manager of schema, using specified provider and information from configuration file.
            </summary>
            <param name="provider">Provider of schema manager.</param>
            <param name="configuration">Information from configuration file.</param>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.AddSchema(System.Guid,System.String,Terrasoft.Common.LocalizableString,Terrasoft.Common.LocalizableString,System.Guid)">
            <summary>
            Adds schema with specified parameters to schema manager.
            </summary>
            <param name="uid">Unique identifier of schema.</param>
            <param name="name">Name of schema.</param>
            <param name="caption">Caption of schema.</param>
            <param name="description">Description of schema.</param>
            <param name="parentUId">Parent schema's identifier.</param>
            <returns>Item of manager that is contains adding schema with specified parameters.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.RemoveSchema(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Removes schema with specified id from manager.
            </summary>
            <param name="uid">Identifier of schema.</param>
            <param name="userConnetion">User connection.</param>
            <returns>Identifier of record in SysSchemaInSolutionfor deleting schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.RemoveItemByUId(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Removes item with specified identifier from current manager of schemas.
            </summary>
            <param name="uid">Identifier of removing item.</param>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.CreateSchema(System.String,Terrasoft.Core.ISchemaManagerItem,Terrasoft.Core.UserConnection,System.Boolean)">
            <summary>
            Creates new schema with specified name and parent schema with flag 
            of creating schema from metadata.
            </summary>
            <param name="name">Name of schema.</param>
            <param name="baseSchema">Item with parent schema.</param>
            <param name="userConnection">User connection.</param>
            <param name="fromMetaData">Flag of creating schema from metadata.</param>
            <returns>Item of manager with created schema.</returns>
            <remarks>Overrided method.</remarks>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.CreateSchema(System.String,Terrasoft.Core.ISchemaManagerItem,Terrasoft.Core.UserConnection,System.Guid,System.Boolean)">
            <summary>
            Creates new schema with specified name, parent schema and flag of adding schema to list 
            of editing items.
            </summary>
            <param name="name">Name of schema.</param>
            <param name="baseSchema">Item with parent schema.</param>
            <param name="userConnection">User connection.</param>
            <param name="uid">Identifier of schema.</param>
            <param name="addToDesignItems">Признак добавления схемы к списку редактируемых элементов.</param>
            <returns>Элемент менеджера, содержащий созданную схему.</returns>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.CreateDesignSchema(Terrasoft.Core.UserConnection,System.Guid,System.Guid,System.Boolean)">
            <summary>
            Creates new schema with specified parent schema <paramref name="parentSchemaUId"/> and in
            specified package <paramref name="packageUId"/>.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="parentSchemaUId">Parent schema's UId.</param>
            <param name="packageUId">Package UId where schema is created.</param>
            <param name="extendParent">
            Flag that indicates if created schema will be extended or inherited from parent.
            </param>
            <returns>Item of manager with created schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.FillSourceCollection(System.Collections.ObjectModel.Collection{Terrasoft.Core.ISchemaManagerItem},System.Guid)">
            <summary>
            Загружает в переданную коллекцию исходные коды заданной схемы.
            </summary>
            <param name="compileCollection">Коллекция, в которую загружаются исходные коды схемы.</param>
            <param name="uid">Идентификатор схемы, исходные коды которой загружаются.</param>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.InitializeSchema(Terrasoft.Core.ISchemaManagerItem,System.Reflection.Assembly)">
            <summary>
            Создает экземпляр схемы по типу, указанному в переданном элементе менеджера. Если тип схемы элемента 
            менеджера не найден в сборке, генерируется исключение.
            </summary>
            <param name="schemaManagerItem">Элемент менеджера, в котором должна быть проинициализирована схема.</param>
            <param name="assembly">Сборка, которая содержит тип создаваемой схемы.</param>
            <returns>Пронициализированный экземпляр схемы.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.GetDefSchemaUId">
            <summary>
            Возвращает идентификатор схемы, от которой наследуются все базовые схемы менеджера схем.
            </summary>
            <returns>Идентификатор схемы, от которой наследуются все базовые схемы менеджера схем.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.GenerateItemUniqueName(System.String)">
            <summary>
            Генерирует уникальное имя элемента менеджера с использованием заданного префикса.
            </summary>
            <param name="prefix">Префикс.</param>
            <returns>Уникальное имя элемента менеджера с префиксом <paramref name="prefix"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.GenerateItemUniqueCaption(System.String)">
            <summary>
            Генерирует уникальный заголовок элемента менеджера с использованием заданного префикса.
            </summary>
            <param name="prefix">Префикс.</param>
            <returns>Уникальный заголовок элемента менеджера с префиксом <paramref name="prefix"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.GetSchemaMetaData(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Получает метаданные схемы с заданным идентификатором.
            </summary>
            <param name="schemaUId">Идентификатор схемы.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Поток, содержащий метаданные схемы с идентификатором <paramref name="schemaUId"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.GetReadableSchemaMetaData(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Получает метаданные схемы с заданным идентификатором в формате, удобном для чтения.
            </summary>
            <param name="schemaId">Идентификатор схемы, метаданные которой нужно получить.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Поток, содержащий метаданные схемы с идентификатором <paramref name="schemaId"/> в формате, 
            удобном для чтения.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.GetReadableSchemaMetaData(Terrasoft.Core.MetaSchema,Terrasoft.Core.UserConnection)">
            <summary>
            Получает метаданные заданной схемы в формате, удобном для чтения.
            </summary>
            <param name="schema">Схема, метаданные которой нужно получить.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Поток, содержащий метаданные схемы <paramref name="schema"/> в формате, удобном для чтения.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.GetReadableSchemaMetaData(Terrasoft.Core.MetaSchema,Terrasoft.Core.UserConnection,System.Boolean)">
            <summary>
            Получает метаданные заданной схемы в формате, удобном для чтения.
            </summary>
            <param name="schema">Схема, метаданные которой нужно получить.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="toLowerCamelCase">Признак генерации имен свойств в стиле LowerCamelCase.</param>
            <returns>Поток, содержащий метаданные схемы <paramref name="schema"/> в формате, удобном для чтения.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.GetProcessSchemaGenerator(Terrasoft.Core.UserConnection)">
            <summary>
            Возвращает генератор исходных кодов схем процессов.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Генератор схем процессов.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.SaveSchemaSources(Terrasoft.Core.Entities.EntityCollection)">
            <summary>
            Сохраняет исходные коды из переданной коллекции.
            </summary>
            <param name="sources">Коллекция исходных кодов, которые нужно сохранить.</param>
            <returns>
            <c>true</c>, если все исходные коды из коллекции <paramref name="sources"/> сохранены успешно; 
            <c>false</c> - если хотя бы один элемент коллекции не был сохранен.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.GetSchemaSources(System.Guid,System.Guid,Terrasoft.Core.UserConnection,System.String@)">
            <summary>
            Получение исходных кодов схемы с заданным идентификатором.
            </summary>
            <param name="uid">Идентификатор схемы, исходные коды которой нужно получить.</param>
            <param name="schemaInSolutionUId">Идентификатор записи в таблице SysSchemaInSolution.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="errorMessage">Сообщение об ошибке при получении исходных кодов схемы.</param>
            <returns>Коллекция объектов с исходными кодами схемы с идентификатором <paramref name="uid"/>. 
            Если при получении исходных кодов произошла ошибка, будет возвращен <c>null</c>, а в 
            параметре <paramref name="errorMessage"/> будет возвращено сообщение об ошибке.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.InitializeItem(System.Guid)">
            <summary>
            Выполняет инициализацию элемента менеджера с заданным идентификатором.
            </summary>
            <param name="itemUId">Идентификатор элемента менеджера, который нужно проинициализировать.</param>
            <returns><c>true</c>, если элемент менеджера с идентификатором <paramref name="itemUId"/> 
            проинициализирован успешно; иначе - <c>false</c>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">Если в качестве параметра <paramref name="itemUId"/> передано 
            пустое значение.</exception>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.FindDesignItem(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Осуществляет поиск редактируемого элемента менеджера с заданным идентификатором.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="uid">Идентификатор искомого элемента.</param>
            <returns>Редактируемый элемент с идентификатором <paramref name="uid"/> либо 
            <c>null</c>, если такой элемент не найден.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.GetDesignItem(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Возвращает редактируемый элемент с заданным идентификатором. Если такой элемент не найден, генерируется 
            исключение. 
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="uid">Идентификатор возвращаемого элемента.</param>
            <returns>Редактируемый элемента с идентификатором <paramref name="uid"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.SaveDesignedItemInSessionData(Terrasoft.Core.UserConnection,Terrasoft.Core.MetaSchema,System.Guid)">
            <summary>
            Сериализует и сохраняет в данные сессии экземпляр редактируемого элемента с заданным идентификатором.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="designedItem">Редактируемый элемент менеджера.
            </param>
            <param name="designedItemId">Идентификатор сохраняемого редактируемого элемента.</param>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.SaveDesignedItemFolderIdInSessionData(Terrasoft.Core.UserConnection,System.Guid,System.Guid)">
            <summary>
            Сохраняет в данные сессии переданный идентификатор каталога, в котором хранится редактируемая схема 
            элемента с заданным идентификатором.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="designedItemId">Идентификатор редактируемого элемента.
            </param>
            <param name="designedItemFolderId">Идентификатор каталога, котором хранится редактируемая схема элемента с
            идентификатором <paramref name="designedItemId"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.ActualizeItemDescriptor(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Актуализирует дескриптор элемента менеджера схем.
            </summary>
            <param name="item">Элемент менеджера, в котором необходимо актуализировать дескриптор.</param>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManager.GetHash">
            <summary>
            Returns the hash for this item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManager.AppConnection">
            <summary>
            System connection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManager.ItemName">
            <summary>
            Name of manager item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManager.ItemCaption">
            <summary>
            Caption of manager item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManager.ResourceManagerName">
            <summary>
            Name of resource manager.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManager.CompileDependencies">
            <summary>
            List of dependent managers.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.ISchemaManager.ItemAdding">
            <summary>
            Occurs before adding the item to manager.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.ISchemaManager.ItemAdded">
            <summary>
            Occurs after adding the item to manager.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.ISchemaManager.ItemRemoving">
            <summary>
            Occurs before removing the item from manager.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.ISchemaManager.ItemRemoved">
            <summary>
            Occurs after removing the item from manager.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.ISchemaManager.ItemSaving">
            <summary>
            Occurs before saving the item.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.ISchemaManager.ItemSaved">
            <summary>
            Occurs after saving the item.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.SchemaManager`1"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.OnItemAdding(Terrasoft.Core.SchemaManagerItemBeforeAddEventArgs)">
            <summary>
            Обработчик события, возникающего перед добавлением новой схемы.
            </summary>
            <param name="e">Агрументы события, возникающего перед добавлением новой схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.OnItemAdded(Terrasoft.Core.SchemaManagerItemAfterAddEventArgs)">
            <summary>
            Обработчик события, возникающего после добавления новой схемы.
            </summary>
            <param name="e">Аргументы события, возникающего после добавления новой схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.OnItemRemoving(Terrasoft.Core.SchemaManagerItemBeforeRemoveEventArgs)">
            <summary>
            Обработчик события, возникающего перед удалением схемы.
            </summary>
            <param name="e">Аргументы события, возникающего перед удалением схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.OnItemRemoved(Terrasoft.Core.SchemaManagerItemAfterRemoveEventArgs)">
            <summary>
            Обработчик события, возникающего после удаления схемы.
            </summary>
            <param name="e">Агрументы события, возникающего после удаления схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.OnItemSaving(Terrasoft.Core.SchemaManagerItemBeforeSaveEventArgs)">
            <summary>
            Обработчик события, возникающего перед сохранением схемы.
            </summary>
            <param name="e">Аргументы события, возникающего перед сохранением схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.OnItemSaved(Terrasoft.Core.SchemaManagerItemAfterSaveEventArgs)">
            <summary>
            Обработчик события, возникающего после сохранения схемы.
            </summary>
            <param name="e">Аргументы события, возникающего после сохранения схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.SchemaWithSameNameAndManagerNameExistsInWorkspace(Terrasoft.Core.UserConnection,System.String,System.String,System.Guid)">
            <summary>
            Checks if schema with same name and manager name already exists in workspace.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="schemaName">Schema name.</param>
            <param name="managerName">Manager name.</param>
            <param name="schemaUId">Schema UId.</param>
            <returns>Returns true if such schema exists. Otherwise returns false.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.InitializeDefSchema">
            <summary>
            Initializes the default schema.
            </summary>
            <returns>The default schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.SaveMetaDataDifferencePackage(`0,Terrasoft.Core.Configuration.SysSchema,System.String,Terrasoft.Core.UserConnection,System.Boolean)">
            <summary>
            Saves the metadata difference package.
            </summary>
            <param name="schema">The schema.</param>
            <param name="sysSchema">The schema entity.</param>
            <param name="schemaMetaData">The schema metadata.</param>
            <param name="userConnection">The user connection.</param>
            <param name="isNew"><c>true</c> if is a new schema, otherwise - <c>false</c>.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.InternalCreateSchema(System.String,`0,Terrasoft.Core.UserConnection,System.Guid,System.Boolean)">
            <summary>
            Internally creates new manager item.
            </summary>
            <param name="name">The item name.</param>
            <param name="baseSchema">The base schema.</param>
            <param name="userConnection">The user connection.</param>
            <param name="uid">The unique identifier.</param>
            <param name="fromMetaData"><c>true</c> if can use metadata, otherwise - <e>false</e>.</param>
            <returns>The new manager item.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetParentSchemas(System.Guid,Terrasoft.Core.UserConnection,System.Boolean,System.Guid,System.Nullable{System.Guid})">
            <summary>
            Gets the parent schemas for the given one.
            </summary>
            <param name="schemaUId">The schema unique identifier.</param>
            <param name="userConnection">The user connection.</param>
            <param name="usePackageHierarchy"><c>true</c> if package hierarchy should be used. Otherwise - <c>false</c>.
            </param>
            <param name="sysPackageId">The system package identifier.</param>
            <param name="workspaceId">The workspace identifier.</param>
            <returns>The collection of schemas, which are parent for the given one.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.CreateSchemaInstance(Terrasoft.Core.ISchemaManagerItem,System.Reflection.Assembly)">
            <summary>
            Creates the schema instance.
            </summary>
            <param name="schemaManagerItem">The schema manager item.</param>
            <param name="assembly">Assembly contains instance type.</param>
            <returns>Created instance.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetSchemaSources(`0,System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Gets the schema sources.
            </summary>
            <param name="schema">The schema.</param>
            <param name="schemaId">The schema identifier.</param>
            <param name="userConnection">The user connection.</param>
            <returns>The schema sources.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetParentSchemaLocalizableValues(`0)">
            <summary>
            Gets the parent schema localizable values.
            </summary>
            <param name="schema">The schema.</param>
            <returns>The localizable data.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.InitializeSchemaUserProperties(`0,Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Initializes schema user properties from manager item.
            </summary>
            <param name="schemaManagerItemSchema">Schema.</param>
            <param name="schemaManagerItem">Manager item.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetFullItemHierarchy(System.Guid)">
            <summary>
            Возвращает иерархию элементов менеджера схем по заданому уникальному идентификатору.
            </summary>
            <param name="realUId">Уникальный идентификатор элемента, от которого строится иерархия.</param>
            <returns>Иерархия элементов менеджера схем по заданому уникальному идентификатору.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.CreateRuntimeSchemaFromMetaData(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Создает схему из метаданных с учетом полной иерархии элементов, включая расширения схемы в параллельных 
            пакетах.
            </summary>
            <param name="schemaUId">Идентификатор схемы.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Схема с учетом полной иерархии элементов, включая параллельные ветки.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">
            Исключение генерируется, если <paramref name="schemaUId"/> - идентификатор замещающей схемы.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.FindInstanceFromMetaData(System.Guid)">
            <summary>
            Осуществляет поиск экземпляра схемы с заданным уникальным идентификатором на основании метаданных.
            </summary>
            <param name="schemaUId">Идентификатор схемы.</param>
            <returns>Экземпляр элемента менеджера с уникальным идентификатором <paramref name="schemaUId"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetInstanceFromMetaData(System.Guid)">
            <summary>
            Возвращает экземпляр схемы с заданным уникальным идентификатором на основании метаданных.
            </summary>
            <param name="schemaUId">Уникальный идентификатор экземпляра элемента менеджера.</param>
            <returns>Экземпляр элемента менеджера с уникальным идентификатором <paramref name="schemaUId"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.ActualizeSchemaMetaData(Terrasoft.Core.Entities.EntityCollection)">
            <summary>
            Actualizes the schema meta data.
            </summary>
            <param name="schemas">The schemas.</param>
            <returns>The actualized metadata.</returns>
            <exception cref="T:Terrasoft.Core.InstanceActivationException">Error, while parsing the schema metadata.</exception>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.CheckOperationUserRights(Terrasoft.Core.UserConnection)">
            <summary>
            Checks whether the current user can modify the manager elements.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns><c>True</c> if the user can modify the manager elements, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.RemoveSchemaFromMetaDataCache(Terrasoft.Core.ISchemaManagerItem{`0})">
            <summary>
            Removes the schema from meta data cache.
            </summary>
            <param name="designItem">The design item.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetGenerator(Terrasoft.Core.UserConnection)">
            <summary>
            Returns the source code generator for the manager schemas.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns>The source code generator.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetItems">
            <summary>
            Returns elements of current manager elements.
            </summary>
            <returns>Items of current manager.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.Clear">
            <summary>
            Removes all items from manager items collection.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.RemoveItemByUId(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Удаляет элемент с заданным идентификатором из текущего менеджера схем.
            </summary>
            <param name="uid">Идентификатор удаляемого элемента.</param>
            <param name="userConnection">Пользовательское подключение.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetProcessSchemaGenerator(Terrasoft.Core.UserConnection)">
            <summary>
            Возвращает экземпляр генератора схем процессов.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Генератор схем процессов.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.Initialize(Terrasoft.Core.SchemaManagerProvider,Terrasoft.Core.SchemaManagerProviderConfigurationElement)">
            <summary>
            Выполняет инициализацию менеджера схем, используя заданный провайдер и информацию конфигурационного файла.
            </summary>
            <param name="provider">Провайдер менеджера схем.</param>
            <param name="configuration">Информация конфигурационного файла.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetMetaDataSerializer(Terrasoft.Core.UserConnection)">
            <summary>
            Возвращает сериализатор схем менеджера.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Сериализатор схем менеджера.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.ActualizeItemDescriptor(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Актуализирует дескриптор элемента менеджера схем.
            </summary>
            <param name="item">Элемент менеджера, в котором необходимо актуализировать дескриптор.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.DesignItem(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Возвращает экземпляр элемента времени разработки.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="uid">Идентификатор схемы.</param>
            <returns>Экземпляр элемента времени разработки.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetItemFromMetaData(System.Guid,Terrasoft.Core.UserConnection,System.Nullable{System.Guid})">
            <summary>
            Возвращает элемент менеджера, содержащий схему с заданным идентификатором, используя заданное 
            пользовательское подключение.
            </summary>
            <param name="schemaUId">Идентификатор схемы.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="workspaceId">Уникальный идентификатор рабочего пространства.</param>
            <returns>Элемент менеджера, содержащий схему с идентификатором <paramref name="schemaUId"/> для
            пользовательского подключения <paramref name="userConnection"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.InitializeItem(System.Guid)">
            <summary>
            Выполняет инициализацию элемента менеджера с заданным идентификатором.
            </summary>
            <param name="itemUId">Идентификатор элемента менеджера, который нужно проинициализировать.</param>
            <returns><c>true</c>, если элемент менеджера с идентификатором <paramref name="itemUId"/> 
            проинициализирован успешно; иначе - <c>false</c>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">Если в качестве параметра <paramref name="itemUId"/> передано 
            пустое значение.</exception>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.InitializeSchema(Terrasoft.Core.ISchemaManagerItem,System.Reflection.Assembly)">
            <summary>
            Создает экземпляр схемы по типу, указанному в переданном элементе менеджера. Если тип схемы элемента 
            менеджера не найден в сборке, генерируется исключение.
            </summary>
            <param name="schemaManagerItem">Элемент менеджера, в котором должна быть проинициализирована схема.</param>
            <param name="assembly">Сборка, которая содержит тип создаваемой схемы.</param>
            <returns>Пронициализированный экземпляр схемы.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.InitializeSafeSchema(Terrasoft.Core.ISchemaManagerItem,System.Reflection.Assembly)">
            <summary>
            Создает экземпляр схемы по типу, указанному в переданном элементе менеджера. Если тип схемы не найден в 
            сборке, возвращается <c>null</c>.
            </summary>
            <param name="schemaManagerItem">Элемент менеджера, в котором должна быть проинициализирована схема.</param>
            <param name="assembly">Сборка, которая содержит тип создаваемой схемы.</param>
            <returns>Пронициализированный экземпляр схемы либо <c>null</c>, если 
            тип схемы <paramref name="schemaManagerItem"/> не найден в сборке <paramref name="assembly"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.FillSourceCollection(System.Collections.ObjectModel.Collection{Terrasoft.Core.ISchemaManagerItem},Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Loads code of schema to target collection.
            </summary>
            <param name="compileCollection">Collection, to which loads code of schema.</param>
            <param name="item">Item of manager, which contains schema with code.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.FillSourceCollection(System.Collections.ObjectModel.Collection{Terrasoft.Core.ISchemaManagerItem},System.Guid)">
            <summary>
            Загружает в переданную коллекцию исходные коды заданной схемы.
            </summary>
            <param name="compileCollection">Коллекция, в которую загружаются исходные коды схемы.</param>
            <param name="uid">Идентификатор схемы, исходные коды которой загружаются.</param>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.AddCoreSchema(System.Guid,System.String)">
            <summary>
            Добавляет в менеджер схем системную схему с заданными идентификатором и именем.
            </summary>
            <param name="uid">Идентификатор добавляемой системной схемы.</param>
            <param name="name">Имя добавляемой системной схемы.</param>
            <returns>Элемент менеджера, содержащий добавленную системную схему.</returns>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.AddCoreSchema(System.Guid,System.String,System.Guid,System.Guid[])">
            <summary>
            Добавляет в менеджер схем системную схему с заданными идентификатором и именем с указанием родительской 
            схемы и списка схем, на которые ссылается добавляемая системная схема.
            </summary>
            <param name="uid">Идентификатор добавляемой системной схемы.</param>
            <param name="name">Имя добавляемой системной схемы.</param>
            <param name="parentSchemaUId">Идентификатор родительской схемы.</param>
            <param name="referenceSchemaUIds">Список идентификаторов схем, на которые ссылается добавляемая схема.
            </param>
            <returns>Элемент менеджера, содержащий добавленную системную схему.</returns>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.AddSchema(System.Guid,System.String,Terrasoft.Common.LocalizableString,Terrasoft.Common.LocalizableString,System.Guid)">
            <summary>
            Добавляет схему с заданными параметрами в менеджер схем.
            </summary>
            <param name="uid">Идентификатор схемы.</param>
            <param name="name">Имя схемы.</param>
            <param name="caption">Заголовок схемы.</param>
            <param name="description">Описание схемы.</param>
            <param name="parentUId">Идентификатор родительской схемы.</param>
            <returns>Элемент менеджера, содержащий добавленную схему с заданными параметрами.</returns>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.RemoveSchema(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Удаляет из базы данных схему с заданным идентификатором.
            </summary>
            <param name="id">Идентификатор удаляемой схемы.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Идентификатор записи в SysSchemaInSolution, в которой схема была удалена.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если менеджер не содержит схемы с идентификатором
            <paramref name="id"/>.</exception>
            <exception cref="T:System.Security.SecurityException">Если у пользователя недостаточно прав для удаления объекта.</exception>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.Terrasoft#Core#ISchemaManager#CreateSchema(System.String,Terrasoft.Core.ISchemaManagerItem,Terrasoft.Core.UserConnection,System.Boolean)">
            <summary>
            Создает новую схему с заданными именем и родительской схемой с указанием признака 
            создания схемы из метаданных.
            </summary>
            <param name="name">Имя схемы.</param>
            <param name="baseSchema">Элемент менеджера, содержащий базовую схему.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="fromMetaData">Признак создания схемы из метаданных.</param>
            <returns>Элемент менеджера, содержащий созданную схему.</returns>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.Terrasoft#Core#ISchemaManager#CreateSchema(System.String,Terrasoft.Core.ISchemaManagerItem,Terrasoft.Core.UserConnection,System.Guid,System.Boolean)">
            <summary>
            Создает новую схему с заданными именем, родительской схемой и указанием признака добавления схемы в список 
            редактируемых схем.
            </summary>
            <param name="name">Имя схемы.</param>
            <param name="baseSchema">Элемент, содержащий родительскую схему.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="uid">Идентификатор схемы.</param>
            <param name="addToDesignItems">Признак добавления схемы к списку редактируемых схем.</param>
            <returns>Элемент менеджера, содержащий созданную схему.</returns>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.CreateSchema(System.String,`0,Terrasoft.Core.UserConnection,System.Guid,System.Boolean)">
            <summary>
            Создает новую схему с заданными именем и родительской схемой с указанием признака добавления схемы с список 
            редактируемых схем.
            </summary>
            <param name="name">Имя схемы.</param>
            <param name="baseSchema">Экземпляр родительской схемы.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="uid">Идентификатор схемы.</param>
            <param name="addToDesignItems">Признак добавления схемы к списку редактируемых схем.</param>
            <returns>Элемент менеджера, содержащий созданную схему.</returns>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.CreateSchema(Terrasoft.Core.UserConnection,System.Guid,System.Boolean)">
            <summary>
            Создает новую схему с заданным идентификатором с указанием признака добавления схемы с список редактируемых 
            схем. 
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="uid">Идентификатор схемы.</param>
            <param name="addToDesignItems">Признак добавления схемы в список редактируемых схем.</param>
            <returns>Элемент менеджера, содержащий созданную схему.</returns>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.CreateSchema(Terrasoft.Core.UserConnection)">
            <summary>
            Создает новую схему.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Элемент менеджера, содержащий созданную схему.</returns>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.SaveSchema(System.Guid,System.Boolean,Terrasoft.Core.UserConnection,System.Boolean,System.Boolean)">
            <summary>
            Saves schema.
            </summary>
            <param name="uid">Specified designed schema UId.</param>
            <param name="removeDesignItem">Determines if the schema should be deleted from designed schemas
            collection in manager after save.</param>
            <param name="userConnection">Specified instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="generateBundles">Determines if schema bundles should be generated after save.</param>
            <param name="lockSchemaInSourceControlStorage">Determines if schema bundles should be generated after save.
            </param>
            <returns><c>true</c> if schema is successfully saved; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.Security.SecurityException">If user have no rights to modify schema.</exception>
            <remarks>The method is overloaded.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.SaveSchema(Terrasoft.Core.ISchemaManagerItem{`0},Terrasoft.Core.UserConnection,System.Boolean,System.Boolean)">
            <summary>
            Saves schema. 
            </summary>
            <param name="designItem">Specified instance of
            <see cref="T:Terrasoft.Core.ISchemaManagerItem`1"/>.</param>
            <param name="userConnection">Specified instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="generateBundles">Determines if schema bundles should be generated after save.</param>
            <param name="lockSchemaInSourceControlStorage">Determines if schema bundles should be generated after save.
            </param>
            <returns><c>true</c> if schema is successfully saved; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.Security.SecurityException">If user have no rights to modify schema.</exception>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.SaveSchema(System.Guid,Terrasoft.Core.UserConnection,System.Boolean,System.Boolean)">
            <summary>
            Saves schema.
            </summary>
            <param name="uid">Specified designed schema UId.</param>
            <param name="userConnection">Specified instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="generateBundles">Determines if schema bundles should be generated after save.</param>
            <param name="lockSchemaInSourceControlStorage">Determines if schema bundles should be generated after save.
            </param>
            <returns><c>true</c> if schema is successfully saved; otherwise, <c>false</c>.</returns>
            <remarks>
            The method is overloaded.
            The method calls method <see cref="M:Terrasoft.Core.SchemaManager`1.SaveSchema(System.Guid,System.Boolean,Terrasoft.Core.UserConnection,System.Boolean,System.Boolean)"/>, with second
            argument value - <c>false</c>.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.SaveSchemaInCustomPackage(System.Guid,System.Boolean,Terrasoft.Core.UserConnection,System.Boolean)">
            <summary>
            Saves schema in custom package.
            </summary>
            <param name="uid">Specified designed schema UId.</param>
            <param name="removeDesignItem">Determines if the schema should be deleted from designed schemas collection
            in manager after save.</param>
            <param name="userConnection">Specified instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="generateBundles">Determines if schema bundles should be generated after save.</param>
            <returns><c>true</c> if schema is successfully saved; otherwise, <c>false</c>.</returns>
            <remarks>The method is overloaded.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.SaveSchemaInCustomPackage(System.Guid,Terrasoft.Core.UserConnection,System.Boolean)">
            <summary>
            Saves schema in custom package.
            </summary>
            <param name="uid">Specified designed schema UId.</param>
            <param name="userConnection">Specified instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="generateBundles">Determines if schema bundles should be generated after save.</param>
            <returns><c>true</c> if schema is successfully saved; otherwise, <c>false</c>.</returns>
            <remarks>
            The method is overloaded.
            The method calls method <see cref="M:Terrasoft.Core.SchemaManager`1.SaveSchemaInCustomPackage(System.Guid,System.Boolean,Terrasoft.Core.UserConnection,System.Boolean)"/>,
            with second argument value - <c>false</c>.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetSchemaSource(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Возвращает исходный код схемы с заданным идентификатором.
            </summary>
            <param name="schemaUId">Идентификатор схемы, исходный код которой нужно возвратить.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Поток, содержащий исходный код схемы с идентификатором <paramref name="schemaUId"/> либо 
            <c>null</c>, если исходный код получить не удалось.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetSchemaMetaDataDifferencePackage(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Возвращает пакет разницы между схемой с заданным идентификатором и ее родительской схемой.
            </summary>
            <param name="schemaUId">Идентификатор схемы, пакет разницы для которой нужно возвратить.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Поток, содержащий пакет разницы между базовой схемой и схемой с идентификатором 
            <paramref name="schemaUId"/> либо <c>null</c>, если пакет разницы сформировать не удалось.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetSchemaMetaData(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Gets metadata with target identifier.
            </summary>
            <param name="schemaUId">Identifier of schema.</param>
            <param name="userConnection">Users connection.</param>
            <returns>Stream with metadata of schema with target id <paramref name="schemaUId"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetDefSchemaUId">
            <summary>
            Возвращает идентификатор схемы, от которой наследуются все базовые схемы менеджера схем.
            </summary>
            <returns>Идентификатор схемы, от которой наследуются все базовые схемы менеджера схем.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GenerateItemUniqueName(System.String)">
            <summary>
            Генерирует уникальное имя элемента менеджера с использованием заданного префикса.
            </summary>
            <param name="prefix">Префикс.</param>
            <returns>Уникальное имя элемента менеджера с префиксом <paramref name="prefix"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GenerateItemUniqueCaption(System.String)">
            <summary>
            Генерирует уникальный заголовок элемента менеджера с использованием заданного префикса.
            </summary>
            <param name="prefix">Префикс.</param>
            <returns>Уникальный заголовок элемента менеджера с префиксом <paramref name="prefix"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetReadableSchemaMetaData(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Получает метаданные схемы с заданным идентификатором в формате, удобном для чтения.
            </summary>
            <param name="schemaUId">Идентификатор схемы, метаданные которой нужно получить.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Поток, содержащий метаданные схемы с идентификатором <paramref name="schemaUId"/> в формате, 
            удобном для чтения.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetReadableSchemaMetaData(Terrasoft.Core.MetaSchema,Terrasoft.Core.UserConnection,System.Boolean)">
            <summary>
            Получает метаданные заданной схемы в формате, удобном для чтения.
            </summary>
            <param name="schema">Схема, метаданные которой нужно получить.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="toLowerCamelCase">Признак генерации имен свойств в стиле LowerCamelCase.</param>
            <returns>Поток, содержащий метаданные схемы <paramref name="schema"/> в формате, удобном для чтения.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetReadableSchemaMetaData(Terrasoft.Core.MetaSchema,Terrasoft.Core.UserConnection)">
            <summary>
            Получает метаданные заданной схемы в формате, удобном для чтения.
            </summary>
            <param name="schema">Схема, метаданные которой нужно получить.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Поток, содержащий метаданные схемы <paramref name="schema"/> в формате, удобном для чтения.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.SaveSchemaSources(Terrasoft.Core.Entities.EntityCollection)">
            <summary>
            Сохраняет исходные коды из переданной коллекции.
            </summary>
            <param name="sources">Коллекция исходных кодов, которые нужно сохранить.</param>
            <returns>
            <c>true</c>, если все исходные коды из коллекции <paramref name="sources"/> сохранены успешно; 
            <c>false</c> - если хотя бы один элемент коллекции не был сохранен.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetSchemaSources(System.Guid,System.Guid,Terrasoft.Core.UserConnection,System.String@)">
            <summary>
            Получение коллекции объектов, содержащих исходные коды схемы с заданным идентификатором.
            </summary>
            <param name="schemaUId">Идентификатор схемы, исходные коды которой нужно получить.</param>
            <param name="schemaId">Идентификатор записи в таблице SysSchema.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="errorMessage">Сообщение об ошибке при получении исходных кодов схемы.</param>
            <returns>Коллекция объектов с исходными кодами схемы с идентификатором <paramref name="schemaUId"/>. 
            Если при получении исходных кодов произошла ошибка, будет возвращен <c>null</c>, а в 
            параметре <paramref name="errorMessage"/> будет возвращено сообщение об ошибке.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.DropInstances">
            <summary>
            Удаляет экземпляры всех схем менеджера.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.FindDesignItem(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Осуществляет поиск редактируемого элемента с заданным идентификатором.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="uid">Идентификатор искомой схемы.</param>
            <returns>Редактируемый элемент с идентификатором <paramref name="uid"/> либо 
            <c>null</c>, если такая схема не найдена.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetDesignItem(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Возвращает редактируемый элемент с заданным идентификатором. Если такой элемент не найден, генерируется 
            исключение. 
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="uid">Идентификатор возвращаемого элемента.</param>
            <returns>Редактируемый элемент с идентификатором <paramref name="uid"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если редактируемый элемент с идентификатором <paramref name="uid"/> 
            не найдена.</exception>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetSchemaDesignItem(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Возвращает типизированный редактируемый элемент с заданным идентификатором.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="uid">Идентификатор схемы.</param>
            <returns>Типизированный редактируемый элемент с идентификатором 
            <paramref name="uid"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.FindDesignInstance(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Осуществляет поиск экземпляра редактируемой схемы с заданным идентификатором.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="uid">Идентификатор экземпляра редактируемой схемы.</param>
            <returns>Экземпляр редактируемой схемы с идентификатором <paramref name="uid"/>. Если экземпляр не найден, 
            возвращается <c>null</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetDesignInstance(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Возвращает экземпляр редактируемой схемы с заданным идентификатором. Если такая схема не найдена, 
            генерируется исключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="uid">Идентификатор экземпляра редактируемой схемы.</param>
            <returns>Экземпляр редактируемой схемы с идентификатором <paramref name="uid"/>.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если экземпляр редактируемой схемы с идентификатором
            <paramref name="uid"/> не найден у текущего менеджера схем.</exception>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.SaveDesignedItemInSessionData(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Сериализует и сохраняет в данные сессии экземпляр заданной редактируемой схемы.
            </summary>
            <param name="designItem">Элемент менеджера, содержащий редактируемую схему, экземпляр которой сохраняется в 
            данных сессии.</param>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.SaveDesignedItemInSessionData(Terrasoft.Core.ISchemaManagerItem{`0})">
            <summary>
            Сериализует и сохраняет в данные сессии экземпляр заданной типизированной редактируемой схемы.
            </summary>
            <param name="designItem">Элемент менеджера, содержащий типизированную редактируемую схему, экземпляр 
            которой сохраняется в данных сессии.</param>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.SaveDesignedItemInSessionData(Terrasoft.Core.UserConnection,Terrasoft.Core.MetaSchema,System.Guid)">
            <summary>
            Сериализует и сохраняет в данные сессии экземпляр редактируемой схемы с заданным идентификатором.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="designedItem">Экземпляр редактируемого элемента менеджера.</param>
            <param name="designedItemId">Идентификатор сохраняемой редактируемой схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.SaveDesignedItemFolderIdInSessionData(Terrasoft.Core.UserConnection,System.Guid,System.Guid)">
            <summary>
            Сохраняет в данные сессии переданный идентификатор каталога, в котором хранится редактируемая схема 
            элемента с заданным идентификатором.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="designedItemId">Идентификатор редактируемого элемента.
            </param>
            <param name="designedItemFolderId">Идентификатор каталога, в котором хранится редактируемая схема элемента 
            с идентификатором <paramref name="designedItemId"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetDesignedItemFolderIdFromSessionData(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Возвращает из данных сессии идентификатор каталога, в котором хранится редактируемая схема элемента с 
            заданным идентификатором.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="designedItemId">Идентификатор элемента, который содержит хранимую редактируемую схему.
            </param>
            <returns>Идентификатор каталога, в котором хранится редактируемая схема <paramref name="designedItemId"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.RemoveDesignedItemFromSessionData(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Удаляет редактируемый элемент с заданным идентификатором из данных сессии. 
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="uid">Идентификатор редактируемого элемента.</param>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.RemoveDesignedItemFromSessionData(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Удаляет заданный редактируемый элемент из данных сессии. 
            </summary>
            <param name="designItem">Редактируемый элемент менеджера, который должен быть удален.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManager`1.GetHash">
            <summary>
            Returns the hash for this item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.ItemTypeName">
            <summary>
            Gets the name of the item type.
            </summary>
            <value>
            The name of the item type.
            </value>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.ItemCaption">
            <summary>
            The caption for the schema manager item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.ResourceManagerName">
            <summary>
            The name of the resource manager.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.SchemaChanger">
            <summary>
            Returns the instance of <see cref="T:Terrasoft.Core.DesignMode.ISchemaChanger"/> implementation.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.ItemName">
            <summary>
            Имя элемента менеджера схем.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.SchemaManagerProvider">
            <summary>
            Провайдер менеджера схем.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.AppConnection">
            <summary>
            Системное соединение.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.Namespace">
            <summary>
            Пространство имен.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.ProcessSchemaManager">
            <summary>
            Менеджер схем процессов.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.DefSchema">
            <summary>
            Базовая схема.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.SupportsProfiles">
            <summary>
            Определяет, поддерживает ли менеджер схем работу с профилями.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.SchemaManager`1.ItemAdding">
            <summary>
            Событие, возникающее перед добавлением новой схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.IsInItemAdding">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.SchemaManager`1.ItemAdding"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.SchemaManager`1.ItemAdded">
            <summary>
            Событие, возникающее после добавления новой схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.IsInItemAdded">
            <summary>
            Определяет, инициировано ли событие <see cref="E:Terrasoft.Core.SchemaManager`1.ItemAdded"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.SchemaManager`1.ItemRemoving">
            <summary>
            Событие, возникающее перед удалением схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.IsInItemRemoving">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.SchemaManager`1.ItemRemoving"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.SchemaManager`1.ItemRemoved">
            <summary>
            Событие, возникающее после удаления схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.IsInItemRemoved">
            <summary>
            Определяет, инициировано ли событие <see cref="E:Terrasoft.Core.SchemaManager`1.ItemRemoved"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.SchemaManager`1.ItemSaving">
            <summary>
            Событие, возникающее перед сохранением схемы. 
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.IsInItemSaving">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.SchemaManager`1.ItemSaving"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.SchemaManager`1.ItemSaved">
            <summary>
            Событие, возникающее после сохранения схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManager`1.IsInItemSaved">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.SchemaManager`1.ItemSaved"/>.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.IBaseProcessSchemaManager">
            <summary>
            The interface for the process schema manager base class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IBaseProcessSchemaManager.GetIsProcessEnabled(System.Guid)">
            <summary>
            Gets the is process enabled.
            </summary>
            <param name="schemaId">The process schema identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IBaseProcessSchemaManager.GetIsActiveVersion(System.Guid)">
            <summary>
            Gets the is active version of the process schema.
            </summary>
            <param name="schemaId">The process schema identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IBaseProcessSchemaManager.SetIsDeliveredPropertyValue(System.Guid,System.Boolean)">
            <summary>
            Sets is delivered property value.
            </summary>
            <param name="schemaUId">Schema UId.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IBaseProcessSchemaManager.GetAllVersionItems(System.Guid)">
            <summary>
            Gets all version items by schema UId.
            </summary>
            <param name="schemaUId">The schema UId.</param>
            <returns>The list of schema items.</returns>
        </member>
        <member name="F:Terrasoft.Core.Process.BaseProcessSchemaManager`1.VersionPropertyName">
            <summary>
            The version property name
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.CreateInterpretationValidator(Terrasoft.Core.UserConnection)">
            <summary>
            Gets the interpretation validator for process schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns>Interpretation validator instance.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.SaveMetaDataDifferencePackage(`0,Terrasoft.Core.Configuration.SysSchema,System.String,Terrasoft.Core.UserConnection,System.Boolean)">
            <summary>
            Saves the meta data difference package.
            </summary>
            <param name="schema">The schema.</param>
            <param name="sysSchema">The schema entity.</param>
            <param name="schemaMetaData">The schema metadata.</param>
            <param name="userConnection">The user connection.</param>
            <param name="isNew"><c>true</c> if is a new schema, otherwise - <c>false</c>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetSchemaSources(`0,System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Gets the schema sources.
            </summary>
            <param name="schema">The schema.</param>
            <param name="schemaId">The schema identifier.</param>
            <param name="connection">The connection.</param>
            <returns>The schema sources.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetParentSchemas(System.Guid,Terrasoft.Core.UserConnection,System.Boolean,System.Guid,System.Nullable{System.Guid})">
            <summary>
            Gets the parent schemas for the given one.
            </summary>
            <param name="schemaUId">The schema unique identifier.</param>
            <param name="userConnection">The user connection.</param>
            <param name="usePackageHierarchy"><c>true</c> if package hierarchy should be used, otherwise - <c>false</c>.
            </param>
            <param name="sysPackageId">The system package identifier.</param>
            <param name="workspaceId">The workspace identifier.</param>
            <returns>
            The collection of schemas, which are parent for the given one.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetParentSchemaLocalizableValues(`0)">
            <summary>
            Gets the parent schema localizable values.
            </summary>
            <param name="schema">The schema.</param>
            <returns>
            The localizable data.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.ActualizeSchemaInfo(`0,System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Actualizes the flow data for the given schema.
            </summary>
            <param name="schema">The schema.</param>
            <param name="schemaId">The schema identifier.</param>
            <param name="connection">The user connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.SaveFlowSchema(`0,Terrasoft.Core.UserConnection)">
            <summary>
            Saves the flow schema for the given process schema.
            </summary>
            <param name="schema">The process schema.</param>
            <param name="connection">The user connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetProcessStatisticInfoQuery(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Gets the process statistic information query.
            </summary>
            <param name="sysProcessLogId">The system process log record identifier.</param>
            <param name="userConnection">The user connection.</param>
            <returns>The statistic information query.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.CreateClonedManagerItem(Terrasoft.Core.UserConnection,Terrasoft.Core.ISchemaManagerItem{`0},System.Guid,System.Guid,System.String,System.String,System.String)">
            <summary>
            Creates cloned manager item.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="schemaManagerItem">Schema manager item.</param>
            <param name="parentSchemaUId">Parent schema unique identifier.</param>
            <param name="packageUId">Package unique identifier.</param>
            <param name="name">Item name.</param>
            <param name="caption">Item caption.</param>
            <param name="description">Item description.</param>
            <returns>Cloned instance of the manager item.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetSchemaMetaData(Terrasoft.Core.UserConnection,`0)">
            <summary>
            Extracts schema meta data.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="schema">Schema.</param>
            <returns>Byte array, which represent schema meta data.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.AssignSysSchemaProperties(Terrasoft.Core.Configuration.SysSchema,Terrasoft.Core.ISchemaManagerItem{`0},System.Guid)">
            <summary>
            Assignes properties of the SysSchema object.
            </summary>
            <param name="sysSchema">Instance of the SysSchema.</param>
            <param name="managerItem">Manager item.</param>
            <param name="packageId">Package identifier.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.SaveSysSchemaResources(Terrasoft.Core.UserConnection,`0,Terrasoft.Core.ISchemaManagerItem{`0})">
            <summary>
            Saves resources of the schema.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="schema">Instance of the schema.</param>
            <param name="managerItem">Manager item.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.CreateClonedSchema(Terrasoft.Core.UserConnection,`0,Terrasoft.Core.ISchemaManagerItem{`0})">
            <summary>
            Creates the cloned schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="schema">Instance of the schema.</param>
            <param name="managerItem">The manager item.</param>
            <returns>Cloned instance of the schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.CreateSchemaCopy(Terrasoft.Core.UserConnection,System.Guid,System.String,System.String,System.Guid)">
            <summary>
            Creates copy of the schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="sourceSchemaUId">The unique identifier of the source schema.</param>
            <param name="name">The name of the new schema.</param>
            <param name="caption">The caption of the new schema.</param>
            <param name="packageUId">The package identifier of the new schema.</param>
            <returns>The new schema instance.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetInstanceByItem(Terrasoft.Core.ISchemaManagerItem{`0})">
            <summary>
            Gets the schema by the given manager item.
            </summary>
            <param name="managerItem">The manager item.</param>
            <returns>The instance of the schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.FindItemById(System.Guid)">
            <summary>
            Searches for the element with the given identifier.
            </summary>
            <param name="id">The identifier of the element to find.</param>
            <returns>The element with the given identifier or <c>null</c> if it was not found.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetItemById(System.Guid)">
            <summary>
            Gets the element with the given identifier.
            </summary>
            <param name="id">The identifier of the element to get.</param>
            <returns>The element with the given identifier.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">The element was not found.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.Initialize(Terrasoft.Core.SchemaManagerProvider,Terrasoft.Core.SchemaManagerProviderConfigurationElement)">
            <summary>
            Performs manager initialization, using the specified schema manager provider and information from
            application configuration.
            </summary>
            <param name="provider">Schema manager provider.</param>
            <param name="configuration">Configuration information.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetItemFromMetaData(System.Guid,Terrasoft.Core.UserConnection,System.Nullable{System.Guid})">
            <summary>
            Returns item of the schema manager, using the specified identifier and user connection.
            </summary>
            <param name="schemaUId">Schema Id.</param>
            <param name="userConnection">User connection.</param>
            <param name="workspaceId">Workspace Id.</param>
            <returns>Item of the schema manager.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetMetaDataSerializer(Terrasoft.Core.UserConnection)">
            <summary>
            Gets serializer for the meta data.
            </summary>
            <param name="userConnection">User connection.</param>
            <returns>Instance that implements the <see cref="T:Terrasoft.Core.IMetaDataSerializer"/> interface.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetProcessValidationResult(`0,Terrasoft.Core.UserConnection)">
            <summary>
            Validates schema for ability to interpretation.
            </summary>
            <param name="process">Base process schema.</param>
            <param name="userConnection">User connection.</param>
            <returns>Results of analyzes for ability to interpretation.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetItemFromMetaData(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Returns item of the schema manager, using the specified identifier and user connection.
            </summary>
            <param name="schemaUId">Schema Id.</param>
            <param name="userConnection">User connection.</param>
            <returns>Item of the schema manager.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.RemoveRunningProcessDataByUId(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Removes the running process data by process schema identifier.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="processSchemaUId">The process schema identifier.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.EnableProcess(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Enables the process.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="schemaId">The process schema identifier.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.DisableProcess(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Disables the process.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="schemaId">The process schema identifier.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetIsProcessEnabled(System.Guid)">
            <summary>
            Gets the is process enabled.
            </summary>
            <param name="schemaId">The process schema identifier.</param>
            <returns><c>true</c> if schema is enabled; otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetIsActiveVersion(System.Guid)">
            <summary>
            Gets the is active version of the process schema.
            </summary>
            <param name="schemaId">The process schema identifier.</param>
            <returns><c>true</c> if schema is active version; otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetMaxProcessVersionInPackage(Terrasoft.Core.UserConnection,System.Guid,System.Guid)">
            <summary>
            Returns max version for the schema in a package.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="parentSchemaId">The parent process schema identifier.</param>
            <param name="packageUId">The package unique identifier.</param>
            <returns>The version number.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetProcessStatisticInfo(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Gets the information for the each process schema element execution count.
            </summary>
            <param name="processLogRecordId">The process log record identifier.</param>
            <param name="userConnection">The user connection.</param>
            <returns>The set of the pairs "element unique identifier" -> "execution count".</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.SetActiveVersionItem(Terrasoft.Core.ISchemaManagerItem{`0})">
            <summary>
            Sets active version item.
            </summary>
            <param name="managerItem">Manager item.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetActiveVersionItem(Terrasoft.Core.ISchemaManagerItem{`0})">
            <summary>
            Gets active version item.
            </summary>
            <param name="managerItem">Current version item.</param>
            <returns>Gets active version item.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.SetIsDeliveredPropertyValue(System.Guid,System.Boolean)">
            <summary>
            Sets is delivered property value.
            </summary>
            <param name="schemaUId">Schema UId.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaManager`1.GetAllVersionItems(System.Guid)">
            <summary>
            Gets all version items by schema UId.
            </summary>
            <param name="schemaUId">The schema UId.</param>
            <returns>The list of schema items.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessSchemaManager`1.BaseProcessSchemaSettingsHelper">
            <summary>
            Gets or sets the helper for manage process schema instance settings.
            </summary>
            <value>
            The process schema settings helper.
            </value>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaManager.CreateInterpretationValidator(Terrasoft.Core.UserConnection)">
            <summary>
            Gets the interpretation validator for process schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns>
            Interpretation validator instance.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaManager.InitializeDefSchema">
            <summary>
            Initializes the default schema.
            </summary>
            <returns>
            The default schema.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaManager.GetSchemaSources(Terrasoft.Core.Campaign.CampaignSchema,System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Returns entity collection, which contains schema sources. Since the dcm schema has no sources it will
            return an empty collection.
            </summary>
            <param name="schema">The schema.</param>
            <param name="schemaId">The schema Id.</param>
            <param name="userConnection">The user connection.</param>
            <returns>Schema sources.</returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaManager.CreateItem">
            <summary>
            Creates the item.
            </summary>
            <returns>Item instance.</returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaManager.GetActionHandler(Terrasoft.Core.UserConnection)">
            <summary>
            Returns instance of BaseCampaignActionHandler which can be overriden in configuration.
            </summary>
            <param name="userConnection">User connection.</param>
            <returns>BaseCampaignActionHandler instance.</returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaManager.CheckOperationUserRights(Terrasoft.Core.UserConnection)">
            <summary>
            Checks user rights for manage schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns>Flag that indicates if user have rights</returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaManager.GetGenerator(Terrasoft.Core.UserConnection)">
            <summary>
            Returns the source code generator for the manager schemas.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns>
            The source code generator.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaManager.DesignItem(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Returns design item instance.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="uid">Schema id.</param>
            <returns>Implementation for <see cref="T:Terrasoft.Core.ISchemaManagerItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaManager.CopySchema(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Returns copy of campaign schema.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="sourceSchemaUId">Unique identifier of source schema.</param>
            <returns>Copied campaign schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaManager.GetSchemaInstance(System.Guid)">
            <summary>
            Gets the instance of the campaign schema with given identifier.
            </summary>
            <param name="uId">Unique identifier of the campaign schema</param>
            <returns>
            Instance of the campaign schema with given identifier <paramref name="uId" />.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Campaign.CampaignSchemaManager.ProcessBeforeRemove(Terrasoft.Core.Campaign.CampaignSchema,Terrasoft.Core.UserConnection)">
            <summary>
            Process CampaignSchema when deleting event is rising using ActionHandler
            </summary>
            <param name="instance">CampaignSchema instance to delete.</param>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchemaManager.ItemTypeName">
            <summary>
            Gets the name of the item type.
            </summary>
            <value>
            The name of the item type.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchemaManager.ItemCaption">
            <summary>
            The caption for the schema manager item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignSchemaManager.ResourceManagerName">
            <summary>
            The name of the resource manager.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Campaign.CampaignLogInfo">
            <summary>
            Represents the execution state of campaign.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignLogInfo.Amount">
            <summary>
            Count of processed audience participants.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignLogInfo.ScheduledDate">
            <summary>
            The utc time when campaign should be started.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignLogInfo.StartDate">
            <summary>
            The utc time when campaign has been started.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignLogInfo.EndDate">
            <summary>
            The utc time when campaign has been finished.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignLogInfo.ErrorText">
            <summary>
            The text of happened error.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignLogInfo.Action">
            <summary>
            The message about element execution.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignLogInfo.CampaignId">
            <summary>
            The unique identifier of campaign.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignLogInfo.CampaignItemId">
            <summary>
            The unique identifier of element.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Campaign.CampaignLogInfo.IsSuccess">
            <summary>
            The item execution status.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Compilation.IWorkspaceBuilder">
            <summary>
            Defines methods to build workspace assembly from source code.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Compilation.IWorkspaceBuilder.Build">
            <summary>
            Builds workspace assembly.
            </summary>
            <returns>Collection of error or warning messages.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceBuilder.Build">
            <summary>
            Builds workspace assembly.
            </summary>
            <returns>Collection of error or warning messages.</returns>
        </member>
        <member name="T:Terrasoft.Core.Configuration.ProcessListener">
            <summary>
            Provides properties that represent information about process listener.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.ProcessListener.#ctor(System.Data.IDataReader,Terrasoft.Core.DB.DBTypeConverter,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Configuration.ProcessListener"/> class by the data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="dbTypeConverter">The database type converter.</param>
            <param name="defManagerName">The default process schema manager name.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.ProcessListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Configuration.ProcessListener"/> class.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.ProcessListener.Id">
            <summary>
            Gets or sets identifier of the entity.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.ProcessListener.RecordChangetype">
            <summary>
            Gets or sets types of entity modifications.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.ProcessListener.ConditionData">
            <summary>
            Gets or sets condition data.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.ProcessListener.ChangedColumns">
            <summary>
            Gets or sets data of changed columns.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.ProcessListener.ManagerName">
            <summary>
            Gets or sets the name of the process schema manager.
            </summary>
            <value>
            The name of the process schema manager.
            </value>
        </member>
        <member name="T:Terrasoft.Core.Configuration.ProcessSchemaListener">
            <summary>
            The class for the process schema listener.
            </summary>
            <seealso cref="T:Terrasoft.Core.Configuration.ProcessListener"/>
            <seealso cref="T:Terrasoft.Core.Configuration.SysEntityPrcStartEventSchema"/>
        </member>
        <member name="M:Terrasoft.Core.Configuration.ProcessSchemaListener.#ctor(System.Data.IDataReader,Terrasoft.Core.DB.DBTypeConverter,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Configuration.ProcessSchemaListener"/> class by the data reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="dbTypeConverter">The database type converter.</param>
            <param name="defaultManagerName">The default process schema manager name.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.ProcessSchemaListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Configuration.ProcessSchemaListener"/> class.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.ProcessSchemaListener.EntitySchemaUId">
            <summary>
            Gets or sets unique identifier of the entity schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.ProcessSchemaListener.ProcessSchemaId">
            <summary>
            Gets or sets identifier of the process schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.ProcessSchemaListener.ProcessSchemaElementUId">
            <summary>
            Gets or sets identifier of the process element.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.ProcessSchemaListener.WaitingRandomSignal">
            <summary>
            Gets or sets value that indicates whether the current signal is waiting random event.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.ProcessSchemaListener.Signal">
            <summary>
            Gets or sets string, which value is listened by event.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.SequenceMap">
            <summary>
            Sequence map, stores sequence objects.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.SequenceMap.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DB.SequenceMap"/> class.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.SequenceMap.#ctor(Terrasoft.Core.UserConnection,System.Collections.Generic.IDictionary{System.String,Terrasoft.Core.DB.Sequence})">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DB.SequenceMap"/> class.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="sequences">Sequence dictionary.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.SequenceMap.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Store.ICacheStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DB.SequenceMap"/> class.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="cacheStore">Cache store.</param>
        </member>
        <member name="F:Terrasoft.Core.DB.SequenceMap._cacheStore">
            <summary>
            Worspace cache store.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.SequenceMap._sequences">
            <summary>
            Sequence dictionary. The dictionary is thread-safe <seealso cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.SequenceMap.GetByName(System.String)">
            <summary>
            Get sequence instance from map by sequence name in data base.
            </summary>
            <param name="sequenceName">Sequence name in data base.</param>
            <returns>Returns sequence.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.SequenceMap.CreateDefault(System.String)">
            <summary>
            Create default sequence in data base, with first value 1, increment 1 name <paramref name="sequenceName"/> 
            and return sequence instance.
            </summary>
            <param name="sequenceName">Sequence name in data base.</param>
            <returns>Returns sequence.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.SequenceMap.GetByNameOrDefault(System.String)">
            <summary>
            Get sequence instance from map by sequence name in data base or create default sequence in data base
            and return sequence instance.
            </summary>
            <param name="sequenceName">Sequence name in data base.</param>
            <returns>Returns sequence.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.SequenceMap.Create(Terrasoft.Core.DB.Sequence)">
            <summary>
            Create sequence in data base and add it to sequence map.
            </summary>
            <param name="sequence">Instance of sequence <see cref="T:Terrasoft.Core.DB.Sequence"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.SequenceMap.ClearCache">
            <summary>
            Clear sequence cache store.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.SequenceMap.UserConnection">
            <summary>
            User connection.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition">
            <summary>
            Represents class for the DcmSchemaElement transition.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.#ctor(Terrasoft.Core.DcmProcess.DcmSchemaElementTransition)">
            <summary>
            Creates a new instance with specified DefaultDcmSchemaElementTransition.
            </summary>
            <param name="source">Instance that inherites the <see cref="T:Terrasoft.Core.DcmProcess.DefaultDcmSchemaElementTransition"/> type.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.#ctor">
            <summary>
            Creates new instance of <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition"/>
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Applies meta data values.
            </summary>
            <param name="reader">Instance of the <see cref="T:Terrasoft.Common.DataReader"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.CheckIsValid">
            <summary>
            Throws exception if transition is not valid.
            </summary>
            <exception cref="T:Terrasoft.Common.ValidateException"></exception>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.FindElement(System.Guid)">
            <summary>
            Finds item by the specified unique identifier.
            </summary>
            <param name="elementUId">Element UId</param>
            <returns>
            Instance of <see cref="T:Terrasoft.Core.Process.BaseProcessSchemaElement"/>
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes meta data values.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.Validate">
            <summary>
            Validates current transition instance
            </summary>
            <returns>
            <c>true</c>, if <see cref="P:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.ElementUId"/> is not empty <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.ElementUId">
            <summary>
            Gets or sets <see cref="T:Terrasoft.Core.Process.BaseProcessSchemaElement"/> UId for which transition
            are created.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.TargetElement">
            <summary>
            Gets <see cref="T:Terrasoft.Core.Process.BaseProcessSchemaElement"/> for which transition are created.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.SourceElement">
            <summary>
            Gets <see cref="T:Terrasoft.Core.Process.BaseProcessSchemaElement"/> after which
            <see cref="P:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.TargetElement"/> should be run. Returns <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaStage"/> of
            <see cref="P:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.TargetElement"/>
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition.IsDefault">
            <summary>
            Gets default transition flag.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityCollection.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Entities.EntitySchema)">
            <summary>
            Creates a set of objects that represent records in the database table.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="schema">Instance of the entity schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityCollection.#ctor(Terrasoft.Core.UserConnection,System.String)">
            <summary>
            Creates a set of objects that represent records in the database table.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="schemaName">Name of the entity schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityCollection.#ctor(Terrasoft.Core.UserConnection,System.String,System.String)">
            <summary>
            Creates a set of objects that represent records in the database table.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="schemaName">Name of the entity schema.</param>
            <param name="entitySchemaManagerName">Name of the entity schema manager.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityCollection.#ctor(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Creates a set of objects that represent records in the database table.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="schemaUId">Unique identifier of the entity schema.</param>
        </member>
        <member name="T:Terrasoft.Core.FileSystemEnabledSchemaManager`1">
            <summary>
            Base class of schema manager which works with schemes in file system. 
            </summary>
            <typeparam name="TSchemaManagerSchema">Class, inherites from <see cref="T:Terrasoft.Core.Schema"/>, implements interface
            <see cref="T:Terrasoft.Core.ISchemaManagerSchema`1"/>.</typeparam>
        </member>
        <member name="M:Terrasoft.Core.FileSystemEnabledSchemaManager`1.Initialize(Terrasoft.Core.SchemaManagerProvider,Terrasoft.Core.SchemaManagerProviderConfigurationElement)">
            <summary>
            Creates the manager of schema, using specified provider and information from configuration file.
            </summary>
            <param name="provider">Provider of schema manager.</param>
            <param name="configuration">Information from configuration file.</param>
        </member>
        <member name="T:Terrasoft.Core.Compilation.BaseCompiler">
            <summary>
            Generates workspace assembly.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchema">
            <summary>
            Представляет схему объекта.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessBasedSchema">
            <summary>
            Базовый класс схемы, содержащей встроенный процесс.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessBasedSchema.#ctor(Terrasoft.Core.ISchemaManager)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Process.ProcessBasedSchema"/> с заданным менеджером схем.
            </summary>
            <param name="schemaManager">Менеджер схем.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessBasedSchema.#ctor(Terrasoft.Core.Process.ProcessBasedSchema)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Process.ProcessBasedSchema"/>, являющийся клоном заданной схемы.
            </summary>
            <param name="source">Схема, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessBasedSchema.InitializeEventsProcessSchema">
            <summary>
            Выполняет инициализацию схемы встроенного процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessBasedSchema.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Вычитка значений свойств схемы из метаданных с помощью заданного 
            <see cref="T:Terrasoft.Common.DataReader"/>.
            </summary>
            <param name="reader">Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется 
            вычитка метаданных.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessBasedSchema.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Осуществляет запись метаданных схемы с помощью заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого записываются 
            метаданные схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessBasedSchema.GetSchemaReferences">
            <summary>
            Возвращает коллекцию ссылок на сборки, которые необходимы для компиляции схемы.
            </summary>
            <returns>Коллекция ссылок на сборки, которые необходимы для компиляции схемы.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessBasedSchema.InitializeLocalizableValues(System.String,System.String)">
            <summary>
            Выполняет инициализацию локализуемых значений схемы со встроенным процессом из заданной группы заданного 
            менеджера ресурсов.</summary>
            <param name="resourceManagerName">Имя менеджера ресурсов.</param>
            <param name="resourceGroupName">Имя группы ресурсов.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessBasedSchema.GetMetaItems(System.Collections.Generic.ICollection{Terrasoft.Core.IMetaItem})">
            <summary>
            Заполняет переданную коллекцию всеми метаэлементами текущей схемы.
            </summary>
            <param name="metaItems">Коллекция, которая заполняется метаэлементами текущей схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessBasedSchema.CreateEventsProcess(Terrasoft.Core.UserConnection)">
            <summary>
            Создает экземпляр встроенного процесса схемы.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Экземпляр созданного встроенного процесса.</returns>
            <exception cref="T:System.NotImplementedException">Виртуальный метод не реализован в классе 
            <see cref="T:Terrasoft.Core.Process.ProcessBasedSchema"/>, а переопределяется у классов - наследников 
            <see cref="T:Terrasoft.Core.Process.ProcessBasedSchema"/>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessBasedSchema.InitializeEventsProcessSchemaLocalizableValues">
            <summary>
            Выполняет инициализацию локализуемых значений схемы встроенного процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessBasedSchema.ProcessSchemaManager">
            <summary>
            Менеджер схемы, содержащей встроенный процесс.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessBasedSchema.IsEventsProcessSchemaInitialized">
            <summary>
            Определяет, инициализирована ли схема встроенного процесса данной схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessBasedSchema.EventsProcessSchema">
            <summary>
            Схема встроенного процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessBasedSchema.ParentProcessBasedSchema">
            <summary>
            Родительская схема.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.#ctor(Terrasoft.Core.Entities.EntitySchemaManager)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/> с заданным менеджером схем.
            </summary>
            <param name="entitySchemaManager">Менеджер схем.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.#ctor(Terrasoft.Core.Entities.EntitySchema,System.Boolean)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/>, являющийся полным или неполным клоном 
            заданной схемы <paramref name="source"/> в зависимости от значения <paramref name="isShallowClone"/>.
            </summary>
            <param name="source">Схема, клон которой создается.</param>
            <param name="isShallowClone">Признак полноты клонирования схемы. Если <paramref name="isShallowClone"/> 
            равен <c>true</c>, то в создаваемый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/> не копируются колонки схемы 
            <paramref name="source"/>. Если <paramref name="isShallowClone"/> равен <c>false</c>, то создается 
            полноценный клон <paramref name="source"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.#ctor(Terrasoft.Core.Entities.EntitySchema)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/>, являющийся полным клоном заданной схемы 
            <paramref name="source"/>.
            </summary>
            <param name="source">Схема, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Вычитка значений свойств схемы из метаданных с помощью заданного 
            <see cref="T:Terrasoft.Common.DataReader"/>.
            </summary>
            <param name="reader">Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется 
            вычитка метаданных.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.CompleteApplyingMetaDataValues">
            <summary>
            Завершение инициализации сериализуемых свойств схемы после вычитки всех значений свойств из метаданных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializeProperties">
            <summary>
            Инициализация свойства схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializePrimaryColumn">
            <summary>
            Инициализация колонки с первичным ключом схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializePrimaryDisplayColumn">
            <summary>
            Инициализация первичной колонки для отображения данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializePrimaryImageColumn">
            <summary>
            Инициализация первичной колонки для отображения изображения.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializePrimaryOrderColumn">
            <summary>
            Инициализация первичной колонки для сортировки.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializeOneToOneParentAssociationColumn">
            <summary>
            Инициализация колонки связи с родителем при наследовании один к одному.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializeOwnerColumn">
            <summary>
            Инициализация колонки владельца записи.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializeHierarchyColumn">
            <summary>
            Инициализация колонки связи с родительской записью для иерархических объектов.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializeCreatedOnColumn">
            <summary>
            Инициализация колонки для хранения даты создания.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializeCreatedByColumn">
            <summary>
            Инициализация колонки для хранения ссылки на контакт, который создал запись.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializeModifiedOnColumn">
            <summary>
            Инициализация колонки для хранения даты модификации схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializeModifiedByColumn">
            <summary>
            Инициализация колонки, определяющей, кем была изменения схема.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializeColumns">
            <summary>
            Инициализация колонок.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializeIndexes">
            <summary>
            Инициализация индексов.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializeColumnsLocalizableValues">
            <summary>
            Инициализация локализуемых значений колонок.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializePredefinedColumnsLocalizableValues(System.Boolean)">
            <summary>
            Инициализация предопределенных локализуемых значений колонок.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.SetColumnsDefInheritance(System.Guid)">
            <summary>
            Всем колонкам, для которых не указана схема, где они были созданы, устанавливает переданный 
            идентификатор схемы. 
            </summary>
            <param name="schemaUId">Уникальный идентификатор схемы, в которой были созданы колонки.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.CreateSelect(Terrasoft.Core.UserConnection,System.Collections.Generic.IEnumerable{Terrasoft.Core.Entities.EntitySchemaColumn},System.Boolean,Terrasoft.Core.Entities.EntitySchemaColumnMap@,System.Boolean,System.Nullable{System.Guid})">
            <summary>
            Creates and returns select query for specified schema columns enumeration and additionally returns
            columns map. Request may contain primary display values from lookups,
            depending on <paramref name="takeDisplayLookupValues"/>.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="columns">Columns which should be placed in query.</param>
            <param name="takeDisplayLookupValues">Indicate whether to get primary display values.
            If <c>true</c> primaty display values will be fetched.</param>
            <param name="columnMap">Column map for resulting query.</param>
            <param name="useAdminRights">Idicates whether to use administration rights.</param>
            <param name="localizationCultureId">
            System culture identifier specifies in which culture localizable columns will be represented.
            </param>
            <returns>Query for fetching columns from current schema.</returns>
            <exception cref="T:System.Security.SecurityException">Not enough rights for reading data for current schema.</exception>
            <exception cref="T:Terrasoft.Common.NullOrEmptyException">
            There is no schemas list for primary display values or at least one schema is not initialized.
            </exception>
            <remarks>Method is overloaded.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializePrimaryInfo">
            <summary>
            Осуществляет инициализацию основных свойств данной схемы. 
            </summary>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если имя данной схемы пустое или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.ReadMetaData(Terrasoft.Common.DataReader)">
            <summary>
            Осуществляет вычитку схемы из метаданных с помощью заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataReader"/>.
            </summary>
            <param name="reader">Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого вычитываются 
            метаданные схемы.</param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Осуществляет запись метаданных схемы с помощью заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого записываются 
            метаданные схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializeCreatedInSchemaUId">
            <summary>
            Для наследуемых колонок данной схемы устанавливает уникальный идентификатор схемы, в которой они 
            были созданы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializeModifiedInSchemaUId">
            <summary>
            Для наследуемых колонок данной схемы устанавливает уникальный идентификатор схемы, в которой они 
            были изменены.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.SetDefInheritance">
            <summary>
            Для всех элементов схемы, у которых не установлен идентификатор родительской схемы, устанавливает 
            идентификатор текущей схемы как родительский. 
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.Clone">
            <summary>
            Возвращает экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей схемы.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей схемы.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.InitializeLocalizableValues(System.String,System.String)">
            <summary>
            Performs initialization of localizable values from specified group <paramref name="resourceGroupName"/> in
            <paramref name="resourceManagerName"/> resource manager.
            </summary>
            <param name="resourceManagerName">Resource manager name.</param>
            <param name="resourceGroupName">Resource group name.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.ReInitializeLocalizableValues(System.String,System.String)">
            <summary>
            Performs reinitialization of localizable values from specified group <paramref name="resourceGroupName"/> in
            <paramref name="resourceManagerName"/> resource manager.
            </summary>
            <param name="resourceManagerName">Resource manager name.</param>
            <param name="resourceGroupName">Resource group name.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetMetaItems(System.Collections.Generic.ICollection{Terrasoft.Core.IMetaItem})">
            <summary>
            Заполняет переданную коллекцию всеми метаэлементами текущей схемы.
            <see cref="T:Terrasoft.Core.MetaItem"/>.
            </summary>
            <param name="metaItems">Коллекция, которая заполняется метаэлементами текущей схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.LoadLocalizableValues">
            <summary>
            Загружает значения для локализуемых элементов схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.CloneShallow">
            <summary>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/>, являющийся клоном текущей схемы без колонок.
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/> - клон текущей схемы без колонок.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.CreateEntity(Terrasoft.Core.UserConnection)">
            <summary>
            Создает экземпляр объекта, который описывает схема.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.Entity"/> с данными, построенный по текущей схеме.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.CreateTrackChangesInsertSelect(Terrasoft.Core.UserConnection,System.Object,Terrasoft.Core.Entities.EntityChangeType)">
            <summary>
            Возвращает запрос на сохранение записи в журнале, если схема является журналируемой.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="primaryColumnValue"></param>
            <param name="changeType">Тип изменения сущности - объекта.</param>
            <returns>Запрос на сохранение записи в журнале изменений по текущей схеме.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.CreateSelect(Terrasoft.Core.UserConnection,System.Boolean)">
            <summary>
            Создает базовый запрос для получения колонок текущей схемы, используя заданное пользовательское подключение.
            В зависимости от значения параметра <paramref name="takeDisplayLookupValues"/> в запросе могут возвращаться 
            первичные отображаемые значения из справочников.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="takeDisplayLookupValues">Признак получения в запросе первичных отображаемых значений.
            Если параметр равен <c>true</c>, в запросе будут возвращены первичные отображаемые значения.</param>
            <returns>Запрос для получения колонок текущей схемы.</returns>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.CreateSelect(Terrasoft.Core.UserConnection,System.Boolean,Terrasoft.Core.Entities.EntitySchemaColumnMap@)">
            <summary>
            Создает базовый запрос для получения значений всех колонок текущей схемы, используя заданное 
            пользовательское подключение, возвращая при этом карту колонок. В зависимости от параметра 
            <paramref name="takeDisplayLookupValues"/> в запросе могут возвращаться первичные отображаемые значения.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="takeDisplayLookupValues">Признак получения в запросе первичных отображаемых значений.
            Если параметр равен <c>true</c>, в запросе будут возвращены первичные отображаемые значения.
            </param>
            <param name="columnMap">Карта колонок по созданному запросу.</param>
            <returns>Запрос для получения колонок текущей схемы.</returns>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.CreateSelect(Terrasoft.Core.UserConnection,System.Collections.Generic.IEnumerable{Terrasoft.Core.Entities.EntitySchemaColumn},System.Boolean)">
            <summary>
            Создает базовый запрос для получения значений заданного перечислителя колонок текущей схемы, используя 
            заданное пользовательское подключение. В зависимости от значения параметра 
            <paramref name="takeDisplayLookupValues"/> в запросе могут возвращаться первичные отображаемые значения из 
            справочников.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="columns">Колонки, которые должны быть возвращены в запросе.</param>
            <param name="takeDisplayLookupValues">Признак получения в запросе первичных отображаемых значений.
            Если параметр равен <c>true</c>, в запросе будут возвращены первичные отображаемые значения.
            </param>
            <returns>Запрос для получения колонок текущей схемы.</returns>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.CreateSelect(Terrasoft.Core.UserConnection,System.Collections.Generic.IEnumerable{Terrasoft.Core.Entities.EntitySchemaColumn},System.Boolean,Terrasoft.Core.Entities.EntitySchemaColumnMap@)">
            <summary>
            Создает базовый запрос для получения заданного перечислителя колонок схемы, используя заданное 
            пользовательское подключение, возвращая при этом карту колонок. В зависимости от значения параметра 
            <paramref name="takeDisplayLookupValues"/> в запросе могут возвращаться первичные отображаемые значения 
            из справочников.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="columns">Колонки, которые должны быть возвращены в запросе.</param>
            <param name="takeDisplayLookupValues">Признак получения в запросе первичных отображаемых значений. 
            Если параметр равен <c>true</c>, в запросе будут возвращены первичные отображаемые значения.
            </param>
            <param name="columnMap">Карта колонок по созданному запросу.</param>
            <returns>Запрос для получения колонок текущей схемы.</returns>
            <exception cref="T:System.Security.SecurityException">Недостаточно прав для чтения информации о данной схеме.</exception>
            <exception cref="T:Terrasoft.Common.NullOrEmptyException">Если для первичных отображаемых значений не указан список схем, из 
            которых берутся значения либо если одна из этих схем не проинициализирована.</exception>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.CreateGeneralSelect(Terrasoft.Core.UserConnection)">
            <summary>
            Возвращает запрос для получения всех колонок текущей схемы, используя заданное пользовательское подключение.
            В этот запрос не включаются отображаемые колонки справочников.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Запрос для получения всех колонок текущей схемы.</returns>
            <exception cref="T:System.Security.SecurityException">Недостаточно прав для чтения информации по данной схеме.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.FindSchemaColumnByMetaPath(System.String)">
            <summary>
            Преобразует заданный метапуть к колонке к фактическому пути с учетом наследования схемы и возвращает 
            соответствующую ему колонку.
            </summary>
            <param name="columnMetaPath">Метапуть к колонке.</param>
            <returns>
            Колонка, фактически соответствующая метапути <paramref name="columnMetaPath"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetSchemaColumnByMetaPath(System.String)">
            <summary>
            Преобразует заданный метапуть к колонке к фактическому пути с учетом наследования схемы и возвращает 
            соответствующую ему колонку. Если такая колонка не найдена, генерируется исключение.
            </summary>
            <param name="columnMetaPath">Метапуть к колонке.</param>
            <returns>
            Колонка, фактически соответствующая метапути <paramref name="columnMetaPath"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="columnMetaPath"/>
            передано пустое значение или <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если колонка не является типом справочник.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если у колонки с типом справочник не указана ссылка на 
            схему-справочник.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.FindSchemaColumnByPath(System.String)">
            <summary>
            Преобразует заданный путь к колонке к фактическому пути с учетом наследования схемы и возвращает 
            соответствующую ему колонку.
            </summary>
            <param name="columnPath">Путь к колонке схемы.</param>
            <returns>Колонка, фактически соответствующая пути <paramref name="columnPath"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="columnPath"/> 
            передано пустое значение или <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidTypeCastException">Если колонка не является типом справочник.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если для колонки с типом справочник, не указан список 
            схем - справочников.
            </exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">У колонки с типом справочник не указана ссылка на 
            схему-справочник.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetSchemaColumnByPath(System.String)">
            <summary>
            Преобразует заданный путь к колонке к фактическому пути с учетом наследования схемы и возвращает
            соответствующую ему колонку. Если такая колонка не найдена, генерируется исключение. 
            </summary>
            <param name="columnPath">Путь к колонке схемы.</param>
            <returns>Колонка, фактически соответствующая пути <paramref name="columnPath"/>.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если не найдена колонка по сформированному фактическому пути для 
            <paramref name="columnPath"/>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.FindDBPrimaryColumn">
            <summary>
            Возвращает первичную колонку на уровне базы данных для текущей схемы.
            </summary>
            <returns>
            Если схема наследуется независимо, будет возвращена первичная колонка текущей схемы. При наследовании схемы 
            один к одному будет возвращена колонка связи с родителем данной схемы.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetDBPrimaryColumn">
            <summary>
            В зависимости от типа наследования схемы, возвращает первичную колонку данной схемы на уровне базы данных. 
            Если колонка не найдена, генерируется исключение.
            </summary>
            <returns>
            Если схема наследуется независимо, будет возвращена первичная колонка текущей схемы. При наследовании схемы 
            один к одному будет возвращена колонка связи с родителем данной схемы.
            </returns>
            <exception cref="T:Terrasoft.Common.NullOrEmptyException">Если у текущей схемы не определена первичная колонка либо колонка 
            для связи с родительской схемой.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetPrimaryColumnName">
            <summary>
            Возвращает имя первичной колонки данной схемы на уровне базы данных.
            </summary>
            <returns>Имя первичной колонки схемы.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetDBPrimaryColumnName">
            <summary>
            Имя первичной колонки данной схемы в таблице базы данных.
            </summary>
            <returns>Имя колонки в таблице базы данных, соответствующей первичной колонке схемы.</returns>
            <exception cref="T:Terrasoft.Common.NullOrEmptyException">Если для данной схемы не проинициализирована первичная колонка.
            </exception>
            <exception cref="T:Terrasoft.Common.NullOrEmptyException">Если имя первичной колонки данной схемы пустое или <c>null</c>.
            </exception>
            <exception cref="T:Terrasoft.Common.NullOrEmptyException">Если для данной схемы не проинициализирована колонка связи с 
            родителем при наследовании один к одному.</exception>
            <exception cref="T:Terrasoft.Common.NullOrEmptyException">Если имя колонки связи с родителем данной схемы пустое или 
            <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetPrimaryDisplayColumn">
            <summary>
            Возвращает первичную колонку для отображения.
            </summary>
            <returns>Первичная колонка для отображения.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.FindPrimaryDisplayColumnName">
            <summary>
            Определяет наличие у текущей схемы первичной колонки для отображения.
            </summary>
            <returns>
            Имя первичной колонки для отображения либо <c>null</c>, если эта колонка у схемы не определена.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetPrimaryDisplayColumnName">
            <summary>
            Возвращает первичную колонку для отображения. Если такая колонка у схемы не определена, 
            генерируется исключение.
            </summary>
            <returns>
            Имя первичной колонки для отображения.
            </returns>
            <exception cref="T:Terrasoft.Common.NullOrEmptyException">Если для данной схемы не проинициализирована первичная колонка для 
            отображения либо если имя пустое или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetInheritedPath(System.String)">
            <summary>
            По заданному пути к колонке схемы формирует строку фактического пути к ней, который строится с учетом 
            типа наследования схемы.
            </summary>
            <param name="columnPath">Путь к колонке схемы.</param>
            <returns>Строка пути к колонке схемы, преобразованная с учетом наследования.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если параметр <paramref name="columnPath"/> является пустым 
            или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetMultiLookupPathParts(System.String)">
            <summary>
            По заданному пути к lookup-колонке схемы формирует массив строк фактических путей к ней, построенных с 
            учетом наследования.
            </summary>
            <param name="columnPath">Путь к колонке схемы.</param>
            <returns>Массив строк пути к первичной колонке для отображения, преобразованных с учетом 
            наследования.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetSchemaColumnReversePathByPath(System.String)">
            <summary>
            По заданному пути к колонке формирует строку фактического пути с обратными связями.
            </summary>
            <param name="columnPath">Путь к колонке схемы.</param>
            <returns>Путь с обратными связями к колонке схемы, соответствующий <paramref name="columnPath"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="columnPath"/> 
            указано пустое значение или <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidTypeCastException">Если колонка не является типом справочник.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">У колонки с типом справочник не указана ссылка на 
            схему-справочник</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Колонка должна быть типа справочник.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если у колонки с типом справочник не указана ссылка на 
            схему-справочник.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если у колонки с типом справочник не указана первичная 
            колонка.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetSchemaColumnFullCaptionByPath(System.String,System.String)">
            <summary>
            По заданному пути к колонке схемы формирует строку полного заголовка колонки через заданный разделитель.
            </summary>
            <param name="columnPath">Путь к колонке схемы.</param>
            <param name="delimiter">Разделитель.</param>
            <returns>Строка, представляющая собой полный заголовок колонки, заданной в <paramref name="columnPath"/>
            через разделитель <paramref name="delimiter"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="columnPath"/> 
            передано пустое значение или <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если колонка не является типом справочник.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если у колонки с типом справочник не указана ссылка на 
            схему-справочник.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetSchemaColumnMetaPathByPath(System.String)">
            <summary>
            По заданному фактическому пути к колонке формирует строку метапути к данной колонке.
            </summary>
            <param name="columnPath">Фактический путь к колонке.</param>
            <returns>Метапуть к колонке, заданной <paramref name = "columnPath"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.FindSchemaColumnPathByMetaPath(System.String)">
            <summary>
            По заданному метапути к колонке схемы формирует строку фактического пути к ней, который строится с учетом
            типа наследования схемы.
            </summary>
            <param name="columnMetaPath">Метапуть к колонке.</param>
            <returns>Строка фактического пути к колонке, соответствующая метапути <paramref name="columnMetaPath"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если колонка не является типом справочник.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если у колонки с типом справочник не указана ссылка на 
            схему-справочник.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetSchemaColumnPathByMetaPath(System.String)">
            <summary>
            По заданному метапути к колонке схемы формирует строку фактического пути к ней, который строится с учетом
            типа наследования схемы.
            </summary>
            <param name="columnMetaPath">Метапуть к колонке.</param>
            <returns>Строка фактического пути к колонке, соответствующая метапути <paramref name="columnMetaPath"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="columnMetaPath"/>
            передано пустое значение или <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если колонка не является типом справочник.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если у колонки с типом справочник не указана ссылка на 
            схему-справочник.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.AddColumn(System.String)">
            <summary>
            Добавляет в текущую схему новую колонку с указанным именем типа.
            </summary>
            <param name="typeName">Имя типа колонки.</param>
            <returns>Колонка типа <paramref name="typeName"/>.</returns>
            <remarks>Перегруженный метод.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.AddColumn(System.String,System.String)">
            <summary>
            Добавляет в текущую схему новую колонку с указанными именем типа и именем колонки.
            </summary>
            <param name="typeName">Имя типа.</param>
            <param name="name">Имя колонки.</param>
            <returns>Колонка с именем <paramref name="name"/> типа <paramref name="name"/>.</returns>
            <remarks>Перегруженный метод.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.AddColumn(System.String,System.String,System.Guid)">
            <summary>
            Добавляет в текущую схему новую колонку с указанными именем колонки, именем типа и уникальным 
            идентификатором.
            </summary>
            <param name="typeName">Имя типа.</param>
            <param name="name">Имя колонки.</param>
            <param name="uid">Уникальный идентификатор колонки.</param>
            <returns>Колонка с именем <paramref name="name"/> типа <paramref name="name"/> и идентификатором 
            <paramref name="uid"/>.</returns>
            <remarks>Перегруженный метод.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.AddColumn(System.String,System.String,System.Guid,Terrasoft.Core.Entities.EntitySchemaColumnRequirementType)">
            <summary>
            Добавляет в текущую схему новую колонку с указанными именем, типом и уникальным идентификатором. При этом 
            для колонки указывается уровень проверки значений, обязательных для заполнения.
            </summary>
            <param name="typeName">Имя типа.</param>
            <param name="name">Имя колонки.</param>
            <param name="uid">Уникальный идентификатор колонки.</param>
            <param name="requirementType">Уровень проверки обязательных значений.</param>
            <returns>Колонка с именем <paramref name="name"/> типа <paramref name="name"/>, идентификатором 
            <paramref name="uid"/>, уровнем проверки обязательных значений <paramref name="requirementType"/>.</returns>
            <remarks>Перегруженный метод.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.AddLookupColumn(System.String,System.String)">
            <summary>
            Добавляет в текущую схему новую колонку типа справочник с указанными именем колонки и именем 
            схемы-справочника.
            </summary>
            <param name="referenceSchemaName">Имя схемы-справочника.</param>
            <param name="name">Имя колонки.</param>
            <returns>Колонка типа справочник с именем <paramref name="name"/> схемы-справочника 
            <paramref name="referenceSchemaName"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.AddSystemLookupColumn(System.String,System.String)">
            <summary>
            Добавляет в текущую схему новую колонку типа справочник с указанием имени колонки и имени системной 
            схемы-справочника.
            </summary>
            <param name="referenceSchemaName">Имя системной схемы-справочника.</param>
            <param name="name">Имя колонки.</param>
            <returns>
            Колонка типа справочник с именем <paramref name="name"/> системной схемы-справочника 
            <paramref name="referenceSchemaName"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.AddLookupColumn(System.String,System.String,System.Guid)">
            <summary>
            Добавляет новую колонку типа справочник с указанными именем и идентификатором, которая ссылается на 
            заданную схему.
            </summary>
            <param name="referenceSchemaName">Имя схемы, на которую ссылается колонка.</param>
            <param name="name">Имя колонки.</param>
            <param name="uid">Уникальный идентификатор колонки.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumn"/> с именем <paramref name="name"/>, идентификатором 
            <paramref name="uid"/>, которая ссылается на справочник <paramref name="referenceSchemaName"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.AddLookupColumn(System.String,System.String,System.Guid,Terrasoft.Core.Entities.EntitySchemaColumnRequirementType)">
            <summary>
            Добавляет новую колонку типа справочник с указанными именем, идентификатором, которая ссылается на заданную 
            схему. При этом для колонки указывается уровень проверки значений, обязательных для заполнения.
            </summary>
            <param name="referenceSchemaName">Схема, на которую ссылается данная колонка.</param>
            <param name="name">Имя колонки.</param>
            <param name="uid">Уникальный идентификатор.</param>
            <param name="requirementType">Тип обязательности параметра.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.AssignParentSchema(Terrasoft.Core.Entities.EntitySchema)">
            <summary>
            Для текущей схемы устанавливает в качестве родителя заданную схему. 
            </summary>
            <param name="parentSchema">Схема, устанавливаемая в качестве родителя для текущей схемы. </param>
            <returns>
            <c>true</c>, если для текущей схемы в качестве родительской установлена схема 
            <paramref name = "parentSchema"/>. 
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.AssignDBInheritanceType">
            <summary>
            Модифицирует колонку <see cref="P:Terrasoft.Core.Entities.EntitySchema.OneToOneParentAssociationColumn"/> текущей схемы при смене значения у нее 
            свойства <see cref="P:Terrasoft.Core.Entities.EntitySchema.DBInheritanceType"/>.
            </summary>
            <returns>
            <c>true</c>, если колонка <see cref="P:Terrasoft.Core.Entities.EntitySchema.OneToOneParentAssociationColumn"/> текущей схемы успешно 
            модифицирована; иначе - <c>false</c>.
            </returns>
            <remarks>Метод используется в дизайнере схем для корректной установки типа наследования.
            Основываясь на значении свойства DBInheritanceType метод либо добавляет колонку связи с родителем в текущую 
            схему и инициализирует ею свойство OneToOneParentAssociationColumn, либо, если тип наследования 
            IndependentTable, удаляет эту колонку связи.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.ValidateNames(System.Boolean)">
            <summary>
            Checks current schema and its elements validity.
            </summary>
            <param name="validatePrefixes"><c>true</c> for names prefixes validation. Othervise -
            <c>false</c>.</param>
            <exception cref="T:Terrasoft.Common.InvalidNameException">Raises when schema or schema elements are invalid.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetTrackChangesInDBSchemaName">
            <summary>
            Возвращает имя схемы для журналирования.
            </summary>
            <returns>Имя схемы для журналирования текущей схемы.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetTrackChangesInDBSchema">
            <summary>
            Возвращает схему для журналирования текущей схемы.
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/>, отвечающий за журналирование изменений текущей схемы.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetLocalizationSchema">
            <summary>
            Returns localization schema for current schema.
            </summary>
            <returns>The instance of the <see cref="T:Terrasoft.Core.Entities.EntitySchema"/> class,
            that provides localization schema for current schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetKindSuffix">
            <summary>
            Возвращает суффикс в соответствии с типом текущей схемы, который используется для генерации уникальных имен 
            системных объектов базы данных.
            </summary>
            <returns>Суффикс, соответствующий типу текущей схемы.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchema.GetEntitySchemaByKind(Terrasoft.Core.Entities.EntitySchemaKind)">
            <summary>
            По заданному типу системной схемы возвращает соответствующий экземпляр системной схемы.
            </summary>
            <param name="kind">Тип схемы.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/> типа <paramref name="kind"/>.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.BaseSchemaUId">
            <summary>
            Base schema unique identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.Manager">
            <summary>
            Schema manager.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.UId">
            <summary>
            Unique identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.ProcessSchemaManager">
            <summary>
            Process schema manager.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.Kind">
            <summary>
            Тип схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.DBInheritanceType">
            <summary>
            Тип наследования схемы на уровне базы данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.DeleteOneToOneParentRecord">
            <summary>
            Признак удаления записи из родительской схемы при удалении текущей записи, 
            если схема наследуется один к одному.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.ParentSchemaUId">
            <summary>
            Уникальный идентификатор родительской схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.ParentSchema">
            <summary>
            Родительская схема.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.IsVirtual">
            <summary>
            Признак виртуальности схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.IsDBView">
            <summary>
            Признак, является ли схема представлением в базе данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.AutoInitializeColumns">
            <summary>
            Признак автоматической инициализации колонок.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.Columns">
            <summary>
            Коллекция колонок схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.PrimaryColumn">
            <summary>
            Колонка, представляющая первичный ключ.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.PrimaryDisplayColumn">
            <summary>
            Первичная колонка для отображения данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.PrimaryImageColumn">
            <summary>
            Первичная колонка для отображения изображения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.PrimaryOrderColumn">
            <summary>
            Первичная колонка для сортировки. 
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.OneToOneParentAssociationColumn">
            <summary>
            Колонка связи с родителем при наследовании один к одному.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.OwnerColumn">
            <summary>
            Колонка, указывающая на владельца. Используется для раздачи прав на запись владельцу.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.HierarchyColumn">
            <summary>
            Колонка связи с родительской записью для иерархических объектов. 
            Используется для построения иерархических запросов.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.CreatedOnColumn">
            <summary>
            Колонка для хранения даты создания записи.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.CreatedByColumn">
            <summary>
            Колонка для хранения ссылки на контакт, который создал запись.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.ModifiedOnColumn">
            <summary>
            Колонка для хранения даты модификации записи.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.ModifiedByColumn">
            <summary>
            Колонка для хранения ссылки на контакт, который модифицировал запись.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.Indexes">
            <summary>
            Коллекция индексов схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.IsTrackChangesInDB">
            <summary>
            Признак журналируемости схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.EntitySchemaManager">
            <summary>
            Менеджер схем объектов.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.DataValueTypeManager">
            <summary>
            Менеджер типов данных колонок схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.SystemValueManager">
            <summary>
            Менеджер системных значений. 
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.SystemEntitySchemaManager">
            <summary>
            Менеджер системных схем объектов.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.Events">
            <summary>
            События схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.HasEvents">
            <summary>
            Признак наличия событий для данной схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.AdministratedByOperations">
            <summary>
            Признак администрирования схемы по операциям.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.AdministratedByColumns">
            <summary>
            Признак администрирования схемы по колонкам.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.AdministratedByRecords">
            <summary>
            Признак администрирования схемы по записям.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.UseDenyRecordRights">
            <summary>
            Признак использования запрещающих прав для схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.HasIndependentProcessListeners">
            <summary>
            Признак определения для схемы своих завершающих условий элементов процессов, отличных от системных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.IsDynamicallyCreated">
            <summary>
            Признак динамически созданной схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.LocalizationSchemaName">
            <summary>
            Localization schema name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.DesignLocalizationSchemaName">
            <summary>
            Localization schema name in design time.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchema.IsLocalizable">
            <summary>
            Indicates whether schema is localizable.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.SystemEntity">
            <summary>
            Системный объект.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.Entity">
            <summary>
            Provides instance of entity.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Creates an object that represents a record in the database table.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.#ctor(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Creates an object that represents a record in the database table.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="schemaUId">Unique identifier of the entity schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.#ctor(Terrasoft.Core.Entities.Entity)">
            <summary>
            Creates an object that represents a record in the database table.
            </summary>
            <param name="source">Unique identifier of the entity schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.Write(Terrasoft.Common.DataWriter,Terrasoft.Core.Entities.Entity,System.String,System.Boolean,System.Action{Terrasoft.Common.DataWriter,Terrasoft.Core.Entities.Entity,System.Boolean})">
            <summary>
            Writes the value of type <see cref="T:Terrasoft.Core.Entities.Entity"/> into the output stream with the given name.
            </summary>
            <param name="dataWriter">The instance of <see cref="T:Terrasoft.Common.DataWriter"/>, providing the methods
            for sequential write values into the output stream.</param>
            <param name="entity">The write value of type <see cref="T:Entity"/>.</param>
            <param name="propertyName">The object name.</param>
            <param name="couldConvertForXml">Allow converting for xml-serialization.</param>
            <param name="writeDataAction">The custom action for writing entity data.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.WriteEmptyColumnValues(Terrasoft.Common.DataWriter,Terrasoft.Core.Entities.Entity,System.Boolean)">
            <summary>
            Writes the empty entity.
            </summary>
            <param name="dataWriter">The data writer.</param>
            <param name="entity">The entity.</param>
            <param name="couldConvertForXml">Allow converting for xml-serialization.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.IsColumnValueChangeable(Terrasoft.Core.Entities.EntityColumnValue)">
            <summary>
            Determines if column value can be changed.
            </summary>
            <param name="columnValue">Column value.</param>
            <returns>True, if column value can be changed.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.Write(Terrasoft.Common.DataWriter,Terrasoft.Core.Entities.Entity,System.String)">
            <summary>
            Осуществляет запись значения типа <see cref="T:Terrasoft.Core.Entities.Entity"/> в поток вывода с заданными именем.
            </summary>
            <param name="dataWriter">Экземпляр класса <see cref="T:Terrasoft.Common.DataWriter"/>, предоставляющий методы
            последовательной записи значений в поток вывода.</param>
            <param name="entity">Значение для записи типа <see cref="T:Entity"/>.</param>
            <param name="propertyName">Имя объекта.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.Write(Terrasoft.Common.DataWriter,Terrasoft.Core.Entities.Entity,System.String,System.Boolean)">
            <summary>
            Осуществляет запись значения типа <see cref="T:Terrasoft.Core.Entities.Entity"/> в поток вывода с заданными именем.
            </summary>
            <param name="dataWriter">Экземпляр класса <see cref="T:Terrasoft.Common.DataWriter"/>, предоставляющий методы
            последовательной записи значений в поток вывода.</param>
            <param name="entity">Значение для записи типа <see cref="T:Entity"/>.</param>
            <param name="propertyName">Имя объекта.</param>
            <param name="couldConvertForXml">Разрешить преобразование для xml-сериализации.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.Read(Terrasoft.Core.UserConnection,Terrasoft.Common.DataReader)">
            <summary>
            Возвращает значение текущего свойства типа <see cref="T:Terrasoft.Core.Entities.Entity"/> из потока ввода.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="dataReader">Экземпляр класса <see cref="T:Terrasoft.Core.DataReader"/>.</param>
            <returns> Экземляр класса <see cref="T:Entity"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.GetBytesValue(System.String)">
            <summary>
            Gets the value of the specified column as a byte array.
            </summary>
            <param name="valueName">Name of the object column.</param>
            <returns>The value of the column with the <paramref name="valueName" />
            name of the <see cref="T:System.Byte" /> type.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.SetColumnValue(System.String,System.Object)">
            <summary>
            Sets specified column value.
            </summary>
            <param name="valueName">Name of the object column.</param>
            <param name="value">Column value.</param>
            <returns><c>true</c>, if value was changed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.SetColumnValue(Terrasoft.Core.Entities.EntitySchemaColumn,System.Object)">
            <summary>
            Sets specified column value.
            </summary>
            <param name="column">The column.</param>
            <param name="value">The value.</param>
            <returns><c>true</c>, if value was changed; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">Column is <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.SetBytesValue(System.String,System.Byte[])">
            <summary>
            Sets passed value of the <see cref="T:System.Byte" /> type for the specified property of an object.
            </summary>
            <param name="valueName">The name of the property of an object.</param>
            <param name="streamBytes">Value of the <see cref="T:System.Byte" />
            type that is set for the property.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.FetchFromDB(Terrasoft.Core.Entities.EntitySchemaColumn,System.Object,System.Boolean)">
            <summary>
            Fetches entity from database by specified condition column value.
            </summary>
            <param name="conditionColumn">Query condition column name.</param>
            <param name="conditionValue">Query condition column value.</param>
            <param name="useDisplayValues">Indicate whether to get primary display values.
            If <c>true</c> primaty display values will be fetched.</param>
            <returns><c>true</c> if entity loaded. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.FetchFromDB(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            По заданному условию загружает из базы данных объект с набором колонок с указанными именами.
            </summary>
            <param name="conditionColumnName">Название колонки, для которой задается условие выборки.</param>
            <param name="conditionValue">Значение колонки условия для выбираемых данных.</param>
            <param name="columnNamesToFetch">Список названий колонок, которые будут выбраны.</param>
            <param name="useDisplayValues">Признак получения в запросе первичных отображаемых значений. 
            Если параметр равен <c>true</c>, в запросе будут возвращены первичные отображаемые значения.</param>
            <returns>Если объект загружен - <c>true</c>, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.FetchFromDB(System.String,System.Object,System.Boolean)">
            <summary>
            По заданному условию загружает объект из базы данных.
            </summary>
            <param name="conditionColumnName">Название колонки, для которой задается условие выборки.</param>
            <param name="conditionValue">Значение колонки условия для выбираемых данных.</param>
            <param name="useDisplayValues">Признак получения в запросе первичных отображаемых значений. 
            Если параметр равен <c>true</c>, в запросе будут возвращены первичные отображаемые значения.</param>
            <returns>Если объект загружен - <c>true</c>, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.FetchFromDB(System.Object,System.Boolean)">
            <summary>
            По заданному значению ключевого поля загружает объект из базы данных.
            </summary>
            <param name="keyValue">Значение ключевого поля.</param>
            <param name="useDisplayValues">Признак получения в запросе первичных отображаемых значений. 
            Если параметр равен <c>true</c>, в запросе будут возвращены первичные отображаемые значения.</param>
            <returns>Если объект загружен - <c>true</c>, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.FetchFromDB(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Fetches entity from database by specified conditions collection.
            </summary>
            <param name="conditions">Key-value collection containing conditions for entity query filtration.</param>
            <param name="useDisplayValues">Indicate whether to get primary display values. 
            If <c>true</c> primaty display values will be fetched.</param>
            <returns><c>true</c> if entity loaded. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.FetchFromDB(Terrasoft.Core.Entities.EntitySchemaColumn,System.Object,System.Collections.Generic.IEnumerable{Terrasoft.Core.Entities.EntitySchemaColumn},System.Boolean)">
            <summary>
            Fetches entity from database by specified condition column, condition value and columns to fetch.
            </summary>
            <param name="conditionColumn">Query condition column name.</param>
            <param name="conditionValue">Query condition column value.</param>
            <param name="columnsToFetch">Collection of columns to fetch.</param>
            <param name="useDisplayValues">Indicate whether to get primary display values. 
            If <c>true</c> primaty display values will be fetched.</param>
            <returns><c>true</c> if entity loaded. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.Write(Terrasoft.Common.DataWriter,System.String)">
            <summary>
            Writes entity data to the specified data writer, regardless it is empty or not.
            </summary>
            <param name="dataWriter">The data writer.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.WriteData(Terrasoft.Common.DataWriter)">
            <summary>
            Осуществляет запись в поток вывода для текущей схемы объекта.
            </summary>
            <param name="writer">Экземпляр класса <see cref="T:Terrasoft.Common.DataWriter"/>, предоставляющий методы
            последовательной записи значений в поток вывода.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.WriteData(Terrasoft.Common.DataWriter,Terrasoft.Core.Entities.EntitySchema)">
            <summary>
            Осуществляет запись в поток вывода для указанной схемы объекта.
            </summary>
            <param name="writer">Экземпляр класса <see cref="T:Terrasoft.Common.DataWriter"/>, предоставляющий методы
            последовательной записи значений в поток вывода.</param>
            <param name="schema">Схема объекта.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.Entity.WriteData(Terrasoft.Common.DataWriter,Terrasoft.Core.Entities.EntitySchema,System.Boolean)">
            <summary>
            Осуществляет запись в поток вывода для указанной схемы объекта.
            </summary>
            <param name="writer">Экземпляр класса <see cref="T:Terrasoft.Common.DataWriter"/>, предоставляющий методы
            последовательной записи значений в поток вывода.</param>
            <param name="schema">Схема объекта.</param>
            <param name="couldConvertForXml">Разрешает преобразование для xml-сериализации.</param>
        </member>
        <member name="P:Terrasoft.Core.Entities.Entity.UseAdminRights">
            <summary>Determines whether to take into account rights to insert, update, delete and select data.
            </summary>
            <remarks>Default value is true.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.SystemEntity.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.SystemEntity"/>, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.SystemEntity.#ctor(Terrasoft.Core.Entities.SystemEntity)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.SystemEntity"/>, являющийся клоном заданного системного объекта.
            </summary>
            <param name="source">Системный объект, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.SystemEntity.Clone">
            <summary>
            Возвращает экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего системного объекта.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего системного объекта.</returns>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema">
            <summary>
            System package resource checksum schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema.#ctor(Terrasoft.Core.Entities.EntitySchemaManager)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema"/> class using specified
            schema manager.
            </summary>
            <param name="entitySchemaManager">Entity schema manager.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema.#ctor(Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema,System.Boolean)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema"/> class using specified 
            <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema"/> object and schema cloning completeness flag.
            </summary>
            <param name="source">Schema that have to be cloned.</param>
            <param name="isShallowClone">Flag of completeness of schema cloning.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema.#ctor(Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema"/> class using specified 
            <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema"/> object.
            </summary>
            <param name="source">Schema that have to be cloned.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema.CreateEntity(Terrasoft.Core.UserConnection)">
            <summary>
            Creates new instance of <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksum"/> class using specified user
            connection.
            </summary>
            <param name="userConnection">User connection.</param>
            <returns>New instance of <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksum"/> class.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema.Clone">
            <summary>
            Clones <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema"/> object.
            </summary>
            <returns>New instance of <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema"/> class.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema.CloneShallow">
            <summary>
            Clones <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema"/> object using schema cloning completeness flag.
            </summary>
            <returns>A new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksumSchema"/> class.</returns>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysPackageResourceChecksum">
            <summary>
            System package resource checksum.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageResourceChecksum.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksum"/> class using specified user
            connection.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageResourceChecksum.#ctor(Terrasoft.Core.Configuration.SysPackageResourceChecksum)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksum"/> class which is a clone of the
            specified 
            <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksum"/> object.
            </summary>
            <param name="source">The <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksum"/> object, which will be cloned.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageResourceChecksum.Clone">
            <summary>
            Clones <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksum"/> object.
            </summary>
            <returns>New instance of <see cref="T:Terrasoft.Core.Configuration.SysPackageResourceChecksum"/> class.</returns>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPackageResourceChecksum.SysPackageId">
            <summary>
            Package identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPackageResourceChecksum.SysPackageName">
            <summary>
            Package name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPackageResourceChecksum.SysPackage">
            <summary>
            Package.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPackageResourceChecksum.SysSchemaId">
            <summary>
            Schema identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPackageResourceChecksum.SysSchema">
            <summary>
            Schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPackageResourceChecksum.SysSchemaName">
            <summary>
            Schema name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPackageResourceChecksum.ResourceManager">
            <summary>
            Resource manager name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPackageResourceChecksum.SysCultureId">
            <summary>
            Culture identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPackageResourceChecksum.SysCultureName">
            <summary>
            Culture name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPackageResourceChecksum.SysCulture">
            <summary>
            Culture.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPackageResourceChecksum.IsChanged">
            <summary>
            Is Changed.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPackageResourceChecksum.Checksum">
            <summary>
            Checksum.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysPrcActualVersionSchema">
            <summary>
            Entity schema class for storing actual process version.
            </summary>
            <seealso cref="T:Terrasoft.Core.Configuration.SysBaseEntitySchema"/>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcActualVersionSchema.#ctor(Terrasoft.Core.Entities.EntitySchemaManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPrcActualVersionSchema"/> class.
            </summary>
            <param name="entitySchemaManager">The entity schema manager.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcActualVersionSchema.#ctor(Terrasoft.Core.Configuration.SysPrcActualVersionSchema,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPrcActualVersionSchema"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="isShallowClone">The indicator of the schema copying fullness. If <c>true</c>, the new 
            instance will have copy of the current instance columns. Otherwise - <c>false</c>.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcActualVersionSchema.#ctor(Terrasoft.Core.Configuration.SysPrcActualVersionSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPrcActualVersionSchema"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcActualVersionSchema.InitializeProperties">
            <summary>
            Initializes the properties.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcActualVersionSchema.InitializeColumns">
            <summary>
            Initializes the columns.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcActualVersionSchema.CreateRootVersionSchemaColumn">
            <summary>
            Creates the root version schema column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcActualVersionSchema.CreateActualVersionSchemaColumn">
            <summary>
            Creates the actual version schema column.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcActualVersionSchema.CreateEntity(Terrasoft.Core.UserConnection)">
            <summary>
            Creates the entity.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcActualVersionSchema.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcActualVersionSchema.CloneShallow">
            <summary>
            Clones this instance with shallow.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysPrcActualVersion">
            <summary>
            The entity of <see cref="T:Terrasoft.Core.Configuration.SysPrcActualVersionSchema"/> schema.
            </summary>
            <seealso cref="T:Terrasoft.Core.Configuration.SysBaseEntity"/>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcActualVersion.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPrcActualVersion"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcActualVersion.#ctor(Terrasoft.Core.Configuration.SysPrcActualVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPrcActualVersion"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcActualVersion.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned instance.</returns>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPrcActualVersion.RootVersionSchemaId">
            <summary>
            Gets or sets the root version schema identifier.
            </summary>
            <value>
            The root version schema identifier.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPrcActualVersion.ActualVersionSchemaId">
            <summary>
            Gets or sets the actual version schema identifier.
            </summary>
            <value>
            The actual version schema identifier.
            </value>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaUserPropertySchema.#ctor(Terrasoft.Core.Entities.EntitySchemaManager)">
            <summary>
            Creates an instance of SysSchemaUserProperty schema class.
            </summary>
            <param name="entitySchemaManager">Entity schema manager.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaUserPropertySchema.#ctor(Terrasoft.Core.Configuration.SysSchemaUserPropertySchema)">
            <summary>
            Creates an instance of SysSchemaUserProperty schema class.
            </summary>
            <param name="source">Source SysSchemaUserProperty schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaUserPropertySchema.#ctor(Terrasoft.Core.Configuration.SysSchemaUserPropertySchema,System.Boolean)">
            <summary>
            Creates an instance of SysSchemaUserProperty schema class.
            </summary>
            <param name="schema">Source SysSchemaUserProperty schema.</param>
            <param name="isShallowClone">Shallow clone.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaUserPropertySchema.CreateEntity(Terrasoft.Core.UserConnection)">
            <summary>
            Creates an instance of SysSchemaUserProperty class.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaUserPropertySchema.Clone">
            <summary>
            Copies an instance of SysSchemaUserProperty schema class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaUserPropertySchema.CloneShallow">
            <summary>
            Copies an instance of SysSchemaUserProperty schema class.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysSchemaUserProperty">
            <summary>
            SysSchemaUserProperty class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaUserProperty.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Creates an instance of SysSchemaUserProperty class.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaUserProperty.#ctor(Terrasoft.Core.Configuration.SysSchemaUserProperty)">
            <summary>
            Creates an instance of SysSchemaUserProperty class.
            </summary>
            <param name="source">Source SysSchemaUserProperty object.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaUserProperty.Clone">
            <summary>
            Copies an instance of SysSchemaUserProperty class.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSchemaUserProperty.Name">
            <summary>
            Name of user property.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSchemaUserProperty.Value">
            <summary>
            Value of user property.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSchemaUserProperty.SysSchemaId">
            <summary>
            User property schema identifier.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.TimeProvider">
            <summary>
            Provides to retrieve accurate time stamps in the Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.TimeProvider.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Core.Configuration.TimeProvider"/> type.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.TimeProvider.#ctor(System.Func{System.DateTime})">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Core.Configuration.TimeProvider"/> type.
            </summary>
            <param name="getUtcNow">Delegate that gets the time stamps in the Coordinated Universal Time (UTC).</param>
        </member>
        <member name="P:Terrasoft.Core.Configuration.TimeProvider.UtcNow">
            <summary>
            Gets a <see cref="T:System.DateTime"/> instance that is set to the current date and time on this computer,
            expressed as the Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="T:Terrasoft.Core.CoreApiContainer">
            <summary>
            Provides methods for obtaining core API classes.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.CoreApiContainer.Resolve``1">
            <summary>
            Resolves implementation for provided type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type to resolve.</typeparam>
            <returns>Concrete implementation of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.CoreApiContainer.Bind``1">
            <summary>Declares a binding for the specified service.</summary>
            <typeparam name="T">The service to bind.</typeparam>
        </member>
        <member name="M:Terrasoft.Core.CoreApiContainer.Load(Ninject.Modules.INinjectModule[])">
            <summary>Loads the module(s) into the kernel if it has not been already loaded.</summary>
            <param name="modules">The modules to load.</param>
        </member>
        <member name="T:Terrasoft.Core.FileDesignModeSection">
            <summary>
            FileDesignModeSection serializer
            </summary>
        </member>
        <member name="P:Terrasoft.Core.FileDesignModeSection.Enabled">
            <summary>
            FileDesignMode switching
            </summary>
        </member>
        <member name="P:Terrasoft.Core.AppConfigurationSectionGroup.FileDesignModeSection">
            <summary>
            FileDesignMode settings section
            </summary>
        </member>
        <member name="T:Terrasoft.Core.IAppInfo">
            <summary>
            Provides properties with information about application.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.IAppInfo.WorkspaceId">
            <summary>
            Workspace Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.AppConnection._partnerIdP">
            <summary>
            Single sign on partner identity provider name.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.AppConnection._samlNameFieldName">
            <summary>
            The name of the parameter "name".
            </summary>
        </member>
        <member name="F:Terrasoft.Core.AppConnection._samlRoleFieldName">
            <summary>
            The name of the parameter "role".
            </summary>
        </member>
        <member name="F:Terrasoft.Core.AppConnection._defUserType">
            <summary>
            Default user type.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.AppConnection.UpdateUseOffsetFetchSettingState">
            <summary>
            Updates "UseOffsetFetch" setting state using server version.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.AppConnection.GetEntitiesWithDateColumn">
            <summary>
            Returns the key-value collection of schema names and their Date columns names lists.
            </summary>
            <returns>Dictionary of schema names and their Date columns names lists.</returns>
        </member>
        <member name="M:Terrasoft.Core.AppConnection.GetIsFileDesignModeEnabled">
            <summary>
            Determines whether the fileDesignMode option is enebled.
            </summary>
            <returns><c>true</c> if fileDesignMode is enabled. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="P:Terrasoft.Core.AppConnection.RestrictedModifySchemaAccessNames">
            <summary>
            Enumerator of schema names where editing or deleting records using DataService is not permitted.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.AppConnection.RestrictedSelectSchemaAccessNames">
            <summary>
            Enumerator of schema names where reading records using DataService is not permitted.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.AppConnection.DesignModeFactory">
            <summary>
            Design mode factory used to create configuration assembly loader.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.AppConnection.IsDemoMode">
            <summary>
            Indicates whether demo mode is enabled.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.AppConnection.FileDesignModeSettings">
            <summary>
            Returns the property that indicates current settings of design mode.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.AppConnection.MaxEntityRowCount">
            <summary>
            The maximum number of entries in EntityCollection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.AppConnection.WorkspaceId">
            <summary>
            Current workspace Id
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.DisplayDateFormatSchema.CreateEntity(Terrasoft.Core.UserConnection)">
            <summary>
            Creates an entity intance based on current schema.
            </summary>
            <param name="userConnection">User connection.</param>
            <returns>An intance of <see cref="T:Terrasoft.Core.Entities.Entity"/>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysLocalizableValueSchema">
            <summary>
            Представляет схему локализируемого значения.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.#ctor(Terrasoft.Core.Entities.EntitySchemaManager)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValueSchema"/> с заданным менеджером схем.
            </summary>
            <param name="entitySchemaManager">Менеджер схем.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.#ctor(Terrasoft.Core.Configuration.SysLocalizableValueSchema,System.Boolean)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValueSchema"/>, являющийся полным или неполным
            клоном заданной схемы <paramref name="source"/> в зависимости от значения <paramref name="isShallowClone"/>.
            </summary>
            <param name="source">Схема, клон которой создается.</param>
            <param name="isShallowClone">Признак полноты клонирования схемы. Если <paramref name="isShallowClone"/> 
            равен <c>true</c>, то в создаваемый экземпляр <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValueSchema"/> не копируются колонки
            схемы <paramref name="source"/>. Если <paramref name="isShallowClone"/> равен <c>false</c>, то создается 
            полноценный клон <paramref name="source"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.#ctor(Terrasoft.Core.Configuration.SysLocalizableValueSchema)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValueSchema"/>,
            являющийся полным клоном заданной схемы 
            <paramref name="source"/>.
            </summary>
            <param name="source">Схема, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.InitializeProperties">
            <summary>
            Инициализация свойств схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.InitializeIndexes">
            <summary>
            Initialization of indexes.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.InitializeColumns">
            <summary>
            Инициализация колонок.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.CreateSysPackageColumn">
            <summary>
            Инициализация колонки SysPackageId.
            </summary>
            <returns>Колонка SysPackageId.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.CreateSysSchemaColumn">
            <summary>
            Инициализация колонки SysSchemaId.
            </summary>
            <returns>Колонка SysSchemaId.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.CreateResourceManagerColumn">
            <summary>
            Инициализация колонки ResourceManager.
            </summary>
            <returns>Колонка ResourceManager.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.CreateSysCultureColumn">
            <summary>
            Инициализация колонки SysCultureId.
            </summary>
            <returns>Колонка SysCultureId.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.CreateKeyColumn">
            <summary>
            Инициализация колонки Key.
            </summary>
            <returns>Колонка Key.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.CreateValueColumn">
            <summary>
            Инициализация колонки Value.
            </summary>
            <returns>Колонка Value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.CreateIsChangedColumn">
            <summary>
            Инициализация колонки IsChanged.
            </summary>
            <returns>Колонка IsChanged.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.CreateImageDataColumn">
            <summary>
            Инициализация колонки ImageData.
            </summary>
            <returns>Колонка ImageData.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.CreateEntity(Terrasoft.Core.UserConnection)">
            <summary>
            Создает экземпляр объекта, который описывает схема.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/> с данными, построенный по текущей схеме.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.Clone">
            <summary>
            Возвращает экземпляр <see cref="T:System.Object"/>, являющийся полным клоном текущей схемы.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/> - полный клон текущей схемы.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValueSchema.CloneShallow">
            <summary>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/>, являющийся клоном текущей схемы без колонок.
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/> - клон текущей схемы без колонок.</returns>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysLocalizableValue">
            <summary>
            Представляет локализируемое значение.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValue.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>,
            используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValue.#ctor(Terrasoft.Core.Configuration.SysLocalizableValue)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>,
            являющийся клоном заданного локализируемого значения.
            </summary>
            <param name="source">Значение, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysLocalizableValue.Clone">
            <summary>
            Возвращает экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего локализируемого значения.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, - клон текущего локализируемого значения.</returns>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.SysPackageId">
            <summary>
            Идентификатор пакета.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.SysPackageName">
            <summary>
            Название пакета.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.SysPackage">
            <summary>
            Пакет.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.SysSchemaId">
            <summary>
            Идентификатор схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.SysSchemaCaption">
            <summary>
            Заголовок схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.SysSchema">
            <summary>
            Схема.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.ResourceManager">
            <summary>
            Имя менеджера ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.SysCultureId">
            <summary>
            Идентификатор культуры.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.SysCultureName">
            <summary>
            Название культуры.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.SysCulture">
            <summary>
            Культура.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.Key">
            <summary>
            Ключ.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.Value">
            <summary>
            Значение строкового ресурса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.ResourceType">
            <summary>
            Type of resource.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.IsChanged">
            <summary>
            Признак, был ли ресурс изменен пользователем.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLocalizableValue.ImageData">
            <summary>
            Значение графического ресурса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysPackageDataLczSchema">
            <summary>
            System package data localizable schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageDataLczSchema.#ctor(Terrasoft.Core.Entities.EntitySchemaManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLczSchema"/> class using the specified schema 
            manager.
            </summary>
            <param name="entitySchemaManager">Entity schema manager.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageDataLczSchema.#ctor(Terrasoft.Core.Configuration.SysPackageDataLczSchema,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLczSchema"/> class using the specified 
            <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLczSchema"/> object and flag of completeness of schema cloning.
            </summary>
            <param name="source">Schema, which will be cloned.</param>
            <param name="isShallowClone">Flag of completeness of schema cloning.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageDataLczSchema.#ctor(Terrasoft.Core.Configuration.SysPackageDataLczSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLczSchema"/> class using the specified 
            <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLczSchema"/> object.
            </summary>
            <param name="source">Schema, which will be cloned.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageDataLczSchema.CreateEntity(Terrasoft.Core.UserConnection)">
            <summary>
            Create a new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLcz"/> class using the specified user connection.
            </summary>
            <param name="userConnection">User connection.</param>
            <returns>A new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLcz"/> class.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageDataLczSchema.Clone">
            <summary>
            Clones the <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLczSchema"/> object.
            </summary>
            <returns>A new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLczSchema"/> class.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageDataLczSchema.CloneShallow">
            <summary>
            Clones the <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLczSchema"/> object using the flag of completeness of schema cloning.
            </summary>
            <returns>A new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLczSchema"/> class.</returns>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysPackageDataLcz">
            <summary>
            System package data localizable.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageDataLcz.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLcz"/> class using the specified user connection.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageDataLcz.#ctor(Terrasoft.Core.Configuration.SysPackageDataLcz)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLcz"/> class which is a clone of the specified 
            <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLcz"/> object.
            </summary>
            <param name="source">The <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLcz"/> object, which will be cloned.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPackageDataLcz.Clone">
            <summary>
            Clones the <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLcz"/> object.
            </summary>
            <returns>A new instance of the <see cref="T:Terrasoft.Core.Configuration.SysPackageDataLcz"/> class.</returns>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysPersistentStoreSchema">
            <summary>Базовая схема для постоянного хранилища данных.</summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPersistentStoreSchema.#ctor(Terrasoft.Core.Entities.EntitySchemaManager)">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.Configuration.SysPersistentStoreSchema"/>.</summary>
            <param name="entitySchemaManager">Менеджер схем.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPersistentStoreSchema.#ctor(Terrasoft.Core.Configuration.SysPersistentStoreSchema,System.Boolean)">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.Configuration.SysPersistentStoreSchema"/>.</summary>
            <param name="source">Схема, клон которой создается.</param>
            <param name="isShallowClone">Признак полноты клонирования схемы. Если <paramref name="isShallowClone"/> 
            равен <c>true</c>, то в создаваемый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/> не копируются колонки схемы 
            <paramref name="source"/>. Если <paramref name="isShallowClone"/> равен <c>false</c>, то создается 
            полноценный клон <paramref name="source"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPersistentStoreSchema.#ctor(Terrasoft.Core.Configuration.SysPersistentStoreSchema)">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.Configuration.SysPersistentStoreSchema"/>.</summary>
            <param name="source">Схема, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPersistentStoreSchema.CreateEntity(Terrasoft.Core.UserConnection)">
            <summary>Создает экземпляр объекта, который описывает схема.</summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.Entity"/> с данными, построенный по текущей схеме.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPersistentStoreSchema.Clone">
            <summary>Возвращает экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей схемы.</summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей схемы.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPersistentStoreSchema.CloneShallow">
            <summary>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/>, являющийся клоном текущей схемы без колонок.
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/> - клон текущей схемы без колонок.</returns>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysPersistentStore">
            <summary>Базовый объект для постоянного хранилища данных.</summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPersistentStore.#ctor(Terrasoft.Core.UserConnection)">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.Configuration.SysPersistentStore"/>.</summary>
            <param name="userConnection">Пользовательское соединение.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPersistentStore.#ctor(Terrasoft.Core.Configuration.SysPersistentStore)">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.Configuration.SysPersistentStore"/>.</summary>
            <param name="source">Схема, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPersistentStore.Clone">
            <summary>Возвращает экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей схемы.</summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей схемы.</returns>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPersistentStore.GroupKey">
            <summary>Группирующий ключ.</summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPersistentStore.Key">
            <summary>Ключ.</summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysPrcPersistentStoreSchema">
            <summary>Схема для постоянного хранилища данных бизнес-процессов.</summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcPersistentStoreSchema.#ctor(Terrasoft.Core.Entities.EntitySchemaManager)">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.Configuration.SysPrcPersistentStoreSchema"/>.</summary>
            <param name="entitySchemaManager">Менеджер схем объектов.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcPersistentStoreSchema.#ctor(Terrasoft.Core.Configuration.SysPrcPersistentStoreSchema,System.Boolean)">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.Configuration.SysPrcPersistentStoreSchema"/>.</summary>
            <param name="source">Схема, клон которой создается.</param>
            <param name="isShallowClone">Признак полноты клонирования схемы. Если <paramref name="isShallowClone"/> 
            равен <c>true</c>, то в создаваемый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/> не копируются колонки схемы 
            <paramref name="source"/>. Если <paramref name="isShallowClone"/> равен <c>false</c>, то создается 
            полноценный клон <paramref name="source"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcPersistentStoreSchema.#ctor(Terrasoft.Core.Configuration.SysPrcPersistentStoreSchema)">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.Configuration.SysPrcPersistentStoreSchema"/>.</summary>
            <param name="source">Схема, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcPersistentStoreSchema.CreateEntity(Terrasoft.Core.UserConnection)">
            <summary>Создает экземпляр объекта, который описывает схема.</summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.Entity"/> с данными, построенный по текущей схеме.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcPersistentStoreSchema.Clone">
            <summary>Возвращает экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей схемы.</summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей схемы.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcPersistentStoreSchema.CloneShallow">
            <summary>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/>, являющийся клоном текущей схемы без колонок.
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/> - клон текущей схемы без колонок.</returns>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysPrcPersistentStore">
            <summary>Объект для постоянного хранилища данных бизнес-процессов.</summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcPersistentStore.#ctor(Terrasoft.Core.UserConnection)">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.Configuration.SysPrcPersistentStore"/>.</summary>
            <param name="userConnection">Пользовательское соединение.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcPersistentStore.#ctor(Terrasoft.Core.Configuration.SysPrcPersistentStore)">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.Configuration.SysPrcPersistentStore"/>.</summary>
            <param name="source">Схема, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysPrcPersistentStore.Clone">
            <summary>Возвращает экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей схемы.</summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей схемы.</returns>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysClientUnitSchemaDependencySchema">
            <summary>
            SysClientUnitSchemaDependencySchema class
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysClientUnitSchemaDependencySchema.#ctor(Terrasoft.Core.Entities.EntitySchemaManager)">
            <summary>
            Initialize new instance of class
            <see cref="T:Terrasoft.Core.Configuration.SysClientUnitSchemaDependencySchema"/>
            </summary>
            <param name="entitySchemaManager">instance of 
            <see cref="T:Terrasoft.Core.Entities.EntitySchemaManager"/></param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysClientUnitSchemaDependencySchema.#ctor(Terrasoft.Core.Configuration.SysClientUnitSchemaDependencySchema,System.Boolean)">
            <summary>
            Initialize new instance of class 
            <see cref="T:Terrasoft.Core.Configuration.SysClientUnitSchemaDependencySchema"/>
            </summary>
            <param name="source">instance of SysClientUnitSchemaDependencySchema</param>
            <param name="isShallowClone">flag of full schema's clone</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysClientUnitSchemaDependencySchema.#ctor(Terrasoft.Core.Configuration.SysClientUnitSchemaDependencySchema)">
            <summary>
            Initialize new instance of class
            <see cref="T:Terrasoft.Core.Configuration.SysClientUnitSchemaDependencySchema"/>
            </summary>
            <param name="source">instance of SysClientUnitSchemaDependencySchema</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysClientUnitSchemaDependencySchema.CreateEntity(Terrasoft.Core.UserConnection)">
            <summary>
            create a new SysClientUnitSchemaDependency entity
            </summary>
            <param name="userConnection">instance of UserConnection</param>
            <returns>new instance of SysClientUnitSchemaDependencySchema</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysClientUnitSchemaDependencySchema.Clone">
            <summary>
            clone current instance of class
            <see cref="T:Terrasoft.Core.Configuration.SysClientUnitSchemaDependencySchema"/>
            to new instance
            </summary>
            <returns>new instance of SysClientUnitSchemaDependencySchema</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysClientUnitSchemaDependencySchema.CloneShallow">
            <summary>
            clone current instance of class
            <see cref="T:Terrasoft.Core.Configuration.SysClientUnitSchemaDependencySchema"/>
            to new instance with flag of full schema's clone
            </summary>
            <returns>new instance of SysClientUnitSchemaDependencySchema</returns>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency">
            <summary>
            SysClientUnitSchemaDependency class
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initialize new instance of class 
            <see cref="T:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency"/>
            </summary>
            <param name="userConnection">instance of <see cref="T:Terrasoft.Core.UserConnection"/></param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency.#ctor(Terrasoft.Core.Configuration.SysClientUnitSchemaDependency)">
            <summary>
            Initialize new instance of class 
            <see cref="T:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency"/>
            </summary>
            <param name="source">instance of SysClientUnitSchemaDependency</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency.Clone">
            <summary>
            clone this instance of 
            <see cref="T:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency"/> from current
            </summary>
            <returns>new instance of SysClientUnitSchemaDependency</returns>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency.UId">
            <summary>
            current dependency Id
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency.CreatedInSchemaUId">
            <summary>
            SchemaUId where current depencency created
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency.ModifiedInSchemaUId">
            <summary>
            SchemaUId where current depencency modified
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency.Name">
            <summary>
            name of current dependency
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency.SchemaUId">
            <summary>
            ShemaUId from which depend
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency.ManagerName">
            <summary>
            SchemaManagerName of dependent schema
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency.SysSchemaId">
            <summary>
            Id of dependent schema (Lookup)
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency.SysSchemaName">
            <summary>
            Name of dependent schema (Lookup)
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysClientUnitSchemaDependency.SysSchema">
            <summary>
            full getter of property SysSchema
            </summary>
        </member>
        <member name="T:Terrasoft.Core.CultureUtilities">
            <summary>
            Provides methods for working with culture.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.CultureUtilities.GetCultureWithoutPriority(System.String)">
            <summary>
            Returns culture without priority.
            </summary>
            <param name="contextCulture">Culture with priority.</param>
            <returns>Culture without priority.</returns>
        </member>
        <member name="M:Terrasoft.Core.CultureUtilities.TryCreateSpecificCulture(System.String)">
            <summary>
            Tries to create a <see cref="T:System.Globalization.CultureInfo"/> that represents the specific culture that 
            is associated with the specified name.
            </summary>
            <param name="culture">Culture name.</param>
            <returns>Specific culture name.</returns>
        </member>
        <member name="M:Terrasoft.Core.CultureUtilities.GetPriorityContextCulture(System.String[],System.Globalization.CultureInfo)">
            <summary>
            Returns context culture by priority if culture exists in GeneralResourceStorage.
            </summary>
            <param name="userLanguages">Context languages.</param>
            <param name="defaultCulture">Default culture.</param>
            <returns>Context culture by priority if culture exists, otherwise default culture.</returns>
        </member>
        <member name="M:Terrasoft.Core.CultureUtilities.SetContextCultureToGeneralStorage(System.String[],System.Globalization.CultureInfo)">
            <summary>
            Sets context culture to GeneralResourceStorage as the current culture.
            </summary>
            <param name="userLanguages">Context languages.</param>
            <param name="userCulture">Current user culture.</param>
            <returns>Context culture by priority.</returns>
        </member>
        <member name="M:Terrasoft.Core.CultureUtilities.GetUserCultureFromAuthCookie(System.Web.HttpContext)">
            <summary>
            Returns culture from authentication cookie if cookie exists.
            </summary>
            <param name="context">Http context.</param>
            <returns>Culture from authentication cookie, otherwise null.</returns>
        </member>
        <member name="T:Terrasoft.Core.DB.IOperationRightsChecker">
            <summary>
            Defines methods to check whether particular user can execute particular operation.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.IOperationRightsChecker.GetCanExecuteOperation(System.String,System.Guid)">
            <summary>
            Gets a value indicating whether a user with administrative unit Id provided by 
            <paramref name="adminUnitId"/> can execute operation with code provided by <paramref name="code"/>.
            </summary>
            <param name="code">Operation code.</param>
            <param name="adminUnitId">Administrative unit Id.</param>
            <returns>Boolean value indicating whether a user can execute operation.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.IOperationRightsChecker.GetCanExecuteOperation(System.String)">
            <summary>
            Gets a value indicating whether current user can execute operation with code 
            provided by <paramref name="code"/>.
            </summary>
            <param name="code">Operation code.</param>
            <returns>Boolean value indicating whether current user can execute operation.</returns>
        </member>
        <member name="T:Terrasoft.Core.DB.ISystemQueryExecutor">
            <summary>
            Provides methods for query execution with system rights on persistent storage.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.IQueryExecutor">
            <summary>
            Provides methods for query execution on persistent storage.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.IQueryExecutor.ExecuteReader(Terrasoft.Core.DB.Select,System.Action{System.Data.IDataReader})">
            <summary>
            Executes a <paramref name="select"/> query and passes <see cref="T:System.Data.IDataReader"/>
            to <paramref name="readAction"/>.
            </summary>
            <param name="select">Select query.</param>
            <param name="readAction">Action which executes on <see cref="T:System.Data.IDataReader"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.IQueryExecutor.ExecuteReader(System.String,Terrasoft.Core.DB.QueryParameterCollection,System.Action{System.Data.IDataReader})">
            <summary>
            Executes a <paramref name="sqlText"/> with <paramref name="parameters"/> and
            passes <see cref="T:System.Data.IDataReader"/> to <paramref name="readAction"/>.
            </summary>
            <param name="sqlText">SQL query text.</param>
            <param name="parameters">Query parameters.</param>
            <param name="readAction">Action which executes on <see cref="T:System.Data.IDataReader"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.IQueryExecutor.Execute(Terrasoft.Core.DB.Insert)">
            <summary>
            Executes an <paramref name="insert"/> query.
            </summary>
            <param name="insert">Insert query.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.IQueryExecutor.Execute(Terrasoft.Core.DB.Update)">
            <summary>
            Executes an <paramref name="update"/> query.
            </summary>
            <param name="update">Update query.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.IQueryExecutor.Execute(Terrasoft.Core.DB.Delete)">
            <summary>
            Executes a <paramref name="delete"/> query.
            </summary>
            <param name="delete">Delete query.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.IQueryExecutor.ExecuteScalar``1(Terrasoft.Core.DB.Select)">
            <summary>
            Executes a <paramref name="select"/> query and returns first column value of the first row in result set.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.Sequence">
            <summary>
            Sequence object in database.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Sequence.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DB.Sequence"/> class.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Sequence.#ctor(Terrasoft.Core.UserConnection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DB.Sequence"/> class.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="name">Sequence name.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Sequence.#ctor(Terrasoft.Core.DB.Sequence)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DB.Sequence"/> class. 
            Creates a new <see cref="T:Terrasoft.Core.DB.Sequence"/> object that is a copy of the <paramref name="source"/> instance.
            </summary>
            <param name="source"><see cref="T:Terrasoft.Core.DB.Sequence"/> instance.</param>
        </member>
        <member name="F:Terrasoft.Core.DB.Sequence._dbEngine">
            <summary>
            Database engine.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Sequence.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Sequence.GetNextValue">
            <summary>
            Generates a sequence number from the specified sequence object.
            </summary>
            <returns>Returns the number using type sequence.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Sequence.GetNextValue(Terrasoft.Core.DB.DBExecutor)">
            <summary>
            Generates a sequence number from the specified sequence object.
            </summary>
            <param name="dbExecutor">Database executor <seealso cref="T:Terrasoft.Core.DB.DBExecutor"/>.</param>
            <returns>Returns the number using type sequence.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Sequence.Create">
            <summary>
            Creates a sequence object and specifies its properties.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Sequence.Create(Terrasoft.Core.DB.DBExecutor)">
            <summary>
            Creates a sequence object and specifies its properties.
            </summary>
            <param name="dbExecutor">Database executor <seealso cref="T:Terrasoft.Core.DB.DBExecutor"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Sequence.Exist">
            <summary>
            Checks sequence existence in database.
            </summary>
            <returns>Returns value that indicates whether sequence object exists in database or not.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Sequence.Exist(Terrasoft.Core.DB.DBExecutor)">
            <summary>
            Checks sequence existence in database.
            </summary>
            <param name="dbExecutor">Database executor <seealso cref="T:Terrasoft.Core.DB.DBExecutor"/>.</param>
            <returns>Returns value that indicates whether sequence object exists in database or not.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Sequence.Drop">
            <summary>
            Removes a sequence object from the current database.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Sequence.Drop(Terrasoft.Core.DB.DBExecutor)">
            <summary>
            Removes a sequence object from the current database.
            </summary>
            <param name="dbExecutor">Database executor <seealso cref="T:Terrasoft.Core.DB.DBExecutor"/>.</param>
        </member>
        <member name="P:Terrasoft.Core.DB.Sequence.UserConnection">
            <summary>
            User connection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Sequence.Name">
            <summary>
            Specifies the unique name by which the sequence is known in the database.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Sequence.StartWith">
            <summary>
            The first value returned by the object sequence.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Sequence.IncrementBy">
            <summary>
            Value that is increased (or decreased if it is negative) 
            value of the sequence of the object at each call <see cref="M:Terrasoft.Core.DB.Sequence.GetNextValue"/> method.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition">
            <summary>
            Represents class for the <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaElement"/> transition, when element should be run
            after other <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaElement"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition.#ctor(Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition)">
            <summary>
            Creates a new instance with specified AfterDcmSchemaElementTransition.
            </summary>
            <param name="source">Instance that inherites the 
            <see cref="T:Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Applies meta data values.
            </summary>
            <param name="reader">Instance of the <see cref="T:Terrasoft.Common.DataReader"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition.CreateFlowElement(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Creates flow element.
            </summary>
            <param name="flowSchema">Instance of the <see cref="T:Terrasoft.Core.Process.FlowSchema"/> type.</param>
            <returns>
            Instance of the <see cref="T:Terrasoft.Core.Process.FlowElement"/> type.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes meta data values.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition.Validate">
            <summary>
            Validates current transition instance
            </summary>
            <returns>
            <c>true</c>, if <see cref="P:Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition.SourceElementUId"/> is not empty <see cref="T:System.Guid"/>, and
            <see cref="T:Terrasoft.Core.Process.BaseProcessSchemaElement"/> has same <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaStage"/> as <see cref="P:Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition.SourceElement"/>
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition.SourceElement">
            <summary>
            Gets <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaElement"/> after which <see cref="T:Terrasoft.Core.Process.BaseProcessSchemaElement"/> should be run.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.AfterDcmSchemaElementTransition.SourceElementUId">
            <summary>
            Gets or sets <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaElement"/> UId, after which <see cref="T:Terrasoft.Core.Process.BaseProcessSchemaElement"/>
            should be run.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.DefaultDcmSchemaElementTransition">
            <summary>
            Represents class for the DcmSchemaElement default transition.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DefaultDcmSchemaElementTransition.#ctor(Terrasoft.Core.DcmProcess.DefaultDcmSchemaElementTransition)">
            <summary>
            Creates a new instance with specified DefaultDcmSchemaElementTransition.
            </summary>
            <param name="source">Instance that inherites the <see cref="T:Terrasoft.Core.DcmProcess.DefaultDcmSchemaElementTransition"/> type.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DefaultDcmSchemaElementTransition.#ctor">
            <summary>
            Creates new instance of <see cref="T:Terrasoft.Core.DcmProcess.DefaultDcmSchemaElementTransition"/>
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DefaultDcmSchemaElementTransition.CreateFlowElement(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Creates flow element.
            </summary>
            <param name="flowSchema">Instance of the <see cref="T:Terrasoft.Core.Process.FlowSchema"/> type.</param>
            <returns>
            Instance of the <see cref="T:Terrasoft.Core.Process.FlowElement"/> type.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DefaultDcmSchemaElementTransition.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DefaultDcmSchemaElementTransition.IsDefault">
            <summary>
            Gets default transition flag.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.DcmEntityUtilities">
            <summary>
            Utilites for entity dcm process.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmEntityUtilities.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Constructor for DcmEntityUtilities class.
            </summary>
            <param name="userConnection"> User connection</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmEntityUtilities.GetIsItemEnabledForEntity(Terrasoft.Core.ISchemaManagerItem{Terrasoft.Core.DcmProcess.DcmSchema},System.Guid)">
            <summary>
            Returns true - when dcm schema enabled and use for enitiy schema, false - otherwise.
            </summary>
            <param name="item">The dcm schema manager item.</param>
            <param name="entitySchemaUId">The entity schema unique identifier.</param>
            <returns><c>true</c> if dcm schema enabled and use for enitiy schema. Otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmEntityUtilities.GetCanEntityUseDcm(System.Guid,System.Collections.Generic.IEnumerable{Terrasoft.Core.Entities.EntityColumnValue})">
            <summary>
            Indicates whether the entity can use DCM process if the given columns changed.
            </summary>
            <param name="entitySchemaUId">The entity schema unique identifier.</param>
            <param name="changedColumns">The changed columns.</param>
            <returns><c>true</c> if the entity can use DCM process. Otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmEntityUtilities.FindEnabledDcmSchema(System.Guid)">
            <summary>
            Finds the enabled DCM schema for the given entity schema.
            </summary>
            <param name="entitySchemaUId">The entity schema unique identifier.</param>
            <returns>Schema that is enabled for the given entity schema or <c>null</c> if there is no schema exists.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmEntityUtilities.FindEnabledDcmSchemas(System.Guid)">
            <summary>
            Finds all enabled DCM schemas for the given entity schema.
            </summary>
            <param name="entitySchemaUId">The entity schema unique identifier.</param>
            <returns>
            Schemas that is enabled for the given entity schema.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmEntityUtilities.ValidateDcmRequiredElement(Terrasoft.Core.Entities.Entity,System.Collections.ObjectModel.Collection{Terrasoft.Core.Configuration.ProcessListener})">
            <summary>
            Returns validation information on required uncompleted dcm elements.
            </summary>
            <param name="entity">Entity.</param>
            <param name="processListeners">Process entity listeners</param>
            <returns></returns>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmEntityUtilities.UserConnection">
            <summary>
            Gets user connection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmEntityUtilities.DcmSchemaManager">
            <summary>
            Gets user connection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmEntityUtilities.ProcessEngine">
            <summary>
            Gets process engine.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.DcmProcessElementFactory">
            <summary>
            Implements interface <see cref="T:Terrasoft.Core.Process.IProcessElementFactory"/> for process based on dcm schema.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.BaseProcessElementFactory"/>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmProcessElementFactory.#ctor(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DcmProcess.DcmProcessElementFactory"/> class.
            </summary>
            <param name="process">The process.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmProcessElementFactory.CreateProcessElement(Terrasoft.Core.Process.BaseProcessSchemaElement)">
            <summary>
            Creates the process element depending on its meta data.
            </summary>
            <param name="schemaElement">The schema element meta data.</param>
            <returns>
            The process element instance.
            </returns>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator">
            <summary>
            Flow generator for the DCM process schema.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.BaseFlowSchemaGenerator`1"/>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.#ctor(Terrasoft.Core.DcmProcess.DcmSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator"/> class with the specified DCM schema.
            </summary>
            <param name="dcmSchema">Schema of the DCM process.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.ForceGetTransition(System.Guid)">
            <summary>
            Forcibly obtains element transition.
            </summary>
            <param name="elementUId">Dcm schema element identifier.</param>
            <returns>If <see cref="T:Terrasoft.Core.DcmProcess.DcmSchema"/> contains transition for element, returns it. Otherwise returns
            <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaElementTransition"/> transition.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.GetRecordIdSchemaParameterMapPath(Terrasoft.Core.Process.IProcessSchemaSignalEvent)">
            <summary>
            Returns mapping path of the "RecordId" parameter.
            </summary>
            <param name="signalMetaInfo">The signal meta information.</param>
            <returns>Returns string that represents mapping path of the "RecordId" process parameter.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.Generate">
            <summary>
            Generates the process flow schema.
            </summary>
            <returns>
            Process flow schema.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.GetParametrizedProcessSchemaElement(System.Guid)">
            <summary>
            Gets the parametrized process schema element by the its identifier.
            </summary>
            <param name="schemaElementUId">The element's identifier.</param>
            <returns>
            "The process schema element implemented interface
            <see cref="T:Terrasoft.Core.Process.IParametrizedProcessSchemaElement"/>.
            </returns>
            <exception cref="T:System.NotImplementedException">Allways.</exception>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.GetParametrizedSchemaElements">
            <summary>
            Returns the process schema elements that implement
            <see cref="T:Terrasoft.Core.Process.IParametrizedProcessSchemaElement"/>.
            </summary>
            <returns>
            The list of the elements.
            </returns>
            <exception cref="T:System.NotImplementedException">Allways.</exception>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.FindProcessSchemaParameter(Terrasoft.Core.Process.ProcessParameterMapInfo)">
            <summary>
            Finds the process schema parameter by its map info.
            </summary>
            <param name="parameterMapInfo">The process schema parameter path.</param>
            <returns>
            The found process schema parameter or <c>null</c> if its not found.
            </returns>
            <exception cref="T:System.NotImplementedException">Allways.</exception>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.TryGetProcessItemName(System.String,System.String@)">
            <summary>
            Attempts to get process schema parameter name or process element parameter name.
            </summary>
            <param name="parameterMapPath">Represents parameter mapping path.</param>
            <param name="itemName">Represents a string consisting of comma-separated parameter names.</param>
            <returns>
            <c>true</c> if the parameter exists, otherwise - <c>false</c>.
            </returns>
            <exception cref="T:System.NotImplementedException">Allways.</exception>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.DcmFlowSchemaInfo">
            <summary>
            Represents information about DCM schema elements during current flow schema generation.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.DcmFlowSchemaInfo.EntitySchemaUId">
            <summary>
            Gets or sets entity schema identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.DcmFlowSchemaInfo.StageColumnUId">
            <summary>
            Gets or sets stage column identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.DcmFlowSchemaInfo.IntermediateCatchSignalUId">
            <summary>
            Gets or sets the intermediate catch signal identifier.
            </summary>
            <value>
            The intermediate catch signal identifier.
            </value>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.DcmFlowSchemaInfo.StartSignalUId">
            <summary>
            Gets or sets the start signal identifier.
            </summary>
            <value>
            The start signal identifier.
            </value>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.DcmFlowSchemaInfo.GatewayUId">
            <summary>
            Gets or sets the stage gateway identifier.
            </summary>
            <value>
            The stages gateway identifier.
            </value>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmFlowSchemaGenerator.DcmFlowSchemaInfo.TerminateEventUId">
            <summary>
            Gets or sets the terminate event identifier.
            </summary>
            <value>
            The terminate event identifier.
            </value>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.DcmRunner">
            <summary>
            The runner class for the <seealso cref="T:Terrasoft.Core.DcmProcess.DcmSchema"/>.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.BaseProcessRunner"/>
        </member>
        <member name="T:Terrasoft.Core.Process.BaseProcessRunner">
            <summary>
            The base class for process runners.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.IProcessRunner"/>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessRunner">
            <summary>
            The interface for the process schema runner.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessRunner.Initialize">
            <summary>
            Initializes the instance that implements the <see cref="T:Terrasoft.Core.Process.IProcessRunner"/> interface.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessRunner.CreateProcess">
            <summary>
            Creates the process.
            </summary>
            <returns>The <see cref="T:Terrasoft.Core.Process.Process"/> instance for the process schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessRunner.Run">
            <summary>
            Runs the specified process.
            </summary>
            <returns>
            The <see cref="T:Terrasoft.Core.Process.Process"/> instance for the ran process.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessRunner.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessRunnerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.BaseProcessRunner"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="settings">Set of features to support on the process runner by the creation method.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessRunner.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessRunnerSettings,Terrasoft.Core.Process.FlowEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.BaseProcessRunner"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="settings">Set of features to support on the process runner by the creation method.</param>
            <param name="flowEngine">The flow engine.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessRunner.GetSchemaDisplayValue(Terrasoft.Core.Schema)">
            <summary>
            Gets the schema display value.
            </summary>
            <param name="schema">The schema.</param>
            <returns>The display value of the schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessRunner.WriteLogMessageWhenSchemaIsDisabled(Terrasoft.Core.Schema)">
            <summary>
            Writes log informaition that the specified schema is disabled.
            </summary>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessRunner.CreateFlowEngine">
            <summary>
            Creates the flow engine.
            </summary>
            <returns>The instance of the flow engine.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessRunner.Validate(Terrasoft.Core.Process.BaseProcessSchema)">
            <summary>
            Validates the specified schema.
            </summary>
            <param name="schema">The schema.</param>
            <exception cref="T:Terrasoft.Core.ProcessSchemaIsNotEnabledException">The schema is disabled.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessRunner.GetIsEnabled">
            <summary>
            Returns the value that indicates whether the schema is enabled.
            </summary>
            <returns><c>true</c> if current schema is enabled, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessRunner.CreateProcess">
            <summary>
            Creates the process.
            </summary>
            <returns>
            The <see cref="T:Terrasoft.Core.Process.Process"/> instance for the process schema.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessRunner.Run">
            <summary>
            Runs the specified process.
            </summary>
            <returns>
            The <see cref="T:Terrasoft.Core.Process.Process"/> instance for the ran process.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.Process.BaseProcessRunner.UserConnection">
            <summary>
            Gets or sets the user connection.
            </summary>
            <value>
            The user connection.
            </value>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmRunner.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessRunnerSettings,Terrasoft.Core.Process.IProcessServiceProvider,Terrasoft.Core.Process.FlowEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DcmProcess.DcmRunner"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="settings">Set of features to support on the process runner by the creation method.</param>
            <param name="serviceProvider">The service provider.</param>
            <param name="flowEngine">The flow engine.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmRunner.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessRunnerSettings,Terrasoft.Core.Process.IProcessServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DcmProcess.DcmRunner"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="settings">Set of features to support on the process runner by the creation method.</param>
            <param name="serviceProvider">Instance of <see cref="T:Terrasoft.Core.Process.IProcessServiceProvider"/></param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmRunner.Run(Terrasoft.Core.DcmProcess.DcmSchema,System.Guid)">
            <summary>
            Runs the specified process by its DCM schema and entity primary column value.
            </summary>
            <param name="schema">The DCM schema.</param>
            <param name="entityId">The entity primary column value.</param>
            <returns>The <see cref="T:Terrasoft.Core.Process.Process"/> instance for the ran process.</returns>
            <exception cref="T:Terrasoft.Core.ProcessRunBySignalException">The error occurred while running.</exception>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmRunner.CreateProcess">
            <summary>
            Creates the process.
            </summary>
            <returns>The <see cref="T:Terrasoft.Core.Process.Process"/> instance for the DCM schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmRunner.Initialize">
            <summary>
            Initializes the current instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmRunner.Run">
            <summary>
            Runs the specified process.
            </summary>
            <returns>
            The <see cref="T:Terrasoft.Core.Process.Process"/> instance for the ran process.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmRunner.SchemaManager">
            <summary>
            Gets the schema manager.
            </summary>
            <value>
            The schema manager.
            </value>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.DcmSchema">
            <summary>
            Represents class for the DCM process diagram.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchema.#ctor(Terrasoft.Core.ISchemaManager)">
            <summary>
            Creates a new instance with specified schema manager.
            </summary>
            <param name="schemaManager">Instance that implements the <see cref="T:Terrasoft.Core.ISchemaManager"/> interface.</param>
        </member>
        <member name="F:Terrasoft.Core.DcmProcess.DcmSchema._parentSchemaUId">
            <summary>
            Gets or sets unique identifier of the parent schema.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DcmProcess.DcmSchema._enabled">
            <summary>
            Gets whether the schema is enabled.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DcmProcess.DcmSchema._stages">
            <summary>
            Gets stages of the current schema.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DcmProcess.DcmSchema._stageConnections">
            <summary>
            Gets stage targets of the current schema.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DcmProcess.DcmSchema._transitions">
            <summary>
            Gets elements transitions of the current schema.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DcmProcess.DcmSchema._filters">
            <summary>
            Gets filters of the current schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchema.FindLastStage">
            <summary>
            Returns the last stage for the current schema.
            </summary>
            <returns>The last stage for the current schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchema.InitializeProperties">
            <summary>
            Initializes properties.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchema.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Applies meta data values.
            </summary>
            <param name="reader">Instance of the <see cref="T:Terrasoft.Common.DataReader"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchema.GetStartSignalsMetaInfo">
            <summary>
            Gets the collection of meta information items for each start signal.
            </summary>
            <returns>
            The collection of meta information items for each start signal.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchema.GetIsEnabled">
            <summary>
            Returns the enabled state.
            </summary>
            <returns><c>true</c> if current schema is enabled; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchema.GetBaseElements">
            <summary>
            Gets the base elements.
            </summary>
            <returns>The base elements.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchema.GetIsFinalStage(Terrasoft.Core.DcmProcess.DcmSchemaStage)">
            <summary>
            Determines whether the specified stage is final.
            </summary>
            <param name="stage">The stage.</param>
            <returns><c>true</c>, if it is the final stage, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchema.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes meta data values.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchema.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchema.GetMetaItems(System.Collections.Generic.ICollection{Terrasoft.Core.IMetaItem})">
            <summary>
            Fills collection with items of the meta data.
            </summary>
            <param name="metaItems">Collection of the meta items.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchema.SynchronizeParameters">
            <summary>
            Synchronizes element parameters.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchema.AssignParentSchema(Terrasoft.Core.DcmProcess.DcmSchema)">
            <summary>
            Assigns the given schema as a parent for the current one.
            </summary>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchema.DependencyFactory">
            <summary>
            Gets the dependency factory.
            </summary>
            <value>
            The dependency factory.
            </value>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchema.BaseElements">
            <summary>
            Gets the base elements.
            </summary>
            <value>
            The base elements.
            </value>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchema.StartSignalEventSchema">
            <summary>
            Gets the start signal event schema.
            </summary>
            <value>
            The start signal event schema.
            </value>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchema.IntermediateCatchSignalEventSchema">
            <summary>
            Gets the intermediate catch signal event schema.
            </summary>
            <value>
            The intermediate catch signal event schema.
            </value>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchema.DefaultStage">
            <summary>
            Gets the default stage.
            </summary>
            <value>
            The default stage.
            </value>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchema.TerminateEventSchema">
            <summary>
            Gets the terminate event schema.
            </summary>
            <value>
            The terminate event schema.
            </value>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchema.SerializeToDB">
            <summary>
            Gets the flag that indicates whether the process needs to be serialized to DB.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchema.IsInterpretable">
            <summary>
            Gets whether the process is interpretable.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchema.EntitySchemaUId">
            <summary>
            Gets stage entity schema identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchema.StageColumnUId">
            <summary>
            Gets stage column identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchema.ParentSchema">
            <summary>
            Gets or sets the parent schema.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.DcmSchemaBaseElements">
            <summary>
            The class for the base elements of the <see cref="T:Terrasoft.Core.DcmProcess.DcmSchema"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaBaseElements.#ctor(Terrasoft.Core.DcmProcess.DcmSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaBaseElements"/> class.
            </summary>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaBaseElements.FindByUId(System.Guid)">
            <summary>
            Finds the element by identifier.
            </summary>
            <param name="uid">The uid of the element.</param>
            <returns>Found element.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaBaseElements.FindByName(System.String)">
            <summary>
            Finds the element by name.
            </summary>
            <param name="name">The name of the element.</param>
            <returns>Found element.</returns>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.DcmSchemaElement">
            <summary>
            Represents class for the element of the DCM process schema.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessElementMetaInfo">
            <summary>
            Represents meta info of the process element.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElement.#ctor(Terrasoft.Core.DcmProcess.DcmSchemaElement)">
            <summary>
            Creates a new instance with specified DcmSchemaElement.
            </summary>
            <param name="source">Instance that inherites the <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaElement"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElement.#ctor(Terrasoft.Core.Process.BaseProcessSchemaElement)">
            <summary>
            Creates a new instance with specified process schema element.
            </summary>
            <param name="flowElement">Instance that inherites the <see cref="T:Terrasoft.Core.Process.BaseProcessSchemaElement"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElement.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElement.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Applies meta data values.
            </summary>
            <param name="reader">Instance of the <see cref="T:Terrasoft.Common.DataReader"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElement.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes meta data values.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElement.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElement.CreateFlowElement(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Creates flow element.
            </summary>
            <param name="flowSchema">Instance of the <see cref="T:Terrasoft.Core.Process.FlowSchema"/> type.</param>
            <returns>
            Instance of the <see cref="T:Terrasoft.Core.Process.FlowElement"/> type.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElement.GetOutgoingsDefaultFlows">
            <summary>
            Returns outgoing default sequence flows for the current element.
            </summary>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElement.GetOutgoingsDefaultFlows(Terrasoft.Core.Process.ProcessSchemaFlowNode)">
            <summary>
            Returns outgoing default sequence flows for the specified element.
            </summary>
            <param name="flowNode">Process element.</param>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElement.GetOutgoingsConditionalFlows">
            <summary>
            Returns outgoing conditional sequence flows for the current element.
            </summary>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElement.GetOutgoingsConditionalFlows(Terrasoft.Core.Process.ProcessSchemaFlowNode)">
            <summary>
            Returns outgoing conditional sequence flows for the specified element.
            </summary>
            <param name="flowNode">Process element.</param>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaElement.ForceGetParameters">
            <summary>
            Forcibly obtains process parameters.
            </summary>
            <returns>
            Collection of process parameters.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaTransitionsTypesProvider.GetMixedCollectionItemTypes(Terrasoft.Core.Configuration.SysWorkspace,System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Fills collection with items of the <see cref="T:System.Type"/> references.
            </summary>
            <param name="workspace">Not uses.</param>
            <param name="itemTypes">Collection of items with the <see cref="T:System.Type"/> references.</param>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.DcmSchemaManager">
            <summary>
            Represents class for the DCM schema manager.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaManager.InitializeDefSchema">
            <summary>
            Initializes the schema which is used as default parent schema.
            </summary>
            <returns>Default Dcm schema</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaManager.CreateInterpretationValidator(Terrasoft.Core.UserConnection)">
            <summary>
            Gets the interpretation validator for process schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns>
            Interpretation validator instance.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaManager.GetSchemaSources(Terrasoft.Core.DcmProcess.DcmSchema,System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Returns entity collection, which contains schema sources. Since the dcm schema has no sources it will
            return an empty collection.
            </summary>
            <param name="schema">The schema.</param>
            <param name="schemaId">The schema Id.</param>
            <param name="userConnection">The user connection.</param>
            <returns>Schema sources.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaManager.CreateSchemaInstance(Terrasoft.Core.ISchemaManagerItem,System.Reflection.Assembly)">
            <summary>
            Creates the schema instance.
            </summary>
            <param name="schemaManagerItem">The schema manager item.</param>
            <param name="assembly">Assembly contains instance type.</param>
            <returns>Schema instance.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaManager.CreateItem">
            <summary>
            Creates the item.
            </summary>
            <returns>Item instance.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaManager.GetInstanceById(System.Guid)">
            <summary>
            Gets the schema by identifier.
            </summary>
            <param name="schemaId">The schema identifier.</param>
            <returns>The instance of the schema.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">The schema was not found.</exception>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaManager.CheckOperationUserRights(Terrasoft.Core.UserConnection)">
            <summary>
            Checks user rights for manage schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns>Flag that indicates if user have rights</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaManager.GetGenerator(Terrasoft.Core.UserConnection)">
            <summary>
            The method is not implemented.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaManager.GetInstanceByUId(System.Guid)">
            <summary>
            Gets the instance by the unique identifier.
            </summary>
            <param name="schemaUId">The unique identifier of the schema.</param>
            <returns>The instance of the schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaManager.GetInstanceByName(System.String)">
            <summary>
            Gets the instance by the name.
            </summary>
            <param name="name">The name of the schema.</param>
            <returns>The instance of the schema.</returns>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaManager.ItemTypeName">
            <summary>
            Gets item name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaManager.CanUseUserProperties">
            <summary>
            Gets a value indicating whether this instance can use user properties.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaManager.ItemCaption">
            <summary>
            Gets item caption.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaManager.ResourceManagerName">
            <summary>
            Gets the name of the resource manager.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessElementInstanceFactory">
            <summary>
            Provides method for the creation of process element instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessElementInstanceFactory.CreateProcessElement(Terrasoft.Core.UserConnection)">
            <summary>
            Creates the process element.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns>The process element instance.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaStage.#ctor(Terrasoft.Core.DcmProcess.DcmSchemaStage)">
            <summary>
            Creates a new instance that is a copy of another instance.
            </summary>
            <param name="source">Instance of the <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaStage"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaStage.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DcmProcess.DcmSchemaStage._elements">
            <summary>
            Gets elements of the current stage.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaStage.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Applies meta data values.
            </summary>
            <param name="reader">Instance of the <see cref="T:Terrasoft.Common.DataReader"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaStage.InitializeLocalizableValues(Terrasoft.Common.IResourceStorage,System.String,System.String)">
            <summary>
            Initializes resources from the specified storage from the specified manager and resorce group name.
            </summary>
            <param name="storage">Resource storage.</param>
            <param name="resourceManagerName">Resource manager name.</param>
            <param name="resourceGroupName">Resource group name.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaStage.GetLocalizableValues(System.Collections.Generic.ICollection{Terrasoft.Common.LocalizableValue},System.Boolean)">
            <summary>
            Returns localizable values list.
            </summary>
            <param name="values">Localizable values list.</param>
            <param name="includeInherited">Flag that indicates include inherited resources or not.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaStage.LoadLocalizableValues">
            <summary>
            Loads localizable value.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaStage.CreateFlowElement(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Creates flow element.
            </summary>
            <param name="flowSchema">Instance of the <see cref="T:Terrasoft.Core.Process.FlowSchema"/> type.</param>
            <returns>
            Instance of the <see cref="T:Terrasoft.Core.Process.FlowElement"/> type.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaStage.GetMetaItems(System.Collections.Generic.ICollection{Terrasoft.Core.IMetaItem})">
            <summary>
            Fills collection with items of the meta data.
            </summary>
            <param name="metaItems">Collection of the meta items.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaStage.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes meta data values.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaStage.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaStage.CreateProcessElement(Terrasoft.Core.UserConnection)">
            <summary>
            Creates the process element.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns>
            The process element instance.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaStage.ParentMetaSchema">
            <summary>
            Parent <see cref="T:Terrasoft.Core.MetaSchema"/> that contains this instance.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaStage.ParentStageUId">
            <summary>
            Parent stage identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaStage.Color">
            <summary>
            Color.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaStage.StageRecordId">
            <summary>
            Stage record identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaStage.IsSuccessful">
            <summary>
            Indicates if stage is successful.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaStage.IsDefault">
            <summary>
            Gets or sets a value indicating whether this instance is default stage schema. Default stage is used to 
            run DCM process when current case entity moved to stage that is not described in current DCM schema.
            </summary>
            <value>
            <c>true</c> if this instance is default stage schema; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.DcmStageUserTask">
            <summary>
            Flow element for stage in DCM process.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.ProcessActivity"/>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessActivity">
            <summary>
            Represents a process activity.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessActivity"/> type.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessActivity"/> type.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="F:Terrasoft.Core.Process.ProcessActivity._compressor">
            <summary>
            Provides methods for compression and unpacking data.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.ResetIsSavedPropertyForCompiledProcess(System.Boolean)">
            <summary>
            Resets the <see cref="P:Terrasoft.Core.Process.Process.IsSaved"/> property for compiled process.
            </summary>
            <param name="isElementRegisteredInDB">Indicates that the element was already registered in the database.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.OnExecuted(Terrasoft.Core.Process.ProcessActivityAfterEventArgs)">
            <summary>
            This method is called after the current process element is executed.
            </summary>
            <param name="e">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessActivityAfterEventArgs"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.ApplyPropertiesDataValues(Terrasoft.Common.DataReader)">
            <summary>
            Applies state of the current process element.
            </summary>
            <param name="reader">Instance that provides sequential reading of data.</param>		
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.NeedBreakProcessExecuting(Terrasoft.Core.Process.ProcessActivityAfterEventArgs)">
            /// <summary>
            Checks whether there is a need to break owner process execution after current element executed.
            </summary>
            <param name="e">The <see cref="T:Terrasoft.Core.Process.ProcessActivityAfterEventArgs"/> instance containing the event data.</param>
            <returns><c>True</c> if owner process execution must be ended after current element execution; otherwise 
            <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.HasMapping(System.String)">
            <summary>
            Determines whether the specified parameter has mapping value.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <returns><c>true</c> if parameter exists and it has mapping value; otherwise<c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.GetSchema(System.Guid)">
            <summary>
            Returns instance of the schema.
            </summary>
            <param name="schemaUId">UId of the schema.</param>
            <returns>Instance of the schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.AfterInternalExecute">
            <summary>
            This method is called after the current process element is executed, but before the "Executed" event
            is triggered.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.WriteProcessParameters">
            <summary>
            Writes parameter values of the current process element.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.CreateParametersWriter(Terrasoft.Core.Process.IProcessParametersMetaInfo)">
            <summary>
            Creates parameters data writer.
            </summary>
            <param name="source">Schema element.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.GetProcessParameterValueProvider">
            <summary>
            Returns process parameters value provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.FindSchemaElement">
            <summary>
            Finds the current schema element in schema of the current owner.
            </summary>
            <returns>Found schema element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.FindSchemaElement(System.Guid)">
            <summary>
            Finds the current schema element in schema of the current owner.
            </summary>
            <param name="schemaElementUId">The identifier of the schema element.</param>
            <returns>Found schema element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.GetSchemaElement(System.Guid)">
            <summary>
            Returns owner schema element by the specified indentidier.
            </summary>
            <param name="schemaElementUId">Schema element identifier.</param>
            <returns>Found schema element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.UpdateStatusInLog(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessStatus,System.String)">
            <summary>
            Updates status of the process element in DB.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="newStatus">Status of the process.</param>
            <param name="error">Description of the error.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.RegisterInDB(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessStatus,System.String)">
            <summary>
            Performs registration of the process data in DB.
            <param name="userConnection">The user connection.</param>
            <param name="status">The process status.</param>
            <param name="error">The description of the error.</param>
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.SetParameterValue(Terrasoft.Core.Process.IProcessParametersMetaInfo,Terrasoft.Core.Process.ProcessSchemaParameter,System.Object,System.Object)">
            <summary>
            Sets parameter value.
            </summary>
            <param name="source">Process element.</param>
            <param name="parameter">Process schema parameter.</param>
            <param name="value">Value.</param>
            <param name="defValue">Default value.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.Assign(Terrasoft.Core.Process.ProcessFlowElement)">
            <summary>
            Assigns the property values of the current process element to the properties of the specified element.
            </summary>
            <param name="processElement">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.CreateFlowElementInstanceByType(System.Type,Terrasoft.Core.Process.Process)">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> class by the specified type info.
            </summary>
            <param name="processElementType"></param>
            <param name="process">Instance of the <see cref="T:Terrasoft.Core.Process.Process"/> type.</param>
            <returns>Instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> type.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.CloneShallow">
            <summary>
            Creates a shallow copy of the current process element.
            </summary>
            <returns>Instance that is a copy of the current process element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.ReadPropertiesData">
            <summary>
            Reads state of the current process element.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.WritePropertiesData">
            <summary>
            Writes state of the current process element.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.WritePropertiesData(Terrasoft.Common.DataWriter,System.Boolean)">
            <summary>
            Writes state of the current process element.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
            <param name="shouldWriteElements">Indicates whether to write other process elements.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.Execute(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Executes current flow element.
            </summary>
            <param name="context">The execution context.</param>
            <returns><c>true</c>, if element was successfully executed and conditions for moving to the next step were
            satisfied. Otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.ReadPropertiesDataFromDB(Terrasoft.Core.UserConnection)">
            <summary>
            Reads state of the current process element from DB.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.ReadPropertiesDataFromMemory">
            <summary>
            Method is not implemented.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.WritePropertiesDataToDB(Terrasoft.Core.UserConnection)">
            <summary>
            Writes state of the current process element to DB.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.WritePropertiesDataToMemory">
            <summary>
            Method is not implemented.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.CompleteExecuting(System.Object[])">
            <summary>
            Completes executing the current process element.
            </summary>
            <param name="parameters">Array of the parameter values.</param>
            <returns><c>true</c>, if element was successfully executed and conditions for moving to the next step were
            satisfied; otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.CancelExecuting(System.Object[])">
            <summary>
            Canceles executing the current process element.
            </summary>
            <param name="parameters">Array of the parameter values.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.GetExecutionData">
            <summary>
            Returns the data required to display the execution page.
            </summary>
            <returns>String that represents the data needed for showing execution page.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.GetResultParameterAllowedValues">
            <summary>
            Returns allowed values of the result parameter.
            </summary>
            <returns>Allowed values of the result parameter.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.GetResultAllowedValues">
            <summary>
            Gets the result allowed values.
            </summary>
            <returns>The result allowed values.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.GetPropertiesData">
            <summary>
            Returns serialized state of the current process element.
            </summary>
            <returns>String that represents serialized state of the current process element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.GetPropertiesData(System.Boolean)">
            <summary>
            Returns serialized state of the current process element.
            </summary>
            <param name="shouldWriteElements">Indicates whether to write other process elements.</param>
            <returns>String that represents serialized state of the current process element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.SerializeToString(System.Object)">
            <summary>
            Serializes the specified value.
            </summary>
            <param name="value">The specified value.</param>
            <returns>String that represents the serialized value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.DeserializeFromString``1(System.String)">
            <summary>
            Converts the specified string to an object of the specified type.
            </summary>
            <param name="value">The string to be deserialized.</param>
            <typeparam name="T">The type of the resulting object.</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.GetLocalizableString(System.String,System.String)">
            <summary>
            Returns string value that depends on the current culture info.
            </summary>
            <param name="managerName">Name of the resource manager.</param>
            <param name="resourceItemName">Name of the resource item.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.ConvertToProcessDataSourceFilters(System.Guid,System.String)">
            <summary>
            Converts a set of filters to a process format.
            </summary>
            <param name="entitySchemaUId">Unique identifier of the entity schema.</param>
            <param name="dataSourceFilters">Set of the filter values.</param>
            <returns>Converted value of the set of filters.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.GetSchemaElement">
            <summary>
            Returns owner schema element.
            </summary>
            <returns>Found schema element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.GetIsReexecution">
            <summary>
            Returns flag that idicates if element has been executed one or more times.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessActivity.GetParameterValue(Terrasoft.Core.Process.ProcessSchemaParameter)">
            <summary>
            Returns parameter value.
            </summary>
            <param name="parameter">Process schema parameter.</param>
            <returns>Parameter value.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivity.UseFlowEngineMode">
            <summary>
            Indicates whether the current process element can be executed in interpreted environment.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivity.ProcessParametersDataWriterSettings">
            <summary>
            The settings for <see cref="T:Terrasoft.Core.Process.ProcessParametersDataWriter"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivity.Log">
            <summary>
            Gets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivity.ProcessParameterStore">
            <summary>
            Gets instance that implements the <see cref="T:Terrasoft.Core.Process.IProcessParameterStore"/> interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivity.Owner">
            <summary>
            Gets or sets the owner of the current element.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivity.SchemaUId">
            <summary>
            Gets or sets unique identifier of schema element.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivity.SchemaManager">
            <summary>
            Gets instance that implements the <see cref="T:Terrasoft.Core.ISchemaManager"/> interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivity.OwnerUId">
            <summary>
            Gets or sets the unique identifier of owner process instance.
            </summary>
            <value>
            The unique identifier of owner process instance.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivity.UserConnection">
            <summary>
            Gets or sets the user connection.
            </summary>
            <value>
            The user connection.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivity.SchemaManagerName">
            <summary>
            Gets or sets name of the schema manager.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivity.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>
            The schema.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivity.Storage">
            <summary>
            Gets or sets instance that provides functionality for storing and retrieving resource managers.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivity.IsShownExecutionPage">
            <summary>
            Gets or sets value that determines whether it can show execution page.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivity.ProcessLane">
            <summary>
            Gets or sets instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> type.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmStageUserTask.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DcmProcess.DcmStageUserTask"/> class.
            <param name="userConnection">The user connection.</param>
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmStageUserTask.InternalExecute(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Executes the current element.
            </summary>
            <param name="context">The context.</param>
            <returns><c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmStageUserTask.WriteProcessParameters">
            <summary>
            Writes the process parameters. Current implementation does nothing.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmStageUserTask.NeedBreakProcessExecuting(Terrasoft.Core.Process.ProcessActivityAfterEventArgs)">
            <summary>
            Checks whether there is a need to break owner process execution after current element execution.
            </summary>
            <param name="e">The <see cref="T:Terrasoft.Core.Process.ProcessActivityAfterEventArgs"/> instance containing the event data.</param>
            <returns>
            <c>True</c> if owner process execution must be ended after current element execution; otherwise
            <c>Fasle</c>
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmStageUserTask.Initialize(Terrasoft.Core.Process.IProcessFlowElementDispatcher)">
            <summary>
            Initializes current instance.
            </summary>
            <param name="elementDispatcher">The element dispatcher.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmStageUserTask.CompleteExecuting(System.Object[])">
            <summary>
            Completes the executing.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmStageUserTask.CancelExecuting(System.Object[])">
            <summary>
            Cancels execution of the current stage.
            </summary>
            <param name="parameters">Arguments for <see cref="M:Terrasoft.Core.Process.ProcessActivity.CompleteExecuting(System.Object[])"/>.</param>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.ISchemaChanger">
            <summary>
            Интерфейс класса для операций чтения, изменения, удаления схем.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.ISchemaTransaction">
            <summary>
            Интерфейс, описывающий работу с транзакциями при сохранении/вычитке схем.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISchemaTransaction.StartTransaction">
            <summary>
            Открыть новую транзакцию.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISchemaTransaction.CommitTransaction">
            <summary>
            Коммит текущей транзакции.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISchemaTransaction.RollbackTransaction">
            <summary>
            Откат транзакции.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISchemaChanger.SaveItem(Terrasoft.Core.Configuration.SysSchema)">
            <summary>
            Сохраняет схему в хранилище, с которым работает провайдер,
            который реализует интерфейс.
            </summary>
            <param name="schema">Сохраняемая схема.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISchemaChanger.SaveMetaData(System.IO.Stream,Terrasoft.Core.Configuration.SysSchema)">
            <summary>
            Saves schema's metadata to a storage, provider that implements interface working with.
            </summary>
            <param name="metaData">Metadata.</param>
            <param name="sysSchema">Saving schema.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISchemaChanger.SaveExtraProperties(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Saves schema's properties to a storage, provider that implements interface working with.
            </summary>
            <param name="item">Manager's item.</param>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.ISchemaContentReader">
            <summary>
            Interface for getting content of schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISchemaContentReader.ReadDependencies(Terrasoft.Core.MetaItem,Terrasoft.Core.ClientUnitSchemaDependencyCollection)">
            <summary>
            Loads dependencies ofClientUnitSchemas and adds to list.
            </summary>
            <param name="item">Target schema.</param>
            <param name="dependencies">List of dependencies.</param>
            <returns><c>true</c> if success,
            <c>false</c> if failure or dependencies not exist.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISchemaContentReader.ReadJs(Terrasoft.Core.DesignMode.ItemDescriptor)">
            <summary>
            Reads client's code from reader.
            </summary>
            <param name="schema">Schema for reading content.</param>
            <returns>Stream of content.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISchemaContentReader.ReadLess(Terrasoft.Core.DesignMode.ItemDescriptor)">
            <summary>
            Reads client's Less from reader.
            </summary>
            <param name="schema">Descriptor of schema.</param>
            <returns>Stream of content.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISchemaContentReader.ReadCs(Terrasoft.Core.DesignMode.ItemDescriptor)">
            <summary>
            Get source code of schema from database.
            </summary>
            <param name="schema">Specified schema for reading content.</param>
            <returns>Stream of content.</returns>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.ISchemaContentSaver">
            <summary>
            Provides methods for saving the content of the schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISchemaContentSaver.SaveDependencies(Terrasoft.Core.IManagerItem,Terrasoft.Core.ClientUnitSchemaDependencyCollection)">
            <summary>
            Saves dependencies of schema.
            </summary>
            <param name="item">Schema whose dependencies will be saved.</param>
            <param name="dependencies">List of the dependencies.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISchemaContentSaver.SaveJs(Terrasoft.Core.DesignMode.ItemDescriptor,System.IO.Stream)">
            <summary>
            Saves JavaScript content of the schema.
            </summary>
            <param name="schema">Specified schema.</param>
            <param name="content">Stream of the JS content.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISchemaContentSaver.SaveLess(Terrasoft.Core.DesignMode.ItemDescriptor,System.IO.Stream)">
            <summary>
            Saves Less content of the schema.
            </summary>
            <param name="schema">Specified schema.</param>
            <param name="content">Stream of the Less content.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISchemaContentSaver.SaveCs(Terrasoft.Core.DesignMode.ItemDescriptor,System.IO.Stream)">
            <summary>
            Saves C# content of the schema
            </summary>
            <param name="schema">Specified schema.</param>
            <param name="content">Stream of the source code.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.CompositeSchemaContentSaver.SaveJs(Terrasoft.Core.DesignMode.ItemDescriptor,System.IO.Stream)">
            <summary>
            Saves JavaScript content of schema.
            </summary>
            <param name="schema">Specified schema.</param>
            <param name="content">Stream of JS content.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.CompositeSchemaContentSaver.SaveLess(Terrasoft.Core.DesignMode.ItemDescriptor,System.IO.Stream)">
            <summary>
            Saves LESS content of schema.
            </summary>
            <param name="schema">Specified schema.</param>
            <param name="content">Stream of LESS content.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.CompositeSchemaContentSaver.SaveCs(Terrasoft.Core.DesignMode.ItemDescriptor,System.IO.Stream)">
            <summary>
            Saves C#-code of schema
            </summary>
            <param name="schema">Specified schema.</param>
            <param name="content">Stream of source code.</param>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysSchemaContentSchema">
            <summary>
            Schema of object <see cref="T:Terrasoft.Core.Entities.SysSchemaContent"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaContentSchema.#ctor(Terrasoft.Core.Entities.EntitySchemaManager)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Terrasoft.Core.Configuration.SysSchemaContentSchema"/> class.
            </summary>
            <param name="entitySchemaManager">The instance of the
            <see cref="T:Terrasoft.Core.Entities.EntitySchemaManager"/> class.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaContentSchema.#ctor(Terrasoft.Core.Configuration.SysSchemaContentSchema,System.Boolean)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Terrasoft.Core.Configuration.SysSchemaContentSchema"/> class.
            </summary>
            <param name="source">The instance of the SysSchemaContentSchema class.</param>
            <param name="isShallowClone">Flag that indicates whether a full schema clone is created.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaContentSchema.#ctor(Terrasoft.Core.Configuration.SysSchemaContentSchema)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Terrasoft.Core.Configuration.SysSchemaContentSchema"/> class.
            </summary>
            <param name="source">The instance of the SysSchemaContentSchema class.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaContentSchema.CreateEntity(Terrasoft.Core.UserConnection)">
            <summary>
            Creates a new instance of the SysSchemaContent class.
            </summary>
            <param name="userConnection">The instance of the UserConnection class.</param>
            <returns>A new instance of the SysSchemaContent class.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaContentSchema.Clone">
            <summary>
            Clone current instance of class
            <see cref="T:Terrasoft.Core.Configuration.SysSchemaContentSchema"/>
            to new instance.
            </summary>
            <returns>New instance of SysSchemaContentSchema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaContentSchema.CloneShallow">
            <summary>
            Clones current instance of class
            <see cref="T:Terrasoft.Core.Configuration.SysSchemaContentSchema"/>
            to new instance with flag of full schema's clone.
            </summary>
            <returns>New instance of SysSchemaContentSchema.</returns>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysSchemaContent">
            <summary>
            Provides content of different types of schemas.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaContent.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Terrasoft.Core.Configuration.SysSchemaContent"/> class.
            </summary>
            <param name="userConnection">The instance of the
            <see cref="T:Terrasoft.Core.UserConnection"/> class.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaContent.#ctor(Terrasoft.Core.Configuration.SysSchemaContent)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Terrasoft.Core.Configuration.SysSchemaContent"/> class.
            </summary>
            <param name="source">Instance of SysSchemaContent.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSchemaContent.Clone">
            <summary>
            Clone this instance of
            <see cref="T:Terrasoft.Core.Configuration.SysSchemaContent"/> from current.
            </summary>
            <returns>New instance of SysSchemaContent.</returns>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSchemaContent.Code">
            <summary>
            Code of current schema's content
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSchemaContent.ContentType">
            <summary>
            Type of current schema's content.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSchemaContent.SysSchemaId">
            <summary>
            Schema Id.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSchemaContent.SysSchemaName">
            <summary>
            Schema name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSchemaContent.SysSchema">
            <summary>
            SysSchema lookup.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.DBSourceControlOperationProvider">
            <summary>
            Implements source control operations for work in DB design mode.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.SourceControlOperationProvider">
            <summary>
            Implements base source control operations.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.ISourceControlOperationProvider">
            <summary>
            Provides source control operations.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISourceControlOperationProvider.GetPackageStorageChanges(Terrasoft.Core.Configuration.SysPackage)">
            <summary>
            Returns a collection of a PackageStorage changes.
            </summary>
            <param name="package">Specified instance of <see cref="T:Terrasoft.Core.Configuration.SysPackage"/>.</param>
            <returns>Collection of a PackageStorage changes, instance of <see cref="T:Terrasoft.Core.Packages.PackageStorageChangeCollection"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ISourceControlOperationProvider.Commit(Terrasoft.Core.Configuration.SysPackage,System.String,Terrasoft.Core.Packages.ILockerManager)">
            <summary>
            Commit changes from specified package to source control system.
            </summary>
            <param name="package">Specified instance of <see cref="T:Terrasoft.Core.Configuration.SysPackage"/>.</param>
            <param name="logMessage">Specified message for commit.</param>
            <param name="lockerManager">Specified instance of <see cref="T:Terrasoft.Core.Packages.ILockerManager"/> for packages.</param>
            <returns><c>true</c>, if commit succeed, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.SourceControlOperationProvider.GetPackageStorageChanges(Terrasoft.Core.Configuration.SysPackage)">
            <summary>
            Returns a collection of a PackageStorage changes.
            </summary>
            <param name="package">Specified instance of <see cref="T:Terrasoft.Core.Configuration.SysPackage"/>.</param>
            <returns>Collection of a PackageStorage changes, instance of <see cref="T:Terrasoft.Core.Packages.PackageStorageChangeCollection"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.SourceControlOperationProvider.Commit(Terrasoft.Core.Configuration.SysPackage,System.String,Terrasoft.Core.Packages.ILockerManager)">
            <summary>
            Commit changes from specified package to source control system.
            </summary>
            <param name="package">Specified instance of <see cref="T:Terrasoft.Core.Configuration.SysPackage"/>.</param>
            <param name="logMessage">Specified message for commit.</param>
            <param name="lockerManager">Specified instance of <see cref="T:Terrasoft.Core.Packages.ILockerManager"/> for packages.</param>
            <returns>An instance of <see cref="T:Terrasoft.Common.CommitResult"/>. Success, if validation passed, otherwise -
            a code of problem.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSourceControlOperationProvider.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Packages.ISourceControlManager,Terrasoft.Core.Packages.ISourceControlAuthManager)">
            <summary>
            Initialize an instance of <see cref="T:Terrasoft.Core.DesignMode.DBSourceControlOperationProvider"/>.
            </summary>
            <param name="userConnection">Specified instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="sourceControlManager">Specified instance of <see cref="T:Terrasoft.Core.Packages.ISourceControlManager"/>.</param>
            <param name="sourceControlAuthManager">Specified instance of <see cref="T:Terrasoft.Core.Packages.ISourceControlAuthManager"/>.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSourceControlOperationProvider.GetPackageStorageChanges(Terrasoft.Core.Configuration.SysPackage)">
            <summary>
            Returns a collection of <see cref="T:Terrasoft.Core.Packages.PackageStorageChange"/> PackageStorage changes.
            </summary>
            <param name="package">Specified instance of <see cref="T:Terrasoft.Core.Configuration.SysPackage"/>.</param>
            <returns>Collection of <see cref="T:Terrasoft.Core.Packages.PackageStorageChange"/> PackageStorage changes, instance of
            <see cref="T:Terrasoft.Core.Packages.PackageStorageChangeCollection"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSourceControlOperationProvider.Commit(Terrasoft.Core.Configuration.SysPackage,System.String,Terrasoft.Core.Packages.ILockerManager)">
            <summary>
            Commits changes from specified package to source control system.
            </summary>
            <param name="package">Specified instance of <see cref="T:Terrasoft.Core.Configuration.SysPackage"/>.</param>
            <param name="logMessage">Specified message for commit.</param>
            <param name="lockerManager">Specified instance of <see cref="T:Terrasoft.Core.Packages.ILockerManager"/> for packages.</param>
            <returns><c>true</c> if commit succeed; otherwise - <c>false</c>.</returns>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.FileSourceControlOperationProvider">
            <summary>
            Implements source control operations for work in File design mode.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSourceControlOperationProvider.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Packages.ISourceControlManager,Terrasoft.Core.Packages.ISourceControlAuthManager)">
            <summary>
            Initialize an instance of <see cref="T:Terrasoft.Core.DesignMode.FileSourceControlOperationProvider"/>.
            </summary>
            <param name="userConnection">Specified instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="sourceControlManager">Specified instance of <see cref="T:Terrasoft.Core.Packages.ISourceControlManager"/>.</param>
            <param name="sourceControlAuthManager">Specified instance of <see cref="T:Terrasoft.Core.Packages.ISourceControlAuthManager"/>.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSourceControlOperationProvider.GetPackageStorageChanges(Terrasoft.Core.Configuration.SysPackage)">
            <summary>
            Returns a collection of a PackageStorage changes.
            </summary>
            <param name="package">Specified instance of <see cref="T:Terrasoft.Core.Configuration.SysPackage"/>.</param>
            <returns>Collection of a PackageStorage changes, instance of <see cref="T:Terrasoft.Core.Packages.PackageStorageChangeCollection"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSourceControlOperationProvider.Commit(Terrasoft.Core.Configuration.SysPackage,System.String,Terrasoft.Core.Packages.ILockerManager)">
            <summary>
            Commit changes from specified package to source control system.
            </summary>
            <param name="package">Specified instance of <see cref="T:Terrasoft.Core.Configuration.SysPackage"/>.</param>
            <param name="logMessage">Specified message for commit.</param>
            <param name="lockerManager">Specified instance of <see cref="T:Terrasoft.Core.Packages.ILockerManager"/> for packages.</param>
            <returns><c>true</c>, if commit succeed, otherwise - <c>false</c>.</returns>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.ItemDescriptor">
            <summary>
            Structure for initializing main properties of schema in content providers.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DesignMode.ItemDescriptor._name">
            <summary>
            Name of schema.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DesignMode.ItemDescriptor._packageName">
            <summary>
            PackageName of schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ItemDescriptor.GetFromSchema(Terrasoft.Core.Schema,Terrasoft.Core.UserConnection)">
            <summary>
            Creates ItemDescriptor and initializes him from specified instance of
            <see cref="T:Terrasoft.Core.Schema"/> class.</summary>
            <param name="schema">Specified instance of Schema.</param>
            <param name="userConnection">Specified UserConnection.</param>
            <returns>New instance of ItemDescriptor.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ItemDescriptor.GetFromSysSchema(Terrasoft.Core.Configuration.SysSchema,Terrasoft.Core.UserConnection)">
            <summary>
            Creates ItemDescriptor and initializes him from specified instance of 
            <see cref="T:Terrasoft.Core.Configuration.SysSchema"/> class.</summary>
            <param name="sysSchema">Specified instance of SysSchema.</param>
            <param name="userConnection">Specified UserConnection.</param>
            <returns>New instance of ItemDescriptor.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ItemDescriptor.GetFromSchemaDescriptor(Terrasoft.Core.Packages.SchemaDescriptor,System.String)">
            <summary>
            Creates ItemDescriptor and initializes him from specified instance of 
            <see cref="T:Terrasoft.Core.Packages.SchemaDescriptor"/> class.</summary>
            <param name="schema">Specified instance of SchemaDescriptor.</param>
            <param name="packageName">Name of target package.</param>
            <returns>New instance of ItemDescriptor.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.ItemDescriptor.GetFromSchemaDescriptor(Terrasoft.Core.Packages.SchemaDescriptor,System.String,System.Guid)">
            <summary>
            Creates ItemDescriptor and initializes him from specified instance of 
            <see cref="T:Terrasoft.Core.Packages.SchemaDescriptor"/> class.</summary>
            <param name="schema">Specified instance of SchemaDescriptor.</param>
            <param name="schemaId">Schema's Id.</param>
            <param name="packageName">Name of target package.</param>
            <returns>New instance of ItemDescriptor.</returns>
        </member>
        <member name="P:Terrasoft.Core.DesignMode.ItemDescriptor.UId">
            <summary>
            Schema UId.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DesignMode.ItemDescriptor.PackageId">
            <summary>
            PackageId of schema.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.IWorkspaceAssemblyLoader">
            <summary>
            Provides a mechanism for workspace assembly loading
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.IWorkspaceAssemblyLoader.LoadAssemblyToWorkspace(Terrasoft.Core.Configuration.SysWorkspace)">
            <summary>
            Loads assembly and modifies workspace accordingly.
            </summary>
            <param name="workspace">Instance of <see cref="T:Terrasoft.Core.Configuration.SysWorkspace"/>
            to which assembly will be loaded.</param>
            <returns>Loaded assembly <see cref="T:System.Reflection.Assembly"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.IWorkspaceAssemblyLoader.GetIsWorkspaceAssemblyInitialized(Terrasoft.Core.UserConnection,System.String)">
            <summary>
            Determines if the workspace assembly is initialized.
            </summary>
            <param name="userConnection">Instance of specified <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="workspaceName">Specified workspace name</param>
            <returns><c>True</c> if assembly is initialized, in othe case - <c>false</c></returns>
        </member>
        <member name="T:Terrasoft.Core.EntitySchemaManagerItem">
            <summary>
            Элемент менеджера схем сущностей.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.EntitySchemaManagerItem.#ctor(Terrasoft.Core.Entities.EntitySchemaManager)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.EntitySchemaManagerItem"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.EntitySchemaManagerItem.GetHashData">
            <summary>
            Prepares data for hashing.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.HierarchySchemaInfo">
            <summary>
            Class represents data of the schema hierarchy.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.HierarchySchemaInfo.#ctor(Terrasoft.Core.Entities.EntityCollection)">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.HierarchySchemaInfo"/> with the specified schema list.
            </summary>
            <param name="schemas">List of schemas.</param>
        </member>
        <member name="F:Terrasoft.Core.HierarchySchemaInfo._ids">
            <summary>
            Gets list of schema Ids.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.HierarchySchemaInfo._uids">
            <summary>
            Gets list of schema UIds.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.IImageDecorator">
            <summary>
            Provides methods for creating client image descriptors.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IImageDecorator.GetImageDescriptor(Terrasoft.Core.ImageListSchemaItem,System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns client descriptor for specified image using specified culture and schema name.
            </summary>
            <param name="image">Image.</param>
            <param name="schemaName">Schema name.</param>
            <param name="culture">Culture.</param>
            <returns>Client descriptor for specified image.</returns>
        </member>
        <member name="T:Terrasoft.Core.ISecurePathUtilities">
            <summary>
            Provides utility methods for secure representation of path strings.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ISecurePathUtilities.RemoveLocalTempPath(System.String)">
            <summary>
            Removes path specified in connection string <c>tempDirectoryPath</c> from given message.
            </summary>
            <param name="message">Message text.</param>
            <returns>Message text without full local path.</returns>
        </member>
        <member name="T:Terrasoft.Core.ITempDirectoryInfo">
            <summary>
            Provides information about application temporary directory.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ITempDirectoryInfo.GetTempDirectoryPath">
            <summary>
            Returns path of the application temporary directory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.Backup.IPackageBackupRestorer">
            <summary>
            Defines methods for packages backup restoration.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.Backup.IPackageBackupRestorer.RestoreFromBackup(System.String)">
            <summary>
            Restores system packages from backup stored in <paramref name="backupPath"/>.
            </summary>
            <param name="backupPath">Path to backup.</param>
            <returns>
            Returns <c>true</c> if configuration has been restored successfully.
            Otherwise returns <c>false</c>.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.Backup.IPackageBackupManager">
            <summary>
            Provides high-level interface for creation and restoration from backup of packages.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.Backup.IPackageBackupCreator">
            <summary>
            Defines methods for packages backup creation.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.Backup.IPackageBackupCreator.CreateBackup(System.String,System.String,System.String)">
            <summary>
            Creates backup that contains difference in data between system packages and packages stored as .gz files 
            in directory provided by <paramref name="sourcePackagesPath"/>.
            </summary>
            <param name="sourcePackagesPath">Directory that contains packages as .gz files.</param>
            <param name="tempFilesPath">Directory for temporary files.</param>
            <param name="backupPath">Directory to whitch backup will be saved.</param>
        </member>
        <member name="T:Terrasoft.Core.Packages.Backup.IPackageBackupRepository">
            <summary>
            Defines methods for backup storage operations.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.Backup.IPackageBackupRepository.SaveBackup(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.Package},System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.Package},System.String)">
            <summary>
            Saves packages data to backup.
            </summary>
            <param name="changedPackages">Collection of changed packages.</param>
            <param name="newPackages">Collection of new packages.</param>
            <param name="backupPath">Path to which backup will be saved.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.Backup.IPackageBackupRepository.GetBackup(System.String)">
            <summary>
            Gets data from backup.
            </summary>
            <param name="backupPath">Path to backup.</param>
            <returns>Backup data.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.Compression.IPackageArchiver">
            <summary>
            Provides methods for creation of package archive.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.Compression.IPackageArchiver.Compress(System.String,System.String)">
            <summary>
            Creates a zip archive that contains the files and directories from the specified directory.
            </summary>
            <param name="sourceDirectory">The path to the directory to be archived.</param>
            <param name="archiveName">The path of the archive to be created.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">If <paramref name="sourceDirectory"/> or
            <paramref name="archiveName"/> is <c>null</c> or empty string.</exception>
        </member>
        <member name="T:Terrasoft.Core.Packages.Exceptions.InvalidPackageDependencyException">
            <summary>
            Exception that is thrown when a package dependency is not valid.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.Exceptions.InvalidPackageDependencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.Exceptions.InvalidPackageDependencyException.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Core.Packages.Exceptions.InvalidPackageDependencyException"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.Exceptions.InvalidPackageDependencyException.#ctor(System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Core.Packages.Exceptions.InvalidPackageDependencyException"/>
            class with a specified message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.Exceptions.InvalidPackageDependencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Core.Packages.Exceptions.InvalidPackageDependencyException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.Exceptions.InvalidPackageDependencyException.#ctor(System.Exception,System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Core.Packages.Exceptions.InvalidPackageDependencyException"/> class.
            </summary>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="packageName">Package name.</param>
        </member>
        <member name="T:Terrasoft.Core.Packages.IPackageZipExporter">
            <summary>
            Provides methods to export packages as a list of files.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageZipExporter.Export(System.String,System.Func{Terrasoft.Core.Packages.ISystemPackage,System.Boolean})">
            <summary>
            Exports packages that meet criteria specified by <paramref name="packageFilter"/> to specified path.
            </summary>
            <param name="directoryPath">Path to directory in which to save packages.</param>
            <param name="packageFilter">Specifies criteria for package export.</param>
        </member>
        <member name="T:Terrasoft.Core.Packages.IPackageZipInstaller">
            <summary>
            Defines methods to install zip-archived packages from external source to system persistence storage.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageZipInstaller.Install(System.String,System.String,Terrasoft.Core.Packages.PackageInstallOptions)">
            <summary>
            Installs packages from <paramref name="sourcePath"/>.
            </summary>
            <param name="sourcePath">Path to install from.</param>
            <param name="destinationPath">Local path to store packages.</param>
            <param name="installOptions">Installation options.</param>
            <returns>
            Returns <c>true</c> if packages have been installed successfully. Otherwise returns <c>false</c>.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.Extraction.IPackageExtractor">
            <summary>
            Defines methods for packages extraction from archive file.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.Extraction.IPackageExtractor.Extract(System.String,System.String)">
            <summary>
            Extracts packages from archive file.
            </summary>
            <param name="archiveFilePath">Path to archive file.</param>
            <param name="extractPath">Path to which extracted packages should be placed.</param>
            <remarks>
            In case when archive file represents package itself the file is just copied to 
            <paramref name="extractPath"/> directory.
            This method creates directory provided by <paramref name="extractPath"/> in case if it does not exist.
            In case when directory provided by <paramref name="extractPath"/> already exists and contains files 
            all files in this directory will be deleted before extraction.
            </remarks>
            <exception cref="T:System.IO.IOException">
            The directory specified by <paramref name="extractPath"/> is read-only 
            <para>-or-</para>
            existing files in <paramref name="extractPath"/> are in use
            <para>-or-</para>
            an I/O error occurred while creating files.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="archiveFilePath"/> or <paramref name="extractPath"/> contains one or more invalid 
            characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/> 
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified <paramref name="archiveFilePath"/>, <paramref name="extractPath"/>, or both 
            exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified <paramref name="extractPath"/> or <paramref name="archiveFilePath"/> is invalid, 
            such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            <paramref name="archiveFilePath"/> was not found.
            </exception>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            <paramref name="archiveFilePath"/> or <paramref name="extractPath"/> is null or empty.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageStorageFactory.GetPackageStorage(System.String,System.String)">
            <summary>
            Returns the instance of the class <see cref="T:Terrasoft.Core.Packages.PackageStorage"/>.
            </summary>
            <returns>The instance of implementation of the PackageStorage.</returns>
        </member>
        <member name="T:Terrasoft.Core.ISchemaManagerProvider">
            <summary>
            Provides methods and properties to manage schema managers.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerProvider.GetManager(System.String)">
            <summary>
            Creates schema manager.
            </summary>
            <param name="managerName">Manager name.</param>
            <returns>Returns schema manager.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISchemaManagerProvider.RefreshManager(System.String)">
            <summary>
            Refreshes schema manager.
            </summary>
            <param name="managerName">Manager name.</param>
        </member>
        <member name="P:Terrasoft.Core.ISchemaManagerProvider.ManagerNames">
            <summary>
            Collection of schema manager names.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.ISchemaUniqueNameGenerator">
            <summary>
            Provides methods for creation of unique names and captions for schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ISchemaUniqueNameGenerator.CreateCaption(System.String,System.String,System.Guid)">
            <summary>
            Creates unique caption for schema that consists of <paramref name="prefix"/> and counter number 
            with following format: "&lt;prefix&gt; &lt;counter&gt;".
            This method takes into account current thread culture.
            </summary>
            <param name="prefix">Prefix used for caption creation.</param>
            <param name="managerName">Name of schema manager.</param>
            <param name="workspaceId">Workspace Id.</param>
            <returns>Created caption.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Thrown when either <paramref name="prefix"/>, 
            <paramref name="managerName"/> or <paramref name="workspaceId"/> is null or empty.</exception>
        </member>
        <member name="M:Terrasoft.Core.ISchemaUniqueNameGenerator.CreateName(System.String,System.String,System.Guid)">
            <summary>
            Creates unique name for schema that consists of <paramref name="prefix"/> and counter number 
            with following format: "&lt;prefix&gt;&lt;counter&gt;".
            </summary>
            <param name="prefix">Prefix used for name creation.</param>
            <param name="managerName">Name of schema manager.</param>
            <param name="workspaceId">Workspace Id.</param>
            <returns>Created name.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Thrown when either <paramref name="prefix"/>, 
            <paramref name="managerName"/> or <paramref name="workspaceId"/> is null or empty.</exception>
        </member>
        <member name="T:Terrasoft.Core.ISecurityUtilities">
            <summary>
            Provides methods for secure work with SVN pathes. 
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ISecurityUtilities.RemoveLocalPath(System.String)">
            <summary>
            Removes local path to file or directory if FileDesign mode is disabled.
            </summary>
            <param name="stringWithLocalPath">Full path to current to file or directory in filesystem.</param>
            <returns>Relative path to object if FileDesign mode is disabled, 
            or full path if FileDesign mode is enabled.</returns>
        </member>
        <member name="T:Terrasoft.Core.LicData">
            <summary>
            Provides properties of instance manager element.
            </summary>
            <seealso cref="T:Terrasoft.Core.IManagerItemInstance"/>
        </member>
        <member name="P:Terrasoft.Core.LicData.ManagerItem">
            <summary>
            Manager instance.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.LicData.Manager">
            <summary>
            Manager.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.LicManager">
            <summary>
            Represents class for the license manager.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.LicManager.#ctor(Terrasoft.Core.AppConnection)">
            <summary>
            Creates instance of <see cref="T:Terrasoft.Core.LicManager"/>.
            </summary>
            <param name="appConnection">Instance of specified
            <see cref="T:Terrasoft.Core.AppConnection"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.LicManager.ClearAllUserLicenseCache">
            <summary>
            Clears all users license cache.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.LicManager.ActualizeIsDemoMode">
            <summary>
            Actualize demo mode state.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.LicManager.ClearUserLicenseCache(System.Guid)">
            <summary>
            Clears user license cache.
            </summary>
            <param name="userId">User identifier.</param>
        </member>
        <member name="M:Terrasoft.Core.LicManager.DeleteLicenses(Terrasoft.Core.UserConnection)">
            <summary>
            Deletes all licenses.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.LicManager.LoadLicense(System.IO.Stream)">
            <summary>
            Loads license.
            </summary>
            <param name="stream">Stream with license info.</param>
            <returns><c>true</c> if license loaded. Otherwise returns <c>false</c>.</returns>
            <exception cref="T:Terrasoft.Core.LicException">Thrown when either Licenses CustomerId, FileVersion or other element is not
            valid.</exception>
        </member>
        <member name="M:Terrasoft.Core.LicManager.AddUserLicense(Terrasoft.Core.UserConnection,System.Guid,System.Guid)">
            <summary>
            Adds user package license.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="userId">User identifier.</param>
            <param name="licPackageId">Licensing package identifier.</param>
            <returns><c>true</c>, if license was added. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.LicManager.DeleteUserLicense(Terrasoft.Core.UserConnection,System.Guid,System.Guid)">
            <summary>
            Deletes user package license.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="userId">User identifier.</param>
            <param name="licPackageId">Licensing package identifier.</param>
            <returns><c>true</c>, if license was added. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="P:Terrasoft.Core.LicManager.IsDemoMode">
            <summary>
            Indicates whether demo mode is enabled.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.LicManager.CustomerId">
            <summary>
            Customer identifier.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.LicManagerItem">
            <summary>
            License manager item.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.LicManagerItemCollection">
            <summary>
            License manager item collection.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.ManagerItemCollection`1">
            <summary>
            Коллекция элементов менеджера.
            </summary>
            <typeparam name="TItem">Тип, реализующий интерфейс <see cref="T:Terrasoft.Core.IManagerItem"/>.</typeparam>
        </member>
        <member name="T:Terrasoft.Core.IManagerItemCollection`1">
            <summary>
            Коллекция элементов менеджера.
            </summary>
            <typeparam name="TItem">Любой тип.</typeparam>
        </member>
        <member name="M:Terrasoft.Core.IManagerItemCollection`1.GetItems">
            <summary>
            Возвращает перечисление элементов менеджера.
            </summary>
            <returns>Перечисление элементов менеджера.</returns>
        </member>
        <member name="M:Terrasoft.Core.IManagerItemCollection`1.GetItems(System.Predicate{`0})">
            <summary>
            Возвращает перечисление элементов менеджера, которые соответствуют заданным критериям.
            </summary>
            <param name="match">Критерии, которым должны соответствовать возвращаемые элементы менеджера.</param>
            <returns>
            Перечисление элементов менеджера, которые соответствуют критериям <paramref name="match"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.IManagerItemCollection`1.FindByUId(System.Guid)">
            <summary>
            Осуществляет поиск элемента по заданному уникальному идентификатору.
            </summary>
            <param name="uid">
            Уникальный идентификатор искомого элемента менеджера.
            </param>
            <returns>Элемент менеджера с уникальным идентификатором <paramref name="uid"/>. Если элемент с уникальным 
            идентификатором <paramref name="uid"/> не найден, возвращается значение по умолчанию для текущего типа 
            элемента менеджера.</returns>
        </member>
        <member name="M:Terrasoft.Core.IManagerItemCollection`1.GetByUId(System.Guid)">
            <summary>
            Возвращает элемент менеджера с заданным уникальным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор искомого элемента менеджера.</param>
            <returns>Элемент менеджера с уникальным идентификатором <paramref name="uid"/>. Если элемент с уникальным 
            идентификатором <paramref name="uid"/> не найден, генерируется исключение.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если элемент менеджера с уникальным идентификатором 
            <paramref name="uid"/> не найден.</exception>
        </member>
        <member name="M:Terrasoft.Core.IManagerItemCollection`1.FindByName(System.String)">
            <summary>
            Осуществляет поиск элемента менеджера по заданному имени.
            </summary>
            <param name="name">Имя искомого элемента менеджера.</param>
            <returns>Элемент менеджера с именем <paramref name="name"/>. Если элемент с именем <paramref name="name"/> 
            не найден, возвращается значение по умолчанию для текущего типа.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="name"/> передано 
            пустое значение или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.IManagerItemCollection`1.GetByName(System.String)">
            <summary>
            Возвращает элемент менеджера с заданным именем.
            </summary>
            <param name="name">Имя элемента менеджера.</param>
            <returns>Элемент менеджера с именем <paramref name="name"/>. Если элемент менеджера с именем 
            <paramref name="name"/> не найден, генерируется исключение.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если в элемент менеджера с именем <paramref name="name"/> не найден.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.IManagerItemCollection`1.RemoveItemByUId(System.Guid)">
            <summary>
            Удаляет элемент менеджера с заданным уникальным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор элемента менеджера, который необходимо удалить.</param>
        </member>
        <member name="M:Terrasoft.Core.IManagerItemCollection`1.RemoveItemByName(System.String)">
            <summary>
            Удаляет элемент менеджера с заданным именем.
            </summary>
            <param name="name">Имя элемента менеджера, который необходимо удалить.</param>
        </member>
        <member name="M:Terrasoft.Core.IManagerItemCollection`1.Clear">
            <summary>
            Удаляет все элементы менеджера.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.IManagerItemCollection`1.ItemCount">
            <summary>
            Количество элементов коллекции.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.Terrasoft#Core#IManagerItemCollection{Terrasoft#Core#IManagerItem}#GetItems">
            <summary>
            Возвращает перечислитель элементов менеджера.
            </summary>
            <returns>Перечислитель элементов менеджера.</returns>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.Terrasoft#Core#IManagerItemCollection{Terrasoft#Core#IManagerItem}#GetItems(System.Predicate{Terrasoft.Core.IManagerItem})">
            <summary>
            Возвращает перечислитель элементов менеджера, которые соответствуют заданным критериям.
            </summary>
            <param name="match">Критерии, которым должны соответствовать возвращаемые элементы менеджера.</param>
            <returns>
            Перечислитель элементов менеджера, которые соответствуют критериям <paramref name="match"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.GetItems">
            <summary>
            Возвращает перечислитель элементов менеджера текущего типа.
            </summary>
            <returns>Перечислитель элементов менеджера текущего типа.</returns>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.GetItems(System.Predicate{`0})">
            <summary>
            Возвращает перечислитель элементов менеджера текущего типа.
            </summary>
            <returns>Перечислитель элементов менеджера текущего типа.</returns>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.FindByUId(System.Guid)">
            <summary>
            Осуществляет поиск элемента коллекции текущего типа по заданному уникальному идентификатору.
            </summary>
            <param name="uid">Уникальный идентификатор искомого элемента коллекции.</param>
            <returns>Элемент коллекции текущего типа с уникальным идентификатором <paramref name="uid"/>. 
            Если элемент с уникальным идентификатором <paramref name="uid"/> в коллекции не найден, возвращается 
            значение по умолчанию для текущего типа элемента менеджера.</returns>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.Terrasoft#Core#IManagerItemCollection{Terrasoft#Core#IManagerItem}#FindByUId(System.Guid)">
            <summary>
            Осуществляет поиск элемента коллекции типа <see cref="T:Terrasoft.Core.IManagerItem"/> по заданному уникальному 
            идентификатору.
            </summary>
            <param name="uid">Уникальный идентификатор искомого элемента коллекции.</param>
            <returns>Элемент коллекции типа <see cref="T:Terrasoft.Core.IManagerItem"/>с уникальным идентификатором 
            <paramref name="uid"/>. Если элемент с уникальным идентификатором <paramref name="uid"/> в коллекции не 
            найден, возвращается значение по умолчанию для текущего типа элемента менеджера.</returns>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.GetByUId(System.Guid)">
            <summary>
            Возвращает элемент коллекции текущего типа с заданным уникальным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор элемента коллекции.</param>
            <returns>Элемент коллекции текущего типа с уникальным идентификатором <paramref name="uid"/>. 
            Если элемент с идентификатором <paramref name="uid"/> в коллекции не найден, генерируется исключение.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если в коллекции элементов менеджера не найден элемент с уникальным 
            идентификатором <paramref name="uid"/>.</exception>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.Terrasoft#Core#IManagerItemCollection{Terrasoft#Core#IManagerItem}#GetByUId(System.Guid)">
            <summary>
            Возвращает элемент коллекции типа <see cref="T:Terrasoft.Core.IManagerItem"/>с заданным уникальным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор элемента коллекции.</param>
            <returns>Элемент коллекции типа <see cref="T:Terrasoft.Core.IManagerItem"/>с уникальным идентификатором 
            <paramref name="uid"/>. Если элемент с идентификатором <paramref name="uid"/> в коллекции не найден, 
            генерируется исключение.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если в коллекции элементов менеджера не найден элемент с уникальным 
            идентификатором <paramref name="uid"/>.</exception>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.FindByName(System.String)">
            <summary>
            Осуществляет поиск элемента коллекции текущего типа с заданным именем.
            </summary>
            <param name="name">Имя искомого элемента коллекции.</param>
            <returns>Элемент коллекции текущего типа с именем <paramref name="name"/>. 
            Если элемент с именем <paramref name="name"/> в коллекции не найден, возвращается 
            значение по умолчанию для текущего типа.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="name"/> передано 
            пустое значение или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.Terrasoft#Core#IManagerItemCollection{Terrasoft#Core#IManagerItem}#FindByName(System.String)">
            <summary>
            Осуществляет поиск элемента коллекции типа <see cref="T:Terrasoft.Core.IManagerItem"/> с заданным именем.
            </summary>
            <param name="name">Имя искомого элемента коллекции.</param>
            <returns>Элемент коллекции текущего типа с именем <paramref name="name"/>. 
            Если элемент с именем <paramref name="name"/> в коллекции не найден, возвращается 
            значение по умолчанию для текущего типа.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="name"/> передано 
            пустое значение или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.GetByName(System.String)">
            <summary>
            Возвращает элемент коллекции текущего типа с заданным именем.
            </summary>
            <param name="name">Имя искомого элемента коллекции.</param>
            <returns>Элемент коллекции текущего типа с именем <paramref name="name"/>. Если элемент с именем 
            <paramref name="name"/> в коллекции не найден, генерируется исключение.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если в коллекции элементов менеджера не найден элемент с именем 
            <paramref name="name"/>.</exception>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.Terrasoft#Core#IManagerItemCollection{Terrasoft#Core#IManagerItem}#GetByName(System.String)">
            <summary>
            Возвращает элемент коллекции типа <see cref="T:Terrasoft.Core.IManagerItem"/> с заданным именем.
            </summary>
            <param name="name">Имя искомого элемента коллекции.</param>
            <returns>Элемент коллекции типа <see cref="T:Terrasoft.Core.IManagerItem"/> с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.Check(`0)">
            <summary>
            Определяет наличие в текущей коллекции элементов менеджера заданного элемента.
            </summary>
            <param name="item">Элемент, наличие которого проверяется.</param>
            <exception cref="T:System.ArgumentException">
            Если в текущей коллекции элемент <paramref name="item"/> не обнаружен.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.RemoveAllItemsByUId(System.Guid)">
            <summary>
            Удаляет из текущей коллекции элементов менеджера все элементы с заданным уникальным идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор элементов, которые необходимо удалить.</param>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если в текущей коллекции элементов менеджера не найдены элементы с 
            уникальным идентификатором <paramref name="uid"/>.</exception>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.RemoveItemByUId(System.Guid)">
            <summary>
            Удаляет из текущей коллекции элементов менеджера первое вхождение элемента с заданным уникальным 
            идентификатором.
            </summary>
            <param name="uid">Уникальный идентификатор элемента, который необходимо удалить.</param>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если в текущей коллекции элементов менеджера не найден элемент с 
            уникальным идентификатором <paramref name="uid"/>.</exception>
        </member>
        <member name="M:Terrasoft.Core.ManagerItemCollection`1.RemoveItemByName(System.String)">
            <summary>
            Удаляет из текущей коллекции элементов менеджера первое вхождение элемента с заданным именем. 
            </summary>
            <param name="name">Имя элемента, который необходимо удалить.</param>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если в текущей коллекции элементов менеджера не найден элемент с 
            именем <paramref name="name"/>.</exception>
        </member>
        <member name="P:Terrasoft.Core.ManagerItemCollection`1.ItemCount">
            <summary>
            Количество элементов коллекции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.Descriptor.ModifiedOnUtc">
            <summary>Object's modification last date/time</summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.Descriptor.IsDeleted">
            <summary>
            Returns <c>true</c> if element is in deleted state.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.Descriptor.IsLocked">
            <summary>
            Признак, является ли элемент заблокированным.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.Descriptor.IsModifiedByUser">
            <summary>
            Признак, является ли элемент измененым пользователем.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.Descriptor.Checksum">
            <summary>
            Checksum of the item.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageElementLocker.UnlockElement(System.String,System.String,System.Guid)">
            <summary>
            Unlocks element in version control system and database.
            </summary>
            <param name="packageName">Package name.</param>
            <param name="elementName">Element name.</param>
            <param name="elementId">Element identifier.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.AssemblyLocker.UnlockElement(System.String,System.String,System.Guid)">
            <summary>
            Unlocks target assembly in version control system and database.
            </summary>
            <param name="packageName">Package name.</param>
            <param name="elementName">Assembly name.</param>
            <param name="elementId">Assembly identifier.</param>
        </member>
        <member name="T:Terrasoft.Core.Packages.Composer.IPackageComposer">
            <summary>
            Provides two package collections composing method.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.Composer.IPackageComposer.Compose(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.Package},System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.Package})">
            <summary>
            Compares two package collections and forms new one which contents depends on final method implementation.
            </summary>
            <param name="source">Source package collection.</param>
            <param name="target">Target package collection.</param>
            <returns>Resulting package collection. Depends on final method implementation.</returns>
        </member>
        <member name="F:Terrasoft.Core.Packages.PackageStorage.ResourceManagerName">
            <summary>
            Name of resources manager.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageStorage.GetPackagesOrderByTopology">
            <summary>
            Returns hierarchical enumeration of packages.
            </summary>
            <returns>Hierarchical enumeration of packages.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageStorage.ActualizePackageResourcesState">
            <summary>
            Actualize resources state.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Packages.PackageStorage.ItemOperationError">
            <summary>
            Occurs when operation on item has finished with error.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.PackageResourceDescriptor.CultureName">
            <summary>
            Gets or sets package resource culture name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.PackageResourceDescriptor.IsLocalChanged">
            <summary>
            Gets or sets package resource local changed value.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.CoreResourceDescriptor.Type">
            <summary>
            Package storage element type.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.IPackageContentProvider">
            <summary>
            Provides methods to obtain package content.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.IPackageDataProvider">
            <summary>
            Package content data provider interface.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageDataProvider.GetPackageSchemaData(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.PackageSchemaDataDescriptor)">
            <summary>
            Returns are not localized bound packet data.
            </summary>
            <param name="package">Package.</param>
            <param name="dataDescriptor">Data descriptor.</param>
            <returns>Serialized data stream.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageDataProvider.GetPackageSchemaDataFilter(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.PackageSchemaDataDescriptor)">
            <summary>
            Returns data binding filter package.
            </summary>
            <param name="package">Package.</param>
            <param name="dataDescriptor">Data descriptor.</param>
            <returns>Serialized data stream.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageDataProvider.GetPackageSchemaDataLocalization(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.PackageSchemaDataDescriptor)">
            <summary>
            Returns a collection of localized data bindings package.
            </summary>
            <param name="package">Package.</param>
            <param name="dataDescriptor">Data descriptor.</param>
            <returns>Сollection of serialized data streams.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.IPackageResourceProvider">
            <summary>
            Package content resource provider interface.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageResourceProvider.GetPackageResources(Terrasoft.Core.Packages.Package)">
            <summary>
            Returns resources of package.
            </summary>
            <param name="package">Instance of the <see cref="T:Terrasoft.Core.Packages.Package"/> class.</param>
            <returns>Resourses dictionary specified by schema name and culture.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageResourceProvider.GetCoreResources(Terrasoft.Core.Packages.Package)">
            <summary>
            Returns core resources.
            </summary>
            <param name="package">Instance of the <see cref="T:Terrasoft.Core.Packages.Package"/> class.</param>
            <returns>Resourses dictionary specified by manager name and culture.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageResourceProvider.GetSchemaResource(Terrasoft.Core.Packages.Package,System.String,System.String,System.String)">
            <summary>
            Returns package resources by schema and culture.
            </summary>
            <param name="package">Package.</param>
            <param name="schemaName">Name of schema.</param>
            <param name="cultureName">Name of culture.</param>
            <param name="managerName">Name of manager.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageResourceProvider.GetCoreResource(Terrasoft.Core.Packages.Package,System.String,System.String)">
            <summary>
            Returns core resources by schema and culture.
            </summary>
            <param name="package">Package.</param>
            <param name="managerName">Name of manager.</param>
            <param name="cultureName">Name of culture.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageContentProvider.GetSchemaStreamValues(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema properties in binary representation.
            </summary>
            <param name="package">Package containing schema.</param>
            <param name="schema">Schema descriptor.</param>
            <returns>Dictionary of schema properties.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageContentProvider.GetSchemaCs(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema's Cs-content.
            </summary>
            <param name="package">An instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.
            Schema's package.</param>
            <param name="schema">An instance of <see cref="T:Terrasoft.Core.Packages.SchemaDescriptor"/> class.
            Schema whose content must be returned.</param>
            <returns>Stream of Cs-content</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageContentProvider.GetSchemaJs(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema's Js-content.
            </summary>
            <param name="package">An instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.
            Schema's package.</param>
            <param name="schema">An instance of <see cref="T:Terrasoft.Core.Packages.SchemaDescriptor"/> class.
            Schema whose content must be returned.</param>
            <returns>Stream of Js-content</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageContentProvider.GetSchemaLess(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema's Less-content.
            </summary>
            <param name="package">An instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.
            Schema's package.</param>
            <param name="schema">An instance of <see cref="T:Terrasoft.Core.Packages.SchemaDescriptor"/> class.
            Schema whose content must be returned.</param>
            <returns>Stream of Less-content</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.ISystemPackage">
            <summary>
            Provides properties of system package.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.ISystemPackage.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.ISystemPackage.InstallType">
            <summary>
            Package install type.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.Operations.IPackageLoader">
            <summary>
            Provides methods for package data loading from external sources.
            </summary>
            <remarks>
            The primary use of this interface is to load packages data from external sources such as file system, 
            version control system, web URI etc.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.Packages.Operations.IPackageLoader.Load">
            <summary>
            Loads packages from external source.
            </summary>
            <returns>Collection of loaded packages.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.Operations.IPackageLoader.Load(System.Func{Terrasoft.Core.Packages.Package,System.Boolean})">
            <summary>
            Loads packages that meet criteria specified by <paramref name="packageFilter"/> from external source.
            </summary>
            <param name="packageFilter">Specifies criteria for package loading.</param>
            <returns>Collection of loaded packages.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.Operations.IPackageLoaderCreator">
            <summary>
            Represents an abstract factory for <see cref="T:Terrasoft.Core.Packages.Operations.IPackageLoader"/> creation.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.Operations.IPackageLoaderCreator.CreatePackageLoader(System.String,System.String)">
            <summary>
            Creates package loader depending on <paramref name="sourcePath"/>
            using <paramref name="storageDirectoryPath"/> as a directory for temporary files.
            </summary>
            <param name="sourcePath">Path to packages location. 
            This parameter can represent file path or web URI.</param>
            <param name="storageDirectoryPath">Path for temporary files used by <see cref="T:Terrasoft.Core.Packages.Operations.IPackageLoader"/>.</param>
            <returns>Package loader.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.Operations.PackageSavingResult">
            <summary>
            Package saving result enum.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Packages.Operations.PackageSavingResult.Success">
            <summary>
            Package has been saved successfully.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Packages.Operations.PackageSavingResult.Warning">
            <summary>
            Package has been saved with warnings.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Packages.Operations.PackageSavingResult.Error">
            <summary>
            Package has been saved with errors.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.Operations.IPackageSaver">
            <summary>
            Provides methods for packages data saving.
            </summary>
            <remarks>
            The primary use of this interface is to save packages data to different persistence storages 
            such as file system, version control system, database etc.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.Packages.Operations.IPackageSaver.Save(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.Package},Terrasoft.Core.Packages.PackageInstallOptions)">
            <summary>
            Saves collection of packages to persistence storage.
            </summary>
            <param name="packages">Collection of packages.</param>
            <param name="options">Package saving options.</param>
            <returns>Returns result of packages saving as <see cref="T:Terrasoft.Core.Packages.Operations.PackageSavingResult"/> value.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.Operations.IPackageZipSaver">
            <summary>
            Provides methods for saving packages data to zip files.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.Operations.IPackageZipSaver.Save(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.Package},System.String)">
            <summary>
            Saves collection of packages to zip files.
            </summary>
            <param name="packages">Collection of packages.</param>
            <param name="path">Path to store zip files.</param>
        </member>
        <member name="T:Terrasoft.Core.Packages.Operations.ISystemPackageLoader">
            <summary>
            Provides methods for package data loading from system persistence storage.
            </summary>
            <remarks>
            This interface loads package data from system persistence storage: DB, SVN or file system. 
            Particular system persistence storage depends on current application settings.
            </remarks>
        </member>
        <member name="T:Terrasoft.Core.Packages.ISystemPackageManager">
            <summary>
            Defines methods to work with system packages.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISystemPackageManager.Add(Terrasoft.Core.Packages.Package)">
            <summary>
            Adds <paramref name="package"/> to the collection of system packages.
            </summary>
            <param name="package">Package.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISystemPackageManager.Add(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.Package})">
            <summary>
            Adds packages in specified collection to the collection of system packages.
            </summary>
            <param name="packages">Collection of packages.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISystemPackageManager.Remove(System.Guid)">
            <summary>
            Removes package with the specified UId from the collection of system packages.
            </summary>
            <param name="packageUId">Package UId.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISystemPackageManager.Remove(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Removes packages with UIds in specified collection from the collection of system packages.
            </summary>
            <param name="packageUIds">Collection of package UIds.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISystemPackageManager.Save(Terrasoft.Core.Packages.PackageInstallOptions)">
            <summary>
            Saves current collection of system packages.
            </summary>
            <param name="installOptions">Installation options.</param>
            <returns>
            Returns <c>true</c> if packages have been installed successfully. Otherwise returns <c>false</c>.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.Operations.ISystemPackageSaver">
            <summary>
            Defines methods to save package data to system persistence storage.
            </summary>
            <remarks>
            Defines methods to save package data to system persistence storage: DB, SVN or file system. 
            Particular system persistence storage depends on current application settings.
            </remarks>
        </member>
        <member name="T:Terrasoft.Core.Packages.ModuleDescriptor">
            <summary>
            Describes compiled .NET module.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.Package.FindSchemaResourceWithManager(System.String,System.String,System.String)">
            <summary>
            Finds schema resource descriptor.
            </summary>
            <param name="name">Schema name.</param>
            <param name="managerName">Manager name.</param>
            <param name="cultureName">Culture name.</param>
            <returns>Package schema resource desriptor.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.Package.FindSchemaResourceWithoutManager(System.String,System.String)">
            <summary>
            Finds schema resource descriptor.
            </summary>
            <param name="name">Schema name.</param>
            <param name="cultureName">Culture name.</param>
            <returns>Package schema resource desriptor.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.Package.FindSchemaResource(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaResourceDescriptor)">
            <summary>
            Finds schema resource descriptor.
            </summary>
            <param name="package">Package.</param>
            <param name="schemaResourceDescriptor">Schema resource descriptor.</param>
            <returns>Package schema resource desriptor.</returns>
            <remarks>If schema was renamed tries to find resource by previous name.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Packages.Package.FindCoreResource(System.String,System.String)">
            <summary>
            Finds core resource descriptor.
            </summary>
            <param name="name">Core resource name.</param>
            <param name="cultureName">Culture name.</param>
            <returns>Package core resource desriptor.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.Package.AddSchemaResource(Terrasoft.Core.Packages.SchemaResourceDescriptor)">
            <summary>
            Adds schema resource descriptor to package.
            </summary>
            <param name="schemaResourceDescriptor"></param>
        </member>
        <member name="M:Terrasoft.Core.Packages.Package.AddCoreResource(Terrasoft.Core.Packages.CoreResourceDescriptor)">
            <summary>
            Adds core resource descriptor to package.
            </summary>
            <param name="coreResourceDescriptor"></param>
        </member>
        <member name="P:Terrasoft.Core.Packages.Package.PackageVersion">
            <summary>
            Package version.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.Package.IntegratedModifiedOnUtc">
            <summary>
            Package and its content modification date.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.Package.SchemaResources">
            <summary>
            Returns package schema resource desriptors.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.Package.CoreResources">
            <summary>
            Returns package core resource desriptors.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.Package.IsUnderSourceControl">
            <summary>
            Returns true if package is under source control.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.Package.IsPackageDescriptorChanged">
            <summary>
            Gets or sets a value indicating whether the package descriptor is changed.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageDBStorage.AddPackages(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.Package})">
            <summary>
            Adds packages to the storage.
            </summary>
            <param name="packages">Packages.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageDBStorage.AddLoadPackagesExtraFilters(Terrasoft.Core.DB.Select)">
            <summary>
            Adds additional filters to the packages select query.
            </summary>
            <param name="select">Packages select query.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageDBStorage.AddLoadPackagesSchemasExtraFilters(Terrasoft.Core.DB.Select)">
            <summary>
            Adds additional filters to the schemas select query.
            </summary>
            <param name="select">Schemas select query.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageDBStorage.AddLoadPackagesDependenciesExtraFilters(Terrasoft.Core.DB.Select)">
            <summary>
            Adds additional filters to the package dependencies select query.
            </summary>
            <param name="select">Package dependencies select query.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageDBStorage.AddLoadPackagesSqlScriptExtraFilters(Terrasoft.Core.DB.Select)">
            <summary>
            Adds additional filters to the SQL-scripts select query.
            </summary>
            <param name="select">SQL-scripts select query.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageDBStorage.AddLoadSqlScriptDependenciesExtraFilters(Terrasoft.Core.DB.Select)">
            <summary>
            Adds additional filters to the SQL-script dependencies select query.
            </summary>
            <param name="select">SQL-script dependencies select query.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageDBStorage.AddLoadPackagesDataExtraFilters(Terrasoft.Core.DB.Select)">
            <summary>
            Adds additional filters to the package data select query.
            </summary>
            <param name="select">Package data select query.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageDBStorage.AddLoadPackagesAssembliesExtraFilters(Terrasoft.Core.DB.Select)">
            <summary>
            Adds additional filters to the package assemblies select query.
            </summary>
            <param name="select">Package assemblies data select query.</param>
        </member>
        <member name="T:Terrasoft.Core.Packages.IPackageHierarchyManager">
            <summary>
            Provides methods for packages hierarchy actualization.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageHierarchyManager.ClearPackageHierarchy">
            <summary>
            Clears package hierarchy.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageHierarchyManager.UpdatePackageHierarchy">
            <summary>
            Updates package hierarchy.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.IPackageIdentifierMapper">
            <summary>
            Provides mapping between package Id and UId
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageIdentifierMapper.GetIdByUId(System.Guid,System.Guid)">
            <summary>
            Gets package Id for provided <paramref name="uid"/> and <paramref name="workspaceId"/>
            </summary>
            <param name="uid">Package UId</param>
            <param name="workspaceId">Workspace Id</param>
            <returns>Package Id</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Thrown when package Id 
            for provided parameters isn't found</exception>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Thrown when either <paramref name="uid"/> or
            <paramref name="workspaceId"/> is empty</exception>
        </member>
        <member name="T:Terrasoft.Core.Packages.IPackageManager">
            <summary>
            Provides methods for package management.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageManager.CanDeletePackage(Terrasoft.Core.Configuration.SysPackage,System.String@)">
            <summary>
            Checks availability of package to be deleted.
            </summary>
            <param name="package">Package.</param>
            <param name="errorMessage">Error message.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageManager.DeletePackage(Terrasoft.Core.Configuration.SysPackage)">
            <summary>
            Deletes package from workspace.
            </summary>
            <param name="package">Package.</param>
        </member>
        <member name="T:Terrasoft.Core.Packages.IPackageResourceComparer">
            <summary>
            Provides methods for comparison of package resource items.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageResourceComparer.GetNew(System.Collections.Generic.IEnumerable{Terrasoft.Core.Configuration.SysLocalizableValue},System.Collections.Generic.IEnumerable{Terrasoft.Core.Configuration.SysLocalizableValue})">
            <summary>
            Returns new resource items depending on source and target collections.
            </summary>
            <param name="source">Source collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</param>
            <param name="target">Target collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</param>
            <returns>Collection of new <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageResourceComparer.GetChanged(System.Collections.Generic.IEnumerable{Terrasoft.Core.Configuration.SysLocalizableValue},System.Collections.Generic.IEnumerable{Terrasoft.Core.Configuration.SysLocalizableValue})">
            <summary>
            Returns changed resource items depending on source and target collections.
            </summary>
            <param name="source">Source collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</param>
            <param name="target">Target collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</param>
            <returns>Collection of changed <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageResourceComparer.GetDeleted(System.Collections.Generic.IEnumerable{Terrasoft.Core.Configuration.SysLocalizableValue},System.Collections.Generic.IEnumerable{Terrasoft.Core.Configuration.SysLocalizableValue})">
            <summary>
            Returns deleted resource items depending on source and target collections.
            </summary>
            <param name="source">Source collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</param>
            <param name="target">Target collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</param>
            <returns>Collection of deleted <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.IResourceNameParser">
            <summary>
            Package resource name parser interface.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.IResourceNameParser.FindCultureNameFromResourceFileName(System.String)">
            <summary>
            Returns culture name from resource file name.
            </summary>
            <param name="fileName">Resource file name.</param>
            <returns>Culture name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IResourceNameParser.FindManagerNameFromCoreResourceFileName(System.String)">
            <summary>
            Returns manager name from resource file name.
            </summary>
            <param name="fileName">Resource file name.</param>
            <returns>Manager name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IResourceNameParser.FindSchemaNameFromDirectoryName(System.String)">
            <summary>
            Returns schema name from directory name.
            </summary>
            <param name="directoryName"></param>
            <returns>Schema name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IResourceNameParser.FindManagerNameFromDirectoryName(System.String)">
            <summary>
            Returns manager name from directory name.
            </summary>
            <param name="directoryName"></param>
            <returns>Manager name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IResourceNameParser.GetFullManagerName(System.String)">
            <summary>
            Returns full manager name from short manager name.
            </summary>
            <param name="shortManagerName"></param>
            <returns>Full manager name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IResourceNameParser.GetShortManagerName(System.String)">
            <summary>
            Returns short manager name from full manager name.
            </summary>
            <param name="fullManagerName"></param>
            <returns>Short manager name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentDBProvider.GetSchemaStreamValues(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary> 
            Returns binary representation of schema metadata. 
            </summary> 
            <param name="package">Target package.</param> 
            <param name="schema">Schema descriptor.</param> 
            <returns>Key-value pairs collection where <c>string</c> key represents schema's metadata or 
            descriptor column name and <c>Stream</c> value contains binary representation of metadata.</returns>
            <remarks>Descriptor and metadata are taken from database.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentDBProvider.GetCoreResources(Terrasoft.Core.Packages.Package)">
            <summary>
            Returns core resources.
            </summary>
            <param name="package">Instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.</param>
            <returns>Dictionary by name and culture.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentDBProvider.GetPackageResources(Terrasoft.Core.Packages.Package)">
            <summary>
            Returns package resources.
            </summary>
            <param name="package">Instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.</param>
            <returns>Dictionary by name and culture.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentDBProvider.GetSchemaResource(Terrasoft.Core.Packages.Package,System.String,System.String,System.String)">
            <summary>
            Returns package resources by schema and culture.
            </summary>
            <param name="package">Instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.</param>
            <param name="schemaName">Name of schema.</param>
            <param name="cultureName">Name of culture.</param>
            <param name="managerName">Name of manager.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentDBProvider.GetCoreResource(Terrasoft.Core.Packages.Package,System.String,System.String)">
            <summary>
            Returns core resources by manager and culture.
            </summary>
            <param name="package">Instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.</param>
            <param name="managerName">Name of manager.</param>
            <param name="cultureName">Name of culture.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentDBProvider.GetSchemasSources(Terrasoft.Core.Packages.Package)">
            <summary>
            Returns sources of compiled package schemas.
            </summary>
            <param name="package">Instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.</param>
            <returns>List of compiled package schemas sources and file names.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentDBProvider.GetSchemaCs(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema's Cs-content.
            </summary>
            <param name="package">An instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.
            Schema's package.</param>
            <param name="schema">An instance of <see cref="T:Terrasoft.Core.Packages.SchemaDescriptor"/> class.
            Schema whose content must be returned.</param>
            <returns>Stream of Cs-content</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentDBProvider.GetSchemaJs(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema's Js-content.
            </summary>
            <param name="package">An instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.
            Schema's package.</param>
            <param name="schema">An instance of <see cref="T:Terrasoft.Core.Packages.SchemaDescriptor"/> class.
            Schema whose content must be returned.</param>
            <returns>Stream of Js-content</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentDBProvider.GetSchemaLess(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema's Less-content.
            </summary>
            <param name="package">Schema's package.</param>
            <param name="schema">Schema whose content must be returned.</param>
            <returns>Stream of Less-content</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.PackageFileStorage">
            <summary>
            Represents file system packages storage.
            Provides support for saving, updating and deleting packages in file system.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageFileStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Packages.PackageFileStorage"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageHierarchyManager.#ctor(Terrasoft.Core.UserConnection,System.Guid,Terrasoft.Core.DB.DBExecutor)">
            <summary>
            Creates instance of <see cref="T:Terrasoft.Core.Packages.PackageHierarchyManager"/>.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="workspaceId">Workspace unique identifier.</param>
            <param name="dbExecutor">Instance of <see cref="P:Terrasoft.Core.Packages.PackageHierarchyManager.DBExecutor"/>, provides DB query execution.
            Optional parameter. Default value is <c>null</c>.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageHierarchyManager.ClearPackageHierarchy">
            <summary>
            Clears package hierarchy.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageHierarchyManager.UpdatePackageHierarchy">
            <summary>
            Updates package hierarchy.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageIdentifierMapper.#ctor(Terrasoft.Core.DB.ISystemQueryExecutor)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.Packages.PackageIdentifierMapper"/>
            </summary>
            <param name="queryExecutor">Implementation of <see cref="T:Terrasoft.Core.DB.ISystemQueryExecutor"/></param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Thrown when <paramref name="queryExecutor"/>
            is null</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageIdentifierMapper.GetIdByUId(System.Guid,System.Guid)">
            <summary>
            Gets package Id for provided <paramref name="uid"/> and <paramref name="workspaceId"/>
            </summary>
            <param name="uid">Package UId</param>
            <param name="workspaceId">Workspace Id</param>
            <returns>Package Id</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Thrown when package Id 
            for provided parameters isn't found</exception>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Thrown when either <paramref name="uid"/> or
            <paramref name="workspaceId"/> is empty</exception>
        </member>
        <member name="T:Terrasoft.Core.Packages.IPackageResourcesStorage">
            <summary>
            Provides methods and properties for storages.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageResourcesStorage.Save">
            <summary>
            Saves resources.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.IPackageResourcesStorage.ItemErrors">
            <summary>
            Error collection.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.Exceptions.InvalidDescriptorInFileSystemException">
            <summary>
            Exception that is thrown when a package or package element descriptor is not valid.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.Exceptions.InvalidDescriptorInFileSystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.Exceptions.InvalidDescriptorInFileSystemException.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Core.Packages.Exceptions.InvalidDescriptorInFileSystemException"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.Exceptions.InvalidDescriptorInFileSystemException.#ctor(System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Core.Packages.Exceptions.InvalidDescriptorInFileSystemException"/>
            class with a specified message.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.Exceptions.InvalidDescriptorInFileSystemException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Core.Packages.Exceptions.InvalidDescriptorInFileSystemException"/> 
            class using specified message and reference to inner exception.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.Exceptions.InvalidDescriptorInFileSystemException.#ctor(System.Exception,System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Core.Packages.Exceptions.InvalidDescriptorInFileSystemException"/> 
            class using reference to inner exception and descriptor path.
            </summary>
            <param name="innerException">Inner exception.</param>
            <param name="path">Descriptor path.</param>
        </member>
        <member name="P:Terrasoft.Core.Packages.Exceptions.InvalidDescriptorInFileSystemException.Path">
            <summary>
            Descriptor path.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageManager.CanDeletePackage(Terrasoft.Core.Configuration.SysPackage,System.String@)">
            <summary>
            Checks availability of package to be deleted.
            </summary>
            <param name="package">Package.</param>
            <param name="errorMessage">Error message.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageManager.DeletePackage(Terrasoft.Core.Configuration.SysPackage)">
            <summary>
            Deletes package from workspace.
            </summary>
            <param name="package">Package.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageResourceComparer.GetNew(System.Collections.Generic.IEnumerable{Terrasoft.Core.Configuration.SysLocalizableValue},System.Collections.Generic.IEnumerable{Terrasoft.Core.Configuration.SysLocalizableValue})">
            <summary>
            Returns new resource items depending on source and target collections.
            </summary>
            <param name="source">Source collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</param>
            <param name="target">Target collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</param>
            <returns>Collection of new <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageResourceComparer.GetChanged(System.Collections.Generic.IEnumerable{Terrasoft.Core.Configuration.SysLocalizableValue},System.Collections.Generic.IEnumerable{Terrasoft.Core.Configuration.SysLocalizableValue})">
            <summary>
            Returns changed resource items depending on source and target collections.
            </summary>
            <param name="source">Source collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</param>
            <param name="target">Target collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</param>
            <returns>Collection of changed <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageResourceComparer.GetDeleted(System.Collections.Generic.IEnumerable{Terrasoft.Core.Configuration.SysLocalizableValue},System.Collections.Generic.IEnumerable{Terrasoft.Core.Configuration.SysLocalizableValue})">
            <summary>
            Returns deleted resource items depending on source and target collections.
            </summary>
            <param name="source">Source collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</param>
            <param name="target">Target collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</param>
            <returns>Collection of deleted <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.ItemOperationErrorEventArgs">
            <summary>
            Provides information for <see cref="E:Terrasoft.Core.Packages.PackageStorage.ItemOperationError"/> event.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.ItemOperationErrorEventArgs.#ctor(Terrasoft.Core.Packages.Descriptor,System.Exception)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.Packages.ItemOperationErrorEventArgs"/> class.
            </summary>
            <param name="descriptor">Instance of <see cref="P:Terrasoft.Core.Packages.ItemOperationErrorEventArgs.Descriptor"/> that describes erroneous item.</param>
            <param name="exception">Exception that caused item opration error.</param>
        </member>
        <member name="P:Terrasoft.Core.Packages.ItemOperationErrorEventArgs.Descriptor">
            <summary>
            Gets instance of <see cref="P:Terrasoft.Core.Packages.ItemOperationErrorEventArgs.Descriptor"/> that describes erroneous item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.ItemOperationErrorEventArgs.Exception">
            <summary>
            Gets exception that caused item opration error.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.PackageStorageChange.ManagerName">
            <summary>
            Schema resource manager name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.PackageStorageChange.CultureName">
            <summary>
            Package resource culture name.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.PackageStorageFactory">
            <summary>
            Creates instance of class <see cref="T:Terrasoft.Core.Packages.PackageStorage"/>
            based on <see cref="T:Terrasoft.Core.AppConnection"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageStorageFactory.#ctor(Terrasoft.Core.AppConnection)">
            <summary>
            Class constructor.
            </summary>
            <param name="appConnection">An instance of <see cref="T:Terrasoft.Core.AppConnection"/> class.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageStorageFactory.GetPackageStorage(System.String,System.String)">
            <summary>
            Returns the instance of the class <see cref="T:Terrasoft.Core.Packages.PackageStorage"/>.
            </summary>
            <returns>The instance of implementation of the PackageStorage.</returns>
        </member>
        <member name="P:Terrasoft.Core.Packages.PackageStorageFactory.IsSchemaChecksumEnabled">
            <summary>
            Returns <c>true</c> if schema checksum is enabled.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageUtilities.SetPackagesStateByInstallType(Terrasoft.Core.Packages.PackageStorage,Terrasoft.Core.Packages.PackageStorageObjectState,Terrasoft.Common.SysPackageInstallType)">
            <summary>
            Переводит пакеты с указанным типом установки в указанное состояние.
            </summary>
            <param name="source">Хранилище пакетов.</param>
            <param name="state">Состояние элемента хранилища.</param>
            <param name="installType">Тип установки пакета.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageUtilities.SetPackageStateByCondition(Terrasoft.Core.Packages.PackageStorage,Terrasoft.Core.Packages.PackageStorageObjectState,System.Func{Terrasoft.Core.Packages.Package,System.Boolean})">
            <summary>
            Переводит в указанное состояние пакеты, которые соответствуют указанному условию.
            </summary>
            <param name="source">Хранилище пакетов.</param>
            <param name="state">Состояние элемента хранилища.</param>
            <param name="getIsPackageCondition">Условие перевода пакета в указанное состояние.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageUtilities.SetPackagesNotModifiedAndUnlocked(Terrasoft.Core.Packages.PackageStorage)">
            <summary>
            Снимает признак измененности и блокировки со всех элементов хранилища пакетов.
            </summary>
            <param name="source">Хранилище.</param>
        </member>
        <member name="T:Terrasoft.Core.Packages.IDescriptorComparer">
            <summary>
            Provides methods for comparison of system item descriptors.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.IDescriptorComparer.IsItemNew(Terrasoft.Core.Packages.Descriptor)">
            <summary>
            Checks if the descriptor from the source repository is new.
            </summary>
            <param name="sourceItem">Descriptor from the source repository.</param>
            <returns><c>true</c> if the <paramref name = "sourceItem"/> descriptor is new; otherwise - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IDescriptorComparer.IsItemChanged(Terrasoft.Core.Packages.Descriptor,Terrasoft.Core.Packages.Descriptor)">
            <summary>
            Checks if the descriptor from the target repository has been modified.
            </summary>
            <param name="sourceItem">Descriptor from the source repository.</param>
            <param name="targetItem">Descriptor from the target storage.</param> 
            <returns><c>true</c> if the descriptor from the <paramref name="sourceItem" /> repository has been
            modified; otherwise – <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IDescriptorComparer.IsItemDeleted(Terrasoft.Core.Packages.Descriptor)">
            <summary>
            Checks if the descriptor from the target repository has been deleted.
            </summary>
            <param name="targetItem">Descriptor from the target repository.</param>
            <returns><c>true</c> if the <paramref name="targetItem" /> descriptor has been deleted;
            otherwise – <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IDescriptorComparer.IsItemOrContentChanged(Terrasoft.Core.Packages.Descriptor,Terrasoft.Core.Packages.Descriptor)">
            <summary>
            Checks if the descriptor from the source repository differs from the descriptor from the target repository.
            </summary>
            <param name="sourceItem">Descriptor from the source repository.</param>
            <param name="targetItem">Descriptor from the target repository.</param>
            <returns><c>true</c> if no changes found, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.DescriptorComparerBase.IsItemNew(Terrasoft.Core.Packages.Descriptor)">
            <summary>
            Checks if the descriptor from the source repository is new.
            </summary>
            <param name="sourceItem">Descriptor from the source repository.</param>
            <returns><c>true</c> if the <paramref name = "sourceItem"/> descriptor is new; otherwise - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.DescriptorComparerBase.IsItemChanged(Terrasoft.Core.Packages.Descriptor,Terrasoft.Core.Packages.Descriptor)">
            <summary>
            Checks if the descriptor from the target repository has been modified.
            </summary>
            <param name="sourceItem">Descriptor from the source repository.</param>
            <param name="targetItem">Descriptor from the target repository.</param>
            <returns><c>true</c> if the descriptor from the <paramref name="sourceItem" /> repository has been
            modified; otherwise – <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.DescriptorComparerBase.IsItemDeleted(Terrasoft.Core.Packages.Descriptor)">
            <summary>
            Checks if the descriptor from the target repository has been deleted.
            </summary>
            <param name="targetItem">Descriptor from the target repository.</param>
            <returns><c>true</c> if the <paramref name="targetItem" /> descriptor has been deleted;
            otherwise – <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.DescriptorComparerBase.IsItemOrContentChanged(Terrasoft.Core.Packages.Descriptor,Terrasoft.Core.Packages.Descriptor)">
            <summary>
            Checks if the descriptor from the source repository differs from the descriptor from the target repository.
            </summary>
            <param name="sourceItem">Descriptor from the source repository.</param>
            <param name="targetItem">Descriptor from the target repository.</param>
            <returns><c>true</c> if no changes found, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.DescriptorChecksumComparer.IsItemOrContentChanged(Terrasoft.Core.Packages.Descriptor,Terrasoft.Core.Packages.Descriptor)">
            <summary>
            Checks if the descriptor from the source repository differs from the descriptor from the target repository.
            </summary>
            <param name="sourceItem">Descriptor from the source repository.</param>
            <param name="targetItem">Descriptor from the target repository.</param>
            <returns><c>true</c> if no changes found, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.DescriptorDateTimeComparer.IsItemOrContentChanged(Terrasoft.Core.Packages.Descriptor,Terrasoft.Core.Packages.Descriptor)">
            <summary>
            Checks if the descriptor from the source repository differs from the descriptor from the target repository.
            </summary>
            <param name="sourceItem">Descriptor from the source repository.</param>
            <param name="targetItem">Descriptor from the target repository.</param>
            <returns><c>true</c> if no changes found, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IHashProvider.GetMD5HashByFile(System.String)">
            <summary>
            Returns file checksum as string.
            </summary>
            <param name="path">File path.</param>
            <returns>File checksum as string.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IHashProvider.GetMD5HashByByteArray(System.Byte[])">
            <summary>
            Returns byte array checksum as string.
            </summary>
            <param name="contentBytes">Byte array.</param>
            <returns>Byte array checksum as string.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageResourceSerializer.Serialize(System.IO.Stream,System.Collections.Generic.IEnumerable{Terrasoft.Core.Configuration.SysLocalizableValue},System.String)">
            <summary>
            Converting collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/> to <see cref="T:Terrasoft.Common.ResourcePackage"/>
            and serializing to stream
            </summary>
            <param name="stream">Stream for serialized data</param>
            <param name="entityCollection">Collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/></param>
            <param name="cultureName">Culture name</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.IPackageResourceSerializer.Deserialize(System.IO.Stream,System.String)">
            <summary>
            Deserializing XML from stream to <see cref="T:Terrasoft.Common.ResourcePackage"/> object and converting to collection 
            of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>
            </summary>
            <param name="resourceStream">Serialized data stream</param>
            <param name="cultureName">Culture name</param>
            <returns>Collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/></returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ResourceNameParser.FindCultureNameFromResourceFileName(System.String)">
            <summary>
            Returns culture name from resource file name.
            </summary>
            <param name="fileName">Resource file name.</param>
            <returns>Culture name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ResourceNameParser.FindManagerNameFromCoreResourceFileName(System.String)">
            <summary>
            Returns manager name from resource file name.
            </summary>
            <param name="fileName">Resource file name.</param>
            <returns>Manager name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ResourceNameParser.FindSchemaNameFromDirectoryName(System.String)">
            <summary>
            Returns schema name from directory name.
            </summary>
            <param name="directoryName"></param>
            <returns>Schema name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ResourceNameParser.FindManagerNameFromDirectoryName(System.String)">
            <summary>
            Returns manager name from directory name.
            </summary>
            <param name="directoryName"></param>
            <returns>Manager name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ResourceNameParser.GetFullManagerName(System.String)">
            <summary>
            Returns full manager name from short manager name.
            </summary>
            <param name="shortManagerName"></param>
            <returns>Full manager name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ResourceNameParser.GetShortManagerName(System.String)">
            <summary>
            Returns short manager name from full manager name.
            </summary>
            <param name="fullManagerName"></param>
            <returns>Short manager name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SchemaDataLocker.UnlockElement(System.String,System.String,System.Guid)">
            <summary>
            Unlocks target schema data in version control system and database.
            </summary>
            <param name="packageName">Package name.</param>
            <param name="elementName">Schema data name.</param>
            <param name="elementId">Schema data identifier.</param>
        </member>
        <member name="F:Terrasoft.Core.Packages.SchemaDescriptor._dependsOn">
            <summary>
            Содержит список зависимостей схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SchemaDescriptor.AddDependency(Terrasoft.Core.Packages.SchemaDependencyItem)">
            <summary>
            Добавляет зависимость.
            </summary>
            <param name="schemaDependency">Зависимость схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SchemaDescriptor.RemoveDependency(Terrasoft.Core.Packages.SchemaDependencyItem)">
            <summary>
            Удаляет указанную зависимость.
            </summary>
            <param name="schemaDependency">Зависимость схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SchemaDescriptor.ClearDependencies">
            <summary>
            Удаляет все зависимости.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SchemaDescriptor.IncludeDependenciesSource">
            <summary>
            Включить коды зависимых схем
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SchemaDescriptor.ForceAbstract">
            <summary>Признак того, что класс нужно принудительно сделать абстрактным</summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SchemaLocker.UnlockElement(System.String,System.String,System.Guid)">
            <summary>
            Unlocks target schema in version control system and database..
            </summary>
            <param name="packageName">Package name.</param>
            <param name="elementName">Schema name.</param>
            <param name="elementId">Schema identifier.</param>
        </member>
        <member name="P:Terrasoft.Core.Packages.SchemaResourceDescriptor.Type">
            <summary>
            Package storage element type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SchemaResourceDescriptor.ManagerName">
            <summary>
            Schema resource manager name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SchemaResourceDescriptor.BaseSchemaId">
            <summary>
            Gets or sets base schema Id.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageWebClient.DownloadFile(System.Uri,System.String)">
            <summary>
            Downloads the resource with the specified URI to a local file.
            </summary>
            <param name="address">The URI, from which to download data.</param>
            <param name="fileName">The name of the local file that is to receive the data.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageWebClient.Dispose">
            <summary>
            Releases all resources used by the Web Client.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SqlScriptLocker.UnlockElement(System.String,System.String,System.Guid)">
            <summary>
            Unlocks sql script in version control system and database.
            </summary>
            <param name="packageName">Package name.</param>
            <param name="elementName">Sql script name.</param>
            <param name="elementId">Sql script identifier.</param>
        </member>
        <member name="T:Terrasoft.Core.Packages.SqlScriptLoopsException">
            <summary>Класс исключения для передачи информации о цикле зависимостей между Sql-сценариями</summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ActualizeFormulaResultInfo">
            <summary>
            The result information after formula parameter validation.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ActualizeFormulaResultInfo.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ActualizeFormulaResultInfo"/> class.
            </summary>
            <param name="updatedResultDataValueTypeUId">The updated result data value type identifier.</param>
            <param name="parameterPath">The parameter path.</param>
        </member>
        <member name="P:Terrasoft.Core.Process.ActualizeFormulaResultInfo.UpdatedResultDataValueTypeUId">
            <summary>
            Gets or sets the updated result data value type identifier.
            </summary>
            <value>
            The updated result data value type identifier.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ActualizeFormulaResultInfo.ParameterPath">
            <summary>
            Gets or sets the parameter path.
            </summary>
            <value>
            The parameter path.
            </value>
        </member>
        <member name="T:Terrasoft.Core.Process.ActualizeOwnerStateEventArgs">
            <summary>
            Contain <see cref="E:Terrasoft.Core.Process.ProcessFlowElement.TryActualizeOwnerState"/> event data.
            </summary>
            <seealso cref="T:System.EventArgs"/>
        </member>
        <member name="P:Terrasoft.Core.Process.ActualizeOwnerStateEventArgs.ProcessElementIsCloned">
            <summary>
            Gets or sets a value indicating whether process element is cloned.
            </summary>
            <value>
            <c>true</c> if process element is cloned; otherwise - <c>false</c>.
            </value>
        </member>
        <member name="T:Terrasoft.Core.Process.CommonProcessUtilities">
            <summary>
            Provides utility methods used in processes run time.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.CommonProcessUtilities.ProcessLog">
            <summary>
            Gets the process logger.
            </summary>
            <value>
            The process logger.
            </value>
        </member>
        <member name="T:Terrasoft.Core.Process.PrepareForReexecuteEventArgs`1">
            <summary>
            Represents event data that are needed for preparing process element before execution.
            </summary>
            <typeparam name="TProcessElemnt">Instance implements the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> type.</typeparam>
        </member>
        <member name="P:Terrasoft.Core.Process.PrepareForReexecuteEventArgs`1.SourceInstance">
            <summary>
            Gets or sets current instance of the process element.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.PrepareForReexecuteEventArgs`1.ExecutingInstace">
            <summary>
            Gets or sets actual instance of the process element.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessActivityAfterEventArgs">
            <summary>
            Represents the class that contains event data that are needed after execution.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivityAfterEventArgs.Result">
            <summary>
            Gets or sets the result of the execution.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivityAfterEventArgs.Context">
            <summary>
            Gets or sets instance of the <see cref="T:Terrasoft.Core.Process.ProcessExecutingContext"/> type.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessActivityBeforeEventArgs">
            <summary>
            Represents the class that contains event data are needed before execution.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivityBeforeEventArgs.IsCanceled">
            <summary>
            Gets or sets whether this process instance has been canceled.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessActivityBeforeEventArgs.Context">
            <summary>
            Gets or sets instance of the <see cref="T:Terrasoft.Core.Process.ProcessExecutingContext"/> type.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessParameterMemoryStore">
            <summary>
            In memory store for process parameter values.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessParameterStore">
            <summary>
            Интерфейс хранилища параметров бизнес-процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.GetParameterInfoPathes(System.Guid)">
            <summary>
            Возвращает набор путей, по которым можно извлечь данные параметров бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <returns>
            Хэш-таблица, содержащая набор путей к данным параметров процесса.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.FindParameterInfo(System.Guid,System.String)">
            <summary>
            Осуществляет поиск данных параметра процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к данным параметра процесса.</param>
            <returns>
            Экземпляр типа <see cref="T:Terrasoft.Core.Process.ProcessParameterInfo"/> или <c>null</c>, если данные не найдены.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.GetParameterInfo(System.Guid,System.String)">
            <summary>
            Возвращает данные параметра процесса. Если данные не найдены, генерируется исключение.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к данным параметра процесса.</param>
            <returns>
            Экземпляр типа <see cref="T:Terrasoft.Core.Process.ProcessParameterInfo"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.SaveParametersInfo(System.Guid,System.Collections.Generic.IDictionary{System.String,Terrasoft.Core.Process.ProcessParameterInfo})">
            <summary>
            Сохраняет данные параметров заданного бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="pathParametersInfo">Список пар ключ/значение, где ключ - путь к параметру,
            а значение - данные параметра процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.SaveParameterInfo(System.Guid,System.String,Terrasoft.Core.Process.ProcessParameterInfo)">
            <summary>
            Сохраняет данные параметра заданного бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к данным параметра процесса.</param>
            <param name="parameterInfo">Данные параметра бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.RemoveParametersInfo(System.Guid)">
            <summary>
            Удаляет все данные параметров заданного бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.GetParametersMapInfo(System.Guid)">
            <summary>
            Возвращает таблицу связей параметров процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.GetProcessParameterPathes(System.Guid)">
            <summary>
            Возвращает набор путей, по которым можно извлечь значения параметров бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <returns>
            Хэш-таблица, содержащая набор путей к значениям параметров процесса.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.SetParameterValue(System.Guid,System.String,System.String)">
            <summary>
            Устанавливает для заданного параметра значение типа <see cref="T:System.String"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.SetParameterValue(System.Guid,System.String,System.Guid)">
            <summary>
            Устанавливает для заданного параметра значение типа <see cref="T:System.Guid"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Guid"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.SetParameterValue(System.Guid,System.String,System.Int32)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.Int32"/> .
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Int32"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.SetParameterValue(System.Guid,System.String,System.Decimal)">
            <summary>
            Устанавливает для заданного параметра значение типа <see cref="T:System.Decimal"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Decimal"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.SetParameterValue(System.Guid,System.String,System.Double)">
            <summary>
            Устанавливает для заданного параметра значение типа <see cref="T:System.Double"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Double"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.SetParameterValue(System.Guid,System.String,System.Enum)">
            <summary>
            Устанавливает для заданного параметра значение типа <see cref="T:System.Enum"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Enum"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.SetParameterValue(System.Guid,System.String,System.DateTime)">
            <summary>
            Устанавливает для заданного параметра значение типа <see cref="T:System.DateTime"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.SetParameterValue(System.Guid,System.String,System.Boolean)">
            <summary>
            Устанавливает для заданного параметра значение типа <see cref="T:System.Boolean"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value"> Значение параметра типа <see cref="T:System.Boolean"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.SetParameterValue(System.Guid,System.String,Terrasoft.Common.LocalizableString)">
            <summary>
            Устанавливает для заданного параметра значение типа <see cref="T:Terrasoft.Common.LocalizableString"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:Terrasoft.Common.LocalizableString"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.TryGetParameterValue(System.Guid,System.String,System.String@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.String"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.TryGetParameterValue(System.Guid,System.String,System.Guid@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Guid"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Guid"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.TryGetParameterValue(System.Guid,System.String,System.Int32@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Int32"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Int32"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.TryGetParameterValue(System.Guid,System.String,System.Decimal@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Decimal"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Decimal"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.TryGetParameterValue(System.Guid,System.String,System.Double@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Double"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Double"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.TryGetParameterValue(System.Guid,System.String,System.Enum@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Enum"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Enum"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.TryGetParameterValue(System.Guid,System.String,System.DateTime@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.DateTime"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.DateTime"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.TryGetParameterValue(System.Guid,System.String,System.Boolean@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Boolean"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Boolean"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.TryGetParameterValue(System.Guid,System.String,Terrasoft.Common.LocalizableString@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:Terrasoft.Common.LocalizableString"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:Terrasoft.Common.LocalizableString"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.RemoveParameterValues(System.Guid)">
            <summary>
            Удаляет все значения параметров заданного бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.FindParameterValue(System.Guid,System.String)">
            <summary>
            Extracts the value of any type by generated key. The key is generated based on the value 
            of the <paramref name="processUId"/> Id and the value of the <paramref name="parameterPath"/> parameter.
            </summary>
            <param name="processUId">Business process UId.</param>
            <param name="parameterPath">Path to the parameter value that must be retrieved.</param>
            <returns>
            Parameter value or <c>null</c>, if parameter not found.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.GetParameterValue(System.Guid,System.String)">
            <summary>
            Extracts the value of any type by generated key. The key is generated based on the value 
            of the <paramref name="processUId"/> Id and the value of the <paramref name="parameterPath"/> parameter.
            </summary>
            <param name="processUId">Business process UId.</param>
            <param name="parameterPath">Path to the parameter value that must be retrieved.</param>
            <returns>
            Parameter value.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">
            Throws when parameter value does not exist in repository.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterStore.ContainsParameterPath(System.Guid,System.String)">
            <summary>
            Determines whether a parameter path is in the repository.
            </summary>
            <param name="processUId">Process UId.</param>
            <param name="parameterPath">Parameter path.</param>
            <returns>
            <c>true</c>, if repository contains parameter path, otherwise - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.Replicate(Terrasoft.Core.Process.IProcessParameterStore,System.Guid)">
            <summary>
            Replicates data to another repository.
            </summary>
            <param name="store">Instance that implements the <see cref="T:Terrasoft.Core.Process.IProcessParameterStore"/> interface.</param>
            <param name="uid">Unique identifier of the process.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.GetParameterInfoPathes(System.Guid)">
            <summary>
            Возвращает набор путей, по которым можно извлечь данные параметров бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <returns>
            Хэш-таблица, содержащая набор путей к данным параметров процесса.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.FindParameterInfo(System.Guid,System.String)">
            <summary>
            Осуществляет поиск данных параметра процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к данным параметра процесса.</param>
            <returns>
            Экземпляр типа <see cref="T:Terrasoft.Core.Process.ProcessParameterInfo"/> или <c>null</c>, если данные не найдены.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.GetParameterInfo(System.Guid,System.String)">
            <summary>
            Возвращает данные параметра процесса. Если данные не найдены, генерируется исключение.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к данным параметра процесса.</param>
            <returns>
            Экземпляр типа <see cref="T:Terrasoft.Core.Process.ProcessParameterInfo"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если данные параметра процесса не найдены.</exception>&gt;.
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.SaveParameterInfo(System.Guid,System.String,Terrasoft.Core.Process.ProcessParameterInfo)">
            <summary>
            Сохраняет данные параметра заданного бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к данным параметра процесса.</param>
            <param name="parameterInfo">Данные параметра бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.SaveParametersInfo(System.Guid,System.Collections.Generic.IDictionary{System.String,Terrasoft.Core.Process.ProcessParameterInfo})">
            <summary>
            Сохраняет данные параметров заданного бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="pathParametersInfo">Список пар ключ/значение, где ключ - путь к параметру,
            а значение - данные параметра процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.RemoveParametersInfo(System.Guid)">
            <summary>
            Метод не реализован.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.GetParametersMapInfo(System.Guid)">
            <summary>
            Возвращает таблицу связей параметров процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.RemoveParameterValues(System.Guid)">
            <summary>
            Метод не реализован.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.GetProcessParameterPathes(System.Guid)">
            <summary>
            Возвращает набор путей, по которым можно извлечь значения параметров бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <returns>
            Хэш-таблица, содержащая набор путей к значениям параметров процесса.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.FindParameterValue(System.Guid,System.String)">
            <summary>
            Extracts the value of any type by generated key. The key is generated based on the value 
            of the <paramref name="processUId"/> Id and the value of the <paramref name="parameterPath"/> parameter.
            </summary>
            <param name="processUId">Business process UId.</param>
            <param name="parameterPath">Path to the parameter value that must be retrieved.</param>
            <returns>
            Parameter value or <c>null</c>, if parameter not found.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.GetParameterValue(System.Guid,System.String)">
            <summary>
            Extracts the value of any type by generated key. The key is generated based on the value 
            of the <paramref name="processUId"/> Id and the value of the <paramref name="parameterPath"/> parameter.
            </summary>
            <param name="processUId">Business process UId.</param>
            <param name="parameterPath">Path to the parameter value that must be retrieved.</param>
            <returns>
            Parameter value or <c>null</c>, if parameter not found.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.ContainsParameterPath(System.Guid,System.String)">
            <summary>
            Determines whether a parameter path is in the repository.
            </summary>
            <param name="processUId">Process UId.</param>
            <param name="parameterPath">Parameter path.</param>
            <returns>
            <c>true</c>, if repository contains parameter path, otherwise - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.SetParameterValue(System.Guid,System.String,System.Decimal)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.Decimal"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Descimal"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.SetParameterValue(System.Guid,System.String,System.Guid)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.Guid"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Guid"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.SetParameterValue(System.Guid,System.String,System.Int32)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.Int32"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Int32"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.SetParameterValue(System.Guid,System.String,System.String)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.String"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.SetParameterValue(System.Guid,System.String,System.Enum)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.Enum"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Enum"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.SetParameterValue(System.Guid,System.String,System.DateTime)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.DateTime"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.SetParameterValue(System.Guid,System.String,System.Boolean)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.Boolean"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Boolean"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.SetParameterValue(System.Guid,System.String,Terrasoft.Common.LocalizableString)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:Terrasoft.Common.LocalizableString"/> по сформированному
            ключу. Ключ формируется по значению идентификатора <paramref name="processUId"/> и значению параметра
            <paramref name="parameterPath"/>.</summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:Terrasoft.Common.LocalizableString"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.SetParameterValue(System.Guid,System.String,System.Double)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.Double"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Double"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.TryGetParameterValue(System.Guid,System.String,System.Decimal@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Decimal"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Decimal"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.TryGetParameterValue(System.Guid,System.String,System.Guid@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Guid"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Guid"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.TryGetParameterValue(System.Guid,System.String,System.Int32@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Int32"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Int32"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.TryGetParameterValue(System.Guid,System.String,System.String@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.String"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.TryGetParameterValue(System.Guid,System.String,System.Enum@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Enum"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Enum"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.TryGetParameterValue(System.Guid,System.String,System.DateTime@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.DateTime"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.DateTime"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.TryGetParameterValue(System.Guid,System.String,System.Boolean@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Boolean"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.</summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Boolean"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.TryGetParameterValue(System.Guid,System.String,Terrasoft.Common.LocalizableString@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:Terrasoft.Common.LocalizableString"/> по
            сформированному ключу. Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.</summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:Terrasoft.Common.LocalizableString"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMemoryStore.TryGetParameterValue(System.Guid,System.String,System.Double@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Double"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Double"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterMemoryStore.ParameterInfoPathes">
            <summary>Получает хранилище путей параметров.</summary>
            <returns>Хранилище для путей параметров.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterMemoryStore.ParameterInfoLocalStore">
            <summary>Получает хранилище для описания параметров.</summary>
            <returns>Хранилище для описания параметров.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterMemoryStore.ParameterStores">
            <summary>Получает хранилище для параметров.</summary>
            <returns>Хранилище для параметров.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessPropertyGenerator">
            <summary>
            Class provides methods for generating class properties of the process.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.CodeGeneration.CodeGenerator">
            <summary>
            Represents code generator.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.CodeGeneration.CodeGenerator.#ctor">
            <summary>
            Initializes the new instance of CodeGenerator class.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.CodeGeneration.CodeGenerator.SchemaNameMacros">
            <summary>
            Get schema name macros text representation.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.CodeGeneration.CodeGenerator.ParentSchemaNameMacros">
            <summary>
            Gets parent schema macros name text representation.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.CodeGeneration.CodeGenerator.LastSchemaVersionNameMacros">
            <summary>
            Gets last schema version name macros text representation.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.CodeGeneration.CodeGenerator.SingleLineToken">
            <summary>
            Represents single line token.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.CodeGeneration.CloseableToken.WriteDocumentationBody(Terrasoft.Core.CodeGeneration.GeneratorContext)">
            <summary>
            Writes documentation for the body.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Terrasoft.Core.CodeGeneration.CodeGenerator.MemberInfoToken">
            <summary>
            Represents member info token.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.CodeGeneration.VisibilityConfigurableToken">
            <summary>
            Adds functionality of visibility for the token.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.CodeGeneration.VisibilityConfigurableToken.TokenVisibility">
            <summary>
            Gets or sets value indicating the visibility state.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.CodeGeneration.VisibilityConfigurableToken.TokenVisibilityString">
            <summary>
            String representation of the visibility.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.CodeGeneration.CodeGenerator.ClassToken">
            <summary>
            Represents class token.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.CodeGeneration.CodeGenerator.ClassToken.Open(Terrasoft.Core.CodeGeneration.GeneratorContext)">
            <summary>
            Opens generator context.
            </summary>
            <param name="context">Context to open.</param>
        </member>
        <member name="T:Terrasoft.Core.CodeGeneration.CodeGenerator.EnumToken">
            <summary>
            Represents enum token.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.CodeGeneration.CodeGenerator.EnumToken.Open(Terrasoft.Core.CodeGeneration.GeneratorContext)">
            <summary>
            Opens generator context.
            </summary>
            <param name="context">Context to open.</param>
        </member>
        <member name="T:Terrasoft.Core.CodeGeneration.CodeGenerator.GenericClassToken">
            <summary>
            Represents generic class token.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.CodeGeneration.CodeGenerator.GenericClassToken.Open(Terrasoft.Core.CodeGeneration.GeneratorContext)">
            <summary>
            Opens generator context.
            </summary>
            <param name="context">Context to open.</param>
        </member>
        <member name="P:Terrasoft.Core.CodeGeneration.CodeGenerator.PropertyToken.IsVirtual">
            <summary>
            Gets or sets value that indicates whether it is needed to write the "virtual" keyword.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.CodeGeneration.CodeGenerator.MethodToken.Open(Terrasoft.Core.CodeGeneration.GeneratorContext)">
            <summary>
            Opens generator token context.
            </summary>
            <param name="context">Context to open.</param>
        </member>
        <member name="M:Terrasoft.Core.CodeGeneration.CodeGenerator.ConstructorToken.Open(Terrasoft.Core.CodeGeneration.GeneratorContext)">
            <summary>
            Opens generator token context.
            </summary>
            <param name="context">Context to open.</param>
        </member>
        <member name="P:Terrasoft.Core.CodeGeneration.CodeGenerator.PropertyCollectionItem.IsVirtual">
            <summary>
            Gets or sets value that indicates whether it is needed to write the "virtual" keyword.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.CodeGeneration.CodeGenerator.PropertyCollectionItem.GetValueBody">
            <summary>
            Gets or sets value that represents a set of lines of code to initialize the property value.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.ProcessPropertyGenerator.GetColumnValueFunctionsFieldName">
            <summary>
            The name for the "_getColumnValueFunctions" class field.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.ProcessPropertyGenerator.GetColumnValueFunctionsPropertyName">
            <summary>
            The name for the "GetColumnValueFunctions" class property.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessPropertyGenerator.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessSchemaParameter,Terrasoft.Core.Process.IParametrizedProcessSchemaElement,System.Func{Terrasoft.Core.Process.ProcessSchema,Terrasoft.Core.Process.ProcessSchemaParameter,System.String})">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessPropertyGenerator"/> class.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="parameter">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaParameter"/> class.</param>
            <param name="schemaElement">Parameterized schema element.</param>
            <param name="generateParameterFieldValue">Function that generates class field value.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessPropertyGenerator.WriteProcessParameterPropertyEntityCollectionDataValueType(System.Collections.ObjectModel.Collection{Terrasoft.Core.CodeGeneration.CodeGenerator.PropertyCollectionItem},Terrasoft.Core.Process.ProcessSchemaParameter,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Fills the set of the class property items with another class property item.
            </summary>
            <param name="properties">Set of the property items.</param>
            <param name="parameter">Process schema parameter.</param>
            <param name="propertyName">Property name.</param>
            <param name="virtualProperty">Virtual keyword. </param>
            <param name="typeName">Type name of the current class property.</param>
            <param name="fieldName">Name of the class field.</param>
            <param name="isOverride">Indicate whether it is needed to override the current class property.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessPropertyGenerator.Generate">
            <summary>
            Generates class property item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessPropertyGenerator.PropertyDescriptor">
            <summary>
            Gets instance of the <see cref="T:Terrasoft.Core.CodeGeneration.CodeGenerator.PropertyCollectionItem"/> class.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.DcmSchemaDependencyFactory">
            <summary>
            The class for the <see cref="T:Terrasoft.Core.DcmProcess.DcmSchema"/> dependency factory.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.BaseProcessSchemaDependencyFactory`1"/>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaDependencyFactory.#ctor(Terrasoft.Core.DcmProcess.DcmSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaDependencyFactory"/> class.
            </summary>
            <param name="dcmSchema">The DCM schema.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaDependencyFactory.CreateProcessElementFactory(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Creates the process element factory.
            </summary>
            <param name="process">The process instance.</param>
            <returns>
            The process element factory.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaDependencyFactory.FlowSchemaGenerator">
            <summary>
            Gets the flow schema generator.
            </summary>
            <value>
            The flow schema generator.
            </value>
        </member>
        <member name="P:Terrasoft.Core.DcmProcess.DcmSchemaDependencyFactory.ElementsEnumerator">
            <summary>
            Gets the elements enumerator.
            </summary>
            <value>
            The elements enumerator.
            </value>
        </member>
        <member name="T:Terrasoft.Core.DcmProcess.DcmSchemaManagerItem">
            <summary>
            <see cref="T:Terrasoft.Core.ISchemaManagerItem`1"/> implementation for <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaManager"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaManagerItem.#ctor(Terrasoft.Core.DcmProcess.DcmSchemaManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaManagerItem"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaManagerItem.#ctor(Terrasoft.Core.ISchemaManagerItem{Terrasoft.Core.DcmProcess.DcmSchema},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaManagerItem"/> class.
            </summary>
            <param name="source">Manager item to initialize current item from.</param>
            <param name="isShallowClone">
            Flag that indicates whether the item's instance will not be cloned too.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaManagerItem.Clone">
            <summary>
            Create a deep copy of current item.
            </summary>
            <returns>Cloned item.</returns>
        </member>
        <member name="M:Terrasoft.Core.DcmProcess.DcmSchemaManagerItem.CloneShallow">
            <summary>
            Create a shallow copy of current item without cloning schema instance.
            </summary>
            <returns>Cloned item.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.CancelProcessExecutingEventArgs">
            <summary>
            Represents class that contains cancel executing event data.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.CancelProcessExecutingEventArgs.MustKeepProcessData">
            <summary>
            Gets or sets a value indicating whether process data should be kept after cancel execution.
            </summary>
            <value>
            <c>true</c> if process data should be kept after cancel execution; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Terrasoft.Core.Process.DynamicProcessSchemaParameter">
            <summary>
            Dynamic process parameter class.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessSchemaBaseElement">
            <summary>
            Represents base class for the BPMN process elements.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaBaseElement.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaBaseElement.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Applies meta data values.
            </summary>
            <param name="reader">Instance of the <see cref="T:Terrasoft.Common.DataReader"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaBaseElement.InitializeProperties">
            <summary>
            Initializes properties of the current instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaBaseElement.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes meta data values.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaBaseElement.CreateFlowElement(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Creates flow element.
            </summary>
            <param name="flowSchema">Instance of the <see cref="T:Terrasoft.Core.Process.FlowSchema"/> type.</param>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaBaseElement.BpmnElementName">
            <summary>
            Gets or sets name of the BPMN element.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaBaseElement.IsSequenceFlow">
            <summary>
            Признак, который определяет, что элемент схемы бизнес-процесса является соединением.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParameter.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.Process.ProcessSchemaParameter"/>.
            </summary>
            <param name="dataValueTypeUId">UId of the data value type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParameter.#ctor(Terrasoft.Core.DataValueType)">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.Process.ProcessSchemaParameter"/>.
            </summary>
            <param name="dataValueType">An instance of <see cref="P:Terrasoft.Core.Process.ProcessSchemaParameter.DataValueType"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParameter.#ctor(Terrasoft.Core.SchemaLocalizableString)">
            <summary>
            Initializes a new instance of the localizable <see cref="T:Terrasoft.Core.Process.ProcessSchemaParameter"/> class
            using the specified localizable string.
            </summary>
            <param name="source">Localizable string.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParameter.GetIsFormulaValue">
            <summary>
            Indicates that <see cref="P:Terrasoft.Core.Process.ProcessSchemaParameter.SourceValue"/> represents formula expression.
            </summary>
            <returns><c>True</c>, if <see cref="P:Terrasoft.Core.Process.ProcessSchemaParameter.SourceValue"/> is formula expression. Otherwise - false.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParameter.GetIsLocalizableValueType">
            <summary>
            Indicates the value has localizable type.
            </summary>
            <returns>If true, the value should be localized. Otherwise - false.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaParameter.IsDynamic">
            <summary>
            Gets flag that indicates whether the parameter is dynamic.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.DynamicProcessSchemaParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.DynamicProcessSchemaParameter"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.DynamicProcessSchemaParameter.#ctor(Terrasoft.Core.Process.DynamicProcessSchemaParameter)">
            <summary>
            Initializes a new cloned instance of the <see cref="T:Terrasoft.Core.Process.DynamicProcessSchemaParameter"/> class.
            </summary>
            <param name="source">Instance for clone.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.DynamicProcessSchemaParameter.Clone">
            <summary>
            Clones parameter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Terrasoft.Core.Process.DynamicProcessSchemaParameter.IsDynamic">
            <summary>
            Gets flag that indicates whether the parameter is dynamic.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowSchemaGeneratorResult">
            <summary>
            Represents data of the flow schema generation results.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowSchemaGeneratorResult.ProcessValidationResult">
            <summary>
            The validation result. The value is changed if generation was failed.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowSchemaGeneratorResult.FlowSchema">
            <summary>
            The flow schema.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities">
            <summary>
            Provides auxiliary methods for generating (parsing) of process schema.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.PropertyDelimiter">
            <summary>
            The property delimiter.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.ExpressionConvertors">
            <summary>
            The list of conversion methods.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.GetSchemaParameterValueMacros(System.Guid,System.Guid)">
            <summary>
            Returns a macros of the parameter value.
            </summary>
            <param name="schemaElementUId">UId of the schema element.</param>
            <param name="schemaParameterUId">UId of the parameter.</param>
            <returns>Returns string that represets a macros of the parameter value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.GetSchemaParameterValueMacros(System.Guid)">
            <summary>
            Returns a macros of the parameter value.
            </summary>
            <param name="schemaParameterUId">UId of the parameter.</param>
            <returns>Returns string that represets a macros of the parameter value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.GetCodeConvertionTemplateSysSettings(System.String,System.String)">
            <summary>
            Generates code string for getting the system setting value.
            </summary>
            <param name="valueTypeName">The type name.</param>
            <param name="sysSettingsCode">The code of the system setting.</param>
            <returns>Code string.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.GetPropertyValueMacros(System.String)">
            <summary>
            Returns a macros of the property value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Returns string that represets a macros of the property value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.CreateProcessParameterInfo(Terrasoft.Core.Process.ProcessSchemaParameter)">
            <summary>
            Creates instance of the <see cref="T:Terrasoft.Core.Process.ProcessParameterInfo"/> type.
            </summary>
            <param name="schemaParameter">Process parameter.</param>
            <returns>Data of the process parameter.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.ConvertExpressionTextToCode(Terrasoft.Core.UserConnection,System.String,System.Collections.Generic.IEnumerable{Terrasoft.Core.Process.ExpressionConverter})">
            <summary>
            Generates code string based on expression text.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="expressionText">Text of expression.</param>
            <param name="expressionConvertors">List of functions that convert expression text to executable code.
            </param>
            <returns>Code string.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.GetProcessParameterPath(System.String,System.String)">
            <summary>
            Generates a string with actual path to parameter of process element.
            The path is generated based on the specified parameter Id and process element Id.
            </summary>
            <param name="parameterUId">Process schema parameter Id.</param>
            <param name="rootParameterPath">Path to the root parameter.</param>
            <returns>String with path to the process parameter or process element parameter.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.GetProcessParameterPath(System.Guid,System.Guid)">
            <summary>
            Generates a string with actual path to parameter of process element.
            The path is generated based on the specified parameter Id and process element Id.
            </summary>
            <param name="parameterUId">Process schema parameter Id.</param>
            <param name="schemaElementUId">Process element Id.</param>
            <returns>String with path to the process element parameter.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">The <paramref name="parameterUId"/> parameter Id
            or process element Id is empty.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.GetProcessParameterPath(System.Guid)">
            <summary>
            Generates a string with actual path to process schema parameter.
            The path is generated based on the specified parameter Id.
            </summary>
            <param name="parameterUId">Process schema parameter Id.</param>
            <returns>String with path to the process schema parameter.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">The <paramref name="parameterUId"/> parameter Id
            is empty.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.GetClassNameProcessMethodsWrapper(Terrasoft.Core.Schema)">
            <summary>
            Gets name of the class that is a container for the process schema methods.
            </summary>
            <param name="schema">Instance that derives the <see cref="T:Terrasoft.Core.Schema"/> type.</param>
            <returns>Class name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.GetScriptTaskMethodName(System.String)">
            <summary>
            Returns the method name of the "Script" process element.
            </summary>
            <param name="schemaElementName">The name of the "Script" process element.</param>
            <returns>Method name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.ActualizeFormulaParameter(Terrasoft.Core.Process.ProcessSchema,System.String,System.Guid,System.String,System.String)">
            <summary>
            Actualizes the formula parameter before validation.
            </summary>
            <param name="processSchema">The process schema.</param>
            <param name="formulaValue">The formula value.</param>
            <param name="resultDataValueTypeUId">The result parameter data value type identifier.</param>
            <param name="parameterName">Name of the parameter.</param>
            <param name="elementName">Name of the element.</param>
            <returns>The result info after actualization.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGeneratorUtilities.CreateProcessParameterMapInfo(System.String)">
            <summary>
            Creates an instance of <see cref="T:Terrasoft.Core.Process.ProcessParameterMapInfo"/>, which provides information about the
            binding of a parameter value to a process parameter.
            </summary>
            <param name="parameterMapPath">String with actual path to the element parameter or process schema.
            </param>
            <returns>Instance of <see cref="T:Terrasoft.Core.Process.ProcessParameterMapInfo"/>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ExpressionConverter">
            <summary>
            Defines the method signature for the expression conversion.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="sb">The C# code <see cref="T:System.Text.StringBuilder"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessExecutor.Execute(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Executes process with corresponding schema name.
            </summary>
            <param name="processSchemaName">Name of process schema.</param>
            <param name="parameterValues">Initial parameter values, where key is process parameter name and value is 
            serialized parameter value.</param> 
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessExecutor.Execute``1(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Executes process with corresponding schema name and returns process parameter value.
            </summary>
            <typeparam name="TResult">Result parameter value type.</typeparam>
            <param name="processSchemaName">Name of process schema.</param>
            <param name="resultParameterName">Name of parameter to read result from.</param>
            <param name="parameterValues">Initial parameter values, where key is process parameter name and value is 
            serialized parameter value.</param>
            <returns>Result parameter value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessExecutor.ExecuteByCaption(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Executes process with corresponding schema caption.
            </summary>
            <param name="processSchemaCaption">Caption of process schema.</param>
            <param name="parameterValues">Initial parameter values, where key is process parameter name and value is 
            serialized parameter value.</param> 
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessExecutor.ExecuteByCaption``1(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Executes process with corresponding schema caption and returns process parameter value.
            </summary>
            <typeparam name="TResult">Result parameter value type.</typeparam>
            <param name="processSchemaCaption">Caption of process schema.</param>
            <param name="resultParameterName">Name of parameter to read result from.</param>
            <param name="parameterValues">Initial parameter values, where key is process parameter name and value is 
            serialized parameter value.</param>
            <returns>Result parameter value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessExecutor.Execute(System.Guid,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Executes process with corresponding schema UId.
            </summary>
            <param name="processSchemaUId">UId of process schema.</param>
            <param name="parameterValues">Initial parameter values, where key is process parameter name and value is 
            serialized parameter value.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessExecutor.Execute``1(System.Guid,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Executes process with corresponding schema UId and returns process parameter value.
            </summary>
            <typeparam name="TResult">Result parameter value type.</typeparam>
            <param name="processSchemaUId">UId of process schema.</param>
            <param name="resultParameterName">Name of parameter to read result from.</param>
            <param name="parameterValues">Initial parameter values. Where Key is process parameter name and value is 
            serialized parameter value.</param>
            <returns>Result parameter value.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessFactory">
            <summary>
            Provides methods to create process instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessFactory.Create(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Creates the process instance for specified manager item.
            </summary>
            <param name="managerItem">Item of the manager.</param>
            <returns></returns>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessFlowElementDispatcher">
            <summary>
            Provides methods for interaction with flow elements of process instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessFlowElementDispatcher.GetRunningElements``1">
            <summary>
            Returns running flow element instances of type provided by TFlowElement.
            </summary>
            <typeparam name="TFlowElement">Type of requested elements.</typeparam>
            <returns>Running flow elements.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessFlowElementDispatcher.CompleteActivityExecution(System.Collections.Generic.IEnumerable{System.Guid},System.Object[])">
            <summary>
            Completes execution of running activitiy elements.
            </summary>
            <param name="elementUIds">Element identifiers to complete.</param>
            <param name="parameters">Arguments for <see cref="M:Terrasoft.Core.Process.ProcessActivity.CompleteExecuting(System.Object[])"/>.</param>
            <exception cref="T:System.InvalidOperationException">If requested activity is not running.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessFlowElementDispatcher.CancelActivityExecution(System.Collections.Generic.IEnumerable{System.Guid},System.Object[])">
            <summary>
            Cancels execution of running activitiy elements.
            </summary>
            <param name="elementUIds">Element identifiers to cancel.</param>
            <param name="parameters">Arguments for <see cref="M:Terrasoft.Core.Process.ProcessActivity.CancelExecuting(System.Object[])"/>.</param>
            <exception cref="T:System.InvalidOperationException">Requested activity is not running.</exception>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessServiceProvider">
            <summary>
            The interface for the process service provider.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessServiceProvider.CreateProcessComponentSet(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.BaseProcessSchema)">
            <summary>
            Creates component set base on the process schema. Prepares it for work with messages queue.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="schema">The process schema.</param>
            <returns>The process component set.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessServiceProvider.CreateProcessComponentSet(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.BaseProcessSchema,Terrasoft.Core.Process.IProcessParameterStore)">
            <summary>
            Creates component set base on the process schema. Prepares it for work with messages queue.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="schema">The process schema.</param>
            <param name="parameterStore">The store of process paramater values.</param>
            <returns>The process component set.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessServiceProvider.FlowEngineStateService">
            <summary>
            Gets or sets the flow engine state service.
            </summary>
            <value>
            The flow engine state service.
            </value>
        </member>
        <member name="T:Terrasoft.Core.Process.IReadableProcessElement">
            <summary>
            Indicates that element able to read properties data from owner process data stream by itself.
            TODO CRM-29536 Make implementation in ProcessFlowElement and remove this interface
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IReadableProcessElement.ReadPropertiesDataFromOwner(Terrasoft.Common.DataReader)">
            <summary>
            Reads the properties data from owner process data sream.
            </summary>
            <param name="reader">The data reader.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.IWritableProcessElement">
            <summary>
            Provide method for write process elemnt properties data as part of parent process data
            TODO CRM-29536 Make implementation in ProcessFlowElement and remove this interface
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IWritableProcessElement.WritePropertiesDataToOwner(Terrasoft.Common.DataWriter)">
            <summary>
            Writes the properties data to owner process data writer.
            </summary>
            <param name="writer">The data writer.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ParameterValuesValidationRule.FlowSchemaGeneratorWrapper.TryGenerate(Terrasoft.Core.Process.ProcessValidationResult@)">
            <summary>
            Tries to generate a new flow schema.
            </summary>
            <param name="validationResult">Validation result.</param>
            <returns></returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ParameterValuesValidationRule.FlowSchemaGeneratorWrapper.ParametersMapInfo">
            <summary>
            Gets or sets the parameters map information.
            </summary>
            <value>
            The parameters map information.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ParameterValuesValidationRule.FlowSchemaGeneratorWrapper.ParameterValueProvider">
            <summary>
            Gets or sets the process parameter value provider.
            </summary>
            <value>
            The process parameter value provider.
            </value>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessFactory">
            <summary>
            Provides methods to create process instance by process schema.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.IProcessFactory"/>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFactory.Create(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Creates the process instance for specified process schema manager item.
            </summary>
            <param name="managerItem">The process schema manager item.</param>
            <returns></returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessFlowElementDispatcher">
            <summary>
            Implements <see cref="T:Terrasoft.Core.Process.IProcessFlowElementDispatcher"/> for instance of <see cref="T:Terrasoft.Core.Process.Process"/> type.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.IProcessFlowElementDispatcher"/>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElementDispatcher.#ctor(Terrasoft.Core.Process.Process)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElementDispatcher"/> class.
            </summary>
            <param name="process">The process instance.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElementDispatcher.CompleteActivityExecution(System.Collections.Generic.IEnumerable{System.Guid},System.Object[])">
            <summary>
            Completes execution of running activitiy elements.
            </summary>
            <param name="elementUIds">Element identifiers to complete.</param>
            <param name="parameters">Arguments for <see cref="M:Terrasoft.Core.Process.ProcessActivity.CompleteExecuting(System.Object[])"/>.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElementDispatcher.CancelActivityExecution(System.Collections.Generic.IEnumerable{System.Guid},System.Object[])">
            <summary>
            Cancels execution of running activitiy elements.
            </summary>
            <param name="elementUIds">Element identifiers to cancel.</param>
            <param name="parameters">Arguments for <see cref="M:Terrasoft.Core.Process.ProcessActivity.CancelExecuting(System.Object[])"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessFlowElementDispatcher.GetRunningElements``1">
            <summary>
            Returns running flow element instances of type provided by TFlowElement.
            </summary>
            <typeparam name="TFlowElement">Type of requested elements.</typeparam>
            <returns>
            Running flow elements.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessExecutor">
            <summary>
            Class that executes some process.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessExecutor"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.#ctor(Terrasoft.Core.UserConnection,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessExecutor"/> class.
            </summary>
            <param name="userConnection">Connection to initialize with.</param>
            <param name="useDirectProcess">Flag that indicates whether should take specific version.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.GetProcessLocatorCaptionPredicate(System.String)">
            <summary>
            Gets process locator caption predicate.
            </summary>
            <param name="caption">Caption to put into predicate.</param>
            <returns>Predicate for the ProcessLocator.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.GetProcessLocatorNamePredicate(System.String)">
            <summary>
            Gets process locator name predicate.
            </summary>
            <param name="name">Name to put into predicate.</param>
            <returns>Predicate for the ProcessLocator.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.GetProcessLocatorUIdPredicate(System.Guid)">
            <summary>
            Gets process locator uId predicate.
            </summary>
            <param name="uId">uId to put into predicate.</param>
            <returns>Predicate for the ProcessLocator.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.CreateFlowEngine">
            <summary>
            Creates the flow engine.
            </summary>
            <returns>The flow engine instance.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.Execute(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Executes process with corresponding schema name.
            </summary>
            <param name="processSchemaName">Name of process schema.</param>
            <param name="parameterValues">Initial parameter values, where key is process parameter name and value is
            serialized parameter value.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.Execute``1(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Executes process with corresponding schema name and returns process parameter value.
            </summary>
            <typeparam name="TResult">Result parameter value type.</typeparam>
            <param name="processSchemaName">Name of process schema.</param>
            <param name="resultParameterName">Name of parameter to read result from.</param>
            <param name="parameterValues">Initial parameter values, where key is process parameter name and value is
            serialized parameter value.</param>
            <returns>
            Result parameter value.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.ExecuteByCaption(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Executes process with corresponding schema caption.
            </summary>
            <param name="processSchemaCaption">Caption of process schema.</param>
            <param name="parameterValues">Initial parameter values, where key is process parameter name and value is
            serialized parameter value.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.ExecuteByCaption``1(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Executes process with corresponding schema caption and returns process parameter value.
            </summary>
            <typeparam name="TResult">Result parameter value type.</typeparam>
            <param name="processSchemaCaption">Caption of process schema.</param>
            <param name="resultParameterName">Name of parameter to read result from.</param>
            <param name="parameterValues">Initial parameter values, where key is process parameter name and value is
            serialized parameter value.</param>
            <returns>
            Result parameter value.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.Execute(System.Guid,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Executes process with corresponding schema UId.
            </summary>
            <param name="processSchemaUId">UId of process schema.</param>
            <param name="parameterValues">Initial parameter values, where key is process parameter name and value is
            serialized parameter value.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.Execute``1(System.Guid,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Executes process with corresponding schema UId and returns process parameter value.
            </summary>
            <typeparam name="TResult">Result parameter value type.</typeparam>
            <param name="processSchemaUId">UId of process schema.</param>
            <param name="resultParameterName">Name of parameter to read result from.</param>
            <param name="parameterValues">Initial parameter values. Where Key is process parameter name and value is
            serialized parameter value.</param>
            <returns>
            Result parameter value.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessExecutor.UserConnection">
            <summary>
            Gets the user connection.
            </summary>
            <value>
            The user connection.
            </value>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessExecutor.IBaseProcessSchemaLocator`1">
            <summary>
            Locator class that locates some process schema.
            </summary>
            <typeparam name="TSchema">The type of schema to locate.</typeparam>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.IBaseProcessSchemaLocator`1.GetSchemaManagerItem">
            <summary>
            The method that performs search of the specific process schema.
            </summary>
            <returns>Found schema.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessExecutor.BaseProcessSchemaLocator`1">
            <summary>
            Class that locates some process schema.
            </summary>
            <typeparam name="TSchema">The type of schema to locate.</typeparam>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.BaseProcessSchemaLocator`1.#ctor(Terrasoft.Core.Process.BaseProcessSchemaManager{`0},System.Predicate{Terrasoft.Core.ISchemaManagerItem{`0}},System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="manager">Manager to search on.</param>
            <param name="locator">Locator to search with.</param>
            <param name="errorMessage">Error message in case when item not found.</param>
            <param name="useSpecifiedVersion">Flag that indicates whether should take specific version.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.BaseProcessSchemaLocator`1.GetSchemaManagerItem">
            <summary>
            The method that performs search of the specific process schema.
            </summary>
            <returns>Found schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.SingleProcessParameterValueReceiver`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SingleProcessParameterValueReceive class.
            </summary>
            <param name="requestedParameterName">Requested parameter name.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExecutor.SingleProcessParameterValueReceiver`1.Receive(Terrasoft.Core.Process.ProcessSchema,System.Func{Terrasoft.Core.Process.ProcessSchemaParameter,System.Object})">
            <summary>
            Method that receives values.
            </summary>
            <param name="processSchema">Process schema to receive from.</param>
            <param name="valueGetterFunction">Value getter function.</param>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessExecutor.SingleProcessParameterValueReceiver`1.ReceivedValue">
            <summary>
            Received value.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessParameterInfoUpdater">
            <summary>
            Provides methods for updating <see cref="T:Terrasoft.Core.Process.ProcessParameterInfo"/> values.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterInfoUpdater.UpdateParameterInfoValue``1(System.Guid,Terrasoft.Core.Process.ProcessParameterInfo,System.String,``0)">
            <summary>
            Updates <see cref="T:Terrasoft.Core.Process.ProcessParameterInfo"/> value during process execution.
            </summary>
            <typeparam name="T">The type of the parameter value.</typeparam>
            <param name="processUId">The process identifier.</param>
            <param name="parameterInfo">The process parameter info.</param>
            <param name="parameterPath">The parameter path.</param>
            <param name="value">New value for the parameter.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessExpressionHelper">
            <summary>
            Provides auxiliary methods for analyzing (parsing) of expressions.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessExpressionHelper.GetIsImplicitlyCastCompatibleTypesForInt(System.Type,System.Type)">
            <summary>
            Determines whether implicit conversion from one type to the other is available.
            </summary>
            <param name="fromType">From instance of the <see cref="T:System.Type"/> type.</param>
            <param name="toType">To instance of the <see cref="T:System.Type"/> type.</param>
            <returns><c>true</c>, if the “from” instance of the <see cref="T:System.Int32"/> type is compatible to be
            implicitly cast as other type, otherwise - <c>false</c>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessElementFactory">
            <summary>
            Implements interface <see cref="T:Terrasoft.Core.Process.IProcessElementFactory"/> for process based on process schema.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.BaseProcessElementFactory"/>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessElementFactory.#ctor(Terrasoft.Core.Process.ProcessComponentSet,Terrasoft.Core.Process.IFlowSchemaGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessElementFactory"/> class.
            </summary>
            <param name="process">The process.</param>
            <param name="flowSchemaGenerator">The flow schema generator.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessElementFactory.CreateProcessElement(Terrasoft.Core.Process.BaseProcessSchemaElement)">
            <summary>
            Creates the process element depending on its meta data.
            </summary>
            <param name="schemaElement">The schema element meta data.</param>
            <returns>
            The process element instance.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessFormulaScriptTask">
            <summary>
            Flow element for formula.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.ProcessScriptTask"/>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessGenerator">
            <summary>
            Provides methods for generating source code.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessGenerator.GetFlowNodeSchemaName(Terrasoft.Core.Process.ProcessSchemaBaseElement)">
            <summary>
            Returns the schema name of the process that owns the specified element.
            </summary>
            <param name="schemaElement">Schema element.</param>
            <returns>String that represents the schema name of the process.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessGenerator.GetProcessElementClassName(Terrasoft.Core.MetaItem)">
            <summary>
            Generates name of the class by element name.
            </summary>
            <param name="flowNode">Meta item.</param>
            <returns>String that represents class name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessGenerator.FindProcessSchemaLane(Terrasoft.Core.Process.ProcessSchema,System.Guid)">
            <summary>
            Finds lane by its unique identifier.
            </summary>
            <param name="processSchema">Process schema.</param>
            <param name="laneUId">Unique identifier of the lane.</param>
            <returns>Instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaLane"/> class.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessGenerator.WriteMethodAssign(System.Collections.ObjectModel.Collection{Terrasoft.Core.CodeGeneration.CodeGenerator.MethodCollectionItem},System.String,Terrasoft.Core.Process.IParametrizedProcessSchemaElement)">
            <summary>
            Writes the "Assign" class method of the process.
            </summary>
            <param name="methods">Set of the class methods.</param>
            <param name="className">Name of the class.</param>
            <param name="parametrizedElement">Parametrized schema element.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessGenerator.GetIsProcessSchemaParameterInherited(Terrasoft.Core.Process.ProcessSchemaParameter)">
            <summary>
            Determines whether the specified parameter is inherited.
            </summary>
            <param name="parameter">Process schema parameter.</param>
            <returns><c>true</c> if parameter is inherited; otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessGenerator.GetParameterFieldName(System.String)">
            <summary>
            Returns name of the class field.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>String that represents the name of the class field.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessGenerator.FindParameter(System.Guid,Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Finds parameter by the specified identifier.
            </summary>
            <param name="parameterUId">Unique identifier of the process parameter.</param>
            <param name="processSchema"></param>
            <returns>Instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaParameter"/> class if it was found;
            otherwise - <c>null</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessGenerator.GenerateMethodsApplyAndWritePropertyValues(Terrasoft.Core.Process.BaseProcessUserTaskSchema,System.Collections.ObjectModel.Collection{System.String},System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Generates code for methods with names ApplyPropertiesDataValues and WritePropertiesData.
            </summary>
            <param name="schema">Instance that implements the <see cref="T:Terrasoft.Core.Process.BaseProcessUserTaskSchema"/> type.</param>
            <param name="readValuesMethodBody">Code lines of ApplyPropertiesDataValues method.</param>
            <param name="writeValuesMethodBody">Code lines of WritePropertiesData method.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessDataContractFilterConverter">
            <summary>
            Represents interface for DataContract filter converter.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessDataContractFilterConverter.GetIsDataContractFilter(System.String)">
            <summary>
            Returns is DataContract filter.
            </summary>
            <param name="dataSourceFilters">Serialized filters.</param>
            <returns><c>true</c> if <paramref name="dataSourceFilters" />is DataContract filter;
            otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessDataContractFilterConverter.ConvertToEntitySchemaQueryFilterItem(Terrasoft.Core.Entities.EntitySchemaQuery,System.String)">
            <summary>
            Converts <see cref="T:System.String"/> serialized filters to <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/> for
            <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>.
            </summary>
            <param name="esq">Instance of the EntitySchemaQuery class.</param>
            <param name="serializedFilters">Serialized filters.</param>
            <returns><see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/> for <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessDataContractFilterConverter.ConvertToEntitySchemaQueryFilterItem(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Process.Process,System.String)">
            <summary>
            Converts <see cref="T:System.String"/> process serialized filters to <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/> for
            <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/> with process parameter mappings processing.
            </summary>
            <param name="esq">Instance of the EntitySchemaQuery class.</param>
            <param name="processActivityOwner">Process activity to obtain parameters.</param>
            <param name="serializedFilters">Serialized filters.</param>
            <returns><see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/> for <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessDataContractFilterConverter.ConvertToProcessDataContractFilters(Terrasoft.Core.Process.Process,System.String)">
            <summary>
            Converts a set of filters to process format.
            </summary>
            <param name="processActivityOwner">Instance of the <see cref="T:Terrasoft.Core.Process.Process"/> class.</param>
            <param name="dataSourceFilters">Serialized filters.</param>
            <returns>Set of filters in the process format.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageResourceXmlSerializer.Serialize(System.IO.Stream,System.Collections.Generic.IEnumerable{Terrasoft.Core.Configuration.SysLocalizableValue},System.String)">
            <summary>
            Converting collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/> to <see cref="T:Terrasoft.Common.ResourcePackage"/>
            and serializing to stream
            </summary>
            <param name="stream">Stream for serialized data</param>
            <param name="entityCollection">Collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/></param>
            <param name="cultureName">Culture name</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageResourceXmlSerializer.Deserialize(System.IO.Stream,System.String)">
            <summary>
            Deserializing XML from stream to <see cref="T:Terrasoft.Common.ResourcePackage"/> object and converting to collection 
            of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/>
            </summary>
            <param name="resourceStream">Serialized data stream</param>
            <param name="cultureName">Culture name</param>
            <returns>Collection of <see cref="T:Terrasoft.Core.Configuration.SysLocalizableValue"/></returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessConvertorUtilities">
            <summary>
            Class provides utility methods for converting.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessConvertorUtilities.GetIsDataContractFilter(System.String)">
            <summary>
            Returns is DataContract filter.
            </summary>
            <param name="dataSourceFilters">Serialized filters.</param>
            <returns><c>true</c> if <paramref name="dataSourceFilters" />is DataContract filter;
            otherwise - <c>false</c>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessRunner">
            <summary>
            The runner class for the <seealso cref="T:Terrasoft.Core.Process.ProcessSchema"/>.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.BaseProcessRunner"/>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessRunner.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessRunnerSettings,Terrasoft.Core.Process.IProcessFactory,Terrasoft.Core.Process.FlowEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessRunner"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="settings">Set of features to support on the process runner by the creation method.</param>
            /// <param name="processFactory">Instance of <see cref="T:Terrasoft.Core.Process.IProcessFactory"/></param>
            <param name="flowEngine">The flow engine.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessRunner.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessRunnerSettings,Terrasoft.Core.Process.IProcessFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessRunner"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="settings">Set of features to support on the process runner by the creation method.</param>
            <param name="processFactory">Instance of <see cref="T:Terrasoft.Core.Process.IProcessFactory"/></param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessRunner.ExecuteStartSignal(System.Guid,Terrasoft.Core.Process.Process,System.Boolean,System.Guid)">
            <summary>
            Executes the start signal element.
            </summary>
            <param name="schemaElementUId">The schema start element identifier.</param>
            <param name="process">The process.</param>
            <param name="canUseFlowEngine">The flag indicates using of Flow Engine mode.</param>
            <param name="entityId">The entity identifier for the start signal.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessRunner.CreateProcess">
            <summary>
            Creates the process.
            </summary>
            <returns>
            The <see cref="T:Terrasoft.Core.Process.Process"/> instance for the process schema.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessRunner.Initialize">
            <summary>
            Initializes the current instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessRunner.Run">
            <summary>
            Runs the specified process.
            </summary>
            <returns>
            The <see cref="T:Terrasoft.Core.Process.Process"/> instance for the ran process.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessRunner.SchemaManager">
            <summary>
            Gets the schema manager.
            </summary>
            <value>
            The schema manager.
            </value>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessRunnerFactory">
            <summary>
            The interface for process runner factory.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.IProcessRunner"/>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessRunnerFactory.Create(System.String,Terrasoft.Core.Process.ProcessRunnerSettings)">
            <summary>
            Creates the specified manager name.
            </summary>
            <param name="managerName">Name of the manager.</param>
            <param name="settings">Set of features to support on the process runner by the creation method.</param>
            <returns></returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessRunnerFactory">
            <summary>
            The process runner factory.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.IProcessRunnerFactory"/>
            <seealso cref="T:Terrasoft.Core.Process.IProcessRunner"/>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessRunnerFactory.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessRunnerFactory"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessRunnerFactory.Create(System.String,Terrasoft.Core.Process.ProcessRunnerSettings)">
            <summary>
            Creates a <see cref="T:Terrasoft.Core.Process.IProcessRunner"/> instance for the specified process manager.
            </summary>
            <param name="managerName">Name of the process manager.</param>
            <param name="settings">Set of features to support on the process runner by the creation method.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">There is no process runner for the given manager.</exception>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessRunnerFactory.UserConnection">
            <summary>
            Gets or sets the user connection.
            </summary>
            <value>
            The user connection.
            </value>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessRunnerSettings">
            <summary>
            Specifies a set of features to support on the process runner by the creation method.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessRunnerSettings.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessRunnerSettings"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessRunnerSettings.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessRunnerSettings.SchemaId">
            <summary>
            Gets or sets schema Id of the process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessRunnerSettings.SchemaElementUId">
            <summary>
            Gets or sets schema element UId of the process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessRunnerSettings.EntityId">
            <summary>
            Gets or sets Id of the entity.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessSchemaParametrizedFlowNode">
            <summary>
            Represents process schema parametrized flow node class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaFlowNode.#ctor(Terrasoft.Core.Process.ProcessSchemaFlowNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaFlowNode"/> class.
            </summary>
            <param name="source">The source node to clone properties.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaFlowNode.GetOutgoingsConditionalFlows(Terrasoft.Core.Process.ProcessSchemaFlowNode)">
            <summary>
            Returns outgoing conditional sequence flows for the specified element.
            </summary>
            <param name="flowNode">Process element.</param>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaFlowNode.GetOutgoingsConditionalFlows">
            <summary>
            Returns outgoing conditional sequence flows for the current element.
            </summary>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaFlowNode.GetOutgoingsDefaultFlows(Terrasoft.Core.Process.ProcessSchemaFlowNode)">
            <summary>
            Returns outgoing default sequence flows for the specified element.
            </summary>
            <param name="flowNode">Process element.</param>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaFlowNode.GetOutgoingsDefaultFlows">
            <summary>
            Returns outgoing default sequence flows for the current element.
            </summary>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParametrizedFlowNode.#ctor">
            <summary>
            Initializes the new instance of ProcessSchemaParametrizedFlowNode class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParametrizedFlowNode.#ctor(Terrasoft.Core.Process.ProcessSchemaFlowNode)">
            <summary>
            Initializes the new instance of ProcessSchemaParametrizedFlowNode class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParametrizedFlowNode.#ctor(Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Initializes the new instance of ProcessSchemaParametrizedFlowNode class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParametrizedFlowNode.InitializeLocalizableValues(Terrasoft.Common.IResourceStorage,System.String,System.String)">
            <summary>
            Initializes resources from the specified storage from the specified manager and resorce group name.
            </summary>
            <param name="storage">Resource storage.</param>
            <param name="resourceManagerName">Resource manager name.</param>
            <param name="resourceGroupName">Resource group name.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParametrizedFlowNode.GetLocalizableValues(System.Collections.Generic.ICollection{Terrasoft.Common.LocalizableValue},System.Boolean)">
            <summary>
            Returns localizable values list.
            </summary>
            <param name="values">Localizable values list.</param>
            <param name="includeInherited">Flag that indicates include inherited resources or not.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParametrizedFlowNode.LoadLocalizableValues">
            <summary>
            Loads localizable value.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaParametrizedFlowNode.Parameters">
            <summary>
            The process schema parameter collection.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessSchemaBaseElements">
            <summary>
            The class for the base elements of the <see cref="T:Terrasoft.Core.Process.ProcessSchema"/>.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.BaseProcessSchemaElements`1"/>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaBaseElements.#ctor(Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaBaseElements"/> class.
            </summary>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaBaseElements.FindByUId(System.Guid)">
            <summary>
            Finds the element by identifier.
            </summary>
            <param name="uid">The uid of the element.</param>
            <returns>Found element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaBaseElements.FindByName(System.String)">
            <summary>
            Finds the element by name.
            </summary>
            <param name="name">The name of the element.</param>
            <returns>Found element.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessSchemaContentGenerator">
            <summary>
            Provides methods for creating default content in the process schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaContentGenerator.GenerateDefaultEventHandlerSchema(Terrasoft.Core.Process.ProcessSchema,Terrasoft.Core.DesignModeEventDescriptor,Terrasoft.Core.UserConnection)">
            <summary>
            Generates the default event handler elements in the process schema.
            </summary>
            <param name="processSchema">The process schema.</param>
            <param name="eventDescriptor">The event descriptor.</param>
            <param name="userConnection">The user connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaContentGenerator.GenerateEventHandler(Terrasoft.Core.Process.ProcessSchema,System.String,System.Boolean)">
            <summary>
            Generates the event handler.
            </summary>
            <param name="processSchema">The process schema.</param>
            <param name="eventName">Name of the event.</param>
            <param name="isOverride"><c>true</c> if the handler is inherrited and the event should be throwed to the
            base element.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessSchemaDependencyFactory">
            <summary>
            The class for the <see cref="T:Terrasoft.Core.Process.ProcessSchema"/> dependency factory.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.BaseProcessSchemaDependencyFactory`1"/>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaDependencyFactory.#ctor(Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaDependencyFactory"/> class.
            </summary>
            <param name="processSchema">The process schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaDependencyFactory.CreateProcessElementFactory(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Creates the process element factory.
            </summary>
            <param name="process">The process instance.</param>
            <returns>
            The process element factory.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaDependencyFactory.FlowSchemaGenerator">
            <summary>
            Gets the flow schema generator.
            </summary>
            <value>
            The flow schema generator.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaDependencyFactory.ElementsEnumerator">
            <summary>
            Gets the elements enumerator.
            </summary>
            <value>
            The elements enumerator.
            </value>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParameterValue.#ctor(Terrasoft.Core.Process.ProcessSchemaParameterValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaParameterValue"/> class by the given source
            instance.
            </summary>
            <param name="source">The source instance.</param>
        </member>
        <member name="F:Terrasoft.Core.Process.ProcessSchemaParameterValue._localizableCollectionValue">
            <summary>Gets or sets collection of localizable values.</summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParameterValue.GetRestoredComplexLocalizableValue">
            <summary>
            Returns the restored complex localizable value.
            </summary>
            <returns>Restored complex localizable value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParameterValue.GetDataValueTypeManager">
            <summary>
            Gets the <see cref="T:Terrasoft.Core.DataValueTypeManager"/> instance.
            </summary>
            <returns>The instance of <see cref="T:Terrasoft.Core.DataValueTypeManager"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaParameterValue.ActualizeFormatData">
            <summary>
            Actualizes parameter value with the current format of the data.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaParameterValue.MetaDataValue">
            <summary>
            The parameter value that is stored in the metadata.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaParameterValue.IsFormula">
            <summary>
            Gets a value indicating whether this instance is formula.
            </summary>
            <value>
            <c>true</c> if this instance is formula; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaParameterValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaQuickModelProcessor.GetActivityCategory(System.Guid)">
            <summary>
            Gets the activity category id column value.
            </summary>
            <param name="stepType">Type of the step.</param>
            /// <remarks>
            Returned value need to be in lower case because it will be compared as string on client side.
            </remarks>
        </member>
        <member name="T:Terrasoft.Core.Process.IBaseProcessSchemaSettingsHelper">
            <summary>
            Provides methods to manage process schema instance settings.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IBaseProcessSchemaSettingsHelper.GetIsProcessEnabled(System.Guid)">
            <summary>
            Returns process schema enabled state.
            </summary>
            <param name="sysSchemaId">The system schema identifier.</param>
            <returns><c>True</c> if process schema is enabled otherwise <c>False</c></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IBaseProcessSchemaSettingsHelper.GetDisabledProcesses">
            <summary>
            Returns information about disabled processes. Where both key and value is an id of disabled process schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IBaseProcessSchemaSettingsHelper.EnableProcess(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Activates the process schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="sysSchemaId">The process schema id.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IBaseProcessSchemaSettingsHelper.DisableProcess(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Deactivates the process schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="sysSchemaId">The process schema identifier.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.BaseProcessSchemaSettingsHelper">
            <summary>
            Implements <see cref="T:Terrasoft.Core.Process.IBaseProcessSchemaSettingsHelper"/> interface.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.IBaseProcessSchemaSettingsHelper"/>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaSettingsHelper.#ctor(Terrasoft.Core.AppConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.BaseProcessSchemaSettingsHelper"/> class.
            </summary>
            <param name="appConnection">The application connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaSettingsHelper.DisableProcess(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Deactivates the process schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="sysSchemaId">The process schema identifier.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaSettingsHelper.EnableProcess(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Activates the process schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="sysSchemaId">The process schema id.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaSettingsHelper.GetDisabledProcesses">
            <summary>
            Returns information about disabled processes. Where both key and value is an id of disabled process schema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessSchemaSettingsHelper.GetIsProcessEnabled(System.Guid)">
            <summary>
            Returns process schema enabled state.
            </summary>
            <param name="sysSchemaId">The system schema identifier.</param>
            <returns>
            <c>True</c> if process schema is enabled otherwise <c>False</c>
            </returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessSchemaUtilities">
            <summary>
            Contains utility methods for dealing with <see cref="T:Terrasoft.Core.Process.ProcessSchema"/>
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaUtilities.#ctor(System.Func{Terrasoft.Core.UserConnection,System.Guid,System.Collections.Generic.Dictionary{System.Guid,System.Int32}})">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaUtilities"/> class.
            </summary>
            <param name="getTopologyPackagePositionsStrategy">The delegate returns topology package positions 
            for workspace.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaUtilities.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaUtilities"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaUtilities.ActualizeCompiledOwnersSourceCode(Terrasoft.Core.Process.ProcessSchema,Terrasoft.Core.UserConnection)">
            <summary>
            Actualizes the source code in compiled processes where current <paramref name="schema"/> used as sub
            process.
            </summary>
            <param name="schema">The process schema.</param>
            <param name="connection">The user connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessUserTaskUtilities.GetIsEmptyLookup(System.Object,Terrasoft.Core.DataValueType)">
            <summary>
            Indicates that the given value is empty and has lookup type.
            </summary>
            <param name="value">The value.</param>
            <param name="dataValueType">The <see cref="T:Terrasoft.Core.DataValueType"/> of the value.</param>
            <returns><c>true</c> if the value is empty lookup value. Otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessUserTaskUtilities.GetIsEmptyDateTime(System.Object,Terrasoft.Core.DataValueType)">
            <summary>
            Indicates that the given value is empty and has <c>DateTime</c> type.
            </summary>
            <param name="value">The value.</param>
            <param name="dataValueType">The <see cref="T:Terrasoft.Core.DataValueType"/> of the value.</param>
            <returns><c>true</c> if the value is empty <c>DateTime</c> value. Otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessUserTaskUtilities.SetEntityColumnValues(Terrasoft.Core.Process.ProcessActivity,Terrasoft.Core.Entities.Entity)">
            <summary>
            Sets entity column values by element parameter values.
            </summary>
            <param name="source">Element.</param>
            <param name="entity">Entity.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessUserTaskUtilities.SetDynamicParameterValues(Terrasoft.Core.Process.ProcessActivity,Terrasoft.Core.Entities.Entity)">
            <summary>
            Sets dynamic parameter values by entity column values.
            </summary>
            <param name="source">Process element.</param>
            <param name="entity">Entity.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessUserTaskUtilities.GetIsEmptyLookupOrDateTimeValue(System.Object,Terrasoft.Core.DataValueType)">
            <summary>
            Indicates that the given value is empty and has lookup or <c>DateTime</c> type.
            </summary>
            <param name="value">The value.</param>
            <param name="dataValueType">The <see cref="T:Terrasoft.Core.DataValueType"/> of the value.</param>
            <returns><c>true</c> if the value is empty lookup or <c>DateTime</c> value. Otherwise - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.BaseProcessUserTaskUtilities.CreateDynamicProcessSchemaParameterIfNotExist(Terrasoft.Core.Process.ProcessUserTaskSchema,Terrasoft.Core.Entities.EntitySchemaColumn)">
            <summary>
            Creates dynamic parameter if it not exist in target schema by the specified entity schema column.
            </summary>
            <param name="target">Element.</param>
            <param name="column">Entity schema column.</param>
            <returns></returns>
        </member>
        <member name="T:Terrasoft.Core.Process.SubProcessClassGenerator">
            <summary>
            Class provides methods for generating class of the subprocess.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessClassGenerator.#ctor(Terrasoft.Core.CodeGeneration.GeneratorContext,Terrasoft.Core.Process.ProcessSchemaSubProcess,System.Collections.ObjectModel.Collection{System.Tuple{System.String,System.String,Terrasoft.Core.CodeGeneration.CodeGenerator.PropertyCollectionItem}})">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Core.Process.SubProcessClassGenerator"/> class.
            </summary>
            <param name="context">Generator context.</param>
            <param name="subProcessElement">Subprocess schema element.</param>
            <param name="initialData">Initial data.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessClassGenerator.WriteClass">
            <summary>
            Writes class of the subprocess.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessClassGenerator.ClassName">
            <summary>
            Gets name of the class.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.SubProcessProxy">
            <summary>
            Base class for sub process elements in compiled process.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.Process"/>
            <seealso cref="T:Terrasoft.Core.Process.IWritableProcessElement"/>
            <seealso cref="T:Terrasoft.Core.Process.IReadableProcessElement"/>
        </member>
        <member name="T:Terrasoft.Core.Process.Process">
            <summary>
            Represents abstraction for process instances.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.ProcessActivity"/>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.Process"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.Process"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.IProcessServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.Process"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="serviceProvider">The process service provider.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.OnPrepareForReexecute">
            <summary>
            Fires immediately before the element needs to be executed.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.RemoveProcessFromDB">
            <summary>
            Removes the process from database.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.InternalExecute(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Executes the current process.
            </summary>
            <param name="context">The execution context.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.ApplyPropertiesDataValues(Terrasoft.Common.DataReader)">
            <summary>
            Applies state of the current process element.
            </summary>
            <param name="reader">Instance that provides sequential reading of data.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.HasMapping(System.String)">
            <summary>
            Determines whether the specified parameter has mapping value.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <returns><c>true</c> if parameter exists and it has mapping value; otherwise<c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.WriteProcessParameters">
            <summary>
            Writes parameter values of the current process element.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.PrepareStart(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Method does nothing.
            </summary>
            <param name="context">The execution context.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.CompleteApplyingFlowElementsPropertiesData">
            <summary>
            Method does nothing.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.TryCreateFlowElementInstance(System.String,System.Guid,Terrasoft.Core.Process.ProcessFlowElement@)">
            <summary>
            Tries the create flow element instance.
            </summary>
            <param name="propertyName">Name of the corresponding process class property.</param>
            <param name="schemaElementUId">The schema element identifier.</param>
            <param name="processFlowElement">The process flow element.</param>
            <returns><c>True</c>, if the instance was created, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.CompleteProcess">
            <summary>
            Completes execution of the current process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.InitializeMetaPathParameterValues">
            <summary>
            Method does nothing.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.GetParameterValueByUId(System.String)">
            <summary>
            Returns value of the parameter.
            </summary>
            <param name="uId">Unique identifier.</param>
            <returns>Value of the process parameter.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.UpdateStatusInLog(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessStatus,System.String)">
            <summary>
            Updates status of the process in DB.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="newStatus">Status of the process.</param>
            <param name="errorDescription">Description of the error.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.RegisterInDB(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessStatus,System.String)">
            <summary>
            Performs registration of the process data in DB.
            <param name="userConnection">The user connection.</param>
            <param name="status">The process status.</param>
            <param name="error">The description of the error.</param>
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.ForceGetProcessFlowElement(System.String)">
            <summary>
            Method not implemented.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.ReadSubProcessParameters(Terrasoft.Core.Process.IProcessElementMetaInfo,Terrasoft.Core.Process.Process)">
            <summary>
            Reads the parameter values of sub process to the parameter values of current instance.
            </summary>
            <param name="subProcessElementSchema">The sub process element schema.</param>
            <param name="subProcessElementInstance">The sub process element instance.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.CreateParametersDataReader">
            <summary>
            Creates the data reader for current instance parameter values.
            </summary>
            <returns>Parameter data reader.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.GetInterpretedSubProcessInstance(Terrasoft.Core.Process.Process)">
            <summary>
            Creates the initialized interpreted process instance.
            </summary>
            <param name="process">The process instance to initializ new process from.</param>
            <returns>Initialized interpreted process instance</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.ActualizeProcessElement(Terrasoft.Core.Process.ProcessFlowElement)">
            <summary>
            Actualizes instance of the process into the private field of the class.
            </summary>
            <param name="element">Element of the process.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.InternalExecuteProcess(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Executes process.
            </summary>
            <param name="context">The executing context.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.InitMemoryParameterStore">
            <summary>
            Initializes the memory parameter store.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.ClearProcessData">
            <summary>
            Clears the process data. Used in interpreted processes.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.SetPrivateFieldValue(System.String,System.Object,System.Object)">
            <summary>
            Sets the value of private field of a process instance. 
            </summary>
            <param name="fieldName">Field name that is declared in the "source" argument.</param>
            <param name="source">Instance of the <see cref="T:Terrasoft.Core.Process.Process"/> type.</param>
            <param name="value">The new field value.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.ProcessQueue(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Processes a queue consisting of process elements.
            </summary>
            <param name="context">The execution context.</param>
            <returns><c>true</c>, if queue is successfully processed; otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.FillWaitingUserTaskCollection(Terrasoft.Core.Process.ProcessFlowElement)">
            <summary>
            Fills collection with items of the process elements that can interact with user.
            </summary>
            <param name="processElement">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.ShouldWriteFlowElementProperties(Terrasoft.Core.Process.ProcessFlowElement)">
            <summary>
            Returns value that determines whether the current process should write state of the specified process
            element.
            </summary>
            <param name="processElement">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> type.</param>
            <returns><c>true</c>, if the current process should write state of the specified element;
            otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.WriteFlowElementsProperty(Terrasoft.Common.DataWriter)">
            <summary>
            Writes state of the process elements.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.SetParameterValue``1(System.String,``0)">
            <summary>
            Sets protected parameter value by it's name.
            </summary>
            <typeparam name="T">The type of parameter.</typeparam>
            <param name="parameterName">The parameter name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.GetParameterValue``1(System.String)">
            <summary>
            Gets parameter value by it's name.
            </summary>
            <typeparam name="T">The type of parameter.</typeparam>
            <param name="parameterName">The name of parameter.</param>
            <returns>Returns the value of the property by name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.Execute(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Executes the current process.
            </summary>
            <param name="context">The execution context.</param>
            <returns><c>true</c>, if element was successfully executed and conditions for moving to the next step were
            satisfied. Otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.CancelExecuting(System.Object[])">
            <summary>
            Cancels the executing.
            </summary>
            <param name="parameters">Array of the parameter values.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.GetPropertiesData(System.Boolean)">
            <summary>
            Returns serialized state of the current process.
            </summary>
            <param name="shouldWriteElements">Indicates whether to write other process elements.</param>
            <returns>String that represents serialized state of the current process element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.CloneShallow">
            <summary>
            Creates a shallow copy of the current process.
            </summary>
            <returns>Instance that is a copy of the current process.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.WritePropertiesData">
            <summary>
            Writes state of the current process.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.ReadPropertiesData">
            <summary>
            Reads state of the current process.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.ReadPropertiesDataFromDB(Terrasoft.Core.UserConnection)">
            <summary>
            Reads state of the current process from DB.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.WritePropertiesData(Terrasoft.Common.DataWriter,System.Boolean)">
            <summary>
            Writes state of the current process.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
            <param name="shouldWriteElements">Indicates whether to write process elements.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.WritePropertiesDataToDB(Terrasoft.Core.UserConnection)">
            <summary>
            Writes state of the current process to DB.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.WritePropertiesDataToMemory">
            <summary>
            Writes state of the current process to memory.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.InitializeFlowElementProperties(Terrasoft.Core.Process.ProcessFlowElement)">
            <summary>
            Method must be implemented in derived classes.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.Execute(Terrasoft.Core.Process.ProcessFlowElement,System.Object[])">
            <summary>
            Executes the process element.
            </summary>
            <param name="processElement">Process element.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.ConvertToProcessDataSourceFilters(Terrasoft.Core.Process.ProcessActivity,System.Guid,System.String)">
            <summary>
            Converts a set of filters to a process format.
            </summary>
            <param name="processActivity">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessActivity"/> class.</param>
            <param name="entitySchemaUId">Unique identifier of the entity schema.</param>
            <param name="dataSourceFilters">Set of the filter values.</param>
            <returns>Converted value of the set of filters.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.ThrowEvent(Terrasoft.Core.Process.ProcessExecutingContext,System.String)">
            <summary>
            Method does noting.
            </summary>
            <param name="context">Execution context.</param>
            <param name="eventHandler">Name of the event handler.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.Execute(Terrasoft.Core.UserConnection)">
            <summary>
            Executes the current process.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.GetParameterValueByMetaPath(System.String)">
            <summary>
            Gets the process parameter value by meta path.
            </summary>
            <param name="metaPath">The process parameter meta path.</param>
            <returns>The process parameter value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.Execute(Terrasoft.Core.UserConnection,System.String)">
            <summary>
            Executes the current process.
            </summary>
            <param name="userConnection">User connection.</param>
            /// <param name="startQueueTasksItem">The name of the process element in the queue.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.FindFlowElementByUId(System.Guid)">
            <summary>
            Finds process element by its unique identifier.
            </summary>
            <param name="elementUId">Unique identifier of the process element.</param>
            <returns>Found process element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.FindFlowElementByName(System.String)">
            <summary>
            Finds process element by its name.
            </summary>
            <param name="name">Name of the process element.</param>
            <returns>Found process element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.FindFlowElementBySchemaElementUId(System.Guid)">
            <summary>
            Finds the flow element by schema element UId.
            </summary>
            <param name="schemaElementUId">The schema element identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.GetFlowElementBySchemaElementUId(System.Guid)">
            <summary>
            Gets the flow element by schema element UId
            </summary>
            <param name="schemaElementUId">The schema element identifier.</param>
            <returns>The process flow element</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Thrown when process flow element is not found.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.GetFlowElementsByShemaElementUId(System.Guid)">
            <summary>
            Gets the enumerator of the flow elements founded by their schema element UId.
            </summary>
            <param name="schemaElementUId">The schema element identifier.</param>
            <returns>The enumerator of the flow elements.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.CancelExecution">
            <summary>
            Cancels execution of the current process.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.Process.GetParentProcess">
            <summary>
            Returns instance of the main process.
            </summary>
            <returns>Process.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.UseFlowEngineMode">
            <summary>
            Indicates whether the current process can be executed in interpreted environment.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.ProcessModel">
            <summary>
            Gets instance that implements the<see cref="T:Terrasoft.Core.Process.IProcessModel"/> interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.CanBeInterpreted">
            <summary>
            Indicates whether the current process can be executed in interpreted environment.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.IsSubProcess">
            <summary>
            Gets flag that indicates wheter instance is subprocess.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.ProcessServiceProvider">
            <summary>
            Gets or sets the process service provider.
            </summary>
            <value>
            The process service provider.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.BaseProcessSchema">
            <summary>
            Gets or sets the base process schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.SchemaUIdPropertyName">
            <summary>
            Gets the meta data index for the "SchemaUId" property.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.SchemaManagerNamePropertyName">
            <summary>
            Gets the meta data index for the "SchemaManagerName" property.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.SchemaManagerName">
            <summary>
            Gets or sets name of schema manager.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.SchemaManager">
            <summary>
            Gets instance that implements the <see cref="T:Terrasoft.Core.ISchemaManager"/> interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.IsProcess">
            <summary>
            Gets value that determines it is a process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.Result">
            <summary>
            Gets or sets result of the current process execution.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.SerializeToMemory">
            <summary>
            Gets or sets value that determines whether it is required to serialize the current process in memory.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.InstanceUId">
            <summary>
            Gets string value that represents unique identifier of the current process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.ActivatedEventElements">
            <summary>
            Gets a collection of the activated events.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.ThrowEvents">
            <summary>
            Gets a set of events that are required to trigger.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.FlowElements">
            <summary>
            Gets a set of the process elements that were executed or are required to execute.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.WaitingUserTasks">
            <summary>
            Gets a set of the process elements that are going to show execution page.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.MetaPathParameterValues">
            <summary>
            Gets a collection of keys and values, where key is the metapath and value is delegate.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.InternalContext">
            <summary>
            Gets or sets instance of the <see cref="T:Terrasoft.Core.Process.ProcessExecutingContext"/> type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.IsEmbedded">
            <summary>
            Gets value that determines whether it is embedded process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.IsSaved">
            <summary>
            Gets or sets value that determines whether it is embedded process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.MaxLoopCount">
            <summary>
            Gets maximum number of process repetitions.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.IsProcessExecutedBySignal">
            <summary>
            Gets or sets value that determines whether the current process is started by signal.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.IsProcessExecutedByService">
            <summary>
            Gets or sets value that determines whether the current process is started by service.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.ProcessType">
            <summary>
            Gets or sets the class type of the current process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.ProcessSchema">
            <summary>
            Gets the process schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.Process.ParameterValueProvider">
            <summary>
            Gets the family of algorithms that are used to obtain the values of the process parameters.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Process.Process.OnBeforeExecute">
            <summary>
            Occurs when the element needs to be prepared before execution.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Process.Process.PrepareForReexecute">
            <summary>
            Occurs when the element needs to be prepared before re-execution.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.SubProcessProxy.ActiveSchemaUIdPropertyName">
            <summary>
            The property name of UId of current process instance schema in serialized data.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.Process)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.Process"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="ownerProcess">Parent process.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.Process,Terrasoft.Core.Process.IProcessFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.Process"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="ownerProcess">Parent process.</param>
            <param name="processFactory">The process instance factory.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.InitializeOwnProperties(Terrasoft.Core.Process.Process)">
            <summary>
            Initializes property values of the owner process.
            </summary>
            <param name="owner">Owner process.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.InitializeParameterValues">
            <summary>
            Method does nothing.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.RegisterInDB(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessStatus,System.String)">
            <summary>
            Performs registration of the process data in DB.
            <param name="userConnection">The user connection.</param>
            <param name="status">The process status.</param>
            <param name="errorDescription">The description of the error.</param>
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.UpdateStatusInLog(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessStatus,System.String)">
            <summary>
            Updates status of the process in DB.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="newStatus">Status of the process.</param>
            <param name="errorDescription">Description of the error.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.UpdateOwnerStatus(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.Process,Terrasoft.Core.Process.ProcessStatus,System.String)">
            <summary>
            Updates status of the owner process.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="owner">Owner process.</param>
            <param name="status">Status of the process.</param>
            <param name="description">Description of the error.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.WriteErrorToProcessLog(Terrasoft.Core.UserConnection,System.String)">
            <summary>
            Changes the state of the element and its owner process to error. Writes the error message to process log.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.SetParameterValue(Terrasoft.Core.Process.IProcessParametersMetaInfo,Terrasoft.Core.Process.ProcessSchemaParameter,System.Object,System.Object)">
            <summary>
            Sets parameter value.
            </summary>
            <param name="source">Process element.</param>
            <param name="parameter">Process schema parameter.</param>
            <param name="value">Value.</param>
            <param name="defValue">Default value.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ForceGetProcessFlowElement(System.String)">
            <summary>
            Forcibly obtains process element.
            </summary>
            <param name="schemaElementName">Name of the schema element.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ReadSubProcessParameters(Terrasoft.Core.Process.IProcessElementMetaInfo,Terrasoft.Core.Process.Process)">
            <summary>
            Reads the parameter values of sub process to the parameter values of current instance.
            </summary>
            <param name="subProcessElementSchema">The sub process element schema.</param>
            <param name="subProcessElementInstance">The sub process element instance.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ActualizeProcessElement(Terrasoft.Core.Process.ProcessFlowElement)">
            <summary>
            Actualizes instance of the process into the private field of the class.
            </summary>
            <param name="element">Element of the process.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ClearProcessData">
            <summary>
            Clears the process data.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetParameterValue``1(System.String)">
            <summary>
            Gets parameter value by it's name.
            </summary>
            <typeparam name="T">The type of parameter.</typeparam>
            <param name="parameterName">The name of parameter.</param>
            <returns>Returns the value of the property by name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.SetParameterValue``1(System.String,``0)">
            <summary>
            Sets protected parameter value by it's name.
            </summary>
            <typeparam name="T">The type of parameter.</typeparam>
            <param name="parameterName">The parameter name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.SetPrivateFieldValue(System.String,System.Object,System.Object)">
            <summary>
            Sets the value of private field of a process instance. 
            </summary>
            <param name="fieldName">Field name that is declared in the "source" argument.</param>
            <param name="source">Instance of the <see cref="T:Terrasoft.Core.Process.Process"/> type.</param>
            <param name="value">The new field value.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.Assign(Terrasoft.Core.Process.ProcessFlowElement)">
            <summary>
            Assigns the property values of the current process element to the properties of the specified element.
            </summary>
            <param name="processElement">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.CreateFlowElementInstanceByType(System.Type,Terrasoft.Core.Process.Process)">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> class by the specified type info.
            </summary>
            <param name="processElementType"></param>
            <param name="process">Instance of the <see cref="T:Terrasoft.Core.Process.Process"/> type.</param>
            <returns>Instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> type.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ProcessQueue(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Processes a queue consisting of process elements.
            </summary>
            <param name="context">The execution context.</param>
            <returns><c>true</c>, if queue is successfully processed; otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.FillWaitingUserTaskCollection(Terrasoft.Core.Process.ProcessFlowElement)">
            <summary>
            Fills collection with items of the process elements that can interact with user.
            </summary>
            <param name="processElement">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ShouldWriteFlowElementProperties(Terrasoft.Core.Process.ProcessFlowElement)">
            <summary>
            Returns value that determines whether the current process should write state of the specified process
            element.
            </summary>
            <param name="processElement">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> type.</param>
            <returns><c>true</c>, if the current process should write state of the specified element;
            otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.WriteFlowElementsProperty(Terrasoft.Common.DataWriter)">
            <summary>
            Writes state of the process elements.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ReadPropertiesData">
            <summary>
            Reads state of the current process.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ReadPropertiesData(Terrasoft.Common.DataReader)">
            <summary>
            Reads state of the current process.
            </summary>
            <param name="reader">Instance that provides sequential reading of data.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.WritePropertiesData">
            <summary>
            Writes state of the current process.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.WritePropertiesData(Terrasoft.Common.DataWriter,System.Boolean)">
            <summary>
            Writes state of the current process.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
            <param name="shouldWriteElements">Indicates whether to write process elements.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.CloneShallow">
            <summary>
            Creates a shallow copy of the current process.
            </summary>
            <returns>Instance that is a copy of the current process.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.WritePropertiesData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes state of the current process element.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.Execute(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Executes current process.
            </summary>
            <param name="context">The execution context.</param>
            <returns><c>true</c>, if element was successfully executed and conditions for moving to the next step were
            satisfied; otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.TryGetPerformer(System.Guid@)">
            <summary>
            Attempts to get performer user.
            </summary>
            <param name="performerUId">Unique identifier of the performer user.</param>
            <returns><c>true</c> if current performer is defined; otherwise<c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ReadPropertiesDataFromDB(Terrasoft.Core.UserConnection)">
            <summary>
            Reads state of the current process from DB.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ReadPropertiesDataFromMemory">
            <summary>
            Reads state of the current process from memory.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.WritePropertiesDataToDB(Terrasoft.Core.UserConnection)">
            <summary>
            Writes state of the current process to DB.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.WritePropertiesDataToMemory">
            <summary>
            Writes state of the current process to memory.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.CompleteExecuting(System.Object[])">
            <summary>
            Completes executing the current process.
            </summary>
            <param name="parameters">Array of the parameter values.</param>
            <returns><c>true</c>, if process was successfully executed and conditions for moving to the next step were
            satisfied; otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.CancelExecuting(System.Object[])">
            <summary>
            Cancels the executing.
            </summary>
            <param name="parameters">Array of the parameter values.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetResultParameterAllValues(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessSchemaUserTask)">
            <summary>
            Returns values of the result parameters.
            </summary>
            <returns>Allowed values of the result parameter.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetExecutionData">
            <summary>
            Returns the data required to display the execution page.
            </summary>
            <returns>String that represents the data needed for showing execution page.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetResultParameterAllowedValues">
            <summary>
            Returns allowed values of the result parameter.
            </summary>
            <returns>Allowed values of the result parameter.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetResultAllowedValues">
            <summary>
            Gets the result allowed values.
            </summary>
            <returns>The result allowed values.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetPropertiesData(System.Boolean)">
            <summary>
            Returns serialized state of the current process.
            </summary>
            <param name="shouldWriteElements">Indicates whether to write other process elements.</param>
            <returns>String that represents serialized state of the current process element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetPropertiesData">
            <summary>
            Returns serialized state of the current process.
            </summary>
            <returns>String that represents serialized state of the current process element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ExternalExecute(Terrasoft.Core.Process.ProcessActivityAfterEventArgs)">
            <summary>
            Executes external process.
            </summary>
            <param name="e">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessActivityAfterEventArgs"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.SerializeToString(System.Object)">
            <summary>
            Serializes the specified value.
            </summary>
            <param name="value">The specified value.</param>
            <returns>String that represents the serialized value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.DeserializeFromString``1(System.String)">
            <summary>
            Converts the specified string to an object of the specified type.
            </summary>
            <param name="value">The string to be deserialized.</param>
            <typeparam name="T">The type of the resulting object.</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetLocalizableString(System.String,System.String)">
            <summary>
            Returns string value that depends on the current culture info.
            </summary>
            <param name="managerName">Name of the resource manager.</param>
            <param name="resourceItemName">Name of the resource item.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ConvertToProcessDataSourceFilters(System.Guid,System.String)">
            <summary>
            Converts a set of filters to a process format.
            </summary>
            <param name="entitySchemaUId">Unique identifier of the entity schema.</param>
            <param name="dataSourceFilters">Set of the filter values.</param>
            <returns>Converted value of the set of filters.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetSchemaElement">
            <summary>
            Returns owner schema element.
            </summary>
            <returns>Found schema element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetIsReexecution">
            <summary>
            Returns flag that idicates if element has been executed one or more times.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetParameterValue(Terrasoft.Core.Process.ProcessSchemaParameter)">
            <summary>
            Returns parameter value.
            </summary>
            <param name="parameter">Process schema parameter.</param>
            <returns>Parameter value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.InitializeFlowElementProperties(Terrasoft.Core.Process.ProcessFlowElement)">
            <summary>
            Method must be implemented in derived classes.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.Execute(Terrasoft.Core.Process.ProcessFlowElement,System.Object[])">
            <summary>
            Reexecutes process element.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ConvertToProcessDataSourceFilters(Terrasoft.Core.Process.ProcessActivity,System.Guid,System.String)">
            <summary>
            Converts a set of filters to a process format.
            </summary>
            <param name="processActivity">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessActivity"/> class.</param>
            <param name="entitySchemaUId">Unique identifier of the entity schema.</param>
            <param name="dataSourceFilters">Set of the filter values.</param>
            <returns>Converted value of the set of filters.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ThrowEvent(Terrasoft.Core.Process.ProcessExecutingContext,System.String)">
            <summary>
            Throws event.
            </summary>
            <param name="context">Execution context.</param>
            <param name="eventHandler">Name of the event handler.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.Execute(Terrasoft.Core.UserConnection)">
            <summary>
            Executes the current process.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetParameterValueByMetaPath(System.String)">
            <summary>
            Gets the process parameter value by meta path.
            </summary>
            <param name="metaPath">The process parameter meta path.</param>
            <returns>The process parameter value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.Execute(Terrasoft.Core.UserConnection,System.String)">
            <summary>
            Executes the current process.
            </summary>
            <param name="userConnection">User connection.</param>
            /// <param name="startQueueTasksItem">The name of the process element in the queue.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.FindFlowElementByUId(System.Guid)">
            <summary>
            Finds process element by its unique identifier.
            </summary>
            <param name="elementUId">Unique identifier of the process element.</param>
            <returns>Found process element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.FindFlowElementByName(System.String)">
            <summary>
            Finds process element by its name.
            </summary>
            <param name="name">Name of the process element.</param>
            <returns>Found process element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.FindFlowElementBySchemaElementUId(System.Guid)">
            <summary>
            Finds the flow element by schema element UId.
            </summary>
            <param name="schemaElementUId">The schema element identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetFlowElementBySchemaElementUId(System.Guid)">
            <summary>
            Gets the flow element by schema element UId
            </summary>
            <param name="schemaElementUId">The schema element identifier.</param>
            <returns>The process flow element</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Thrown when process flow element is not found.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetFlowElementsByShemaElementUId(System.Guid)">
            <summary>
            Gets the enumerator of the flow elements founded by their schema element UId.
            </summary>
            <param name="schemaElementUId">The schema element identifier.</param>
            <returns>The enumerator of the flow elements.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.CancelExecution">
            <summary>
            Cancels execution of the current process.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.GetParentProcess">
            <summary>
            Returns instance of the main process.
            </summary>
            <returns>Process.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.WritePropertiesDataToOwner(Terrasoft.Common.DataWriter)">
            <summary>
            Writes the properties data to owner process data stream.
            </summary>
            <param name="writer">The data writer.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.SubProcessProxy.ReadPropertiesDataFromOwner(Terrasoft.Common.DataReader)">
            <summary>
            Reads the properties data from owner process data stream.
            </summary>
            <param name="ownerReader">The data reader.</param>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.InitialSchemaUId">
            <summary>
            Gets or sets unique identifier of the schema as initial value.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.IsRegisteredElementInLog">
            <summary>
            Gets or sets value that indicates whether the current process element is registered in Log.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.BaseProcessSchema">
            <summary>
            Gets or sets the base process schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.ActiveSchemaUId">
            <summary>
            Gets the schema UId of current proxied process instance.
            </summary>
            <value>
            The active schema UId of current proxied process instance.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.UId">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>
            The unique identifier.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.Caption">
            <summary>
            Gets or sets the caption.
            </summary>
            <value>
            The caption.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.Type">
            <summary>
            Gets or sets the name of the current member type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.SerializeToDB">
            <summary>
            Gets or sets value that indicates whether the current process element is needed to serialize in DB.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.IsLogging">
            <summary>
            Gets or sets value that indicates whether the current process element is needed to write in Log.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.Owner">
            <summary>
            Gets or sets owner process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.SchemaElementUId">
            <summary>
            Gets or sets unique identifier of the schema element.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.Status">
            <summary>
            Gets or sets the execution state.
            </summary>
            <value>
            The execution state.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.IsExecuted">
            <summary>
            Gets or sets value that indicates whether the current process element is executed.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.ExecutionResult">
            <summary>
            Gets or sets value that represents execution result of the current process element.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.LoopCounter">
            <summary>
            Gets or sets number of process element repetitions.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.SchemaUId">
            <summary>
            Gets or sets unique identifier of the schema element.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.CreatedInSchemaUId">
            <summary>
            Gets or sets unique identifier of the owner process schema where the current element has been created.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.PreviousFlowElements">
            <summary>
            Gets or sets a set of previous elements of the process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.ExecutedEventHandler">
            <summary>
            Gets or sets event handler. It is triggered when current process element has been executed.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.StartDate">
            <summary>
            Gets or sets date and time of the day when the current process has been started.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.SchemaManager">
            <summary>
            Gets instance that implements the <see cref="T:Terrasoft.Core.ISchemaManager"/> interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.OwnerUId">
            <summary>
            Gets or sets the unique identifier of owner process instance.
            </summary>
            <value>
            The unique identifier of owner process instance.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.UserConnection">
            <summary>
            Gets or sets the user connection.
            </summary>
            <value>
            The user connection.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.SchemaManagerName">
            <summary>
            Gets or sets name of schema manager.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>
            The schema.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.Storage">
            <summary>
            Gets or sets instance that provides functionality for storing and retrieving resource managers.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.IsShownExecutionPage">
            <summary>
            Gets or sets value that determines whether it can show execution page.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.ProcessLane">
            <summary>
            Gets or sets lane of the process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.Result">
            <summary>
            Gets or sets result of the current process execution.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.SerializeToMemory">
            <summary>
            Gets or sets value that determines whether it is required to serialize the current process in memory.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.InstanceUId">
            <summary>
            Gets string value that represents unique identifier of the current process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.ActivatedEventElements">
            <summary>
            Gets a collection of the activated events.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.ThrowEvents">
            <summary>
            Gets a set of events that are required to trigger.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.FlowElements">
            <summary>
            Gets a set of the process elements that were executed or are required to execute.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.WaitingUserTasks">
            <summary>
            Gets a set of the process elements that are going to show execution page.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.MetaPathParameterValues">
            <summary>
            Gets a collection of keys and values, where key is the metapath and value is delegate.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.InternalContext">
            <summary>
            Gets or sets instance of the <see cref="T:Terrasoft.Core.Process.ProcessExecutingContext"/> type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.IsEmbedded">
            <summary>
            Gets value that determines whether it is embedded process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.IsSaved">
            <summary>
            Gets or sets value that determines whether it is embedded process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.MaxLoopCount">
            <summary>
            Gets maximum number of process repetitions.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.IsProcessExecutedBySignal">
            <summary>
            Gets or sets value that determines whether the current process is started by signal.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.IsProcessExecutedByService">
            <summary>
            Gets or sets value that determines whether the current process is started by service.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.ProcessType">
            <summary>
            Gets or sets the class type of the current process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.ProcessSchema">
            <summary>
            Gets the process schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SubProcessProxy.ParameterValueProvider">
            <summary>
            Gets the family of algorithms that are used to obtain the values of the process parameters.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.TaskServiceQueueItemType">
            <summary>
            Message types for the <see cref="T:Terrasoft.Core.Process.TaskService"/>.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.TaskServiceQueueItemType.Start">
            <summary>Start element.</summary>
        </member>
        <member name="F:Terrasoft.Core.Process.TaskServiceQueueItemType.Terminate">
            <summary>Finish element.</summary>
        </member>
        <member name="F:Terrasoft.Core.Process.TaskServiceQueueItemType.Execute">
            <summary>Executing element.</summary>
        </member>
        <member name="F:Terrasoft.Core.Process.TaskServiceQueueItemType.Completed">
            <summary>Completed element.</summary>
        </member>
        <member name="F:Terrasoft.Core.Process.TaskServiceQueueItemType.Failed">
            <summary>Failed element.</summary>
        </member>
        <member name="F:Terrasoft.Core.Process.TaskServiceQueueItemType.CheckGatewayConditions">
            <summary>Condition flow expressions checking.</summary>
        </member>
        <member name="T:Terrasoft.Core.ResourceProviders.IHierarchySchemaResourceReader">
            <summary>
            Provides methods for reading schema resources with hierarchy.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ResourceProviders.IHierarchySchemaResourceReader.ReadHierarchycalResources(Terrasoft.Core.ResourceProviders.ResourceFilters,System.Action{Terrasoft.Core.ResourceProviders.ResourceData})">
            <summary>
            Reads resources and passes <see cref="T:Terrasoft.Core.ResourceProviders.ResourceData"/> to <paramref name="resourceDataAction"/>.
            </summary>
            <param name="resourceFilters">Resource filters.</param>
            <param name="resourceDataAction">Action which executes on <see cref="T:Terrasoft.Core.ResourceProviders.ResourceData"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.ResourceProviders.IHierarchySchemaResourceReader.ReadPlainResources(System.Collections.Generic.IEnumerable{System.Guid},System.Guid,System.Action{Terrasoft.Core.ResourceProviders.ResourceData})">
            <summary>
            Reads resources and passes <see cref="T:Terrasoft.Core.ResourceProviders.ResourceData"/> to <paramref name="resourceDataAction"/>.
            </summary>
            <param name="schemaHierarchyIds">Full schema hierarchy.</param>
            <param name="includeResourcesFromPackageId">Package identifier.</param>
            <param name="resourceDataAction">Action which executes on <see cref="T:Terrasoft.Core.ResourceProviders.ResourceData"/>.</param>
            <remarks>
            In case if <paramref name="includeResourcesFromPackageId"/> is empty it will be ignored.
            </remarks>
        </member>
        <member name="T:Terrasoft.Core.Packages.ConfigurationAssemblyException">
            <summary>Класс исключения для передачи информации об ошибках al.exe</summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.WorkspaceComposerLoopsException">
            <summary>Класс исключения для передачи информации о цикле зависимостей между модулями</summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.WorkspaceComposer">
            <summary>Класс, который содержит логику построения последовательности компиляции модулей</summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceComposer.ProcessSimpleSchema(Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>Обработка обычной схемы</summary>
            <param name="schema">Схема</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceComposer.ProcessExtensionSchema(Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>Обработка схемы, которая замещает родителя в иерархии. Такая схема должна быть в том же модуле,
            что и родитель.</summary>
            <param name="schema">Схема</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceComposer.SortByTopology(System.Collections.Generic.IList{Terrasoft.Core.Packages.ModuleDescriptor})">
            <summary>
            Генерирует последовательность сборки модулей с учетом зависимостей между ними.
            В случае зацикления генерирует исключение с информацией о модулях, образовавших циклическую зависимость.
            Выделена из Compose() исключительно для тестовых целей.
            </summary>
            <param name="modules">Последовательность модулей</param>
            <returns>Отсортированная последовательность модулей</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceComposer.Compose(Terrasoft.Core.Packages.PackageStorage)">
            <summary>Для данного хранилища пакетов генерирует последовательность сборки модулей с учетом зависимостей
            между классами и пакетами</summary>
            <param name="storage">Хранилище пакетов</param>
            <returns>Последовательность модулей</returns>
        </member>
        <member name="T:Terrasoft.Core.SchemaManagerItemCollection`1">
            <summary>
            Manager items collection.
            </summary>
            <typeparam name="TSchemaManagerSchema">Collection element type.</typeparam>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.#ctor(Terrasoft.Core.SchemaManager{`0})">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.SchemaManagerItemCollection`1"/>
            for a specified manager item.
            </summary>
            <param name="manager">Schema manager.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.OnItemAdding(Terrasoft.Core.SchemaManagerItemBeforeAddEventArgs)">
            <summary>
            Raises the <see cref="E:Terrasoft.Core.SchemaManagerItemCollection`1.ItemAdding"/> event.
            </summary>
            <param name="e">Object containing event data.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.OnItemAdded(Terrasoft.Core.SchemaManagerItemAfterAddEventArgs)">
            <summary>
            Raises the <see cref="E:Terrasoft.Core.SchemaManagerItemCollection`1.ItemAdded"/> event.
            </summary>
            <param name="e">Object containing event data.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.OnItemRemoving(Terrasoft.Core.SchemaManagerItemBeforeRemoveEventArgs)">
            <summary>
            Raises the <see cref="E:Terrasoft.Core.SchemaManagerItemCollection`1.ItemRemoving"/> event.
            </summary>
            <param name="e">Object containing event data.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.OnItemRemoved(Terrasoft.Core.SchemaManagerItemAfterRemoveEventArgs)">
            <summary>
            Raises the <see cref="E:Terrasoft.Core.SchemaManagerItemCollection`1.ItemRemoved"/> event.
            </summary>
            <param name="e">Object containing event data.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.InsertItem(System.Int32,Terrasoft.Core.ISchemaManagerItem{`0})">
            <summary>
            Inserts an item to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the collection.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.FindByUId(System.Guid,System.Guid)">
            <summary>
            Searches for an item by specified item identifier and user identifier.
            </summary>
            <param name="uid">Item identifier.</param>
            <param name="userId">User identifier.</param>
            <returns>Schema manager item that matches specified parameters values.
            Returns <c>null</c> if item is not found.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.GetByUId(System.Guid,System.Guid)">
            <summary>
            Returns an item with specified item identifier and user identifier.
            </summary>
            <param name="uid">Item identifier.</param>
            <param name="userId">User identifier.</param>
            <returns>Item with specified <paramref name="uid"/> and <paramref name="userId"/>.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Thrown when item with <paramref name="uid"/>
            which belongs to user with <paramref name="userId"/> is not found.</exception>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.FindInstanceByUId(System.Guid,System.Guid)">
            <summary>
            Searches for an item by specified item instance identifier and user identifier.
            </summary>
            <param name="uid">Item identifier.</param>
            <param name="userId">User identifier.</param>
            <returns>Schema manager item that matches specified parameters values.
            Returns <c>null</c> if item is not found.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.GetInstanceByUId(System.Guid,System.Guid)">
            <summary>
            Returns an item with specified item identifier and user identifier if item instance is not <c>null</c>.
            </summary> 
            <param name="uid">Item identifier.</param>
            <param name="userId">User Identifier.</param>
            <returns>item with specified <paramref name="uid"/> and <paramref name="userId"/>.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Thrown when item with <paramref name="uid"/>
            which belongs to user with <paramref name="userId"/> is not found.</exception>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.FindByName(System.String,System.Guid)">
            <summary>
            Searches for an item by specified item name and user identifier.
            </summary>
            <param name="name">Item name.</param>
            <param name="userId">User identifier.</param>
            <returns>Schema manager item that matches specified parameters values.
            Returns <c>null</c> if item is not found.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.GetByName(System.String,System.Guid)">
            <summary>
            Returns an item with specified item name and user identifier.
            </summary>
            <param name="name">Item name.</param>
            <param name="userId">User identifier.</param>
            <returns>Item with specified <paramref name="name"/> and <paramref name="userId"/>.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Thrown when item with <paramref name="name"/>
            which belongs to user with <paramref name="userId"/> is not found.</exception>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.FindInstanceByName(System.String,System.Guid)">
            <summary>
            Searches for an item by specified item instance name and user identifier.
            </summary>
            <param name="name">Item name.</param>
            <param name="userId">User identifier.</param>
            <returns>Schema manager item that matches specified parameters values.
            Returns <c>null</c> if item is not found.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemCollection`1.GetInstanceByName(System.String,System.Guid)">
            <summary>
            Returns an item with specified item instance name and user identifier.
            </summary>
            <param name="name">Item instance name.</param>
            <param name="userId">User identifier.</param>
            <returns>Item with specified instance <paramref name="name"/> and <paramref name="userId"/>.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Thrown when item with instance <paramref name="name"/>
            which belongs to user with <paramref name="userId"/> is not found.</exception>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemCollection`1.Manager">
            <summary>
            Schema manager.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.SchemaManagerItemCollection`1.ItemAdding">
            <summary>
            Occurs before adding an item to the collection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemCollection`1.IsInItemAdding">
            <summary>
            Indicates whether <see cref="E:Terrasoft.Core.SchemaManagerItemCollection`1.ItemAdding"/> event is being processed.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.SchemaManagerItemCollection`1.ItemAdded">
            <summary>
            Occurs after adding an item to the collection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemCollection`1.IsInItemAdded">
            <summary>
            Indicates whether event <see cref="E:Terrasoft.Core.SchemaManagerItemCollection`1.ItemAdded"/> is being processed.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.SchemaManagerItemCollection`1.ItemRemoving">
            <summary>
            Occurs before removing an item from the collection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemCollection`1.IsInItemRemoving">
            <summary>
            Indicates whether event <see cref="E:Terrasoft.Core.SchemaManagerItemCollection`1.ItemRemoving"/> is being processed.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.SchemaManagerItemCollection`1.ItemRemoved">
            <summary>
            Occurs after removing an item from the collection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemCollection`1.IsInItemRemoved">
            <summary>
            Indicates whether event <see cref="E:Terrasoft.Core.SchemaManagerItemCollection`1.ItemRemoved"/> is being processed.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.SchemaManagerItemInfo">
            <summary>
            Schema manager item info class.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemInfo.SchemaId">
            <summary>
            Schema manager item Id.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemInfo.NewParentSchemaId">
            <summary>
            New parent schema Id.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemInfo.OldParentSchemaId">
            <summary>
            Old parent schema Id.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemInfo.NewPackageId">
            <summary>
            New package Id.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemInfo.OldPackageId">
            <summary>
            Old package Id.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemInfo.NewName">
            <summary>
            New schema manager item name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemInfo.OldName">
            <summary>
            Old schema manager item name.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.SchemaResource.ISchemaResourceInvalidator">
            <summary>
            Provides methods for schema resources invalidating.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaResource.ISchemaResourceInvalidator.Invalidate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Invalidates schema resources.
            </summary>
            <param name="schemaNames">Schema names.</param>
        </member>
        <member name="T:Terrasoft.Core.ISysUserPropertyHelper">
            <summary>
            SysUserProperty helper interface.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ISysUserPropertyHelper.GetProperties(System.String,System.Guid)">
            <summary>
            Returns user properties by manager name and workspace.
            </summary>
            <param name="managerName">Manager name.</param>
            <param name="workspaceId">Workspace identifier.</param>
            <returns>User properties.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISysUserPropertyHelper.GetProperties(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Returns user properties by manager item.
            </summary>
            <param name="managerItem">Manager item.</param>
            <returns>User properties.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISysUserPropertyHelper.GetProperty(Terrasoft.Core.ISchemaManagerItem,System.String)">
            <summary>
            Returns user property by manager item and property name.
            </summary>
            <param name="managerItem">Manager item.</param>
            <param name="propertyName">Property name.</param>
            <returns>User property.</returns>
        </member>
        <member name="M:Terrasoft.Core.ISysUserPropertyHelper.SetProperties(Terrasoft.Core.ISchemaManagerItem,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Sets user properties of manager item.
            </summary>
            <param name="item">Manager item.</param>
            <param name="properties">User properties.</param>
            <param name="invalidate">If true - invalidates manager item.</param>
        </member>
        <member name="M:Terrasoft.Core.ISysUserPropertyHelper.SetProperty(Terrasoft.Core.ISchemaManagerItem,System.String,System.String,System.Boolean)">
            <summary>
            Sets user property of manager item.
            </summary>
            <param name="managerItem">Manager item.</param>
            <param name="propertyName">User property name.</param>
            <param name="propertyValue">User property value.</param>
            <param name="invalidate">If true - invalidates manager item.</param>
        </member>
        <member name="M:Terrasoft.Core.ISysUserPropertyHelper.SetProperty(Terrasoft.Core.ISchemaManagerItem,System.String,System.String)">
            <summary>
            Sets user property of manager item and invalidates manager item.
            </summary>
            <param name="managerItem">Manager item.</param>
            <param name="propertyName">User property name.</param>
            <param name="propertyValue">User property value.</param>
        </member>
        <member name="T:Terrasoft.Core.SysUserPropertyHelper">
            <summary>
            SysUserProperty helper class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SysUserPropertyHelper.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Creates an instance of SysUserPropertyHelper class.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.SysUserPropertyHelper.GetProperty(Terrasoft.Core.ISchemaManagerItem,System.String)">
            <summary>
            Returns user property by manager item and property name.
            </summary>
            <param name="managerItem">Manager item.</param>
            <param name="propertyName">Property name.</param>
            <returns>User property.</returns>
        </member>
        <member name="M:Terrasoft.Core.SysUserPropertyHelper.GetProperties(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Returns user properties by manager item.
            </summary>
            <param name="managerItem">Manager item.</param>
            <returns>User properties.</returns>
        </member>
        <member name="M:Terrasoft.Core.SysUserPropertyHelper.GetProperties(System.String,System.Guid)">
            <summary>
            Returns user properties by manager name and workspace.
            </summary>
            <param name="managerName">Manager name.</param>
            <param name="workspaceId">Workspace identifier.</param>
            <returns>User properties.</returns>
        </member>
        <member name="M:Terrasoft.Core.SysUserPropertyHelper.SetProperty(Terrasoft.Core.ISchemaManagerItem,System.String,System.String)">
            <summary>
            Sets user property of manager item.
            </summary>
            <param name="managerItem">Manager item.</param>
            <param name="propertyName">User property name.</param>
            <param name="propertyValue">User property value.</param>
        </member>
        <member name="M:Terrasoft.Core.SysUserPropertyHelper.SetProperty(Terrasoft.Core.ISchemaManagerItem,System.String,System.String,System.Boolean)">
            <summary>
            Sets user property of manager item.
            </summary>
            <param name="managerItem">Manager item.</param>
            <param name="propertyName">User property name.</param>
            <param name="propertyValue">User property value.</param>
            <param name="invalidate">If true - invalidates manager item.</param>
        </member>
        <member name="M:Terrasoft.Core.SysUserPropertyHelper.SetProperties(Terrasoft.Core.ISchemaManagerItem,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Sets user properties of manager item.
            </summary>
            <param name="managerItem">Manager item.</param>
            <param name="properties">User properties.</param>
            <param name="invalidate">If true - invalidates manager item.</param>
        </member>
        <member name="T:Terrasoft.Core.TimeZoneUtilities">
            <summary>
            Represents methods to work with time zones.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.TimeZoneUtilities.GetUserTimeZone(Terrasoft.Core.UserConnection)">
            <summary>
            Returns instance of <see cref="T:System.TimeZoneInfo"/> for current user settings.
            </summary>
            <param name="userConnection">Current user connection.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.TimeZoneUtilities.ConvertToUtc(Terrasoft.Core.UserConnection,System.DateTime)">
            <summary>
            Converts time from user time zone to Utc fromat.
            </summary>
            <param name="userConnection">Instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="dateTimeLocal">Current user time zone.</param>
            <returns>Instance of <see cref="T:System.DateTime"/> which represents current time in Utc format.</returns>
        </member>
        <member name="M:Terrasoft.Core.TimeZoneUtilities.ConvertFromUtc(Terrasoft.Core.UserConnection,System.DateTime)">
            <summary>
            Converts time from Utc to user time zone fromat.
            </summary>
            <param name="userConnection">Instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="dateTimeLocal">Current user time zone.</param>
            <returns>Instance of <see cref="T:System.DateTime"/> in current time zone format.</returns>
        </member>
        <member name="T:Terrasoft.Core.Translation.Exception.InvalidResourceKeyFormatException">
            <summary>
            The exception that is thrown when the resource key has an invalid format.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Translation.Exception.InvalidResourceKeyFormatException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Translation.Exception.InvalidResourceKeyFormatException"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Translation.Exception.InvalidResourceKeyFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Translation.Exception.InvalidResourceKeyFormatException"/> class, using the specified
            error message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:Terrasoft.Core.Translation.Exception.InvalidResourceKeyFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Translation.Exception.InvalidResourceKeyFormatException"/> class, using the specified
            error message and reference to inner exception which cause this exception.
            </summary>
            <param name="message">Error message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.SchemaContentType">
            <summary>
            Types of content.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DesignMode.SchemaContentType.Js">
            <summary>
            Javascript content type
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DesignMode.SchemaContentType.Css">
            <summary>
            Stylesheets content type
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DesignMode.SchemaContentType.Less">
            <summary>
            Less content type
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DesignMode.SchemaContentType.SourceCode">
            <summary>
            Source code (c#) content type
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.ReadDependencies(Terrasoft.Core.MetaItem,Terrasoft.Core.ClientUnitSchemaDependencyCollection)">
            <summary>
            Loads dependencies for ClientUnitSchema and adds them to the passed list of dependencies.
            </summary>
            <param name="item">Current schema.</param>
            <param name="dependencies">List of dependencies.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.SaveJs(Terrasoft.Core.DesignMode.ItemDescriptor,System.IO.Stream)">
            <summary>
            Saves JavaScript content of the schema.
            </summary>
            <param name="schema">Specified schema.</param>
            <param name="content">Stream of JS content.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.SaveLess(Terrasoft.Core.DesignMode.ItemDescriptor,System.IO.Stream)">
            <summary>
            Saves Less content of the schema.
            </summary>
            <param name="schema">Specified schema.</param>
            <param name="content">Stream of LESS content.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.SaveCs(Terrasoft.Core.DesignMode.ItemDescriptor,System.IO.Stream)">
            <summary>
            Saves C#-code of the schema
            </summary>
            <param name="schema">Specified schema.</param>
            <param name="content">Stream of source code.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.ReadJs(Terrasoft.Core.DesignMode.ItemDescriptor)">
            <summary>
            Gets javascript code of the schema from the database.
            </summary>
            <param name="schema">Specified schema.</param>
            <returns>Stream of content.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.ReadLess(Terrasoft.Core.DesignMode.ItemDescriptor)">
            <summary>
            Gets LESS of the schema from the database.
            </summary>
            <param name="schema">Specified schema.</param>
            <returns>Stream of content.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.ReadCs(Terrasoft.Core.DesignMode.ItemDescriptor)">
            <summary>
            Gets source code of the schema from the database.
            </summary>
            <param name="schema">Specified schema for reading content.</param>
            <returns>Stream of content.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.SaveDependencies(Terrasoft.Core.IManagerItem,Terrasoft.Core.ClientUnitSchemaDependencyCollection)">
            <summary>
            Saves dependencies for the ClientUnitSchema in the database.
            </summary>
            <param name="item">Current schema.</param>
            <param name="dependencies">List of dependencies.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.SaveMetaData(System.IO.Stream,Terrasoft.Core.Configuration.SysSchema)">
            <summary>
            Saves schema's metadata to the DB.
            </summary>
            <param name="metaData">Metadata.</param>
            <param name="sysSchema">Saving schema.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.SaveExtraProperties(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Saves schema's properties to the DB.
            </summary>
            <param name="item">Manager's item.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.SaveItem(Terrasoft.Core.Configuration.SysSchema)">
            <summary>
            Saves schema in the database.
            </summary>
            <param name="schema">Saving schema.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.Dispose">
            <summary>
            Deletes, dispose resources.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.StartTransaction">
            <summary>
            Starts transaction in DB.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.CommitTransaction">
            <summary>
            Commits transaction in DB.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBSchemaContentProvider.RollbackTransaction">
            <summary>
            Rolls back transaction in DB.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.DesignModeFactory">
            <summary>
            Creates instances of classes that work with schemas and configuration assembly
            based on <see cref="T:Terrasoft.Core.FileDesignModeSection"/>.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.IDesignModeFactory">
            <summary>
            Provides a methods for creating instances of classes that work with schemas depending on the
            <see cref="T:Terrasoft.Core.FileDesignModeSection"/> settings.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.IDesignModeFactory.GetSchemaContentReader">
            <summary>
            Returns class instance that implements
            <see cref="T:Terrasoft.Core.DesignMode.ISchemaContentReader"/>.
            </summary>
            <returns>Class instance that implements ISchemaContentReader
            /// <see cref="T:Terrasoft.Core.DesignMode.ISchemaContentReader"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.IDesignModeFactory.GetSchemaContentSaver">
            <summary>
            Returns class instance that implements
            <see cref="T:Terrasoft.Core.DesignMode.ISchemaContentSaver"/>.
            </summary>
            <returns>Class instance that implements ISchemaContentSaver
            /// <see cref="T:Terrasoft.Core.DesignMode.ISchemaContentSaver"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.IDesignModeFactory.GetSchemaSystemContentChanger">
            <summary>
            Returns class instance that implements
            <see cref="T:Terrasoft.Core.DesignMode.ISchemaChanger"/>.
            </summary>
            <returns>Class instance that implements ISchemaChanger
            /// <see cref="T:Terrasoft.Core.DesignMode.ISchemaChanger"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.IDesignModeFactory.GetWorkspaceAssemblyLoader">
            <summary>
            Returns class instance that implements
            <see cref="T:Terrasoft.Core.DesignMode.IWorkspaceAssemblyLoader"/>.
            </summary>
            <returns>Class instance that implements
            <see cref="T:Terrasoft.Core.DesignMode.IWorkspaceAssemblyLoader"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DesignModeFactory.#ctor(Terrasoft.Core.AppConnection,Terrasoft.IO.IDirectory)">
            <summary>
            Class constructor.
            </summary>
            <param name="appConnection">An instance of <see cref="T:Terrasoft.Core.AppConnection"/> class.</param>
            <param name="directoryWrapper">An instance of <see cref="T:Terrasoft.IO.IDirectory"/> class.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DesignModeFactory.GetSchemaContentReader">
            <summary>
            Returns the instance of the class, that implements
            <see cref="T:Terrasoft.Core.DesignMode.ISchemaContentReader"/>.
            </summary>
            <returns>The instance of implamentation of the ISchemaContentReader.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DesignModeFactory.GetSchemaContentSaver">
            <summary>
            Returns the instance of the class, that implements
            <see cref="T:Terrasoft.Core.DesignMode.ISchemaContentSaver"/>.
            </summary>
            <returns>The instance of implamentation of the ISchemaContentSaver.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DesignModeFactory.GetSchemaSystemContentChanger">
            <summary>
            Returns the instance of the class, that implements
            <see cref="T:Terrasoft.Core.DesignMode.ISchemaChanger"/> based on FileDesignModeSettings.
            </summary>
            <returns>The instance of implementation of the ISchemaChanger.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DesignModeFactory.GetWorkspaceAssemblyLoader">
            <summary>
            Returns workspace assembly loader based on FileDesignModeSettings
            <see cref="T:Terrasoft.Core.FileDesignModeSection"/>.
            </summary>
            <returns>Instance of IConfigurationAssemblyLoader
            <see cref="T:Terrasoft.Core.IConfigurationAssemblyLoader"/>.</returns>
        </member>
        <member name="P:Terrasoft.Core.DesignMode.DesignModeFactory.IsFileDesignModeEnabled">
            <summary>
            Returns <c>true</c> if FileDesignMode is enabled.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.FileSchemaContentProvider">
            <summary>
            Class provides methods for saving/deleting/editing schema in the filesystem.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.GetMetaDataFileName">
            <summary>
            Returns metadata file name.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.ReadDependencies(Terrasoft.Core.MetaItem,Terrasoft.Core.ClientUnitSchemaDependencyCollection)">
            <summary>
            Loads dependencies for ClientUnitSchema and adds them to the passed list of dependencies.
            </summary>
            <param name="item">Current schema.</param>
            <param name="dependencies">List of dependencies.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.SaveDependencies(Terrasoft.Core.IManagerItem,Terrasoft.Core.ClientUnitSchemaDependencyCollection)">
            <summary>
            Saves dependencies for the ClientUnitSchema to a file.
            </summary>
            <param name="item">Current schema.</param>
            <param name="dependencies">List of dependencies.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.SaveJs(Terrasoft.Core.DesignMode.ItemDescriptor,System.IO.Stream)">
            <summary>
            Saves JavaScript content of the schema.
            </summary>
            <param name="schema">Specified schema.</param>
            <param name="content">Stream of JS content.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.SaveLess(Terrasoft.Core.DesignMode.ItemDescriptor,System.IO.Stream)">
            <summary>
            Saves Less content of the schema.
            </summary>
            <param name="schema">Specified schema.</param>
            <param name="content">Stream of Less content.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.SaveCs(Terrasoft.Core.DesignMode.ItemDescriptor,System.IO.Stream)">
            <summary>
            Saves C#-code of the schema
            </summary>
            <param name="schema">Specified schema.</param>
            <param name="content">Stream of source code.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.ReadJs(Terrasoft.Core.DesignMode.ItemDescriptor)">
            <summary>
            Gets javascript code of schema from file.
            </summary>
            <param name="schema">Specified schema.</param>
            <returns>Stream of content.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.ReadLess(Terrasoft.Core.DesignMode.ItemDescriptor)">
            <summary>
            Gets javascript code of schema from file.
            </summary>
            <param name="schema">Specified schema.</param>
            <returns>Stream of content.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.ReadCs(Terrasoft.Core.DesignMode.ItemDescriptor)">
            <summary>
            Gets source code of schema from file.
            </summary>
            <param name="schema">Specified schema for reading content.</param>
            <returns>Stream of content.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.SaveItem(Terrasoft.Core.Configuration.SysSchema)">
            <summary>
            Saves current schema to a file.
            </summary>
            <param name="schema">Current schema.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.SaveMetaData(System.IO.Stream,Terrasoft.Core.Configuration.SysSchema)">
            <summary>
            Saves schema's metadata to a file.
            </summary>
            <param name="metaData">Metadata.</param>
            <param name="sysSchema">Saving schema.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.SaveExtraProperties(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Saves schema's properties to a file.
            </summary>
            <param name="item">Manager's item.</param>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.Dispose">
            <summary>
            Deletes the temporary folder.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.StartTransaction">
            <summary>
            Creates a temporary folder.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.CommitTransaction">
            <summary>
            Moves files from the temporary folder to the working copy folder.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSchemaContentProvider.RollbackTransaction">
            <summary>
            Rollback current transaction with deleting of temporary folder.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DesignMode.FileSchemaContentProvider.PackageCopyPath">
            <summary>
            Path to working copy folder.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DesignMode.FileSchemaContentProvider.TargetFolderPath">
            <summary>
            Path to package folder, default value - working copy folder.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.DBWorkspaceAssemblyLoader">
            <summary>
            Class for workspace assembly loading from the database
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBWorkspaceAssemblyLoader.LoadAssemblyToWorkspace(Terrasoft.Core.Configuration.SysWorkspace,Terrasoft.Core.Packages.FileStorage.IFileStorage)">
            <summary>
            Loads assembly from the database and modifies workspace accordingly.
            </summary>
            <param name="workspace">Instance of <see cref="T:Terrasoft.Core.Configuration.SysWorkspace"/>
            from which assembly will be loaded.</param>
            <param name="fileStorage">Instance of <see cref="T:Terrasoft.Core.Packages.FileStorage.IFileStorage"/>
            to which assembly modules will be loaded.</param>
            <returns>Loaded assembly <see cref="T:System.Reflection.Assembly"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBWorkspaceAssemblyLoader.LoadAssemblyToWorkspace(Terrasoft.Core.Configuration.SysWorkspace)">
            <summary>
            Loads assembly from the database and modifies workspace accordingly.
            </summary>
            <param name="workspace">Instance of <see cref="T:Terrasoft.Core.Configuration.SysWorkspace"/>
            to which assembly will be loaded.</param>
            <returns>Loaded assembly <see cref="T:System.Reflection.Assembly"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.DBWorkspaceAssemblyLoader.GetIsWorkspaceAssemblyInitialized(Terrasoft.Core.UserConnection,System.String)">
            <summary>
            Determines if the workspace assembly is initialized.
            </summary>
            <param name="userConnection">Instance of specified <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="workspaceName">Specified workspace name</param>
            <returns><c>True</c> if assembly is initialized, in othe case - <c>false</c></returns>
        </member>
        <member name="T:Terrasoft.Core.DesignMode.FileSystemWorkspaceAssemblyLoader">
            <summary>
            Class for workspace assembly loading from the file system
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSystemWorkspaceAssemblyLoader.LoadAssemblyToWorkspace(Terrasoft.Core.Configuration.SysWorkspace,System.String)">
            <summary>
            Loads assembly from the file system and modifies workspace accordingly.
            </summary>
            <param name="workspace">Instance of <see cref="T:Terrasoft.Core.Configuration.SysWorkspace"/>
            to which assembly will be loaded.</param>
            <param name="assemblyPath"><see cref="T:System.String"/>Path to assembly.</param>
            <returns>Loaded assembly <see cref="T:System.Reflection.Assembly"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSystemWorkspaceAssemblyLoader.LoadAssemblyToWorkspace(Terrasoft.Core.Configuration.SysWorkspace)">
            <summary>
            Loads assembly from the file system and modifies workspace accordingly.
            </summary>
            <param name="workspace">Instance of <see cref="T:Terrasoft.Core.Configuration.SysWorkspace"/>
            to which assembly will be loaded.</param>
            <returns>Loaded assembly <see cref="T:System.Reflection.Assembly"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DesignMode.FileSystemWorkspaceAssemblyLoader.GetIsWorkspaceAssemblyInitialized(Terrasoft.Core.UserConnection,System.String)">
            <summary>
            Determines if the workspace assembly is initialized.
            </summary>
            <param name="userConnection">Instance of specified <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="workspaceName">Specified workspace name</param>
            <returns><c>true</c> if assembly is initialized, in othe case - <c>false</c></returns>
        </member>
        <member name="T:Terrasoft.Core.GlobalAppSettings">
            <summary>
            Application settings.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.GlobalAppSettings._useLocalizableFetchFromDB">
            <summary>
            Indicates whether to fetch only default culture data or use multilanguage data.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.GlobalAppSettings._useCurrentCultureEntityFetch">
            <summary>
            Indicates whether to fetch data from Default culture or Current culture when LocalizationCultureId
            is not specified for Entity.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.GlobalAppSettings.Initialize(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Class initialization.
            </summary>
            <param name="appSettings">Application setting parameters collection.</param>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.UserSessionTimeout">
            <summary>
            User session timeout in minutes.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.UseIsoWeeks">
            <summary>
            Indicates whether to use ISO date standard for week numbers.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.ConfigurationProjectPath">
            <summary>
            Path for project Terrasoft.Configuration.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.MemoryCacheStoreSlidingExpiration">
            <summary>
            Data expiraton time in global application memory cache.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.UsePingServiceToWakeupDomain">
            <summary>
            Flag that indicates whether <see cref="T:ProcessJobStub"/> uses ping service to wakeup AppDomain.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.UseProcessVersions">
            <summary>
            Flag that indicates whether processes have versioning feature.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.UseCompiledSubProcessVersions">
            <summary>
            Flag that indicates whether compiled processes have versioning feature for sub processes.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.UseApplicationScheduler">
            <summary>
            Flag that indicates whether Application uses scheduler
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.UseOffsetFetchPaging">
            <summary>
            Determines if offset-fetch paging enabled.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.UseLookupNotEqualOrNullQueryCondition">
            <summary>
            Determines if IsNull filter presents in NotEqual filter for lookup columns.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.UseCsrfToken">
            <summary>
            Indicates whether to use CSRF token.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.UseConvertingEmptyConditionToIsNull">
            <summary>
            Indicates whether to use Convert Empty Condition To IsNull
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.DisableCsrfTokenValidationForPaths">
            <summary>
            Allowed service methods for CSRF.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.UseEntitySchemaLczNaming">
            <summary>
            Indicates whether to use name for Lcz table from EntitySchema or from hardcoded string.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.UseSchemaManagersDI">
            <summary>
            Indicates whether to use DI container for SchemaManagers instantiation.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.RegenerateDependentProcessSchemaSources">
            <summary>
            Indicates whether to regenerate the source code of the compiled host processes after generation of the
            compiled sub process source code.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.RedisLockEntryExpireTimeMin">
            <summary>
            Indicates when expire redis lock on entry.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.UseDBSequence">
            <summary>
            Indicates whether be used data base sequence in application or not.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.GlobalAppSettings.UseCSATRatingService">
            <summary>
            Indicates whether CSAT rating service is enabled.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.ClientUnitSchema._body">
            <summary>
            JS content of current ClientUnitSchema.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.ClientUnitSchema._css">
            <summary>
            CSS content of current ClientUnitSchema.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.ClientUnitSchema._less">
            <summary>
            Less content of current ClientUnitSchema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ClientUnitSchema.InnerCss">
            <summary>
            Cached CSS content from metadata.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ClientUnitSchema.InnerBody">
            <summary>
            Cached JS content from metadata.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ClientUnitSchema.InnerLess">
            <summary>
            Cached Less content from metadata.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ClientUnitSchema.BaseSchemaUId">
            <summary>
            Уникальный идентификатор базовой схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ClientUnitSchema.SchemaContentReader">
            <summary>
            Returns new instance of <see cref="T:Terrasoft.Core.DesignMode.ISchemaContentReader"/> realization.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.CombinedSourceSchemaDataItem">
            <summary>
            Класс для хранения данных комбинированных исходных кодов клиентских схем.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.CombinedSourceSchemaDBProvider">
            <summary>
            Класс провайдера комбинированных исходных кодов клиентских схем для работы с базой данных.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.ICombinedSourceSchemaProvider">
            <summary>
            Интерфейс провайдера комбинированных исходных кодов клиентских схем.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ICombinedSourceSchemaProvider.SaveCombinedSchemaDescriptors(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Генерирует комбинированные дескрипторы для всех клиентских схем и сохраняет их в базу данных.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="schemaId">Идентификатор клиентской схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.ICombinedSourceSchemaProvider.SaveCombinedSchemaSource(Terrasoft.Core.UserConnection,Terrasoft.Core.ClientUnitSchema)">
            <summary>
            Генерирует комбинированные исходные коды и хэш для клиентской схемы (с зависимостями)
            и сохраняет их в базу данных.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="schema">Клиентская схема.</param>
        </member>
        <member name="M:Terrasoft.Core.ICombinedSourceSchemaProvider.GetCombinedSchemas(Terrasoft.Core.UserConnection)">
            <summary>
            Вычитывает перечень комбинированных клиентских схем (с зависимостями) из базы данных.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Коллекция комбинированных клиентских схем (с зависимостями).</returns>
        </member>
        <member name="M:Terrasoft.Core.CombinedSourceSchemaDBProvider.SaveCombinedSchemaDescriptors(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Генерирует комбинированные дескрипторы для всех клиентских схем и схем объектов и сохраняет их в базу
            данных.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="schemaId">Идентификатор клиентской схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.CombinedSourceSchemaDBProvider.SaveCombinedSchemaSource(Terrasoft.Core.UserConnection,Terrasoft.Core.ClientUnitSchema)">
            <summary>
            Генерирует комбинированные исходные коды и хэш для клиентской схемы (с зависимостями)
            и сохраняет их в базу данных.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="schema">Клиентская схема.</param>
        </member>
        <member name="M:Terrasoft.Core.CombinedSourceSchemaDBProvider.GetCombinedSchemas(Terrasoft.Core.UserConnection)">
            <summary>
            Вычитывает перечень комбинированных клиентских схем (с зависимостями) из базы данных.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Коллекция комбинированных клиентских схем (с зависимостями).</returns>
        </member>
        <member name="T:Terrasoft.Core.CombinedSourceSchemaProviderFactory">
            <summary>
            Фабрика классов для генерации провайдера комбинированных исходных кодов клиентских схем.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.CombinedSourceSchemaProviderFactory.CreateInstance">
            <summary>
            Возвращает экземпляр интерфейса <see cref="T:Terrasoft.Core.ICombinedSourceSchemaProvider"/>.
            </summary>
            <returns>Экземпляр интерфейса <see cref="T:Terrasoft.Core.ICombinedSourceSchemaProvider"/>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysRegistrationDataSchema">
            <summary>
            Схема объекта "Регистрационные данные".
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysRegistrationData">
            <summary>
            Регистрационные данные.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysRegistrationData.SysAdminUnit">
            <summary>
            Пользователь.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysRegistrationData.Contact">
            <summary>
            Контакт.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysRegistrationData.UserPassword">
            <summary>
            Пароль пользователя.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysRegistrationData.LinkType">
            <summary>
            Тип ссылки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysRegistrationData.LinkId">
            <summary>
            Идентификатор ссылки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysRegistrationData.LinkExpireDate">
            <summary>
            Дата окончания действия ссылки.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.ClientUnitSchemaManagerItemDescriptor">
            <summary>
            Дескриптор элемента менеджера схем объектов.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.SchemaManagerItemDescriptor">
            <summary>
            Дескриптор элемента менеджера схем.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemDescriptor.ReadMetaData(Terrasoft.Common.DataReader)">
            <summary>
            Выполняет десериализацию дескриптора.
            </summary>
            <param name="reader">
            Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется десериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemDescriptor.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию дескриптора.
            </summary>
            <param name="writer">
            Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого осуществляется сериализация.
            </param>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemDescriptor.IsInitialized">
            <summary>
            Признак того, что дескриптор проинициализирован.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.ClientUnitSchemaManagerItemDescriptor._messages">
            <summary>
            Коллекция сообщений схемы.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.ClientUnitSchemaManagerItemDescriptor._dependencies">
            <summary>
            Коллекция зависимостей схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaManagerItemDescriptor.ReadMetaData(Terrasoft.Common.DataReader)">
            <summary>
            Выполняет десериализацию дескриптора.
            </summary>
            <param name="reader">
            Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется десериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaManagerItemDescriptor.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию дескриптора.
            </summary>
            <param name="writer">
            Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого осуществляется сериализация.
            </param>
        </member>
        <member name="P:Terrasoft.Core.ClientUnitSchemaManagerItemDescriptor.BodyHash">
            <summary>
            Хэш исходного кода и стилей CSS.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ClientUnitSchemaManagerItemDescriptor.SchemaType">
            <summary>
            Тип схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ClientUnitSchemaManagerItemDescriptor.HasCss">
            <summary>
            Признак, содержит ли схема стили CSS.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ClientUnitSchemaManagerItemDescriptor.LocalizableStringsHash">
            <summary>
            Хэш локализуемых строк схемы.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.ActionsConfigUtilities">
            <summary>
            Вспомогательный класс для перечисления <see cref="T:Terrasoft.Core.DB.ActionsConfig"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.ActionsConfigUtilities.IsSetted(Terrasoft.Core.DB.ActionsConfig,Terrasoft.Core.DB.ActionsConfig)">
            <summary>
            Проверяет установку бита перечисления <see cref="T:Terrasoft.Core.DB.ActionsConfig"/>.
            </summary>
            <param name="source">Исходное значение <see cref="T:Terrasoft.Core.DB.ActionsConfig"/>.</param>
            <param name="actionsConfig">Значение бита, которое необходимо проверить.</param>
            <returns><c>true</c>, если значение бита установлено, иначе <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.ActionsConfigUtilities.Set(Terrasoft.Core.DB.ActionsConfig,Terrasoft.Core.DB.ActionsConfig)">
            <summary>
            Устанавливает значение бита перечисления <see cref="T:Terrasoft.Core.DB.ActionsConfig"/>.
            </summary>
            <param name="source">Исходное значение <see cref="T:Terrasoft.Core.DB.ActionsConfig"/>.</param>
            <param name="actionsConfig">Значение <see cref="T:Terrasoft.Core.DB.ActionsConfig"/>, которое необходимо установить.</param>
            <returns>
            Возвращает новое значение с установленным битом перечисления <see cref="T:Terrasoft.Core.DB.ActionsConfig"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.ActionsConfigUtilities.Clear(Terrasoft.Core.DB.ActionsConfig,Terrasoft.Core.DB.ActionsConfig)">
            <summary>
            Сбрасывает значение бита перечисления <see cref="T:Terrasoft.Core.DB.ActionsConfig"/>.
            </summary>
            <param name="source">Исходное значение <see cref="T:Terrasoft.Core.DB.ActionsConfig"/>.</param>
            <param name="actionsConfig">Значение <see cref="T:Terrasoft.Core.DB.ActionsConfig"/>, которое необходимо сбросить.</param>
            <returns>Возвращает новое значение со сброшенным битом <see cref="T:Terrasoft.Core.DB.ActionsConfig"/>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Entities.IEntitySchemaComparer">
            <summary>
            Provides methods to compare schemas.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.IEntitySchemaComparer.IsEqualToDbStructure(Terrasoft.Core.Entities.EntitySchema)">
            <summary>
            Determines if schema structure is identical to corresponding database table structure.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaComparer">
            <summary>
            Provides methods to compare schemas.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaComparer.IsEqualToDbStructure(Terrasoft.Core.Entities.EntitySchema)">
            <summary>
            Determines if schema structure is identical to corresponding database table structure.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaManagerItemDescriptor">
            <summary>
            Дескриптор элемента менеджера схем объектов.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaManagerItemDescriptor.ReadMetaData(Terrasoft.Common.DataReader)">
            <summary>
            Выполняет десериализацию дескриптора.
            </summary>
            <param name="reader">
            Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется десериализация.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaManagerItemDescriptor.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию дескриптора.
            </summary>
            <param name="writer">
            Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого осуществляется сериализация.
            </param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaManagerItemDescriptor.MetaDataHash">
            <summary>
            Хэш метаданных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IAppSchedulerWraper.RemoveJob(System.String,System.String)">
            <summary>Removes target job from job group.</summary>
            <param name="jobName">Job name.</param>
            <param name="jobGroup">Job group name.</param>
            <returns><c>true</c>, if job <paramref name="jobName"/> succesfully removed from group 
            <paramref name="jobGroup"/>, else - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.IAppSchedulerWraper.CreateIntermediateTimerJob(System.String,System.String,System.String,System.String,System.String)">
            <summary>Creates job for intemediate business process timer element.</summary>
            <param name="jobName">Job name.</param>
            <param name="jobGroup">Job group name.</param>
            <param name="processElementUId">Process "Timer" element Id.</param>
            <param name="workspaceName">Workspace name for process context.</param>
            <param name="userName">User name for process context.</param>
        </member>
        <member name="M:Terrasoft.Core.IAppSchedulerWraper.ScheduleImmediateJob``1(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Plans a task for immediate one-time start of class.
            </summary>
            <typeparam name="T">Type of a task.</typeparam>
            <param name="jobGroup">The name of the group to which the task belongs.</param>
            <param name="workspaceName">Workspace in which class must be started.</param>
            <param name="userName">The user on whose behalf class will be started.</param>
            <param name="parameters">The parameters that will be passed to the class.</param>
            <param name="isSystemUser">Indicates system user.</param>
        </member>
        <member name="M:Terrasoft.Core.IAppSchedulerWraper.DoesJobExist(System.String,System.String)">
            <summary>Checks existance of job in target job group.</summary>
            <param name="jobName">Job name.</param>
            <param name="jobGroup">Job group name.</param>
            <returns><c>true</c>, if job <paramref name="jobName"/> exists in group
            <paramref name="jobGroup"/>, else - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.IAppSchedulerWraper.CreateClassJob(System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Creates the task for class execution.
            </summary>
            <param name="className">Class name.</param>
            <param name="jobGroup">The name of the group to which the task belongs.</param>
            <param name="workspaceName">Workspace in which class must be started.</param>
            <param name="userName">The user on whose behalf class will be started.</param>
            <param name="parameters">The parameters that will be passed to the class.</param>
            <param name="isSystemUser">Indicates system user.</param>
        </member>
        <member name="M:Terrasoft.Core.IAppSchedulerWraper.CreateProcessJob(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Creates the task for process execution.
            </summary>
            <param name="jobName">Job name.</param>
            <param name="processName">Process name.</param>
            <param name="jobGroup">The name of the group to which the task belongs.</param>
            <param name="workspaceName">Workspace in which class must be started.</param>
            <param name="userName">The user on whose behalf class will be started.</param>
            <param name="parameters">The parameters that will be passed to the class.</param>
            <param name="isSystemUser">Indicates system user.</param>
        </member>
        <member name="P:Terrasoft.Core.AuthData.ClaimList">
            <summary>
            Claim attributes list.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.UserLevelResource">
            <summary>
            Используется для получения ресурсов требующих работу с базой от имени пользователя, 
            проверку прав или наличие сессии </summary>
        </member>
        <member name="M:Terrasoft.Core.EntityResource.#ctor(Terrasoft.Core.UserConnection,System.String,System.Guid,System.Guid)">
            <summary>
            </summary>
            <param name="resourceSchemaIdentity"> Содержит либо имя схемы, либо UId схемы</param>
            <param name="resourceColumnUId"></param>
            <param name="resourceId"></param>
            <param name="userConnection"></param>
        </member>
        <member name="M:Terrasoft.Core.ICombinedSchemaGenerator.RegenerateIncludeDependencySources(System.Boolean)">
            <summary>
            Выполняет перегенерацию и сохраняет коды зависимых клиентских схем.
            </summary>
            <param name="needRefresh">Признак обновления менеджера. Необязательный параметр, значение по 
            умолчанию - <c>false</c>.</param>
            <remarks>
            Перегенерация выполняется для всех клиентских схем, у которых установлен признак "Включить коды зависимых 
            схем". Также выполняется перегенерация дескрипторов для всех клиентских схем и схем объектов.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.ICombinedSchemaGenerator.RegenerateCombinedSchemaDescriptors">
            <summary>
            Выполняет перегенерацию и сохраняет дескрипторы для всех клиентских схем и схем объектов.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.IIncludeDependencySourcesManager">
            <summary>
            Интерфейс менеджера комбинированных исходных кодов клиентских схем.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IIncludeDependencySourcesManager.ReloadData">
            <summary>
            Перезагружает список комбинированных исходных кодов клиентских схем (с зависимостями) из БД в кеш.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IIncludeDependencySourcesManager.GetSchemaBody(System.Guid,System.String)">
            <summary>
            Получает тело клиентской схемы с комбинированными исходными кодами (с зависимостями) из кеша.
            </summary>
            <param name="schemaUId">Идентификатор клиенской схемы.</param>
            <param name="cultureName">Название культуры.</param>
            <returns>Тело клиентской схемы с комбинированными исходными кодами (с зависимостями).</returns>
        </member>
        <member name="M:Terrasoft.Core.IIncludeDependencySourcesManager.GetSchemaHash(System.Guid,System.String)">
            <summary>
            Получает хеш клиентской схемы с комбинированными исходными кодами (с зависимостями) из кеша.
            </summary>
            <param name="schemaUId">Идентификатор клиенской схемы.</param>
            <param name="cultureName">Название культуры.</param>
            <returns>Хеш клиентской схемы с комбинированными исходными кодами (с зависимостями).</returns>
        </member>
        <member name="T:Terrasoft.Core.IncludeDependencySourcesManager">
            <summary>
            Класс менеджера комбинированных исходных кодов клиентских схем.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IncludeDependencySourcesManager.Instance(Terrasoft.Core.UserConnection,Terrasoft.Core.ICombinedSourceSchemaProvider)">
            <summary>
            Инициализатор единого экземпляра.
            </summary>
            <param name="userConnection">Пользовательское соединение.</param>
            <param name="provider">Провайдер комбинированных исходных кодов клиентских схем (с зависимостями).</param>
            <returns>Единый экземпляр менеджера.</returns>
        </member>
        <member name="M:Terrasoft.Core.IncludeDependencySourcesManager.ReloadData">
            <summary>
            Перезагружает список комбинированных исходных кодов клиентских схем (с зависимостями) из БД в кеш.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IncludeDependencySourcesManager.GetSchemaHash(System.Guid,System.String)">
            <summary>
            Получает хеш клиентской схемы с комбинированными исходными кодами (с зависимостями) из кеша.
            </summary>
            <param name="schemaUId">Идентификатор клиенской схемы.</param>
            <param name="cultureName">Название культуры.</param>
            <returns>Хеш клиентской схемы с комбинированными исходными кодами (с зависимостями).</returns>
        </member>
        <member name="M:Terrasoft.Core.IncludeDependencySourcesManager.GetSchemaBody(System.Guid,System.String)">
            <summary>
            Получает тело клиентской схемы с комбинированными исходными кодами (с зависимостями) из кеша.
            </summary>
            <param name="schemaUId">Идентификатор клиенской схемы.</param>
            <param name="cultureName">Название культуры.</param>
            <returns>Тело клиентской схемы с комбинированными исходными кодами (с зависимостями).</returns>
        </member>
        <member name="T:Terrasoft.Core.ISchemaMethod">
            <summary>
            Интерфейс схемы метода
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaMethod.Body">
            <summary>
            Тело метода
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaMethod.UseFlowEngineScriptVersion">
            <summary>
            Признак, указывающий на использование нового движка процессов
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaMethod.Name">
            <summary>
            Имя метода
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ISchemaMethod.UId">
            <summary>
            Уникальный идентификатор
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.ConfigurationSourceControlManager.#ctor(Terrasoft.Core.Packages.ISourceControlManager,Terrasoft.Core.Packages.BasePackageUriGenerator,Terrasoft.Core.Packages.ISourceControlAuthManager)">
            <summary>
            Инициализирует новый экземпляр класса
            <see cref="T:Terrasoft.Core.Packages.ConfigurationSourceControlManager"/> с заданными параметрами.
            </summary>
            <param name="sourceControlManager">Менеджер для работы с клиентом системы контроля версий.</param>
            <param name="uriGenerator">Генератор путей к хранилищу системы контроля версий.</param>
            <param name="authManager">Менеджер для работы с аутентификацией в хранилище.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ConfigurationSourceControlManager.CommitPackage(Terrasoft.Core.Configuration.SysPackage,System.String,System.String,Terrasoft.Common.SourceControlSaveType)">
            <summary>
            Фиксирует пакет в хранилище.
            </summary>
            <param name="package">Пакет.</param>
            <param name="packagesCopyPath">Путь к рабочей копии пакета.</param>
            <param name="commitMessage">Сообщение при фиксации.</param>
            <param name="sourceControlSaveType">Тип фиксации.</param>
            <returns>Номер ревизии.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ConfigurationSourceControlManager.CommitPackage(Terrasoft.Core.Configuration.SysPackage,Terrasoft.Core.Packages.Package,System.String,System.String,Terrasoft.Common.SourceControlSaveType)">
            <summary>
            Фиксирует пакет в хранилище.
            </summary>
            <param name="package">Пакет.</param>
            <param name="packageDescriptor">packageDescriptor</param>
            <param name="packagesCopyPath">Путь к рабочей копии пакета.</param>
            <param name="commitMessage">Сообщение при фиксации.</param>
            <param name="sourceControlSaveType">Тип фиксации.</param>
            <returns>Номер ревизии.</returns>
        </member>
        <member name="T:Terrasoft.Core.IMetaDataSerializer">
            <summary>
            Интерфейс сериализатора метаданных схем.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.IMetaDataSerializer.Serialize(Terrasoft.Core.MetaSchema,System.IO.TextWriter)">
            <summary>
            Сериализует метаданные схемы <paramref name="schema"/>
            с помощью <paramref name="textWriter"/>.
            </summary>
            <param name="schema">Метаданные схемы.</param>
            <param name="textWriter">Экземпляр <see cref="T:System.IO.TextWriter"/>, с помощью которого выполняется
            сериализация.</param>
        </member>
        <member name="M:Terrasoft.Core.IMetaDataSerializer.Serialize(Terrasoft.Core.MetaSchema,System.IO.Stream)">
            <summary>
            Сериализует метаданные схемы <paramref name = "schema"/> в поток <paramref name = "stream"/>.
            </summary>
            <param name="schema">Метаданные схемы.</param>
            <param name="stream">Поток.</param>
        </member>
        <member name="M:Terrasoft.Core.IMetaDataSerializer.Serialize(System.Collections.Generic.IEnumerable{Terrasoft.Core.MetaSchema},System.IO.TextWriter)">
            <summary>
            Сериализует метаданные списка схем <paramref name="schemaList"/>
            с помощью <paramref name="textWriter"/>.
            </summary>
            <param name="schemaList">Список метаданных схем для сериализации.</param>
            <param name="textWriter">Экземпляр <see cref="T:System.IO.TextWriter"/>, с помощью которого выполняется
            сериализация.</param>
        </member>
        <member name="M:Terrasoft.Core.IMetaDataSerializer.Serialize(System.Collections.Generic.IEnumerable{Terrasoft.Core.MetaSchema},System.IO.Stream)">
            <summary>
            Сериализует метаданные списка схем <paramref name = "schemaList"/> в поток <paramref name = "stream"/>.
            </summary>
            <param name="schemaList">Список метаданных схем для сериализации.</param>
            <param name="stream">Поток.</param>
        </member>
        <member name="M:Terrasoft.Core.IMetaDataSerializer.Deserialize(System.IO.TextReader)">
            <summary>
            Десериализует метаданные списка схем с помощью <paramref name="input"/>.
            </summary>
            <param name="input">Экземпляр <see cref="T:System.IO.TextReader"/>, с помощью которого выполняется
            десериализация.</param>
            <returns>Список десериализованных элеметов менеджера схем.</returns>
        </member>
        <member name="M:Terrasoft.Core.IMetaDataSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Десериализует метаданные списка схем из потока <paramref name = "input"/>.
            </summary>
            <param name="input">Поток.</param>
            <returns>Список десериализованных элеметов менеджера схем.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.ISvnItemStatus">
            <summary>
            Provides SVN item properties.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.ISvnItemStatus.NodeKind">
            <summary>
            Item SVN kind.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.ISvnItemStatus.LocalContentStatus">
            <summary>
            Item SVN status.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.ISvnItemStatus.Path">
            <summary>
            Relative path to item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.ISvnItemStatus.FullPath">
            <summary>
            Absolute path to item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.ISvnItemStatus.Conflicted">
            <summary>
            Indicates whether an item is conflicted.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.SvnItemStatus">
            <summary>
            Provides SVN item properties.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnItemStatus.#ctor(SharpSvn.SvnStatusEventArgs)">
            <summary>
            Initialize an instance of <see cref="T:Terrasoft.Core.Packages.SvnItemStatus"/>.
            </summary>
            <param name="status">Instance of <see cref="T:SharpSvn.SvnStatusEventArgs"/></param>
        </member>
        <member name="P:Terrasoft.Core.Packages.SvnItemStatus.NodeKind">
            <summary>
            Item SVN kind.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SvnItemStatus.LocalContentStatus">
            <summary>
            Item SVN status.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SvnItemStatus.Path">
            <summary>
            Relative path to item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SvnItemStatus.FullPath">
            <summary>
            Absolute path to item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SvnItemStatus.Conflicted">
            <summary>
            Indicates whether an item is conflicted.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.PersistentStore">
            <summary>Постоянное хранилище данных.</summary>
        </member>
        <member name="T:Terrasoft.Core.Store.IBaseStore">
            <summary>Базовый интерфейс для постоянных хранилищ данных и кэшей.</summary>
        </member>
        <member name="M:Terrasoft.Core.Store.IBaseStore.Initialize(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Инициализирует хранилище заданными конфигурационными параметрами.
            </summary>
            <param name="parameters">Параметры для конфигурирования хранилища.</param>
        </member>
        <member name="M:Terrasoft.Core.Store.IBaseStore.Remove(System.String)">
            <summary>Удаляет элемент с заданным ключом из хранилища.</summary>
            <param name="key">Ключ элемента.</param>
        </member>
        <member name="P:Terrasoft.Core.Store.IBaseStore.Item(System.String)">
            <summary>Получает или устанавливает элемент хранилища по заданному ключу.</summary>
            <param name="key">Ключ элемента.</param>
            <returns>Значение элемента с ключом <paramref name="key"/>либо <c>null</c>, если значение не найдено.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.#ctor(Terrasoft.Core.Store.ICacheStore,Terrasoft.Core.PersistentStoreDBProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.PersistentStore"/> class.
            </summary>
            <param name="cacheStore">The cache store.</param>
            <param name="persistentStoreDBProvider">The persistent store database provider.</param>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.#ctor(System.Type,Terrasoft.Core.UserConnection,System.String,Terrasoft.Core.Store.ICacheStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.PersistentStore"/> class.
            </summary>
            <param name="storage">The instance of the database storage.
            Should be the instance of the class <see cref="T:Terrasoft.Core.Configuration.SysPersistentStore"/>.</param>
            <param name="userConnection">The user connection</param>
            <param name="storageKey">The key for grouping in the Redis.</param>
            <param name="cacheStore">The instance of the cache store.</param>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Storage is not an instance of the class
            <see cref="T:Terrasoft.Core.Configuration.SysPersistentStore"/> or one of its childs.</exception>
            <exception cref="T:System.TypeInitializationException">The user connection is not initialized.</exception>
        </member>
        <member name="F:Terrasoft.Core.PersistentStore._cacheStore">
            <summary>Получает или устанавливает хранилище для кеширования данных.</summary>
            <returns>Хранилище для кеширования данных.</returns>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.Initialize(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Не используется для хранилища.</summary>
            <param name="parameters">Параметры для конфигурирования хранилища.</param>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.RemoveGroup(System.String)">
            <summary>Удаляет из хранилища записи из группы.</summary>
            <param name="groupKey">Группирующий ключ.</param>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.Remove(System.String)">
            <summary>Удаляет из хранилища запись по ключу.</summary>
            <param name="key">Ключ.</param>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.Remove(System.String,System.String)">
            <summary>Удаляет из хранилища запись по ключу и группирующему ключу.</summary>
            <param name="key">Ключ.</param>
            <param name="groupKey">Группирующий ключ.</param>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.Remove(System.String,System.Guid)">
            <summary>Удаляет из хранилища запись по ключу и группирующему ключу.</summary>
            <param name="key">Ключ.</param>
            <param name="groupKey">Группирующий ключ.</param>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.GetValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Получает перечень значений по списку ключей.</summary>
            <param name="keys">Список ключей.</param>
            <returns>Возвращает словать ключей-значений.</returns>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.GetValue(System.String,System.String)">
            <summary>Get the value by the given key and group key.</summary>
            <param name="key">The key.</param>
            <param name="groupKey">The group key.</param>
            <returns>The result value.</returns>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.GetValue(System.String,System.String,System.Object)">
            <summary>Получает значение по ключу и группирующему ключу.</summary>
            <param name="key">Ключ.</param>
            <param name="groupKey">Группирующий ключ.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Возвращает значение.</returns>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.GetValue(System.String,System.Guid,System.Object)">
            <summary>Получает значение по ключу и группирующему ключу.</summary>
            <param name="key">Ключ.</param>
            <param name="groupKey">Группирующий ключ.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Возвращает значение.</returns>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.GetValue``1(System.String,System.String)">
            <summary>Получает типизированное значение по ключу и группирующему ключу.</summary>
            <typeparam name="T">Тип для приведения значения.</typeparam>
            <param name="key">Ключ.</param>
            <param name="groupKey">Группирующий ключ.</param>
            <returns>Возвращает типизированное значение.</returns>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.GetValue``1(System.String,System.Guid)">
            <summary>Получает типизированное значение по ключу и группирующему ключу.</summary>
            <typeparam name="T">Тип для приведения значения.</typeparam>
            <param name="key">Ключ.</param>
            <param name="groupKey">Группирующий ключ.</param>
            <returns>Возвращает типизированное значение.</returns>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.GetValue``1(System.String,System.String,``0)">
            <summary>Получает типизированное значение по ключу и группирующему ключу.</summary>
            <typeparam name="T">Тип для приведения значения.</typeparam>
            <param name="key">Ключ.</param>
            <param name="groupKey">Группирующий ключ.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Возвращает типизированное значение.</returns>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.GetValue``1(System.String,System.Guid,``0)">
            <summary>Получает типизированное значение по ключу и группирующему ключу.</summary>
            <typeparam name="T">Тип для приведения значения.</typeparam>
            <param name="key">Ключ.</param>
            <param name="groupKey">Группирующий ключ.</param>
            <param name="defaultValue">Значение по умолчанию.</param>
            <returns>Возвращает типизированное значение.</returns>
        </member>
        <member name="M:Terrasoft.Core.PersistentStore.SetValue(System.String,System.Object,System.String)">
            <summary>Устанавливает значение по ключу и группирующему ключу.</summary>
            <param name="key">Ключ.</param>
            <param name="value">Значение.</param>
            <param name="groupKey">Группирующий ключ.</param>
        </member>
        <member name="P:Terrasoft.Core.PersistentStore.Item(System.String)">
            <summary>Получает или устанавливает элемент хранилища по заданному ключу.</summary>
            <param name="key">Ключ элемента.</param>
            <returns>Значение элемента с ключом <paramref name="key"/>либо <c>null</c>, если значение не найдено.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.PersistentStore.Item(System.String,System.String)">
            <summary>Получает или устанавливает элемент хранилища по заданному ключу с учетом группы.</summary>
            <param name="key">Ключ элемента.</param>
            <param name="groupKey">Группирующий ключ.</param>
            <returns>Значение элемента с ключом <paramref name="key"/> и группой <paramref name="groupKey"/> 
            либо <c>null</c>, если значение не найдено.</returns>
        </member>
        <member name="P:Terrasoft.Core.PersistentStore.Item(System.String,System.Guid)">
            <summary>Получает или устанавливает элемент хранилища по заданному ключу с учетом группы.</summary>
            <param name="key">Ключ элемента.</param>
            <param name="groupKey">Группирующий ключ.</param>
            <returns>Значение элемента с ключом <paramref name="key"/> и группой <paramref name="groupKey"/> 
            либо <c>null</c>, если значение не найдено.</returns>
        </member>
        <member name="T:Terrasoft.Core.PersistentStoreDBProvider">
            <summary>Провайдер БД постоянного хранилища данных.</summary>
        </member>
        <member name="M:Terrasoft.Core.PersistentStoreDBProvider.#ctor(Terrasoft.Core.UserConnection,System.String)">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.PersistentStoreDBProvider"/>.</summary>
            <param name="connection">Пользовательское соединение.</param>
            <param name="storageName">Имя хранилища.</param>
        </member>
        <member name="M:Terrasoft.Core.PersistentStoreDBProvider.Get(System.String,System.String)">
            <summary>Get the record value from the database.</summary>
            <param name="key">The key.</param>
            <param name="groupKey">The group key.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Terrasoft.Core.PersistentStoreDBProvider.GetGroup(System.String)">
            <summary>Get the items of the group from the database.</summary>
            <param name="groupKey">The group key.</param>
            <returns>The collection of the key/values.</returns>
        </member>
        <member name="M:Terrasoft.Core.PersistentStoreDBProvider.Add(System.String,System.Object,System.String)">
            <summary>Adds the record to the database.</summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="groupKey">The group key.</param>
        </member>
        <member name="M:Terrasoft.Core.PersistentStoreDBProvider.Remove(System.String,System.String)">
            <summary>Удаляет запись из БД по ключу во всех группах или ко ключу в указанной группе.</summary>
            <param name="key">Ключ.</param>
            <param name="groupKey">Группирующий ключ.</param>
        </member>
        <member name="M:Terrasoft.Core.PersistentStoreDBProvider.RemoveGroup(System.String)">
            <summary>Удаляет группу из БД.</summary>
            <param name="groupKey">Группирующий ключ.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessDataSourceFiltersConverter">
            <summary>
            Интерфейс для конвертера источников данных в элементах процессов.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessDataSourceFiltersConverter.ConvertToProcessDataSourceFilters(Terrasoft.Core.Process.ProcessActivity,System.Guid,System.String)">
            <summary>
            Конвертирует набор фильтров в формат процесса.
            </summary>
            <param name="processElement">Элемент процесса.</param>
            <param name="entitySchemaUId">Идентификатор схемы объекта.</param>
            <param name="dataSourceFilters">Набор фильтров.</param>
            <returns>Набор фильтров в формате процесса.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessParameterInfoComposer">
            <summary>
            Представляет интерфейс, ответственный за коррекцию таблицы связей процесса в случае, когда его схема была
            изменена после запуска.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessParameterInfoComposer.GetComposedParameterMappings(System.Guid,System.Collections.Generic.Dictionary{System.String,Terrasoft.Core.Process.ProcessParameterInfo})">
            <summary>
            Выполняет слияние таблицы связей запущенного процесса с указанным шаблонным набором связей параметров.
            </summary>
            <param name="processUId">Идентификатор процесса.</param>
            <param name="parameterMappings">Таблица связей параметров схемы процесса.</param>
            <returns>Объединенную таблицу связей с дополнениями из шаблона и изменениями, внесенными в ходе исполнения
            процесса. </returns>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessModel">
            <summary>
            Provides access to process instance methods.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessModel.GetScriptTaskMethod(System.String)">
            <summary>
            Returns a reference to an instance of the method by its name.
            </summary>
            <param name="methodName">Method name.</param>
            <returns>Delegate with a certain method signature.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowStartMessage">
            <summary>
            Представляет элемент "Стартовое сообщение" бизнес-процесса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowIntermediateMessageEvent">
            <summary>
            Представляет базовый класс элементов бизнес-процесса, генерирующих и обрабатывающих сообщения.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowElement">
            <summary>
            Представляет элемент бизнес-процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowElement.#ctor(Terrasoft.Core.Process.FlowSchema,System.String)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowElement"/>, используя схему процесса <see cref="P:Terrasoft.Core.Process.FlowElement.FlowSchema"/>
            и BPMN наименование элемента бизнес-процесса.
            </summary>
            <param name="flowSchema">Схема процесса.</param>
            <param name="bpmnElementName">BPMN наименование элемента бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowElement.SubscribeOnVisited(System.Func{Terrasoft.Core.Process.FlowElement,System.Collections.Generic.IEnumerable{Terrasoft.Core.Process.FlowElement}})">
            <summary>
            Подписывает экземпляр <see cref="T:Terrasoft.Core.Process.FlowElement"/> на событие "посещен".
            </summary>
            <param name="defaultHandler">Метод по умолчанию для вызова события "посещен".</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowElement.Equals(System.Object)">
            <summary>
            Определяет, равны ли данный экземпляр <see cref="T:Terrasoft.Core.Process.FlowElement"/> и заданный экземпляр 
            <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">Экземпляр <see cref="T:System.Object"/>, который сравнивается с текущим экземпляром 
            <see cref="T:Terrasoft.Core.Process.FlowElement"/>.</param>
            <returns><c>true</c>, если сравниваемые объекты идентичны; иначе — <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowElement.GetHashCode">
            <summary>
            Возвращает хэш-код объекта.
            </summary>
            <returns>Хэш-код объекта.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowElement.WriteProperties(Terrasoft.Common.DataWriter)">
            <summary>
            Записывает свойства бизнес-процесса с помощью заданного экземпляра <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="dataWriter">Экземпляр класса для записи свойств.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowElement.ReadProperties(Terrasoft.Common.DataReader)">
            <summary>
            Читает свойства бизнес-процесса с помощью заданного экземпляра <see cref="T:Terrasoft.Common.DataReader"/>.
            </summary>
            <param name="dataReader">Экземпляр класса для чтения свойств.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowElement.Accept(Terrasoft.Core.Process.FlowVisitor,Terrasoft.Core.Process.FlowElement)">
            <summary>
            Обрабатывает элемент бизнес-процесса.
            </summary>
            <param name="visitor">Экземпляр класса <see cref="T:Terrasoft.Core.Process.FlowVisitor"/>, который отвечает за переход между
            элементами процесса.</param>
            <param name="previousFlowElement">Не используется.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowElement.Clone">
            <summary>
            Создает копию экземпляра элемента бизнес-процесса.
            </summary>
            <returns>Копия экземпляра <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowElement.UseClonedInstance">
            <summary>
            Определяет, нужно ли схеме при инстанцировании элемента клонировать его.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowElement.UId">
            <summary>
            Возвращает и устанавливает идентификатор элемента бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowElement.Name">
            <summary>
            Возвращает и устанавливает наименование элемента бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowElement.BpmnElementName">
            <summary>
            Возвращает BPMN наименование элемента бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowElement.FlowSchema">
            <summary>
            Возвращает экземпляр схемы бизнес-процесса <see cref="P:Terrasoft.Core.Process.FlowElement.FlowSchema"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowElement.ParameterStore">
            <summary>
            Хранилище параметров бизнес-процесса <see cref="T:Terrasoft.Core.Process.IProcessParameterStore"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowElement.FlowService">
            <summary>
            Служба обмена сообщений <see cref="P:Terrasoft.Core.Process.FlowElement.FlowService"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowElement.ParameterPathes">
            <summary>
            Перечень путей к значениям параметров процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowElement.IsUsedInEventSubProcess">
            <summary>
            Признак, используется ли в событийном подпроцессе.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Process.FlowElement.Visited">
            <summary>
            Событие, возникающее когда элемент был обработан.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowIntermediateMessageEvent.#ctor(Terrasoft.Core.Process.FlowIntermediateMessageEvent)">
            <summary>
            Создает копию экземпляра <see cref="T:Terrasoft.Core.Process.FlowIntermediateMessageEvent"/>.
            </summary>
            <param name="flowElement">"Экземпляр <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowIntermediateMessageEvent.#ctor(Terrasoft.Core.Process.FlowSchema,System.String)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowIntermediateMessageEvent"/>, используя схему процесса
            <see cref="T:Terrasoft.Core.Process.FlowSchema"/>.
            </summary>
            <param name="flowSchema"></param>
            <param name="bpmnElementName">Имя типа элемента процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowIntermediateMessageEvent.WriteProperties(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет запись свойств.
            </summary>
            <param name="dataWriter">
            Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого осуществляется запись свойств.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowIntermediateMessageEvent.ReadProperties(Terrasoft.Common.DataReader)">
            <summary>
            Выполняет чтение свойств.
            </summary>
            <param name="dataReader">
            Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется вычитка свойств.
            </param>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowIntermediateMessageEvent.Message">
            <summary>
            Текст cообщения.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowStartMessage.#ctor(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowStartMessage"/>, используя схему процесса
            <see cref="T:Terrasoft.Core.Process.FlowSchema"/>.
            </summary>
            <param name="flowSchema">"Экземпляр <see cref="T:Terrasoft.Core.Process.FlowSchema"/> схемы бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowStartMessage.Clone">
            <summary>
            Создает копию экземпляра элемента бизнес-процесса.
            </summary>
            <returns>Копия экземпляра <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessValidationResult">
            <summary>
            Represents validation info about the process schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessValidationResult.HasErrors">
            <summary>
            Indicates that the process schema is valid.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessValidationResult.IsInterpretable">
            <summary>
            Indicates that the process schema can be interpreted.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessValidationResult.Message">
            <summary>
            Text message.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessValidationResult.ExecutionMode">
            <summary>
            Execution mode of the process schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessValidationResult.ValidatorInfo">
            <summary>
            The list of the process properties that don't allow it to be interpreted.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessValidationResult.Results">
            <summary>
            The results of the process schema validation.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.LocalizableParameterValuesJsonConverterBehavior">
            <summary>
            Behavior of Json converter <see cref="T:Newtonsoft.Json.JsonConverter"/> for dictionary with partially localizable values
            of process parameters.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.LocalizableParameterValuesJsonConverterBehavior.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.LocalizableParameterValuesJsonConverterBehavior.IgnoreLczValues">
            <summary>
            Ignore localizable values.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.LocalizableParameterValue">
            <summary>
            Class represents partially localizable value of the process parameter.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValue.#ctor(Terrasoft.Common.LocalizableString)">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.Process.LocalizableParameterValue"/> with the specified
            parameter list.
            </summary>
            <param name="localizableString">Localizable value of the parameter.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValue.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.Process.LocalizableParameterValue"/> with the specified
            parameter list.
            </summary>
            <param name="value">Value of the parameter.</param>
            <param name="isLocalizable">Flag that indicates whether the value is localizable.</param>
        </member>
        <member name="F:Terrasoft.Core.Process.LocalizableParameterValue._localizableValue">
            <summary>
            Returns localizable value.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.LocalizableParameterValue.Value">
            <summary>
            Returns value of the parameter.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.LocalizableParameterValue.IsLocalizable">
            <summary>
            Flag that indicates whether the value is localizable.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.LocalizableParameterValues">
            <summary>
            Dictionary of partially localizable values of process parameters.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValues.#ctor">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.Process.LocalizableParameterValues"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValues.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.Process.LocalizableParameterValues"/>.
            </summary>
            <param name="itemUId">Id of the localizable parameter value list.</param>
        </member>
        <member name="F:Terrasoft.Core.Process.LocalizableParameterValues._itemUId">
            <summary>
            Returns Id of the localizable parameter value list.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValues.Add(System.String,System.String,System.Boolean)">
            <summary>
            Adds value to the localizable parameter value list.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value of the <see cref="T:System.String"/> type.</param>
            <param name="isLocalizable">Flag that indicates whether the value is localizable.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValues.Add(System.String,System.Object,System.Boolean)">
            <summary>
            Adds value to the localizable parameter value list.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value of the <see cref="T:System.Object"/> type.</param>
            <param name="isLocalizable">Flag that indicates whether the value is localizable.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValues.Add(System.Collections.Generic.KeyValuePair{System.String,Terrasoft.Core.Process.LocalizableParameterValue})">
            <summary>
            Adds value to the localizable parameter value list.
            </summary>
            <param name="item">Structure with specified key and value.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.LocalizableParameterValuesJsonConverter">
            <summary>
            Class represents Json converter of the dictionary of the partially localizable values of process parameters.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Generates Json.
            </summary>
            <param name="writer">Json writer.</param>
            <param name="value">Value of the <see cref="T:System.Object"/> type.</param>
            <param name="serializer">Json serializer.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Returns deserializd object.
            </summary>
            <param name="reader">Json reader.</param>
            <param name="objectType">Specified data type.</param>
            <param name="existingValue">Value of the <see cref="T:System.Object"/> type.</param>
            <param name="serializer">Json serializer.</param>
            <returns>Deserializd object.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether the specified type can be converted to the specified data type.
            </summary>
            <param name="objectType">Specified data type.</param>
            <returns><c>true</c> if the specified data can be converted to the specified data type;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.LocalizableParameterValuesList">
            <summary>
            List of partially localizable values of process parameters.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesList.#ctor">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.Process.LocalizableParameterValuesList"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesList.DeserializeData(System.String)">
            <summary>Deserializes the Json string.
            </summary>
            <param name="source">Json string.</param>
            <returns>The object <see cref="T:Terrasoft.Core.Process.LocalizableParameterValuesList"/> being deserialized.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesList.GetFrom77FormatList(System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.Object}},System.String[])">
            <summary>
            Converts the data which are used in version 7.7 to the list of the partially localizable values.
            </summary>
            <param name="source">The data format is used in version 7.7.</param>
            <param name="localizableItems">Keys of the localizable values.</param>
            <returns>The object <see cref="T:Terrasoft.Core.Process.LocalizableParameterValuesList"/> being converted.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesList.DeserializeFrom77FormatData(System.String,System.String[])">
            <summary>
            Deserializes the data which are used in version 7.7.
            </summary>
            <param name="source">Serialized data in version 7.7.</param>
            <param name="localizableItems">Keys of the localizable values.</param>
            <returns>The object <see cref="T:Terrasoft.Core.Process.LocalizableParameterValuesList"/> being deserialized.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesList.GetSerializedItems">
            <summary>
            Returns all items in serialized state.
            </summary>
            <returns>All items in serialized state.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesList.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesList.SetupDefaultLocalizableValues(System.String,System.String)">
            <summary>
            Sets default localizable value.
            </summary>
            <param name="recordName">Key of the localizable value.</param>
            <param name="defaultValue">Default value.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesList.GetLocalizableItems">
            <summary>
            Returns list values that are localizable.
            </summary>
            <returns>Instance of the type <see cref="T:Terrasoft.Core.Process.LocalizableParameterValuesList"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesList.GetSerializedMetaDataItems">
            <summary>
            Returns serialized list values that are not localizable.
            </summary>
            <returns>Serialized list values that are not localizable.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesList.To77FormatList">
            <summary>
            Converts the data which are used in version 7.7.
            </summary>
            <returns>The data which are used in version 7.7.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesList.InitializeLocalizableValues(Terrasoft.Common.IResourceStorage,System.String,System.String,System.Boolean)">
            <summary>
            Initializes localizable values.
            </summary>
            <param name="storage">Resource repository.</param>
            <param name="resourceManagerName">Name of the resource manager.</param>
            <param name="resourceGroupName">Resource group name.</param>
            <param name="resetCachedValues">Determines that it can reset cached values.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesList.LoadLocalizableValues">
            <summary>
            Loads localizable values.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.LocalizableParameterValuesList.GetLocalizableValues(System.Collections.Generic.ICollection{Terrasoft.Common.LocalizableValue})">
            <summary>
            Fills out collection of the localizable values.
            </summary>
            <param name="values">Collection of the localizable values.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessEngineStrategy">
            <summary>
            It is a family of algorithms that determine the behavior of a <see cref="T:Terrasoft.Core.ProcessEngine"/> instance.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessEngineStrategy.GetProcessActivityStatus">
            <summary>
            Algorithm returns a list of key/value pairs, where key is the state of activity,
            and the value is the state Id.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessEngineStrategy.CompleteExecuting">
            <summary>
            Algorithm continues executing process elements.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessEngineStrategy.RemoveProcessListener">
            <summary>
            Algorithm removes process listener.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessEngineStrategy.AddProcessListener">
            <summary>
            Algorithm adds process listener.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessEngineStrategy.CreateProcessExecutor">
            <summary>
            Delegate that creates the process executor.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessEngineStrategy.CreateProcessRunnerFactory">
            <summary>
            Delegate that creates the process runner factory.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessEngineStrategy.GetProcessServiceProvider">
            <summary>
            Delegate that gets the process service provider.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessEngineStrategy.CreateDcmRunner">
            <summary>
            Delegate that gets the dcm runner.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessFlowElementStrategy">
            <summary>
            Представляет семейство алгоритмов, которые переопределяют поведение экземпляра <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/>.
            <see cref="T:Terrasoft.Core.Process.ProcessComponentSet"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessFlowElementStrategy.GetDBExecutor">
            <summary>
            Возвращает экземпляр исполнителя запросов к БД.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ExecutionMode">
            <summary>
            Режимы исполнения схемы бизнес-процесса.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.ExecutionMode.Compile">
            <summary>
            Режим исполнения, который требует генерации и компиляции исходного кода.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.ExecutionMode.Interpretable">
            <summary>
            Режим исполнения, который не требует генерации и компиляции исходного кода.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.ExecutionMode.CompileInterpretable">
            <summary>
            Режим исполнения, который требует генерации и компиляции исходного кода только для методов процесса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessValidationResult">
            <summary>
            Представляет результаты анализа на возможность интерпретации схемы бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessValidationResult.HasErrors">
            <summary>
            Indicates that the process schema is invalid.
            </summary>
            <value>
            <c>true</c> if the process schema instance is invalid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessValidationResult.IsInterpretable">
            <summary>
            Возвращает признак, интерпретируемый процесс или нет.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessValidationResult.ValidatorInfo">
            <summary>
            Возвращает список свойств процесса, которые требуют компиляции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessValidationResult.Message">
            <summary>
            Текстовое сообщение.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessValidationResult.ExecutionMode">
            <summary>
            Режимы исполнения схемы бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessValidationResult.Results">
            <summary>
            Результаты валидации схемы бизнес-процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.OperationLog.OperationLogger.GetLookupSettingsDisplayValue(Terrasoft.Core.UserConnection,Terrasoft.Core.Configuration.SysSettings,System.Guid)">
            <summary>
            Получает значение для отображения системной настройки с типом Справочник.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.OperationLog.OperationLogger.LogUserAdd(Terrasoft.Core.UserConnection,System.String)">
            <summary>
            Logs user add operation.
            </summary>
            <param name="userConnection">Instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="userName">User name.</param>
        </member>
        <member name="M:Terrasoft.Core.OperationLog.OperationLogger.LogUserEdit(Terrasoft.Core.UserConnection,System.String,System.Collections.Generic.IEnumerable{Terrasoft.Core.Entities.EntityColumnValue})">
            <summary>
            Logs user edit operation.
            </summary>
            <param name="userConnection">Instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="userName">User name.</param>
            <param name="columnValues">Modified column values collection.</param>
        </member>
        <member name="M:Terrasoft.Core.OperationLog.OperationLogger.LogUserDelete(Terrasoft.Core.UserConnection,System.String)">
            <summary>
            Logs user delete operation.
            </summary>
            <param name="userConnection">Instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="userName">User name.</param>
        </member>
        <member name="M:Terrasoft.Core.OperationLog.OperationLogger.LogAdminUnitAdd(Terrasoft.Core.UserConnection,System.String)">
            <summary>
            Logs business unit add operation.
            </summary>
            <param name="userConnection">Instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="adminUnitName">Business unit name.</param>
        </member>
        <member name="M:Terrasoft.Core.OperationLog.OperationLogger.LogAdminUnitEdit(Terrasoft.Core.UserConnection,System.String,System.Collections.Generic.IEnumerable{Terrasoft.Core.Entities.EntityColumnValue})">
            <summary>
            Logs business unit edit operation.
            </summary>
            <param name="userConnection">Instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="adminUnitName">Business unit name.</param>
            <param name="columnValues">Modified column values collection.</param>
        </member>
        <member name="M:Terrasoft.Core.OperationLog.OperationLogger.LogAdminUnitDelete(Terrasoft.Core.UserConnection,System.String)">
            <summary>
            Logs business unit delete operation.
            </summary>
            <param name="userConnection">Instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="adminUnitName">Business unit name.</param>
        </member>
        <member name="M:Terrasoft.Core.OperationLog.OperationLogger.LogUserRoleAdd(Terrasoft.Core.UserConnection,System.Guid,System.Guid)">
            <summary>
            Logs adding user to role operation.
            </summary>
            <param name="userConnection">Instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="userId">User Id.</param>
            <param name="roleId">Role Id.</param>
        </member>
        <member name="M:Terrasoft.Core.OperationLog.OperationLogger.LogUserRoleDelete(Terrasoft.Core.UserConnection,System.Guid,System.Guid)">
            <summary>
            Logs exclusion user from role operation.
            </summary>
            <param name="userConnection">Instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="userId">User Id.</param>
            <param name="roleId">Role Id.</param>
        </member>
        <member name="M:Terrasoft.Core.OperationLog.OperationLogger.LogUserLoginError(Terrasoft.Core.UserConnection,System.String,System.String,System.String)">
            <summary>
            Logs user authorization denial with provided <paramref name="exceptionMessage"/>.
            </summary>
            <param name="userConnection">Instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="userName">User name.</param>
            <param name="clientIP">IP address.</param>
            <param name="exceptionMessage">Message of exception that caused authorization denial.</param>
        </member>
        <member name="M:Terrasoft.Core.OperationLog.OperationLogger.LogUserLoginError(Terrasoft.Core.UserConnection,System.String,System.String,System.Exception)">
            <summary>
            Logs user authorization denial with information provided by <paramref name="exception"/>.
            </summary>
            <param name="userConnection">Instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="userName">User name.</param>
            <param name="clientIP">IP address.</param>
            <param name="exception">Exception that caused authorization denial.</param>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysSSPEntitySchemaAccessList">
            <summary>
            Список доступа пользователей портала к объектам.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSSPEntitySchemaAccessList.EntitySchemaUId">
            <summary>
            Идентификатор объекта.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.ClientUnitSchemaType">
            <summary>Type of client unit schema.</summary>
        </member>
        <member name="F:Terrasoft.Core.ClientUnitSchemaType.None">
            <summary>None</summary>
        </member>
        <member name="F:Terrasoft.Core.ClientUnitSchemaType.Module">
            <summary>Module</summary>
        </member>
        <member name="F:Terrasoft.Core.ClientUnitSchemaType.EditViewModelSchema">
            <summary>Edit page ViewModel schema.</summary>
        </member>
        <member name="F:Terrasoft.Core.ClientUnitSchemaType.ModuleViewModelSchema">
            <summary>Module ViewModel schema.</summary>
        </member>
        <member name="F:Terrasoft.Core.ClientUnitSchemaType.DetailViewModelSchema">
            <summary>Detail ViewModel schema.</summary>
        </member>
        <member name="F:Terrasoft.Core.ClientUnitSchemaType.GridDetailViewModelSchema">
            <summary>View model schema of the detail with editable list.</summary>
        </member>
        <member name="F:Terrasoft.Core.ClientUnitSchemaType.EditControlsDetailViewModelSchema">
            <summary>ViewModel schema of the detail with edit fields.</summary>
        </member>
        <member name="F:Terrasoft.Core.ClientUnitSchemaType.UnitTestModule">
            <summary>Schema of the unit-test module.</summary>
        </member>
        <member name="T:Terrasoft.Core.ClientUnitSchemaDependency">
            <summary>
            Schema dependency.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaDependency.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ClientUnitSchemaDependency" /> 
            class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaDependency.#ctor(Terrasoft.Core.ClientUnitSchemaDependency)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ClientUnitSchemaDependency" /> 
            class that is a clone of the specified index.
            </summary>
            <param name="source">Dependency whose clone is being created.</param>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaDependency.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Reads the values of schema dependency properties from metadata, 
            using the specified <see cref="T:Terrasoft.Common.DataReader" />.
            </summary>
            <param name="reader">The <see cref="T:Terrasoft.Common.DataReader" /> 
            instance used to read metadata.</param>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaDependency.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes the metadata of the schema dependency, using the specified 
            <see cref="T:Terrasoft.Common.DataWriter" /> instance.
            </summary>
            <param name="writer">The <see cref="T:Terrasoft.Common.DataWriter" /> 
            instance used for writing the metadata of the dependency.</param>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaDependency.Clone">
            <summary>
            Returns the clone of the current schema dependency.
            </summary>
            <returns>The clone of the current schema dependency.</returns>
        </member>
        <member name="P:Terrasoft.Core.ClientUnitSchemaDependency.SchemaUId">
            <summary>
            Id of the schema, which the current <see cref="T:Terrasoft.Core.ClientUnitSchema" /> depends on.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.ClientUnitSchemaDependencyCollection">
            <summary>
            Provides methods for working with collection of schema dependencies.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaDependencyCollection.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Terrasoft.Core.ClientUnitSchemaDependencyCollection" /> 
            class that is a clone of the specified collection of schema dependencies.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaDependencyCollection.#ctor(Terrasoft.Core.ClientUnitSchemaDependencyCollection)">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.ClientUnitSchemaDependencyCollection"/>,
            a clone of the collection dependencies of schema.
            </summary>
            <param name="source">The collection of schema dependencies whose clone is being created.</param>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaDependencyCollection.Clone">
            <summary>
            Returns the collection of schema dependencies which is a clone of the given collection.
            </summary>
            <returns>
            The <see cref="T:Terrasoft.Core.ClientUnitSchemaDependencyCollection" /> 
            instance that is a clone of the current collection of schema dependencies.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.CodeGeneration.SchemaCodeGenerator`1.AddSchemaMethods(`0,`0,System.Collections.ObjectModel.Collection{Terrasoft.Core.CodeGeneration.CodeGenerator.MethodCollectionItem},System.Collections.ObjectModel.Collection{Terrasoft.Core.CodeGeneration.CodeGenerator.MethodCollectionItem})">
            <summary>
            Fills public methods collection with user defined functions.
            </summary>
            <param name="schema">Target schema with methods.</param>
            <param name="parentSchema">Parent schema for target.</param>
            <param name="protectedMethodCollection">Collection with prefilled protected methods.</param>
            <param name="publicMethodCollection">Collection with prefilled public methods.</param>
        </member>
        <member name="M:Terrasoft.Core.CodeGeneration.SchemaCodeGenerator`1.CreateSourcesEntityCollection(Terrasoft.Core.UserConnection)">
            <summary>
            Creates entity collection which is used to store schema sources.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns>Entity collection which is used to store schema sources.</returns>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaManager.FindInstanceByName(System.String)">
            <summary>
            Searches for the instance of the manager item with the specified name.
            </summary>
            <param name="name">Name of the manager item instance to get.</param>
            <returns>The instance of the manager item with the <paramref name="name" /> name. 
            If a manager item instance with the <paramref name="name" /> 
            name is not found, returns <c>null</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaManager.GetInstanceByName(System.String)">
            <summary>
            Returns the instance of the manager item with the specified name.
            </summary>
            <param name="name">Name of the manager item instance.</param>
            <returns>The instance of the manager item with the <paramref name="name" /> name.</returns>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaManager.FindInstanceByUId(System.Guid)">
            <summary>
            Searches for the instance of the manager item by the specified unique identifier.
            </summary>
            <param name="uid">UId of the manager item instance.</param>
            <returns>The instance of the manager item with the specified <paramref name="uid" /> 
            unique Id. If a manager item with the <paramref name="uid" /> 
            unique Id is not found, returns <c>null</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaManager.GetInstanceByUId(System.Guid)">
            <summary>
            Returns the instance of the manager item with the specified UId.
            </summary>
            <param name="uid">Unique identifier of the manager item instance.</param>
            <returns>The instance of the manager item with the specified <paramref name="uid" /> 
            identifier.</returns>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaManager.InitializeSchema(Terrasoft.Core.ISchemaManagerItem,System.Reflection.Assembly)">
            <summary>
            Creates an instance of the <see cref="T:Terrasoft.Core.ClientUnitSchema" /> type schema.
            </summary>
            <param name="schemaManagerItem">Item of manager.</param>
            <param name="assembly">An assembly that contains the type of the schema that is being created.</param>
            <returns>The initialized instance of the schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitSchemaManager.ActualizeItemDescriptor(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Actualizes the descriptor of the schema manager item.
            </summary>
            <param name="item">Manager item whose descriptor must be actualized.</param>
        </member>
        <member name="P:Terrasoft.Core.ClientUnitSchemaManager.HashFunc">
            <summary>
            Hashing function. By default - MD5.
            </summary>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            If the set value is <c>null</c>.
            </exception>
        </member>
        <member name="T:Terrasoft.Core.ClientUnitUtilities">
            <summary>
            Предоставляет методы работы с файлами клиентских схем.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitUtilities.CombineSchemaDescriptors(Terrasoft.Core.UserConnection)">
            <summary>
            Генерирует комбинированные дескрипторы клиентских схем.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Комбинированные дескрипторы клиентских схем.</returns>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitUtilities.CombineSchemaSources(Terrasoft.Core.UserConnection,Terrasoft.Core.ClientUnitSchema)">
            <summary>
            Генерирует комбинированные исходные коды для клиентской схемы (с зависимостями).
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="schema">Клиентская схема.</param>
            <returns>Словарь c идентификатором культуры и комбинированными исходными кодами
            для клиентской схемы(с зависимостями).</returns>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitUtilities.SetReadOnlyAttribute(System.String,System.String)">
            <summary>
            Устанавливает признак <c>ReadOnly</c> для файла указанной клиентской схемы.
            </summary>
            <param name="schemaName">Имя схемы.</param>
            <param name="packageName">Имя пакета.</param>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitUtilities.SetReadOnlyAttribute(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.PackageElementInfo})">
            <summary>
            Устанавливает признак <c>ReadOnly</c> для файлов клиентских схем, указанных в списке.
            </summary>
            <param name="packageElementsInfo">Список характеристик элементов пакета.</param>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitUtilities.ResetReadOnlyAttribute(System.String,System.String)">
            <summary>
            Снимает признак <c>ReadOnly</c> для файла указанной клиентской схемы.
            </summary>
            <param name="schemaName">Имя схемы.</param>
            <param name="packageName">Имя пакета.</param>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitUtilities.ResetReadOnlyAttribute(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.PackageElementInfo})">
            <summary>
            Снимает признак <c>ReadOnly</c> для файлов клиентских схем, указанных в списке.
            </summary>
            <param name="packageElementsInfo">Список характеристик элементов пакета.</param>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitUtilities.SetAllFilesReadOnlyAttribute">
            <summary>
            Устанавливает признак <c>ReadOnly</c> для всех файлов клиентских схем.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitUtilities.RegenerateIncludeDependencySources(System.Boolean)">
            <summary>
            Выполняет перегенерацию и сохраняет коды зависимых клиентских схем.
            </summary>
            <param name="needRefresh">Признак обновления менеджера. Необязательный параметр, значение по 
            умолчанию - <c>false</c>.</param>
            <remarks>
            Перегенерация выполняется для всех клиентских схем, у которых установлен признак "Включить коды зависимых 
            схем". Также выполняется перегенерация дескрипторов для всех клиентских схем и схем объектов.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.ClientUnitUtilities.RegenerateCombinedSchemaDescriptors">
            <summary>
            Выполняет перегенерацию и сохраняет дескрипторы для всех клиентских схем и схем объектов.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.VwSysSchemaDataInPackage">
            <summary>
            Данные схемы в пакете (представление).
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaDataInPackage.SysSchemaId">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaDataInPackage.SysSchema">
            <summary>
            Схема.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaDataInPackage.InstallType">
            <summary>
            Тип установки данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaDataInPackage.UId">
            <summary>
            UId.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaDataInPackage.IsChanged">
            <summary>
            Изменен.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaDataInPackage.IsLocked">
            <summary>
            Заблокирован.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaDataInPackage.Name">
            <summary>
            Название.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaDataInPackage.NeedInstall">
            <summary>
            Требует установки в БД.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaDataInPackage.LastError">
            <summary>
            Текст последней ошибки.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysProcessUserTaskSchema">
            <exclude/>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysProcessUserTask">
            <summary>
            Пользовательское действие процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessUserTask.SysUserTaskSchemaUId">
            <summary>
            Идентификатор пользовательского действия.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessUserTask.Position">
            <summary>
            Позиция.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.VwSysEntitySchemaInWorkspace">
            <summary>
            Объект рабочего пространства (представление).
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace">
            <summary>
            Элемент рабочего пространства (представление).
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.UId">
            <summary>
            UId.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.Name">
            <summary>
            Название.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.Caption">
            <summary>
            Заголовок.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.ManagerName">
            <summary>
            Имя менеджера.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.ParentId">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.Parent">
            <summary>
            Родитель.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.ExtendParent">
            <summary>
            Расширяет родителя.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.IsChanged">
            <summary>
            Изменен.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.IsLocked">
            <summary>
            Заблокирован.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.SysPackageId">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.SysPackageName">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.SysPackage">
            <summary>
            Пакет.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.PackageUId">
            <summary>
            Идентификатор пакета.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.SysWorkspaceId">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.SysWorkspaceName">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.SysWorkspace">
            <summary>
            Рабочее пространство.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInWorkspace.Description">
            <summary>
            Описание.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.VwSysSchemaInPackage">
            <summary>
            Элемент пакета (представление).
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.UId">
            <summary>
            UId.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.Name">
            <summary>
            Название.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.Caption">
            <summary>
            Заголовок.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.ManagerName">
            <summary>
            Имя менеджера.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.ParentId">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.ParentCaption">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.Parent">
            <summary>
            Родительский элемент.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.SysWorkspaceId">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.SysWorkspaceName">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.SysWorkspace">
            <summary>
            Рабочее пространство.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.SysPackageId">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.SysPackageName">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.SysPackage">
            <summary>
            Пакет.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.SysPackageUId">
            <summary>
            Идентификатор пакета.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.SysPackageLevel">
            <summary>
            Уровень пакета.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSchemaInPackage.ExtendParent">
            <summary>
            Расширяет родителя.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.VwSysSSPEntitySchemaAccessListSchema">
            <exclude/>
        </member>
        <member name="T:Terrasoft.Core.Configuration.VwSysSSPEntitySchemaAccessList">
            <summary>
            Список объектов, доступных пользователям портала (представление).
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSSPEntitySchemaAccessList.EntitySchemaUId">
            <summary>
            Идентификатор объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSSPEntitySchemaAccessList.WorkspaceId">
            <summary>
            Идентификатор рабочего пространства.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSSPEntitySchemaAccessList.EntitySchemaCaption">
            <summary>
            Заголовок объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.VwSysSSPEntitySchemaAccessList.EntitySchemaName">
            <summary>
            Имя объекта.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.ProcessParameterValueException">
            <summary>
            Provides the exception for <see cref="T:Terrasoft.Core.Process.ProcessParameterValueProvider"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ProcessParameterValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ProcessParameterValueException"/> class using the specified
            error message.
            </summary>
            <param name="message">Error message.</param>
        </member>
        <member name="T:Terrasoft.Core.MetaItemNotFoundByUIdException">
            <summary>
            Provides the exception for <see cref="T:Terrasoft.Core.MetaItemNotFoundByUIdException"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.MetaItemNotFoundByUIdException.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.MetaItemNotFoundByUIdException"/> class using the specified
            meta item UId.
            </summary>
            <param name="metaItemUId">UId of meta item.</param>
        </member>
        <member name="P:Terrasoft.Core.MetaItemNotFoundByUIdException.MetaItemUId">
            <summary>
            Gets the meta item unique identifier.
            </summary>
            <value>
            The unique identifier of the meta item which is not found.
            </value>
        </member>
        <member name="T:Terrasoft.Core.ValidateExpressionException">
            <summary>
            Exception class for expression validation.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ValidateExpressionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ValidateExpressionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terrasoft.Core.ValidateExpressionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ValidateExpressionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Terrasoft.Core.ValidateExpressionException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ValidateExpressionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="expression">The expression, that was validated.</param>
        </member>
        <member name="M:Terrasoft.Core.ValidateExpressionException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ValidateExpressionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="expression">The expression, that was validated.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Terrasoft.Core.ValidateExpressionException.Expression">
            <summary>
            Gets or sets the expression, that was validated.
            </summary>
            <value>
            The expression.
            </value>
        </member>
        <member name="T:Terrasoft.Core.ProcessParameterValidateException">
            <summary>
            The class for process parameter value validation exception.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ProcessParameterValidateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ProcessParameterValidateException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Terrasoft.Core.ProcessParameterValidateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ProcessParameterValidateException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Terrasoft.Core.ProcessSchemaIsNotEnabledException">
            <summary>
            Exception is thrown when process schema was not enabled.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ProcessSchemaIsNotEnabledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ProcessSchemaIsNotEnabledException"/> class for given
            process schema caption.
            </summary>
            <param name="processSchemaCaption">The process schema caption.</param>
        </member>
        <member name="T:Terrasoft.Core.ProcessSchemaIsNotPublishedException">
            <summary>
            Exception is thrown when trying to use not published compiled process.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ProcessSchemaIsNotPublishedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ProcessSchemaIsNotPublishedException"/> class.
            </summary>
            <param name="processSchemaCaption">The process schema caption.</param>
        </member>
        <member name="T:Terrasoft.Core.ProcessSchemaNotValidException">
            <summary>
            Exception is thrown when process schema is not valid.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ProcessSchemaNotValidException.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ProcessSchemaNotValidException"/> class.
            </summary>
            <param name="invalidElementNames">Invalid process elements.</param>
        </member>
        <member name="T:Terrasoft.Core.ProcessRunBySignalException">
            <summary>
            Exception is thrown while process was run by signal.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ProcessRunBySignalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ProcessRunBySignalException"/> class.
            </summary>
            <param name="processDisplayValue">The process display value.</param>
            <param name="e">The inner exception.</param>
        </member>
        <member name="T:Terrasoft.Core.AppConfigurationException">
            <summary>
            Exception class for application configuration errors.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ImageAPI.ImageAPI.SaveThumbnail(System.Guid,System.Int32,System.Int32,System.Drawing.Imaging.ImageFormat,System.Int64)">
            <summary>
            Сохраняет уменьшенную копию изображения. </summary>
            <param name="id">Id записи в таблице SysImage.</param>
            <param name="width">Ширина уменьшенного изображения.</param>
            <param name="height">Высоты уменьшенного изображения.</param>
            <param name="imageFormat">Формат изображения (JPEG, PNG, BMP и др.).</param>
            <param name="quality">Качество сохраняемого изображения в процентном эквиваленте.</param>
        </member>
        <member name="T:Terrasoft.Core.Packages.CommitLockerManager">
            <summary>
            Предоставляет методы работы c файлом <see cref="P:Terrasoft.Core.Packages.CommitLockerManager.FileName"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.ICommitLockerManager.Create(System.String)">
            <summary>
            Создает файл <see cref="P:Terrasoft.Core.Packages.ICommitLockerManager.FileName"/> в указанном каталоге. Если файл существует, 
            он пересоздается.
            </summary>
            <param name="directoryPath">Путь к каталогу.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ICommitLockerManager.Exists(System.String)">
            <summary>
            Проверяет, существует ли файл <see cref="P:Terrasoft.Core.Packages.ICommitLockerManager.FileName"/> в указанном каталоге.
            </summary>
            <param name="directoryPath">Путь к каталогу.</param>
            <returns><c>true</c>, если файл существует в каталоге <paramref name="directoryPath"/> ; в противном 
            случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ICommitLockerManager.GetFilePath(System.String)">
            <summary>
            Формирует локальный путь к файлу <see cref="P:Terrasoft.Core.Packages.ICommitLockerManager.FileName"/>.
            </summary>
            <param name="directoryPath">Путь к каталогу.</param>
            <returns>Путь к файлу.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ICommitLockerManager.GetFilePathUri(System.Uri)">
            <summary>
            Формирует <see cref="T:System.Uri"/> путь к файлу <see cref="P:Terrasoft.Core.Packages.ICommitLockerManager.FileName"/>.
            </summary>
            <param name="uriPath">Путь к каталогу.</param>
            <returns>Путь к файлу.</returns>
        </member>
        <member name="P:Terrasoft.Core.Packages.ICommitLockerManager.FileName">
            <summary>
            Имя файла.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Packages.CommitLockerManager.CommitLockerFileName">
            <summary>
            Имя файла.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.CommitLockerManager.Create(System.String)">
            <summary>
            Создает файл <see cref="P:Terrasoft.Core.Packages.CommitLockerManager.FileName"/> в указанном каталоге. Если файл существует, 
            он пересоздается.
            </summary>
            <param name="directoryPath">Путь к каталогу.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.CommitLockerManager.Exists(System.String)">
            <summary>
            Проверяет, существует ли файл <see cref="P:Terrasoft.Core.Packages.CommitLockerManager.FileName"/> в указанном каталоге.
            </summary>
            <param name="directoryPath">Путь к каталогу.</param>
            <returns><c>true</c>, если файл существует в каталоге <paramref name="directoryPath"/> ; в противном 
            случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.CommitLockerManager.GetFilePath(System.String)">
            <summary>
            Формирует локальный путь к файлу <see cref="P:Terrasoft.Core.Packages.CommitLockerManager.FileName"/>.
            </summary>
            <param name="directoryPath">Путь к каталогу.</param>
            <returns>Путь к файлу.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.CommitLockerManager.GetFilePathUri(System.Uri)">
            <summary>
            Формирует <see cref="T:System.Uri"/> путь к файлу <see cref="P:Terrasoft.Core.Packages.CommitLockerManager.FileName"/>.
            </summary>
            <param name="uriPath">Путь к каталогу.</param>
            <returns>Путь к файлу.</returns>
        </member>
        <member name="P:Terrasoft.Core.Packages.CommitLockerManager.FileName">
            <summary>
            Имя файла.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.DescriptorComparer">
            <summary>
            Класс, который сравнивает дескрипторы элементов системы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.DescriptorComparer.IsItemNew(Terrasoft.Core.Packages.Descriptor)">
            <summary>
            Checks if the descriptor from the source repository is new.
            </summary>
            <param name="sourceItem">Descriptor from the source repository.</param>
            <returns><c>true</c> if the <paramref name = "sourceItem"/> descriptor is new; otherwise - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.DescriptorComparer.IsItemChanged(Terrasoft.Core.Packages.Descriptor,Terrasoft.Core.Packages.Descriptor)">
            <summary>
            Checks if the descriptor from the target repository has been modified.
            </summary>
            <param name="sourceItem">Descriptor from the source repository.</param>
            <param name="targetItem">Descriptor from the target repository.</param> 
            <returns><c>true</c> if the descriptor from the <paramref name="sourceItem" /> repository has been
            modified; otherwise – <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.DescriptorComparer.IsItemDeleted(Terrasoft.Core.Packages.Descriptor)">
            <summary>
            Checks if the descriptor from the target repository has been deleted.
            </summary>
            <param name="targetItem">Descriptor from the target repository.</param>
            <returns><c>true</c> if the <paramref name="targetItem" /> descriptor has been deleted;
            otherwise – <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.DescriptorComparer.IsItemOrContentChanged(Terrasoft.Core.Packages.Descriptor,Terrasoft.Core.Packages.Descriptor)">
            <summary>
            Checks if the descriptor from the source repository differs from the descriptor from the target repository.
            </summary>
            <param name="sourceItem">Descriptor from the source repository.</param>
            <param name="targetItem">Descriptor from the target repository.</param>
            <returns><c>true</c> if no changes found, otherwise - <c>false</c>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.ILockerManager">
            <summary>
            Интерфейс менеджера блокирования элементов системы в системе контроля версий.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.TryLockPackage(System.String,System.String@)">
            <summary>
            Блокирует указанный пакет в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="message">Cодержит сообщение об ошибке, если пакет <paramref name = "packageName"/> не 
            заблокирован; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если пакет <paramref name = "packageName"/> заблокирован в системе контроля версий; 
            в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.ExistsPackage(System.String)">
            <summary>
            Определяет, существует ли пакет <paramref name = "packageName"/> в хранилище системы контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <returns><c>true</c>, если пакет <paramref name = "packageName"/> существует в хранилище системы контроля 
            версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.UnlockPackage(System.String)">
            <summary>
            Разблокирует указанный пакет в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <returns><c>true</c>, если пакет <paramref name = "packageName"/> разблокирован на уровне системы контроля 
            версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.TryLockSchema(System.String,System.String,System.String@)">
            <summary>
            Блокирует указанную схему в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="schemaName">Имя схемы.</param>
            <param name="message">Cодержит сообщение об ошибке, если схема <paramref name = "schemaName"/> из пакета 
            <paramref name = "packageName"/> не заблокирована; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если схема <paramref name = "schemaName"/> из пакета <paramref name = "packageName"/>
            заблокирована в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.TryLockSchemas(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.PackageElementInfo},System.String@)">
            <summary>
            Блокирует указанные схемы в системе контроля версий.
            </summary>
            <param name="packageSchemaNames">Список схем для блокировки.</param>
            <param name="message">Cодержит сообщение об ошибке, если хотя бы одна из схем
            <paramref name = "packageSchemaNames"/> не заблокирована; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если все схемы из списка схем <paramref name = "packageSchemaNames"/> заблокированы
            в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.ExistsSchema(System.String,System.String)">
            <summary>
            Определяет, существует ли схема <paramref name = "schemaName"/> из пакета <paramref name = "packageName"/> в
            хранилище системы контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="schemaName">Имя схемы.</param>
            <returns><c>true</c>, если схема <paramref name = "schemaName"/> из пакета <paramref name = "packageName"/>
            существует в хранилище системы контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.UnlockSchema(System.String,System.String)">
            <summary>
            Разблокирует указанную схему в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="schemaName">Имя схемы.</param>
            <returns><c>true</c>, если схема <paramref name = "schemaName"/> из пакета <paramref name = "packageName"/>
            разблокирована на уровне системы контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.TryLockSqlScript(System.String,System.String,System.String@)">
            <summary>
            Блокирует указанный SQL-сценарий в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="sqlScriptName">Имя SQL-сценария.</param>
            <param name="message">Cодержит сообщение об ошибке, если SQL-сценарий <paramref name = "sqlScriptName"/> из
            пакета <paramref name = "packageName"/> не заблокирован; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если SQL-сценарий <paramref name = "sqlScriptName"/> из пакета
            <paramref name = "packageName"/> заблокирован в системе контроля версий; в противном случае — значение
            <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.TryLockSqlScripts(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.PackageElementInfo},System.String@)">
            <summary>
            Блокирует указанные SQL-сценарии в системе контроля версий.
            </summary>
            <param name="packageSqlScriptNames">Список SQL-сценариев для блокировки.</param>
            <param name="message">Cодержит сообщение об ошибке, если хотя бы один из SQL-сценариев
            <paramref name = "packageSqlScriptNames"/> не заблокирован; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если все SQL-сценарии из списка SQL-сценариев
            <paramref name = "packageSqlScriptNames"/> заблокированы в системе контроля версий; в противном случае —
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.SqlScriptExists(System.String,System.String)">
            <summary>
            Определяет, существует ли SQL-сценарий <paramref name = "sqlScriptName"/> из пакета
            <paramref name = "packageName"/> в хранилище системы контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="sqlScriptName">Имя SQL-сценария.</param>
            <returns><c>true</c>, если SQL-сценарий <paramref name = "sqlScriptName"/> из пакета
            <paramref name = "packageName"/> существует в хранилище системы контроля версий; в противном случае —
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.UnlockSqlScript(System.String,System.String)">
            <summary>
            Разблокирует указанный SQL-сценарий в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="sqlScriptName">Имя SQL-сценария.</param>
            <returns><c>true</c>, если SQL-сценарий <paramref name = "sqlScriptName"/> из пакета
            <paramref name = "packageName"/> разблокирован на уровне системы контроля версий; в противном случае —
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.TryLockSchemaData(System.String,System.String,System.String@)">
            <summary>
            Блокирует указанныe данные схемы в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="schemaDataName">Имя данных схемы.</param>
            <param name="message">Cодержит сообщение об ошибке, если данные схемы <paramref name = "schemaDataName"/> из
            пакета <paramref name = "packageName"/> не заблокированы; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если данные схемы <paramref name = "schemaDataName"/> из пакета
            <paramref name = "packageName"/> заблокированы в системе контроля версий; в противном случае — значение
            <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.TryLockSchemaDatas(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.PackageElementInfo},System.String@)">
            <summary>
            Блокирует указанные данные схем в системе контроля версий.
            </summary>
            <param name="packageSchemaDataNames">Список данных схем для блокировки.</param>
            <param name="message">Cодержит сообщение об ошибке, если хотя бы одни из данных схем
            <paramref name = "packageSchemaDataNames"/> не заблокированы; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если все данные схем из списка данных схем <paramref name = "packageSchemaDataNames"/>
            заблокированы в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.SchemaDataExists(System.String,System.String)">
            <summary>
            Определяет, существуют ли данные схемы <paramref name = "schemaDataName"/> из пакета
            <paramref name = "packageName"/> в хранилище системы контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="schemaDataName">Имя данных схемы.</param>
            <returns><c>true</c>, если данные схемы <paramref name = "schemaDataName"/> из пакета
            <paramref name = "packageName"/> существует в хранилище системы контроля версий; в противном случае —
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.UnlockSchemaData(System.String,System.String)">
            <summary>
            Разблокирует указанные данные схемы в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="schemaDataName">Имя данных схемы.</param>
            <returns><c>true</c>, если данные схемы <paramref name = "schemaDataName"/> из пакета
            <paramref name = "packageName"/> разблокированы на уровне системы контроля версий; в противном случае —
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.TryLockAssembly(System.String,System.String,System.String@)">
            <summary>
            Блокирует указанную сборку в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="assemblyName">Имя сборки.</param>
            <param name="message">Cодержит сообщение об ошибке, если сборка <paramref name = "assemblyName"/> из
            пакета <paramref name = "packageName"/> не заблокирована; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если сборка <paramref name = "assemblyName"/> из пакета
            <paramref name = "packageName"/> заблокирована в системе контроля версий; в противном случае — значение
            <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.TryLockAssemblies(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.PackageElementInfo},System.String@)">
            <summary>
            Блокирует указанные сборки в системе контроля версий.
            </summary>
            <param name="packageAssemblyNames">Список сборок для блокировки.</param>
            <param name="message">Cодержит сообщение об ошибке, если хотя бы одна из сборок
            <paramref name = "packageAssemblyNames"/> не заблокирована; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если все сборки из списка сборок <paramref name = "packageAssemblyNames"/>
            заблокированы в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.AssemblyExists(System.String,System.String)">
            <summary>
            Определяет, существует ли сборка <paramref name = "assemblyName"/> из пакета
            <paramref name = "packageName"/> в хранилище системы контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="assemblyName">Имя сборки.</param>
            <returns><c>true</c>, если сборка <paramref name = "assemblyName"/> из пакета
            <paramref name = "packageName"/> существует в хранилище системы контроля версий; в противном случае —
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.UnlockAssembly(System.String,System.String)">
            <summary>
            Разблокирует указанную сборку в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="assemblyName">Имя сборки.</param>
            <returns><c>true</c>, если данные схемы <paramref name = "assemblyName"/> из пакета
            <paramref name = "packageName"/> разблокированы на уровне системы контроля версий; в противном случае —
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.UnlockElements(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.PackageElementInfo},Terrasoft.Core.Packages.PackageStorageObjectType)">
            <summary>
            Разблокирует указанные элементы пакета в системе контроля версий.
            </summary>
            <param name="packageElementsInfo">Список характеристик элементов пакета.</param>
            <param name="elementsType">Тип элементов пакета.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.GetIsPackageElementHasForeignLock(System.String,System.String,Terrasoft.Core.Packages.PackageStorageObjectType)">
            <summary>
            Определяет, заблокирован ли элемент другим пользователем.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="elementName">Имя элемента.</param>
            <param name="elementType">Тип элемента <paramref name = "elementName"/>.</param>
            <returns><c>true</c>, если элемент заблокирован другим пользователем, в противном случае — 
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.GetIsPackageHasForeignLock(System.String)">
            <summary>
            Определяет, заблокирован ли пакет другим пользователем.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <returns><c>true</c>, если пакет заблокирован другим пользователем, в противном случае — 
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ILockerManager.TryLockPackageElements(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.PackageElementInfo},System.String@)">
            <summary>
            Блокирует указанные элементы пакета в системе контроля версий.
            </summary>
            <param name="packageElementsInfo">Список характеристик элементов пакета.</param>
            <param name="message">Cодержит сообщение об ошибке, если хотя бы один элемент пакета не был заблокирован; в
            противном случае — пустая строка.</param>
            <returns><c>true</c>, если все элементы пакета из списка <paramref name = "packageElementsInfo"/>
            заблокированы в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="E:Terrasoft.Core.Packages.ILockerManager.LockError">
            <summary>
            Событие при возникновении ошибки блокирования элемента в системе контроля версий.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.BasePackageUriGenerator">
            <summary>
            Базовый класс генератора путей к хранилищу системы контроля версий.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.BasePackageUriGenerator.GetPackageUri(System.Uri,System.String,System.String)">
            <summary>
            Возвращает полный путь к пакету в хранилище системы контроля версий.
            </summary>
            <param name="repositoryUri">Корневой путь к пакету в хранилище системы контроля версий.</param>
            <param name="packageName">Имя пакета.</param>
            <param name="version">Версия пакета.</param>
            <returns>Полный путь к пакету в хранилище системы контроля версий.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.BasePackageUriGenerator.GetPackageRootUri(System.Uri,System.String)">
            <summary>
            Возвращает полный путь к корню пакета в хранилище системы контроля версий.
            </summary>
            <param name="repositoryUri">Корневой путь к пакету в хранилище системы контроля версий.</param>
            <param name="packageName">Имя пакета.</param>
            <returns>Полный путь к корню пакета в хранилище системы контроля версий.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.BasePackageUriGenerator.GetPackageBranchesUri(System.Uri,System.String)">
            <summary>
            Возвращает полный путь к веткам пакета в хранилище системы контроля версий.
            </summary>
            <param name="repositoryUri">Корневой путь к пакету в хранилище системы контроля версий.</param>
            <param name="packageName">Имя пакета.</param>
            <returns>Полный путь к веткам пакета в хранилище системы контроля версий.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.ISourceControlAuthManager">
            <summary>
            Интерфейс менеджера для работы с аутентификацией в хранилище.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlAuthManager.GetAuthDataByUri(System.Uri)">
            <summary>
            Возвращает авторизационные данные хранилища.
            </summary>
            <param name="sourceUri">Адрес хранилища.</param>
            <returns>Возвращает экземпляр <see cref = "T:Terrasoft.Core.Packages.SourceControlAuthDescriptor"/> для 
            хранилища с адресом <paramref name = "sourceUri"/>. Если хранилище с таким адресом не найдено, тогда 
            генерируется исключение.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlAuthManager.GetIdByUri(System.Uri)">
            <summary>
            Возвращает идентификатор хранилища.
            </summary>
            <param name="sourceUri">Адрес хранилища.</param>
            <returns>Идентификатор хранилища с адресом <paramref name = "sourceUri"/>. Если хранилище с таким адресом 
            не найдено, тогда генерируется исключение.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlAuthManager.GetUriById(System.Guid,System.String)">
            <summary>
            Возвращает адрес хранилища.
            </summary>
            <param name="descriptorId">Идентификатор хранилища.</param>
            <param name="packageName">Название пакета. Необязательный параметр, значение по умолчанию - <c>null</c>.
            </param>
            <returns>Адрес хранилища с идентификатором <paramref name = "descriptorId"/>. Если хранилище с таким 
            идентификатором не найдено, тогда генерируется исключение.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlAuthManager.UpdateAuthData(System.Guid,System.String,System.String)">
            <summary>
            Обновляет логин и пароль доступа к хранилищу.
            </summary>
            <param name="repositoryId">Идентификатор хранилища.</param>
            <param name="login">Логин к хранилищу.</param>
            <param name="password">Пароль к хранилищу.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlAuthManager.SaveRepository(Terrasoft.Core.Packages.SourceControlDescriptor)">
            <summary>
            Сохраняет дескриптор хранилища.
            </summary>
            <param name="sourceControlDescriptor">Дескриптор хранилища.</param>
            <returns>Идентификатор хранилища, дескриптор которого сохранен.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlAuthManager.DeleteRepository(System.Guid)">
            <summary>
            Удаляет дескриптор хранилища.
            </summary>
            <param name="repositoryId">Идентификатор хранилища.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlAuthManager.GetIsRepositoryInUse(System.Guid)">
            <summary>
            Определяет, существуют ли пакеты, которые ссылаются на заданное хранилище.
            </summary>
            <param name="repositoryId">Идентификатор хранилища.</param>
            <returns><c>true</c>, если на хранилище ссылается хотя бы один пакет; в противном случае — 
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlAuthManager.FindSourceControlDescriptor(System.Guid)">
            <summary>
            Возвращает дескриптор хранилища с заданным идентификатором.
            </summary>
            <param name="repositoryId">Идентификатор хранилища.</param>
            <returns>Возвращает экземпляр <see cref = "T:Terrasoft.Core.Packages.SourceControlDescriptor"/> для 
            хранилища с идентификатором <paramref name = "repositoryId"/> либо <c>null</c>, если хранилище с таким 
            идентификатором не найдено.</returns>
        </member>
        <member name="P:Terrasoft.Core.Packages.ISourceControlAuthManager.SourceControlAuthDescriptors">
            <summary>
            Перечислитель авторизационных данных хранилищ.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.ISourceControlAuthManager.Uris">
            <summary>
            Перечислитель путей хранилищ.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.ISourceControlAuthManager.SourceControlDescriptors">
            <summary>
            Перечислитель дескрипторов хранилищ.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.ISourceControlAuthManager.UseSourceControlAuthentication">
            <summary>
            Признак, использовать ли кэш аутентификации системы контроля версий.
            </summary>
            <value>
            <c>true</c>, если используется кэш аутентификации системы контроля версий, иначе - <c>false</c>.
            </value>
            <remarks> Значение по умолчанию: <c>false</c>.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Packages.ISourceControlAuthManager.SourceControlAuthPath">
            <summary>
            Путь к папке, где хранятся аутентификационные данные хранилища системы контроля версий.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.ISourceControlClient">
            <summary>
            Source control system client interface.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.ValidateAccessibility(System.Uri)">
            <summary>
            Проверяет возможность доступа пользователя к системе контроля версий по указаному пути.
            </summary>
            <param name="sourceControlUri">Путь к папке или файлу системы контроля версий.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.ValidateAccessibility(System.String)">
            <summary>
            Проверяет возможность доступа пользователя к системе контроля версий по пути к хранилищу для локальной 
            директории.
            </summary>
            <param name="workingCopyPath">Путь к локальной директории рабочей копии.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.SaveAuthData(System.Uri,System.String,System.String)">
            <summary>
            Сохраняет логин и пароль доступа к хранилищу.
            </summary>
            <param name="sourceUri">Путь к корневой папке хранилища системы контроля версий.</param>
            <param name="login">Логин к хранилищу.</param>
            <param name="password">Пароль к хранилищу.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.GetUriFromWorkingCopy(System.String)">
            <summary>
            По заданному пути к папке рабочей копии возвращает путь к корневой папке системы контроля версий.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns>Путь к корневой папке системы контроля версий.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.GetIsUnderSourceControl(System.String)">
            <summary>
            Проверяет, находится ли указанная папка рабочей копии под системой контроля версий.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns><c>true</c>, если папка, путь к которой указан в параметре <paramref name = "workingCopyPath"/>,
            находится под системой контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.CheckOut(System.Uri,System.String,System.Int32,System.Boolean)">
            <summary>
            Выполняет полную загрузку папок и файлов из системы контроля версий в локальную папку рабочей копии.
            </summary>
            <param name="sourceControlUri">Путь к корневой папке системы контроля версий.</param>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <param name="revisionNumber">Номер ревизии, изменения которой должны быть загружены. Необязательный
            параметр, по умолчанию равен <c>0</c>.</param>
            <param name="useInfinityDepth">Infinity checkout depth flag. Optional.
            <c>true</c> to check out files and subdirectories, <c>false</c> to check out files only in specified
            directory. Default value: <c>true</c></param>
            <returns>Номер загруженной ревизии.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.Update(System.String,System.Int32,System.Boolean)">
            <summary>
            Выполняет обновление папок и файлов из системы контроля версий в локальную папку рабочей копии.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <param name="revisionNumber">Номер ревизии, изменения которой должны быть загружены. Необязательный
            параметр, по умолчанию равен <c>0</c>.</param>
            <param name="useInfinityDepth">Infinity update depth flag. Optional.
            <c>true</c> to update files and subdirectories, <c>false</c> to update files only in specified
            directory. Default value: <c>true</c></param>
            <returns>Номер загруженной ревизии.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.GetRootDirectories(System.Uri)">
            <summary>
            Возвращает перечисление имен папок первого уровня относительно корневой папки системы контроля версий.
            </summary>
            <param name="sourceControlUri">Путь к корневой папке системы контроля версий.</param>
            <returns>Перечислитель имен папок.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.Commit(System.String,System.String)">
            <summary>
            Фиксирует изменения из существующей локальной папки рабочей копии в систему контроля версий.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <param name="logMessage">Строка комментариев фиксации. Необязательный параметр.</param>
            <returns>Номер ревизии загруженных изменений.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.Commit(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Commits changes from specified paths in working copy to source control system.
            </summary>
            <param name="workingCopyPath">Path to local working copy.</param>
            <param name="paths">Set of paths to changes in working copy.</param>
            <param name="logMessage">Commit message. Optional.</param>
            <returns>Revision number after commit.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.Import(System.String,System.Uri,System.String)">
            <summary>
            Фиксирует в хранилище системы контроля версий дерево файлов и папок из заданной неверсионной папки.
            </summary>
            <param name="localPath">Путь к неверсионной папке.</param>
            <param name="sourceControlUri">Путь к корневой папке системы контроля версий.</param>
            <param name="logMessage">Строка комментариев фиксации. Необязательный параметр.</param>
            <returns>Номер ревизии загруженных изменений.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.UnlockDeletedItems(System.Uri,System.Int32)">
            <summary>
            Снимает блокировки с удаленных файлов в системе контроля версий.
            </summary>
            <param name="sourceControlUri">Путь к корневой папке системы контроля версий.</param>
            <param name="revisionNumber">Номер ревизии, в которой были удалены файлы.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.Lock(System.Collections.Generic.ICollection{System.String},System.Boolean)">
            <summary>
            Блокирует доступ к заданным файлам на уровне системы контроля версий.
            </summary>
            <param name="localFilePaths">Список локальных путей к файлам.</param>
            <param name="isForceLock">Признак, является ли блокировка принудительной. Необязательный параметр.
            Значение по умолчанию - <c>false</c>.</param>
            <returns><c>true</c>, если файлы из списка <paramref name = "localFilePaths"/> заблокированы в системе
            контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.Lock(System.String,System.Boolean)">
            <summary>
            Блокиует доступ к заданному файлу на уровне системы контроля версий.
            </summary>
            <param name="localFilePath">Локальный путь файла.</param>
            <param name="isForceLock">Признак, является ли блокировка принудительной. Необязательный параметр.
            Значение по умолчанию - <c>false</c>.</param>
            <returns><c>true</c>, если файл <paramref name = "localFilePath"/> заблокирован в системе контроля версий; 
            в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.Unlock(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Снимает блокировки с заданных файлов на уровне системы контроля версий.
            </summary>
            <param name="localFilePaths">Список локальных путей к файлам.</param>
            <returns><c>true</c>, если файлы из списка <paramref name = "localFilePaths"/> разблокированы в системе 
            контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.Unlock(System.String)">
            <summary>
            Снимает блокировку с заданного файла на уровне системы контроля версий.
            </summary>
            <param name="localFilePath">Локальный путь файла.</param>
            <returns><c>true</c>, если файл <paramref name = "localFilePath"/> разблокирован в системе контроля версий;
            в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.UnlockContent(System.String)">
            <summary>
            Снимает блокировку на уровне системы контроля версий со всех файлов, которые находятся в указанной 
            рабочей копии.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns><c>true</c>, если файлы из рабочей копии <paramref name = "workingCopyPath"/> разблокированы 
            в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.UnlockContent(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Снимает блокировку на уровне системы контроля версий со всех файлов, которые находятся по указанным 
            путям.
            </summary>
            <param name="workingCopyPaths">Список локальных путей.</param>
            <returns><c>true</c>, если файлы по указанным путям <paramref name = "workingCopyPaths"/> разблокированы 
            в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.SynchronizeUsersLocks(System.String)">
            <summary>
            Синхронизирует блокировки файлов на уровне рабочей копии в соответствии с блокировками файлов на уровне 
            системы контроля версий.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.Exists(System.Uri)">
            <summary>
            Определяет, существует ли заданный файл в хранилище системы контроля версий.
            </summary>
            <param name="sourceControlFileUri">Путь к файлу в хранилище системе контроля версий.</param>
            <returns><c>true</c>, если в хранилище существует файл <paramref name = "sourceControlFileUri"/>; 
            иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.Add(System.String)">
            <summary>
            Добавляет неверсионный файл в структуру рабочей копии системы контроля версий.
            </summary>
            <param name="workingCopyFilePath">Путь к файлу в рабочей копии.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.GetIsLocked(System.String)">
            <summary>
            Проверяет, заблокирован ли файл на уровне системы контроля версий.
            </summary>
            <param name="localFilePath">Локальный путь к файлу.</param>
            <returns><c>true</c>, если файл <paramref name = "localFilePath"/> заблокирован на уровне системы контроля 
            версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.GetIsLockedByCurrentUser(System.String)">
            <summary>
            Проверяет, заблокирован ли файл на уровне системы контроля версий текущим пользователем.
            </summary>
            <param name="localFilePath">Локальный путь к файлу.</param>
            <returns><c>true</c>, если файл <paramref name = "localFilePath"/> заблокирован текущим пользователем 
            на уровне системы контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.GetIsLockedByOtherUser(System.String)">
            <summary>
            Проверяет, заблокирован ли файл на уровне системы контроля версий не текущим пользователем.
            </summary>
            <param name="localFilePath">Локальный путь к файлу.</param>
            <returns><c>true</c>, если файл <paramref name = "localFilePath"/> заблокирован другим пользователем 
            на уровне системы контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.GetLocalFilePathsForLock(System.String,System.String,System.String)">
            <summary>
            Возвращает список локальных путей к файлам, которые можно заблокировать на уровне системы контроля версий.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <param name="itemLocalPath">Локальный путь, по которому определяются файлы для блокирования.</param>
            <param name="itemName">Имя элемента.</param>
            <returns>Список локальных путей к файлам, которые находятся в <paramref name = "itemLocalPath"/> и которые
            могут быть заблокированы на уровне системы контроля версий.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.GetLocalFilePathsLockedByCurrentUser(System.String)">
            <summary>
            Возвращает список локальных путей к файлам, которые заблокированы на уровне системы контроля версий текущим
            пользователем.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns>Список локальных путей к файлам, которые находятся в <paramref name = "workingCopyPath"/> и 
            которые заблокированы на уровне системы контроля версий текущим пользователем.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.GetIsFilesHaveForeignLock(System.String)">
            <summary>
            Определяет, имеются ли по указанному пути элементы, заблокированные другим пользователем.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns><c>true</c>, если присутствует элемент, заблокированый другим пользователем, в противном случае — 
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.GetHeadRevisionNumber(System.Uri)">
            <summary>
            Возвращает номер последней ревизии для указанного пути в системе контроля версий.
            </summary>
            <param name="sourceControlUri">Путь к корневой папке системы контроля версий.</param>
            <returns>Номер последней ревизии для пути <paramref name = "sourceControlUri"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.Revert(System.String)">
            <summary>
            Отменяет изменения из указанной папки.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns><c>true</c>, если были отменеы изменения; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.GetLockedFilesByCurrentUser(System.String)">
            <summary>
            Возвращает перечисление адресов файлов, заблокированных на уровне системы контроля версий текущим
            пользователем.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns>Перечислитель путей файлов.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.GetLockedInWorkingCopyFilesByCurrentUser(System.String)">
            <summary>
            Returns an enumeration of the file paths that are locked in working copy by current user.
            </summary>
            <param name="workingCopyPath">Working copy path.</param>
            <returns>Collection of locked files paths.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.ApplySourceControlChanges(System.String)">
            <summary>
            Актуализирует состояние файлов в системе контроля версий в соответствии с состоянием файлов в рабочей копии.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.SetPropertyMimeType(System.String)">
            <summary>
            Устанавливает для файлов, находящихся в локальном хранилище по пути <paramref name = "workingCopyPath"/>, 
            свойство MimeType со значением, указывающим на то, что файл не должен участвовать в процессе слияния 
            изменений системой контроля версий.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.CreateDirectoryIfNotExist(System.Uri,System.String)">
            <summary>
            По указанному пути на сервере контроля версий создает директорию, если она не существует.
            </summary>
            <param name="directoryUri">Путь к директории.</param>
            <param name="logMessage">Строка комментариев фиксации. Необязательный параметр.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.CreateDirectoriesIfNotExist(System.Collections.Generic.ISet{System.Uri},System.String)">
            <summary>
            По указанным путям на сервере контроля версий создает директории, если они не существуют.
            </summary>
            <param name="directoryUries">Пути к директориям.</param>
            <param name="logMessage">Строка комментариев фиксации. Необязательный параметр.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlClient.ProcessWorkingCopyConflicts(System.String)">
            <summary>
            In case of conflicts in existing working copy fire up Conflict event.
            </summary>
            <param name="workingCopyPath">Path to a working copy.</param>
            <summary>Do nothing if nobody is subscribed to Conflict event.</summary>
        </member>
        <member name="E:Terrasoft.Core.Packages.ISourceControlClient.Conflict">
            <summary>
            Event fires up in case of conflict while update from SVN or in case of conflict while processing existing
            working copy.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.ISourceControlManager">
            <summary>
            Интерфейс класса для работы с клиентом системы контроля версий.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.GetIsUpdateNeed(System.String,System.Int32)">
            <summary>
            Сравнивает номер ревизии рабочей копии с номером рабочей ревизии системы контроля версий и определяет, 
            необходимо ли обновление рабочей копии.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <param name="workingRevisionNumber">Номер рабочей ревизии системы контроля версий.</param>
            <returns><c>true</c>, если номер ревизии рабочей копии меньше номера рабочей ревизии системы контроля 
            версий (необходимо обновление рабочей копии); иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.Update(System.Uri,System.String,System.Int32,System.Boolean)">
            <summary>
            Загружает папки и файлы из системы контроля версий в локальную папку рабочей копии.
            </summary> 
            <param name="sourceUri">Путь к корневой папке системы контроля версий.</param>
            <param name="targetWorkingCopyPath">Путь к рабочей копии.</param>
            <param name="revisionNumber">Номер ревизии, изменения которой должны быть загружены.
            Параметр <paramref name="revisionNumber"/> содержит значение по умолчанию 0.
            Параметр <paramref name="revisionNumber"/> может быть только положительным.</param>
            <param name="useInfinityDepth">Infinity update depth flag. Optional.
            <c>true</c> to update files and subdirectories, <c>false</c> to update files only in specified
            directory. Default value: <c>true</c></param>
            <result>Номер загруженной ревизии.</result>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.GetRootDirectories(System.Uri)">
            <summary>
            Возвращает перечисление имен папок первого уровня относительно корневой папки системы контроля версий.
            </summary>
            <param name="sourceUri">Путь к корневой папке системы контроля версий.</param>
            <returns>Перечислитель имен папок.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.ValidateAccessibility(System.Uri)">
            <summary>
            Проверяет возможность доступа пользователя к системе контроля версий по указаному пути.
            </summary>
            <param name="sourceUri">Путь к папке или файлу системы контроля версий.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.ValidateAccessibility(System.String)">
            <summary>
            Проверяет возможность доступа пользователя к системе контроля версий по пути к хранилищу заданному для 
            локальной директории.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.SaveAuthData(System.Uri,System.String,System.String)">
            <summary>
            Сохраняет логин и пароль доступа к хранилищу.
            </summary>
            <param name="sourceUri">Путь к корневой папке хранилища системы контроля версий.</param>
            <param name="login">Логин к хранилищу.</param>
            <param name="password">Пароль к хранилищу.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.Commit(System.String,System.Int32,System.String)">
            <summary>
            Фиксирует изменения из существующей локальной папки рабочей копии в систему контроля версий.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <param name="workingRevisionNumber">Номер рабочей ревизии системы контроля версий.</param>
            <param name="logMessage">Строка комментариев фиксации. Необязательный параметр.</param>
            <returns>Номер ревизии загруженных изменений.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.Commit(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String)">
            <summary>
            Commits changes from specified paths in working copy to source control system.
            </summary>
            <param name="workingCopyPath">Path to local working copy.</param>
            <param name="paths">Set of paths to changes in working copy.</param>
            <param name="workingRevisionNumber">Working source control revision number.</param>
            <param name="logMessage">Commit message. Optional.</param>
            <returns>Revision number after commit.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.Import(System.String,System.Uri,System.String)">
            <summary>
            Фиксирует в хранилище системы контроля версий дерево файлов и папок из заданной неверсионной папки.
            </summary>
            <param name="localPath">Путь к неверсионной папке.</param>
            <param name="sourceUri">Путь к корневой папке системы контроля версий.</param>
            <param name="logMessage">Строка комментариев фиксации. Необязательный параметр.</param>
            <returns>Номер ревизии загруженных изменений.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.UnlockDeletedItems(System.Uri,System.Int32)">
            <summary>
            Снимает блокировки с удаленных файлов в системе контроля версий.
            </summary>
            <param name="sourceUri">Путь к корневой папке системы контроля версий.</param>
            <param name="revisionNumber">Номер ревизии, в которой были удалены файлы.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.GetIsUnderSourceControl(System.String)">
            <summary>
            Проверяет, поддерживается ли контроль версионности для заданной папки.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns><c>true</c>, если для папки <paramref name = "workingCopyPath"/> поддерживается контроль
            версионности; иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.UnlockContent(System.String)">
            <summary>
            Снимает блокировку на уровне системы контроля версий со всех файлов, которые находятся в указанной 
            рабочей копии.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns><c>true</c>, если файлы из рабочей копии <paramref name = "workingCopyPath"/> разблокированы 
            в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.UnlockContent(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Снимает блокировку на уровне системы контроля версий со всех файлов, которые находятся по указанным 
            путям.
            </summary>
            <param name="workingCopyPaths">Список локальных путей.</param>
            <returns><c>true</c>, если файлы по указанным путям <paramref name = "workingCopyPaths"/> разблокированы 
            в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.Unlock(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Снимает блокировки с заданных файлов на уровне системы контроля версий.
            </summary>
            <param name="localFilePaths">Список локальных путей к файлам.</param>
            <returns><c>true</c>, если файлы из списка <paramref name = "localFilePaths"/> разблокированы в системе 
            контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.Revert(System.String)">
            <summary>
            Отменяет изменения из указанной папки.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns><c>true</c>, если были отменеы изменения; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.Lock(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Устанавливает блокировку на уровне системы контроля версий всех файлов, которые находятся по указанным 
            путям в рабочей копии.
            </summary>
            <param name="localFilePaths">Пути к файлам в рабочей копии.</param>
            <returns><c>true</c>, если файлы <paramref name = "localFilePaths"/> из рабочей копии заблокированы 
            в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.GetLocalFilePathsForLock(System.String,System.String,System.String)">
            <summary>
            Возвращает список локальных путей к файлам, которые можно заблокировать на уровне системы контроля версий.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <param name="itemLocalPath">Локальный путь. Указывает директорию из которой берутся файлы для блокирования.
            </param>
            <param name="itemName">Имя элемента.</param>
            <returns>Список локальных путей к файлам, которые находятся в <paramref name = "itemLocalPath"/> и которые
            могут быть заблокированы на уровне системы контроля версий.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.GetLocalFilePathsLockedByCurrentUser(System.String)">
            <summary>
            Возвращает список локальных путей к файлам, которые заблокированы на уровне системы контроля версий текущим
            пользователем.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns>Список локальных путей к файлам, которые находятся в <paramref name = "workingCopyPath"/> и 
            которые заблокированы на уровне системы контроля версий текущим пользователем.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.GetLockedFilesByCurrentUser(System.String)">
            <summary>
            Возвращает перечисление адресов файлов, заблокированных на уровне системы контроля версий текущим
            пользователем.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns>Перечислитель путей файлов.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.GetLockedInWorkingCopyFilesByCurrentUser(System.String)">
            <summary>
            Returns an enumeration of the file paths that are locked in working copy by current user.
            </summary>
            <param name="workingCopyPath">Working copy path.</param>
            <returns>Collection of locked files paths.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.GetIsPackageElementHasForeignLock(System.String)">
            <summary>
            Определяет, имеются ли по указанному пути элементы, заблокированные другим пользователем.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns><c>true</c>, если присутствует элемент, заблокированый другим пользователем, в противном случае — 
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.SynchronizeUsersLocks(System.String)">
            <summary>
            Синхронизирует блокировки файлов на уровне рабочей копии в соответствии с блокировками файлов на уровне 
            системы контроля версий.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.Exists(System.Uri)">
            <summary>
            Определяет, существует ли заданный файл в хранилище системы контроля версий.
            </summary>
            <param name="sourceControlFileUri">Путь к файлу в хранилище системе контроля версий.</param>
            <returns><c>true</c>, если в хранилище существует файл <paramref name = "sourceControlFileUri"/>; 
            иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.GetIsLockedByOtherUser(System.String)">
            <summary>
            Проверяет, заблокирован ли файл на уровне системы контроля версий не текущим пользователем.
            </summary>
            <param name="localFilePath">Локальный путь к файлу.</param>
            <returns><c>true</c>, если файл <paramref name = "localFilePath"/> заблокирован другим пользователем
            на уровне системы контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.ApplySourceControlChanges(System.String)">
            <summary>
            Актуализирует состояние файлов в системе контроля версий в соответствии с состоянием файлов в рабочей копии.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.GetHeadRevisionNumber(System.Uri)">
            <summary>
            Возвращает номер последней ревизии для указанного пути в системе контроля версий.
            </summary>
            <param name="sourceControlUri">Путь к корневой папке системы контроля версий.</param>
            <returns>Номер последней ревизии для пути <paramref name = "sourceControlUri"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.CreateDirectoryIfNotExist(System.Uri,System.String)">
            <summary>
            По указанному пути на сервере контроля версий создает директорию, если она не существует.
            </summary>
            <param name="directoryUri">Путь к директории.</param>
            <param name="logMessage">Строка комментариев фиксации. Необязательный параметр.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.ISourceControlManager.CreateDirectoriesIfNotExist(System.Collections.Generic.ISet{System.Uri},System.String)">
            <summary>
            По указанным путям на сервере контроля версий создает директории, если они не существуют.
            </summary>
            <param name="directoryUries">Пути к директориям.</param>
            <param name="logMessage">Строка комментариев фиксации. Необязательный параметр.</param>
        </member>
        <member name="P:Terrasoft.Core.Packages.ISourceControlManager.ConflictPaths">
            <summary>
            Collection of paths to conflicted files.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.LockerManager">
            <summary>
            Менеджер блокирования элементов системы в системе контроля версий.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.#ctor(Terrasoft.Core.Packages.ISourceControlManager,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Packages.LockerManager"/>.
            </summary>
            <param name="sourceControlManager">Менеджер системы контроля версий.</param>
            <param name="packageCopyPath">Путь к папкам рабочих копий.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.TryLockPackage(System.String,System.String@)">
            <summary>
            Блокирует указанный пакет в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="message">Cодержит сообщение об ошибке, если пакет <paramref name = "packageName"/> не 
            заблокирован; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если пакет <paramref name = "packageName"/> заблокирован в системе контроля версий; 
            в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.ExistsPackage(System.String)">
            <summary>
            Определяет, существует ли пакет <paramref name = "packageName"/> в хранилище системы контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <returns><c>true</c>, если пакет <paramref name = "packageName"/> существует в хранилище системы контроля 
            версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.UnlockPackage(System.String)">
            <summary>
            Разблокирует указанный пакет в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <returns><c>true</c>, если пакет <paramref name = "packageName"/> разблокирован на уровне системы контроля 
            версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.TryLockSchema(System.String,System.String,System.String@)">
            <summary>
            Блокирует указанную схему в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="schemaName">Имя схемы.</param>
            <param name="message">Cодержит сообщение об ошибке, если схема <paramref name = "schemaName"/> из пакета 
            <paramref name = "packageName"/> не заблокирована; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если схема <paramref name = "schemaName"/> из пакета <paramref name = "packageName"/>
            заблокирована в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.TryLockSchemas(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.PackageElementInfo},System.String@)">
            <summary>
            Блокирует указанные схемы в системе контроля версий.
            </summary>
            <param name="packageSchemaNames">Список схем для блокировки.</param>
            <param name="message">Cодержит сообщение об ошибке, если хотя бы одна из схем
            <paramref name = "packageSchemaNames"/> не заблокирована; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если все схемы из списка схем <paramref name = "packageSchemaNames"/> заблокированы
            в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.ExistsSchema(System.String,System.String)">
            <summary>
            Определяет, существует ли схема <paramref name = "schemaName"/> из пакета <paramref name = "packageName"/> в
            хранилище системы контроля версий. Метод является заглушкой для старой логики.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="schemaName">Имя схемы.</param>
            <returns><c>true</c>, если схема <paramref name = "schemaName"/> из пакета <paramref name = "packageName"/>
            существует в хранилище системы контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.UnlockSchema(System.String,System.String)">
            <summary>
            Разблокирует указанную схему в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="schemaName">Имя схемы.</param>
            <returns><c>true</c>, если схема <paramref name = "schemaName"/> из пакета <paramref name = "packageName"/>
            разблокирована на уровне системы контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.TryLockSqlScript(System.String,System.String,System.String@)">
            <summary>
            Блокирует указанный SQL-сценарий в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="sqlScriptName">Имя SQL-сценария.</param>
            <param name="message">Cодержит сообщение об ошибке, если SQL-сценарий <paramref name = "sqlScriptName"/> из
            пакета <paramref name = "packageName"/> не заблокирован; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если SQL-сценарий <paramref name = "sqlScriptName"/> из пакета
            <paramref name = "packageName"/> заблокирован в системе контроля версий; в противном случае — значение
            <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.TryLockSqlScripts(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.PackageElementInfo},System.String@)">
            <summary>
            Блокирует указанные SQL-сценарии в системе контроля версий.
            </summary>
            <param name="packageSqlScriptNames">Список SQL-сценариев для блокировки.</param>
            <param name="message">Cодержит сообщение об ошибке, если хотя бы один из SQL-сценариев
            <paramref name = "packageSqlScriptNames"/> не заблокирован; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если все SQL-сценарии из списка SQL-сценариев
            <paramref name = "packageSqlScriptNames"/> заблокированы в системе контроля версий; в противном случае —
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.SqlScriptExists(System.String,System.String)">
            <summary>
            Определяет, существует ли SQL-сценарий <paramref name = "sqlScriptName"/> из пакета
            <paramref name = "packageName"/> в хранилище системы контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="sqlScriptName">Имя SQL-сценария.</param>
            <returns><c>true</c>, если SQL-сценарий <paramref name = "sqlScriptName"/> из пакета
            <paramref name = "packageName"/> существует в хранилище системы контроля версий; в противном случае —
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.UnlockSqlScript(System.String,System.String)">
            <summary>
            Разблокирует указанный SQL-сценарий в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="sqlScriptName">Имя SQL-сценария.</param>
            <returns><c>true</c>, если SQL-сценарий <paramref name = "sqlScriptName"/> из пакета
            <paramref name = "packageName"/> разблокирован на уровне системы контроля версий; в противном случае —
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.TryLockSchemaData(System.String,System.String,System.String@)">
            <summary>
            Блокирует указанныe данные схемы в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="schemaDataName">Имя данных схемы.</param>
            <param name="message">Cодержит сообщение об ошибке, если данные схемы <paramref name = "schemaDataName"/> из
            пакета <paramref name = "packageName"/> не заблокированы; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если данные схемы <paramref name = "schemaDataName"/> из пакета
            <paramref name = "packageName"/> заблокированы в системе контроля версий; в противном случае — значение
            <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.TryLockSchemaDatas(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.PackageElementInfo},System.String@)">
            <summary>
            Блокирует указанные данные схем в системе контроля версий.
            </summary>
            <param name="packageSchemaDataNames">Список данных схем для блокировки.</param>
            <param name="message">Cодержит сообщение об ошибке, если хотя бы одни из данных схем
            <paramref name = "packageSchemaDataNames"/> не заблокированы; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если все данные схем из списка данных схем <paramref name = "packageSchemaDataNames"/>
            заблокированы в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.SchemaDataExists(System.String,System.String)">
            <summary>
            Определяет, существуют ли данные схемы <paramref name = "schemaDataName"/> из пакета
            <paramref name = "packageName"/> в хранилище системы контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="schemaDataName">Имя данных схемы.</param>
            <returns><c>true</c>, если данные схемы <paramref name = "schemaDataName"/> из пакета
            <paramref name = "packageName"/> существует в хранилище системы контроля версий; в противном случае —
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.UnlockSchemaData(System.String,System.String)">
            <summary>
            Разблокирует указанные данные схемы в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="schemaDataName">Имя данных схемы.</param>
            <returns><c>true</c>, если данные схемы <paramref name = "schemaDataName"/> из пакета
            <paramref name = "packageName"/> разблокирована на уровне системы контроля версий; в противном случае —
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.TryLockAssembly(System.String,System.String,System.String@)">
            <summary>
            Блокирует указанную сборку в системе контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="assemblyName">Имя сборки.</param>
            <param name="message">Cодержит сообщение об ошибке, если сборка <paramref name = "assemblyName"/> из
            пакета <paramref name = "packageName"/> не заблокирована; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если сборка <paramref name = "assemblyName"/> из пакета
            <paramref name = "packageName"/> заблокирована в системе контроля версий; в противном случае — значение
            <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.TryLockAssemblies(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.PackageElementInfo},System.String@)">
            <summary>
            Блокирует указанные сборки в системе контроля версий.
            </summary>
            <param name="packageAssemblyNames">Список сборок для блокировки.</param>
            <param name="message">Cодержит сообщение об ошибке, если хотя бы одна из сборок
            <paramref name = "packageAssemblyNames"/> не заблокирована; в противном случае — пустая строка.</param>
            <returns><c>true</c>, если все сборки из списка сборок <paramref name = "packageAssemblyNames"/>
            заблокированы в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.AssemblyExists(System.String,System.String)">
            <summary>
            Определяет, существует ли сборка <paramref name = "assemblyName"/> из пакета
            <paramref name = "packageName"/> в хранилище системы контроля версий.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="assemblyName">Имя сборки.</param>
            <returns><c>true</c>, если сборка <paramref name = "assemblyName"/> из пакета
            <paramref name = "packageName"/> существует в хранилище системы контроля версий; в противном случае —
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.UnlockAssembly(System.String,System.String)">
            <summary>
            Разблокирует указанную сборку в системе контроля версий.
            </summary>
            <param name="packageName">Имя сборки.</param>
            <param name="assemblyName">Имя сборки.</param>
            <returns><c>true</c>, если сборка <paramref name = "assemblyName"/> из пакета
            <paramref name = "packageName"/> разблокирована на уровне системы контроля версий; в противном случае —
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.UnlockElements(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.PackageElementInfo},Terrasoft.Core.Packages.PackageStorageObjectType)">
            <summary>
            Разблокирует указанные элементы пакета в системе контроля версий.
            </summary>
            <param name="packageElementsInfo">Список характеристик элементов пакета.</param>
            <param name="elementsType">Тип элементов пакета.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.GetIsPackageElementHasForeignLock(System.String,System.String,Terrasoft.Core.Packages.PackageStorageObjectType)">
            <summary>
            Determines whether an element is locked by another user.
            </summary>
            <param name="packageName">Package name.</param>
            <param name="elementName">Element name.</param>
            <param name="elementType">Element type <paramref name = "elementName"/>.</param>
            <returns><c>true</c>, if element exists in version control and is locked by another user.
            Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.GetIsPackageHasForeignLock(System.String)">
            <summary>
            Определяет, заблокирован ли пакет другим пользователем.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <returns><c>true</c>, если пакет заблокирован другим пользователем, в противном случае — 
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.LockerManager.TryLockPackageElements(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.PackageElementInfo},System.String@)">
            <summary>
            Блокирует указанные элементы пакета в системе контроля версий.
            </summary>
            <param name="packageElementsInfo">Список характеристик элементов пакета.</param>
            <param name="message">Cодержит сообщение об ошибке, если хотя бы один элемент пакета не был заблокирован; в
            противном случае — пустая строка.</param>
            <returns><c>true</c>, если все элементы пакета из списка <paramref name = "packageElementsInfo"/>
            заблокированы в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="E:Terrasoft.Core.Packages.LockerManager.LockError">
            <summary>
            Событие при возникновении ошибки блокирования элемента в системе контроля версий.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageElementUtilities.TryGetIsPackageElementHasForeignLock(System.String,System.String,Terrasoft.Core.Packages.PackageStorageObjectType,System.Boolean@,System.String@,Terrasoft.Core.Packages.ILockerManager)">
            <summary>
            Returns flag that indicates whether package element has foreign lock.
            </summary>
            <param name="packageName">Package name.</param>
            <param name="elementName">Element name.</param>
            <param name="type">Package element type.</param>
            <param name="hasForeignLock">Flag that indicates whether element has foreign lock.</param>
            <param name="errorMessage">Error message.</param>
            <param name="lockerManager">Locker manager.</param>
            <returns>Flag that indicates success of current function.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.PackageFlatUriGenerator">
            <summary>
            Предоставляет методы для генерации путей в хранилище системы контроля версий с учетом версии пакета.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageFlatUriGenerator.GetPackageUri(System.Uri,System.String,System.String)">
            <summary>
            Возвращает полный путь к пакету в хранилище системы контроля версий с учетом версии пакета.
            </summary>
            <param name="repositoryUri">Корневой путь к пакету в хранилище системы контроля версий.</param>
            <param name="packageName">Имя пакета.</param>
            <param name="version">Версия пакета.</param>
            <returns>Полный путь к пакету в хранилище системы контроля версий с учетом версии пакета.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageFlatUriGenerator.GetPackageRootUri(System.Uri,System.String)">
            <summary>
            Возвращает полный путь к корню пакета в хранилище системы контроля версий.
            </summary>
            <param name="repositoryUri">Корневой путь к пакету в хранилище системы контроля версий.</param>
            <param name="packageName">Имя пакета.</param>
            <returns>Полный путь к корню пакета в хранилище системы контроля версий.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageFlatUriGenerator.GetPackageBranchesUri(System.Uri,System.String)">
            <summary>
            Возвращает полный путь к веткам пакета в хранилище системы контроля версий.
            </summary>
            <param name="repositoryUri">Корневой путь к пакету в хранилище системы контроля версий.</param>
            <param name="packageName">Имя пакета.</param>
            <returns>Полный путь к веткам пакета в хранилище системы контроля версий.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.PackageInstallOptions">
            <summary>
            Install options for <see cref="T:Terrasoft.Core.Packages.PackageInstallUtilities"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.PackageInstallOptions.Default">
            <summary>
            Default options for package installation.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.PackageInstallOptions.ExecuteValidateActions">
            <summary>
            Indicates whether validation actions needed while updating system database structure.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.SchemaDBActionsAddingResult">
            <summary>
            Result of adding actions for entity schema structure changing.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Packages.SchemaDBActionsAddingResult.Added">
            <summary>
            Actions were added.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Packages.SchemaDBActionsAddingResult.Skipped">
            <summary>
            Actions were skipped.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.InstallMessageEventArgs">
            <summary>
            Provides message about install process.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.InstallMessageEventArgs.#ctor(Terrasoft.Common.MessageType,System.String)">
            <summary>
            Creates instance of <see cref="T:Terrasoft.Core.Packages.InstallMessageEventArgs"/>.
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="message">Message.</param>
        </member>
        <member name="P:Terrasoft.Core.Packages.InstallMessageEventArgs.MessageType">
            <summary>
            Type of the message.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.InstallMessageEventArgs.Message">
            <summary>
            Message.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.SchemaDBActionsAddedEventArgs">
            <summary>
            Provides data about adding actions for entity schema structure changing.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SchemaDBActionsAddedEventArgs.#ctor(System.Guid,System.String,Terrasoft.Core.Packages.SchemaDBActionsAddingResult,System.String,System.TimeSpan)">
            <summary>
            Creates instance of <see cref="T:Terrasoft.Core.Packages.SchemaDBActionsAddedEventArgs"/>.
            </summary>
            <param name="uid">Saving schema UId.</param>
            <param name="name">Saving schema name.</param>
            <param name="result">Result of adding actions.</param>
            <param name="packageName">Saving schema package name.</param>
            <param name="duration">Duration of adding actions.</param>
        </member>
        <member name="P:Terrasoft.Core.Packages.SchemaDBActionsAddedEventArgs.UId">
            <summary>
            Saving schema UId.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SchemaDBActionsAddedEventArgs.Name">
            <summary>
            Saving schema name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SchemaDBActionsAddedEventArgs.Result">
            <summary>
            Result of adding actions.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SchemaDBActionsAddedEventArgs.PackageName">
            <summary>
            Saving schema package name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SchemaDBActionsAddedEventArgs.Duration">
            <summary>
            Duration of adding actions.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageInstallUtilities.UpdatePackageHierarchy(Terrasoft.Core.UserConnection,System.Guid,Terrasoft.Core.DB.DBExecutor)">
            <summary>
            Updates package hierarchy.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="dbExecutor">Instance of <see cref="T:Terrasoft.Core.DB.DBExecutor"/>, provides DB query execution.</param>
            <param name="workspaceId">Workspace unique identifier.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageInstallUtilities.ClearPackageHierarchy(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Clears package hierarchy.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="workspaceId">Workspace unique identifier. Optional parameter, default value is <c>null</c>.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageInstallUtilities.InstallPackage(Terrasoft.Core.UserConnection,System.String,System.String,System.Guid,Terrasoft.Common.ResultMessageCollection@)">
            <summary>
            Installs the <paramref name="rootPackageName" /> package and its dependencies to the database from the 
            version control system storage.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="rootPackageName">Name of the loaded package, from which the dependency hierarchy is built.
            </param>
            <param name="packageVersion">Version of the loaded package, from which the dependency hierarchy is built.
            </param>
            <param name="packageStorageId">The package repository Id.</param>
            <param name="resultMessages">
            Collection of messages that contains information about the process and result of setup.
            </param>
            <returns>Collection that contains information about the installed packages.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageInstallUtilities.UpdatePackage(Terrasoft.Core.UserConnection,System.String,Terrasoft.Common.ResultMessageCollection@)">
            <summary>
            Loads the <paramref name="rootPackageName" /> package and its dependencies to the database from the 
            version control system storage.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="rootPackageName">Name of the updated package, from which the dependency hierarchy is built.
            </param>
            <param name="resultMessages">
            Collection of messages that contains information about the process and result of update.
            </param>
            <returns>Collection that contains information about the updated packages.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.PackageSourceControlStorage">
            <summary>
            Предоставляет методы для работы с хранилищем пакетов в системе контроля версий.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageSourceControlStorage.#ctor(Terrasoft.Core.Packages.ISourceControlManager,Terrasoft.Core.Packages.ISourceControlAuthManager,System.String,System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.Package})">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Packages.PackageSourceControlStorage"/>.
            </summary>
            <param name="sourceControlManager">Экземпляр менеджера системы контроля версий.</param>
            <param name="authManager">Менеджер авторизации в системе контроля версий.</param>
            <param name="workingCopyPath">Путь к рабочей копии пакетов.</param>
            <param name="packages">Перечислитель пакетов, установленных в системе.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageSourceControlStorage.#ctor(System.String,System.String,System.Guid,Terrasoft.Core.Packages.ISourceControlManager,Terrasoft.Core.Packages.ISourceControlAuthManager,System.String,System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.Package})">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Packages.PackageSourceControlStorage"/> для заданных параметров.
            </summary>
            <param name="rootPackageName">Имя пакета, от которого строится иерархия.</param>
            <param name="rootPackageVersion">Версия пакета, от которого строится иерархия.</param>
            <param name="packageStorageId">Идентификатор хранилища пакета.</param>
            <param name="sourceControlManager">Экземпляр менеджера системы контроля версий.</param>
            <param name="authManager">Менеджер авторизации в системе контроля версий.</param>
            <param name="workingCopyPath">Путь к рабочей копии пакетов.</param>
            <param name="packages">Перечислитель пакетов, установленных в системе.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageSourceControlStorage.LoadInternal">
            <summary>
            Загружает пакеты с их зависимостями.
            </summary>
            <remarks>
            Структура пакетов загружается из системы контроля версий в файловую систему и коллекцию 
            <see cref="P:Terrasoft.Core.Packages.PackageStorage.Packages"/>.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageSourceControlStorage.Load(System.String,System.String,System.Guid)">
            <summary>
            Догружает недостающие пакеты в хранилище, начиная с указанного.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="packageVersion">Версия пакета.</param>
            <param name="repositoryId">Идентификатор хранилища.</param>
            <returns>Возвращает <c>true</c> если указанный пакет был найден, иначе <c>false</c>.</returns>
            <remarks>
            Структура пакетов загружается из системы контроля версий в файловую систему и коллекцию
            <see cref="P:Terrasoft.Core.Packages.PackageStorage.Packages"/>.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageSourceControlStorage.LoadPackageDescriptors(System.String,System.String,System.Uri)">
            <summary>
            Loads packages by hierarchy except package content into storage since specified package.
            </summary>
            <param name="packageName">Package name.</param>
            <param name="packageVersion">Package version.</param>
            <param name="sourceUri">Source version control system.</param>
            <remarks>
            Packages descriptors loads from version control system into file system and collection
            <see cref="P:Terrasoft.Core.Packages.PackageStorage.Packages"/>.
            </remarks>
        </member>
        <member name="T:Terrasoft.Core.Packages.PackageUriGeneratorFactory">
            <summary>
            Фабрика классов для генерации путей в хранилище системы контроля версий.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageUriGeneratorFactory.CreateInstance">
            <summary>
            Возвращает экземпляр интерфейса <see cref="T:Terrasoft.Core.Packages.BasePackageUriGenerator"/>.
            </summary>
            <returns>Экземпляр интерфейса <see cref="T:Terrasoft.Core.Packages.BasePackageUriGenerator"/>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.SourceControlAuthDescriptor">
            <summary>
            Авторизационные данные хранилища.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlAuthDescriptor.#ctor(Terrasoft.Core.Packages.SourceControlDescriptor,System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Packages.SourceControlAuthDescriptor"/>,
            используя заданные значения его свойств.
            </summary>
            <param name="sourceControlDescriptor">Дескриптор хранилища.</param>
            <param name="login">Логин к хранилищу.</param>
            <param name="password">Пароль к хранилищу.</param>
        </member>
        <member name="P:Terrasoft.Core.Packages.SourceControlAuthDescriptor.SourceControlDescriptor">
            <summary>
            Дескриптор хранилища.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SourceControlAuthDescriptor.Login">
            <summary>
            Логин к хранилищу.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SourceControlAuthDescriptor.Password">
            <summary>
            Пароль к хранилищу.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.SourceControlDescriptor">
            <summary>
            Дескриптор хранилища.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlDescriptor.#ctor(System.Guid,System.String,System.Uri,System.Boolean)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Packages.SourceControlDescriptor"/>, 
            используя заданные значения его свойств.
            </summary>
            <param name="id">Идентификатор хранилища.</param>
            <param name="name">Название хранилища.</param>
            <param name="address">Адрес хранилища.</param>
            <param name="isActive">Признак, является ли адрес хранилища активным.</param>
        </member>
        <member name="P:Terrasoft.Core.Packages.SourceControlDescriptor.Id">
            <summary>
            Идентификатор хранилища.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SourceControlDescriptor.Name">
            <summary>
            Название хранилища.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SourceControlDescriptor.Address">
            <summary>
            Адрес хранилища.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SourceControlDescriptor.IsActive">
            <summary>
            Признак, является ли адрес хранилища активным.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.SourceControlManager">
            <summary>
            Source control system manager.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.#ctor(Terrasoft.Core.Packages.ISourceControlClient)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Packages.SourceControlManager"/>, 
            используя заданный <see cref="T:Terrasoft.Core.Packages.ISourceControlClient"/>.
            </summary>
            <param name="sourceControlClient">Клиент системы контроля версий.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Исключение генерируется, если параметр 
            <paramref name="sourceControlClient"/> не задан.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.GetIsUpdateNeed(System.String,System.Int32)">
            <summary>
            Сравнивает номер ревизии рабочей копии с номером рабочей ревизии системы контроля версий и определяет, 
            необходимо ли обновление рабочей копии.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <param name="workingRevisionNumber">Номер рабочей ревизии системы контроля версий.</param>
            <returns><c>true</c>, если номер ревизии рабочей копии меньше номера рабочей ревизии системы контроля 
            версий (необходимо обновление рабочей копии); иначе - <c>false</c>.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Исключение генерируется, если параметры 
            <paramref name="workingCopyPath"/> или <paramref name="workingRevisionNumber"/> содержат недопустимые 
            значения.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.Update(System.Uri,System.String,System.Int32,System.Boolean)">
            <summary>
            Загружает папки и файлы из системы контроля версий в локальную папку рабочей копии.
            </summary> 
            <param name="sourceUri">Путь к корневой папке системы контроля версий.</param>
            <param name="targetWorkingCopyPath">Путь к рабочей копии.</param>
            <param name="revisionNumber">Номер ревизии, изменения которой должны быть загружены. Необязательный 
            параметр, по умолчанию равен <c>0</c>. Параметр <paramref name="revisionNumber"/> может быть только 
            положительным.</param>
            <param name="useInfinityDepth">Infinity update depth flag. Optional.
            <c>true</c> to update files and subdirectories, <c>false</c> to update files only in specified
            directory. Default value: <c>true</c></param>
            <result>Номер загруженной ревизии.</result>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Исключение генерируется, если не задан 
            любой из параметров <paramref name="sourceUri"/> или <paramref name="targetWorkingCopyPath"/>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Исключение генерируется, если параметры 
            <paramref name="targetWorkingCopyPath"/> или <paramref name="revisionNumber"/> содержат недопустимые 
            значения.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.Revert(System.String)">
            <summary>
            Отменяет изменения из указанной папки.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns><c>true</c>, если были отменеы изменения; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.GetRootDirectories(System.Uri)">
            <summary>
            Возвращает перечисление имен папок первого уровня относительно корневой папки системы контроля версий.
            </summary>
            <param name="sourceUri">Путь к корневой папке системы контроля версий.</param>
            <returns>Перечислитель имен папок.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.ValidateAccessibility(System.Uri)">
            <summary>
            Проверяет возможность доступа пользователя к системе контроля версий по указаному пути.
            </summary>
            <param name="sourceUri">Путь к папке или файлу системы контроля версий.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.ValidateAccessibility(System.String)">
            <summary>
            Проверяет возможность доступа пользователя к системе контроля версий по пути к хранилищу заданному для 
            локальной директории.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.SaveAuthData(System.Uri,System.String,System.String)">
            <summary>
            Сохраняет логин и пароль доступа к хранилищу.
            </summary>
            <param name="sourceUri">Путь к корневой папке хранилища системы контроля версий.</param>
            <param name="login">Логин к хранилищу.</param>
            <param name="password">Пароль к хранилищу.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.Commit(System.String,System.Int32,System.String)">
            <summary>
            Фиксирует изменения из существующей локальной папки рабочей копии в систему контроля версий.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <param name="workingRevisionNumber">Номер рабочей ревизии системы контроля версий.</param>
            <param name="logMessage">Строка комментариев фиксации. Необязательный параметр.</param>
            <returns>Номер ревизии загруженных изменений.</returns>
            <exception cref="T:Terrasoft.Common.SourceControlOutOfDateException">Исключение генерируется, если 
            номер ревизии рабочей копии <paramref name = "workingCopyPath"/> меньше, чем 
            <paramref name = "workingRevisionNumber"/>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.Commit(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.String)">
            <summary>
            Commits changes from specified paths in working copy to source control system.
            </summary>
            <param name="workingCopyPath">Path to local working copy.</param>
            <param name="paths">Set of paths to changes in working copy.</param>
            <param name="workingRevisionNumber">Working source control revision number.</param>
            <param name="logMessage">Commit message. Optional.</param>
            <returns>Revision number after commit.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.Import(System.String,System.Uri,System.String)">
            <summary>
            Фиксирует в хранилище системы контроля версий дерево файлов и папок из заданной неверсионной папки.
            </summary>
            <param name="localPath">Путь к неверсионной папке.</param>
            <param name="sourceUri">Путь к корневой папке системы контроля версий.</param>
            <param name="logMessage">Строка комментариев фиксации. Необязательный параметр.</param>
            <returns>Номер ревизии загруженных изменений.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Исключение генерируется, если параметр 
            <paramref name="localPath"/> содержит недопустимые значения.</exception>
            <exception cref="T:Terrasoft.Common.SourceControlOperationIllegalUrlException">Исключение генерируется, 
            если в хранилище системы контроля версий уже существует папка по пути <paramref name = "sourceUri"/>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.UnlockDeletedItems(System.Uri,System.Int32)">
            <summary>
            Снимает блокировки с удаленных файлов в системе контроля версий.
            </summary>
            <param name="sourceUri">Путь к корневой папке системы контроля версий.</param>
            <param name="revisionNumber">Номер ревизии, в которой были удалены файлы.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.GetIsUnderSourceControl(System.String)">
            <summary>
            Проверяет, поддерживается ли контроль версионности для заданной папки.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns><c>true</c>, если для папки <paramref name = "workingCopyPath"/> поддерживается контроль
            версионности; иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.UnlockContent(System.String)">
            <summary>
            Снимает блокировку на уровне системы контроля версий со всех файлов, которые находятся в указанной 
            рабочей копии.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns><c>true</c>, если файлы из рабочей копии <paramref name = "workingCopyPath"/> разблокированы 
            в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.UnlockContent(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Снимает блокировку на уровне системы контроля версий со всех файлов, которые находятся по указанным 
            путям.
            </summary>
            <param name="workingCopyPaths">Список локальных путей.</param>
            <returns><c>true</c>, если файлы по указанным путям <paramref name = "workingCopyPaths"/> разблокированы 
            в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.Unlock(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Снимает блокировки с заданных файлов на уровне системы контроля версий.
            </summary>
            <param name="localFilePaths">Список локальных путей к файлам.</param>
            <returns><c>true</c>, если файлы из списка <paramref name = "localFilePaths"/> разблокированы в системе 
            контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.Lock(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Устанавливает блокировку на уровне системы контроля версий всех файлов, которые находятся по указанным 
            путям в рабочей копии.
            </summary>
            <param name="localFilePaths">Пути к файлам в рабочей копии.</param>
            <returns><c>true</c>, если файлы <paramref name = "localFilePaths"/> из рабочей копии заблокированы 
            в системе контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.GetLocalFilePathsForLock(System.String,System.String,System.String)">
            <summary>
            Возвращает список локальных путей к файлам, которые можно заблокировать на уровне системы контроля версий.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <param name="itemLocalPath">Локальный путь. Указывает директорию из которой берутся файлы для блокирования.
            </param>
            <param name="itemName">Имя элемента.</param>
            <returns>Список локальных путей к файлам, которые находятся в <paramref name = "itemLocalPath"/> и которые
            могут быть заблокированы на уровне системы контроля версий.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.GetLocalFilePathsLockedByCurrentUser(System.String)">
            <summary>
            Возвращает список локальных путей к файлам, которые заблокированы на уровне системы контроля версий текущим
            пользователем.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns>Список локальных путей к файлам, которые находятся в <paramref name = "workingCopyPath"/> и 
            которые заблокированы на уровне системы контроля версий текущим пользователем.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.GetLockedFilesByCurrentUser(System.String)">
            <summary>
            Возвращает перечисление адресов файлов, заблокированных на уровне системы контроля версий текущим
            пользователем.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns>Перечислитель путей файлов.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.GetLockedInWorkingCopyFilesByCurrentUser(System.String)">
            <summary>
            Returns an enumeration of the file paths that are locked in working copy by current user.
            </summary>
            <param name="workingCopyPath">Working copy path.</param>
            <returns>Collection of locked files paths.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.GetIsPackageElementHasForeignLock(System.String)">
            <summary>
            Определяет, имеются ли по указанному пути элементы, заблокированные другим пользователем.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <returns><c>true</c>, если присутствует элемент, заблокированый другим пользователем, в противном случае — 
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.SynchronizeUsersLocks(System.String)">
            <summary>
            Синхронизирует блокировки файлов на уровне рабочей копии в соответствии с блокировками файлов на уровне 
            системы контроля версий.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.Exists(System.Uri)">
            <summary>
            Определяет, существует ли заданный файл в хранилище системы контроля версий.
            </summary>
            <param name="sourceControlFileUri">Путь к файлу в хранилище системе контроля версий.</param>
            <returns><c>true</c>, если в хранилище существует файл <paramref name = "sourceControlFileUri"/>; 
            иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.GetIsLockedByOtherUser(System.String)">
            <summary>
            Проверяет, заблокирован ли файл на уровне системы контроля версий не текущим пользователем.
            </summary>
            <param name="localFilePath">Локальный путь к файлу.</param>
            <returns><c>true</c>, если файл <paramref name = "localFilePath"/> заблокирован другим пользователем
            на уровне системы контроля версий; в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.ApplySourceControlChanges(System.String)">
            <summary>
            Актуализирует состояние файлов в системе контроля версий в соответствии с состоянием файлов в рабочей копии.
            </summary>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.GetHeadRevisionNumber(System.Uri)">
            <summary>
            Возвращает номер последней ревизии для указанного пути в системе контроля версий.
            </summary>
            <param name="sourceControlUri">Путь к корневой папке системы контроля версий.</param>
            <returns>Номер последней ревизии для пути <paramref name = "sourceControlUri"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.CreateDirectoryIfNotExist(System.Uri,System.String)">
            <summary>
            По указанному пути на сервере контроля версий создает директорию, если она не существует.
            </summary>
            <param name="directoryUri">Путь к директории.</param>
            <param name="logMessage">Строка комментариев фиксации. Необязательный параметр.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlManager.CreateDirectoriesIfNotExist(System.Collections.Generic.ISet{System.Uri},System.String)">
            <summary>
            По указанным путям на сервере контроля версий создает директории, если они не существуют.
            </summary>
            <param name="directoryUries">Пути к директориям.</param>
            <param name="logMessage">Строка комментариев фиксации. Необязательный параметр.</param>
        </member>
        <member name="P:Terrasoft.Core.Packages.SourceControlManager.ConflictPaths">
            <summary>
            Collection of paths to conflicted files.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SinglePackageDBStorage.AddLoadPackagesSchemasExtraFilters(Terrasoft.Core.DB.Select)">
            <summary>
            Добавляет дополнительные фильтры к запросу на выборку схем пакетов.
            </summary>
            <param name="select">Запрос на выборку схем пакетов из базы данных.</param>
            <remarks>
            Добавляет фильтр для выборки схем только текущего пакета.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.Packages.SinglePackageDBStorage.AddLoadPackagesDataExtraFilters(Terrasoft.Core.DB.Select)">
            <summary>
            Добавляет дополнительные фильтры к запросу на выборку данных пакетов.
            </summary>
            <param name="select">Запрос на выборку данных пакетов из базы данных.</param>
            <remarks>
            Добавляет фильтр для выборки данных текущего пакета.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.Packages.SinglePackageDBStorage.AddLoadPackagesAssembliesExtraFilters(Terrasoft.Core.DB.Select)">
            <summary>
            Добавляет дополнительные фильтры к запросу на выборку сборок пакетов.
            </summary>
            <param name="select">Запрос на выборку сборок пакетов из базы данных.</param>
            <remarks>
            Добавляет фильтр для выборки сборок текущего пакета.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.Packages.SinglePackageDBStorage.AddPackages(System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.Package})">
            <summary>
            Добавляет текущий пакет в хранилище пакетов из переданного списка пакетов.
            </summary>
            <param name="packages">Пакеты.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlPathUtilities.GetSchemaVirtualPath(System.String,System.String)">
            <summary>
            Возвращает виртуальный путь для схемы <paramref name = "schemaName"/> из пакета
            <paramref name = "packageName"/>.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="schemaName">Имя схемы.</param>
            <returns>Виртуальный путь для схемы <paramref name = "schemaName"/> из пакета
            <paramref name = "packageName"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlPathUtilities.GetSqlScriptVirtualPath(System.String,System.String)">
            <summary>
            Возвращает виртуальный путь для SQL-сценария <paramref name = "sqlScriptName"/> из пакета
            <paramref name = "packageName"/>.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="sqlScriptName">Имя SQL-сценария.</param>
            <returns>Виртуальный путь для SQL-сценария <paramref name = "sqlScriptName"/> из пакета
            <paramref name = "packageName"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlPathUtilities.GetSchemaDataVirtualPath(System.String,System.String)">
            <summary>
            Возвращает виртуальный путь для данных схемы <paramref name = "schemaDataName"/> из пакета
            <paramref name = "packageName"/>.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="schemaDataName">Имя данных схемы.</param>
            <returns>Виртуальный путь для данных схемы <paramref name = "schemaDataName"/> из пакета
            <paramref name = "packageName"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlPathUtilities.GetAssemblyVirtualPath(System.String,System.String)">
            <summary>
            Возвращает виртуальный путь для сборки <paramref name = "assemblyName"/> из пакета
            <paramref name = "packageName"/>.
            </summary>
            <param name="packageName">Имя пакета.</param>
            <param name="assemblyName">Имя сборки.</param>
            <returns>Виртуальный путь для сборки <paramref name = "assemblyName"/> из пакета
            <paramref name = "packageName"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlPathUtilities.GetPackageElementPath(System.String,System.String,System.String,Terrasoft.Core.Packages.PackageStorageObjectType)">
            <summary>
            Returns full path for package element.
            </summary>
            <param name="packageCopyPath">Path to working copy folders.</param>
            <param name="packageName">Package name.</param>
            <param name="elementName">Element name.</param>
            <param name="elementType">Element type.<paramref name = "elementName"/>.</param>
            <returns>Full path for package element.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlPathUtilities.GetPackageWorkingCopyPath(System.String,System.String)">
            <summary>
            Возвращает полный путь к пакету.
            </summary>
            <param name="packageCopyPath">Путь к папкам рабочих копий.</param>
            <param name="packageName">Имя пакета.</param>
            <returns>Полный путь к пакету.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlPathUtilities.GetPackageDescriptorPath(System.String,System.String)">
            <summary>
            Возвращает полный путь к файлу дескриптора пакета.
            </summary>
            <param name="packageCopyPath">Путь к папкам рабочих копий.</param>
            <param name="packageName">Имя пакета.</param>
            <returns>Полный путь к файлу дескриптора пакета.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlPathUtilities.GetSchemaPath(System.String,System.String,System.String)">
            <summary>
            Returns full path to a shema's directory.
            </summary>
            <param name="rootPath">Root path to package's directory.</param>
            <param name="packageName">Specified package name.</param>
            <param name="schemaName">Specified schema name.</param>
            <returns>Full path to a shema's directory</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.SourceControlUtilities">
            <summary>
            Класс для вспомогательных методов работы с системой контроля версий.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlUtilities.CreateSourceControlAuthManager(Terrasoft.Core.UserConnection)">
            <summary>
            Создает новый экземпляр менеджера для работы с аутентификацией в хранилище.
            </summary>
            <param name="userConnection">Пользовательское соединение.</param>
            <returns>Новый экземпляр менеджера для работы с аутентификацией в хранилище.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlUtilities.CreateSourceControlManager(Terrasoft.Core.UserConnection)">
            <summary>
            Создает новый экземпляр менеджера для работы с клиентом системы контроля версий.
            </summary>
            <param name="userConnection">Пользовательское соединение.</param>
            <returns>Новый экземпляр менеджера для работы с клиентом системы контроля версий.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlUtilities.CreateLockerManager(Terrasoft.Core.UserConnection)">
            <summary>
            Создает новый экземпляр менеджера для работы с блокировками пакетов и их элементов в хранилище системы
            контроля версий.
            </summary>
            <param name="userConnection">Пользовательское соединение.</param>
            <returns>Новый экземпляр менеджера для работы с блокировками пакетов и их элементов в хранилище системы
            контроля версий.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlUtilities.CreateDescriptorComparer">
            <summary>
            Creates a new manager instance that handles comparison of system item descriptors.
            </summary>
            <returns>New manager instance that handles comparison of system item descriptors.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlUtilities.CreateDescriptorComparer(Terrasoft.Core.AppConnection)">
            <summary>
            Creates a new manager instance that handles comparison of system item descriptors, based on
            flag UseSchemaChecksum in <see cref="T:Terrasoft.Core.AppConnection"/>.
            </summary>
            <param name="appConnection">Specified instance of <see cref="T:Terrasoft.Core.AppConnection"/>.</param>
            <returns>New manager instance that handles comparison of system item descriptors.</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.SvnAuthManager">
            <summary>
            Менеджер для работы с аутентификацией в хранилище для пакетов.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnAuthManager.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Packages.SvnAuthManager"/> 
            с заданными параметрами.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnAuthManager.GetAuthDataByUri(System.Uri)">
            <summary>
            Возвращает авторизационные данные хранилища.
            </summary>
            <param name="sourceUri">Адрес хранилища.</param>
            <returns>Возвращает экземпляр <see cref = "T:Terrasoft.Core.Packages.SourceControlAuthDescriptor"/> для 
            хранилища с адресом <paramref name = "sourceUri"/>. Если хранилище с таким адресом не найдено, тогда 
            генерируется исключение.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Исключение генерируется, если хранилище с 
            адресом <paramref name = "sourceUri"/> не найдено.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnAuthManager.GetIdByUri(System.Uri)">
            <summary>
            Возвращает идентификатор хранилища.
            </summary>
            <param name="sourceUri">Адрес хранилища.</param>
            <returns>Идентификатор хранилища с адресом <paramref name = "sourceUri"/>. Если хранилище с таким адресом 
            не найдено, тогда генерируется исключение.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Исключение генерируется, если хранилище с 
            адресом <paramref name = "sourceUri"/> не найдено.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnAuthManager.GetUriById(System.Guid,System.String)">
            <summary>
            Возвращает адрес хранилища.
            </summary>
            <param name="descriptorId">Идентификатор хранилища.</param>
            <param name="packageName">Название пакета. Необязательный параметр, значение по умолчанию - <c>null</c>.
            </param>
            <returns>Адрес хранилища с идентификатором <paramref name = "descriptorId"/>. Если хранилище с таким 
            идентификатором не найдено, тогда генерируется исключение.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Исключение генерируется, если хранилище с 
            идентификатором <paramref name = "descriptorId"/> не найдено.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnAuthManager.UpdateAuthData(System.Guid,System.String,System.String)">
            <summary>
            Сохраняет логин и пароль доступа к хранилищу.
            </summary>
            <param name="repositoryId">Идентификатор хранилища.</param>
            <param name="login">Логин к хранилищу.</param>
            <param name="password">Пароль к хранилищу.</param>
            <exception cref="T:System.Security.SecurityException">Если у пользователя недостаточно прав для модификации объекта.
            </exception>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Исключение генерируется, если хранилище с
            идентификатором <paramref name="repositoryId"/> не активно.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnAuthManager.SaveRepository(Terrasoft.Core.Packages.SourceControlDescriptor)">
            <summary>
            Сохраняет дескриптор хранилища.
            </summary>
            <param name="sourceControlDescriptor">Дескриптор хранилища.</param>
            <returns>Идентификатор хранилища, дескриптор которого сохранен.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnAuthManager.DeleteRepository(System.Guid)">
            <summary>
            Удаляет дескриптор хранилища.
            </summary>
            <param name="repositoryId">Идентификатор хранилища.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnAuthManager.GetIsRepositoryInUse(System.Guid)">
            <summary>
            Определяет, существуют ли пакеты, которые ссылаются на заданное хранилище.
            </summary>
            <param name="repositoryId">Идентификатор хранилища.</param>
            <returns><c>true</c>, если на хранилище ссылается хотя бы один пакет; в противном случае — 
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnAuthManager.FindSourceControlDescriptor(System.Guid)">
            <summary>
            Возвращает дескриптор хранилища с заданным идентификатором.
            </summary>
            <param name="repositoryId">Идентификатор хранилища.</param>
            <returns>Возвращает экземпляр <see cref = "T:Terrasoft.Core.Packages.SourceControlDescriptor"/> для 
            хранилища с идентификатором <paramref name = "repositoryId"/> либо <c>null</c>, если хранилище с таким 
            идентификатором не найдено.</returns>
        </member>
        <member name="P:Terrasoft.Core.Packages.SvnAuthManager.SourceControlAuthDescriptors">
            <summary>
            Перечислитель авторизационных данных хранилищ.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SvnAuthManager.Uris">
            <summary>
            Перечислитель путей хранилищ.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SvnAuthManager.SourceControlDescriptors">
            <summary>
            Перечислитель дескрипторов хранилищ.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SvnAuthManager.UseSourceControlAuthentication">
            <summary>
            Признак, использовать ли кэш аутентификации системы контроля версий.
            </summary>
            <value>
            <c>true</c>, если используется кэш аутентификации системы контроля версий, иначе - <c>false</c>.
            </value>
            <remarks> Значение по умолчанию: <c>false</c>.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Packages.SvnAuthManager.SourceControlAuthPath">
            <summary>
            Путь к папке, где хранятся аутентификационные данные хранилища системы контроля версий.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.SvnClientWrapper">
            <summary>
            Обертка клиента системы контроля версий.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnClientWrapper.#ctor(Terrasoft.Core.Packages.ISvnClient)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Packages.SvnClientWrapper"/> 
            для заданного клиента контроля версий.
            </summary>
            <param name="instance">Клиент контроля версий.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnClientWrapper.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Packages.SvnClientWrapper"/> .
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnClientWrapper.Authenticate(System.String,System.String)">
            <summary>
            Выполняет настройку аутентификаци клиента контроля версий.
            </summary>
            <param name="login">Логин к хранилищу.</param>
            <param name="password">Пароль к хранилищу.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnClientWrapper.CheckOut(System.Uri,System.String,System.Int32,System.Boolean)">
            <summary>
            Выполняет полную загрузку папок и файлов заданной ревизии из системы контроля версий в локальную папку 
            рабочей копии.
            </summary>
            <param name="sourceUri">Путь к корневой папке системы контроля версий.</param>
            <param name="workingCopyPath">Путь к рабочей копии.</param>
            <param name="revision">Номер ревизии, изменения которой должны быть загружены.</param>
            <param name="useInfinityDepth">Infinity checkout depth flag. Optional.
            <c>true</c> to check out files and subdirectories, <c>false</c> to check out files only in specified
            directory. Default value: <c>true</c></param>
            <returns><c>true</c>, если загрузка данных из системы контроля версий неуспешна; 
            в противном случае — значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnClientWrapper.CheckOut(System.Uri,System.String,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Loads files and folders of the specified revision from the version control system to the local copy folder.
            </summary>
            <param name="sourceUri">Path to the root folder of the version control system.</param>
            <param name="workingCopyPath">Path to working copy.</param>
            <param name="revision">Number of revision whose changes must be loaded.</param>
            <param name="useInfinityDepth">Infinity checkout depth flag. Optional.
            <c>true</c> to check out files and subdirectories, <c>false</c> to check out files only in specified
            directory. Default value: <c>true</c></param>
            <param name="checkoutRevison">Loaded revision number.</param>
            <returns><c>true</c> if loading data from the version control system failed; otherwise – <c>false</c>.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.WorkspaceSvnAuthManager">
            <summary>
            Менеджер для работы с аутентификацией в хранилище для конфигурации.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Packages.WorkspaceSvnAuthManager"/> 
            с заданными параметрами.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.SourceControlDescriptor})">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Packages.WorkspaceSvnAuthManager"/> 
            с заданными параметрами.
            </summary>
            <param name="login">Логин пользователя.</param>
            <param name="password">Пароль пользователя.</param>
            <param name="sourceControlDescriptors">Перечислитель дескрипторов хранилищ системы контроля версий.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.GetAuthDataByUri(System.Uri)">
            <summary>
            Возвращает авторизационные данные хранилища.
            </summary>
            <param name="sourceUri">Адрес хранилища.</param>
            <returns>Возвращает экземпляр <see cref = "T:Terrasoft.Core.Packages.SourceControlAuthDescriptor"/> для 
            хранилища с адресом <paramref name = "sourceUri"/>. Если хранилище с таким адресом не найдено, тогда 
            генерируется исключение.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Исключение генерируется, если хранилище с 
            адресом <paramref name = "sourceUri"/> не найдено.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.GetIdByUri(System.Uri)">
            <summary>
            Возвращает идентификатор хранилища.
            </summary>
            <param name="sourceUri">Адрес хранилища.</param>
            <returns>Идентификатор хранилища с адресом <paramref name = "sourceUri"/>. Если хранилище с таким адресом 
            не найдено, тогда генерируется исключение.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Исключение генерируется, если хранилище с 
            адресом <paramref name = "sourceUri"/> не найдено.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.GetUriById(System.Guid,System.String)">
            <summary>
            Возвращает адрес хранилища.
            </summary>
            <param name="descriptorId">Идентификатор хранилища.</param>
            <param name="packageName">Название пакета. Необязательный параметр, значение по умолчанию - <c>null</c>.
            </param>
            <returns>Адрес хранилища с идентификатором <paramref name = "descriptorId"/>. Если хранилище с таким 
            идентификатором не найдено, тогда генерируется исключение.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.UpdateAuthData(System.Guid,System.String,System.String)">
            <summary>
            Обновляет логин и пароль доступа к хранилищу.
            </summary>
            <param name="repositoryId">Идентификатор хранилища.</param>
            <param name="login">Логин к хранилищу.</param>
            <param name="password">Пароль к хранилищу.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.SaveRepository(Terrasoft.Core.Packages.SourceControlDescriptor)">
            <summary>
            Сохраняет дескриптор хранилища.
            </summary>
            <param name="sourceControlDescriptor">Дескриптор хранилища.</param>
            <returns>Идентификатор хранилища, дескриптор которого сохранен.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.DeleteRepository(System.Guid)">
            <summary>
            Удаляет дескриптор хранилища.
            </summary>
            <param name="repositoryId">Идентификатор хранилища.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.GetIsRepositoryInUse(System.Guid)">
            <summary>
            Определяет, существуют ли пакеты, которые ссылаются на заданное хранилище.
            </summary>
            <param name="repositoryId">Идентификатор хранилища.</param>
            <returns><c>true</c>, если на хранилище ссылается хотя бы один пакет; в противном случае — 
            значение <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.FindSourceControlDescriptor(System.Guid)">
            <summary>
            Возвращает дескриптор хранилища с заданным идентификатором.
            </summary>
            <param name="repositoryId">Идентификатор хранилища.</param>
            <returns>Возвращает экземпляр <see cref = "T:Terrasoft.Core.Packages.SourceControlDescriptor"/> для 
            хранилища с идентификатором <paramref name = "repositoryId"/> либо <c>null</c>, если хранилище с таким 
            идентификатором не найдено.</returns>
        </member>
        <member name="P:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.SourceControlAuthDescriptors">
            <summary>
            Перечислитель авторизационных данных хранилищ.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.Uris">
            <summary>
            Перечислитель путей хранилищ.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.SourceControlDescriptors">
            <summary>
            Перечислитель дескрипторов хранилищ.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.UseSourceControlAuthentication">
            <summary>
            Признак, использовать ли кэш аутентификации системы контроля версий.
            </summary>
            <value>
            <c>true</c>, если используется кэш аутентификации системы контроля версий, иначе - <c>false</c>.
            </value>
            <remarks> Значение по умолчанию: <c>false</c>.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Packages.WorkspaceSvnAuthManager.SourceControlAuthPath">
            <summary>
            Путь к папке, где хранятся аутентификационные данные хранилища системы контроля версий.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.SvnSourceControlClient">
            <summary>
            Client for SVN version control system.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.#ctor(Terrasoft.Core.Packages.ISourceControlAuthManager)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Core.Packages.SvnSourceControlClient"/> 
            class for the specified authorization manager and the path to the configuration file.
            </summary>
            <param name="authManager">Authorization Manager version control system.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.#ctor(Terrasoft.Core.Packages.ISourceControlAuthManager,System.Int32,System.String,Terrasoft.Core.ISecurityUtilities)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Core.Packages.SvnSourceControlClient"/> 
            class for the specified parameters.
            </summary>
            <param name="authManager">Authorization Manager version control system.</param>
            <param name="workspaceNumber">Workspace number.</param>
            <param name="workspaceName">Workspace name.</param>
            <param name="securityUtilities">SVN security utilities.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">An exception is thrown if the 
            parameter <paramref name="workspaceName"/> is not specified.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">An exception is thrown if the 
            parameter <paramref name="workspaceNumber"/> contains an invalid value.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.SaveAuthData(System.Uri,System.String,System.String)">
            <summary>
            Saves the username and password to access the repository.
            </summary>
            <param name="sourceUri">Path to the root folder of the versioning system repository.</param>
            <param name="login">Repository login.</param>
            <param name="password">Repository password.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.ValidateAccessibility(System.Uri)">
            <summary>
            Checks user's access to the version control system for the specified path.
            </summary>
            <param name="sourceControlUri">Path to the folder or file version control system.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.ValidateAccessibility(System.String)">
            <summary>
            Checks the user's access to the version control system by storage path from a local directory.
            </summary>
            <param name="workingCopyPath">Path to a local directory of working copy.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.GetUriFromWorkingCopy(System.String)">
            <summary>
            Returns the path to the root folder of the version control system by given path to the working copy folder.
            </summary>
            <param name="workingCopyPath">Path to the working copy folder.</param>
            <returns>The path to the root folder of the version control system.</returns>
            <exception cref="T:Terrasoft.Common.SourceControlOperationException">An exception is generated if the folder
            path specified in the parameter <paramref name = "workingCopyPath"/>, is not under version control 
            system.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.GetIsUnderSourceControl(System.String)">
            <summary>
            Checks whether the specified folder under the working copy version control system.
            </summary>
            <param name="workingCopyPath">Path to the working copy.</param>
            <returns><c>true</c>, if the folder path specified in parameter <paramref name = "workingCopyPath"/>,
            is under version control system; otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.CheckOut(System.Uri,System.String,System.Int32,System.Boolean)">
            <summary>
            Performs a full load of folders and files from the source control system to a local folder
            of the working copy.
            </summary>
            <param name="sourceControlUri">Path to the root folder of the version control system.</param>
            <param name="workingCopyPath">Path to the working copy.</param>
            <param name="revisionNumber">The revision number, which changes should be loaded.
            Optional, default is <c>0</c>.</param>
            <param name="useInfinityDepth">Infinity checkout depth flag. Optional.
            <c>true</c> to check out files and subdirectories, <c>false</c> to check out files only in specified
            directory. Default value: <c>true</c></param>
            <returns>Loaded revision number.</returns>
            <exception cref="T:Terrasoft.Common.SourceControlOperationException">The exception is generated when loading
            data from a version control system is unsuccessful.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.Update(System.String,System.Int32,System.Boolean)">
            <summary>
            Updates the files and folders from the source control system to a local folder of the working copy.
            </summary>
            <param name="workingCopyPath">Path to the working copy</param>
            <param name="revisionNumber">The revision number, which changes should be loaded.
            Optional, default is <c>0</c>.</param>
            <param name="useInfinityDepth">Infinity update depth flag. Optional.
            <c>true</c> to update files and subdirectories, <c>false</c> to update files only in specified
            directory. Default value: <c>true</c></param>
            <returns>Loaded revision number.</returns>
            <exception cref="T:Terrasoft.Common.SourceControlOperationException">The exception is generated when loading
            data from a version control system is unsuccessful.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.Revert(System.String)">
            <summary>
            Undo changes from the specified folder.
            </summary>
            <param name="workingCopyPath">Path to the working copy.</param>
            <returns><c>true</c>, if changes have been canceled; otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.GetLockedFilesByCurrentUser(System.String)">
            <summary>
            Returns an enumeration of the file addresses that are locked by version control system by
            current User.
            </summary>
            <param name="workingCopyPath">Path to the working copy.</param>
            <returns>Enumerator file paths.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.GetLockedInWorkingCopyFilesByCurrentUser(System.String)">
            <summary>
            Returns an enumeration of the file paths that are locked in working copy by current user.
            </summary>
            <param name="workingCopyPath">Path to the working copy.</param>
            <returns>Enumerator file paths.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.GetIsFilesHaveForeignLock(System.String)">
            <summary>
            Determines whether the specified path elements that are locked by another user.
            </summary>
            <param name="workingCopyPath">Path to the working copy.</param>
            <returns><c>true</c>, if there is an element that is locked by another user,
            otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.GetRootDirectories(System.Uri)">
            <summary>
            Returns an enumeration of the first level folder names relative to the
            root folder of the version control system.
            </summary>
            <param name="sourceControlUri">Path to the root folder of the version control system.</param>
            <returns>Enumerator folder names.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.Commit(System.String,System.String)">
            <summary>
            Commits changes from a local folder in your working copy version control system.
            </summary>
            <param name="workingCopyPath">Path to the working copy.</param>
            <param name="logMessage">Commit comments. Optional.</param>
            <returns>The revision number of changes have been added.</returns>
            <exception cref="T:Terrasoft.Common.SourceControlOperationException">An exception is generated
            if the commit data in the version control system failed.</exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.Commit(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Commits changes from specified paths in working copy to source control system.
            </summary>
            <param name="workingCopyPath">Path to local working copy.</param>
            <param name="paths">Set of paths to changes in working copy.</param>
            <param name="logMessage">Commit message. Optional.</param>
            <returns>Revision number after commit.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.Import(System.String,System.Uri,System.String)">
            <summary>
            Commits in version control repository of files and folders tree of a given unversioned folders.
            </summary>
            <param name="localPath">Path to an unversioned folder.</param>
            <param name="sourceControlUri">Path to the root folder of the repository versioning system.</param>
            <param name="logMessage">Commit comments. Optional.</param>
            <returns>The revision number of changes have been added.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.UnlockDeletedItems(System.Uri,System.Int32)">
            <summary>
            Unlocks the deleted files in the version control system.
            </summary>
            <param name="sourceControlUri">Path to the root folder of the repository versioning system.</param>
            <param name="revisionNumber">The revision number, in which the files were deleted.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.Lock(System.Collections.Generic.ICollection{System.String},System.Boolean)">
            <summary>
            Blocks access to data files at the level of version control system.
            </summary>
            <param name="localFilePaths">List of local paths to files.</param>
            <param name="isForceLock">Indicates whether forced lock. Optional. Default value - <c>false</c>.</param>
            <returns><c>true</c>, If the files <paramref name = "localFilePaths"/> locked in a version control system;
            otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.Lock(System.String,System.Boolean)">
            <summary>
            Blocks access to the specified file on version control system level.
            </summary>
            <param name="localFilePath">Local file path.</param>
            <param name="isForceLock">Indicates whether forced lock. Optional.
            Default is <c>false</c>.</param>
            <returns><c>true</c>, if file <paramref name = "localFilePath"/> locked in a version control system; 
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.Unlock(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Unlocks the specified file at the version control system.
            </summary>
            <param name="localFilePaths">List of local paths to files.</param>
            <returns><c>true</c>, if files from list <paramref name = "localFilePaths"/> locked
            at the version control system; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.Unlock(System.String)">
            <summary>
            Removes the lock on the specified file on version control system level.
            </summary>
            <param name="localFilePath">Local file path.</param>
            <returns><c>true</c>, if file <paramref name = "localFilePath"/> unlocked at the version control system;
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.UnlockContent(System.String)">
            <summary>
            Unlocks all files, which are specified in working copy on version control system level 
            </summary>
            <param name="workingCopyPath">Path to the working copy.</param>
            <returns><c>true</c>, if files from working copy <paramref name = "workingCopyPath"/> unlocked
            at the version control system; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.UnlockContent(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Unlocks all files, which are located on the specified paths on version control system level.
            </summary>
            <param name="workingCopyPaths">List of local paths.</param>
            <returns><c>true</c>, if specified files <paramref name = "workingCopyPaths"/> unlocked at
            version control system; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.SynchronizeUsersLocks(System.String)">
            <summary>
            Synchronizes lock of files at working copies in accordance with the lock files at the
            version control system level.
            </summary>
            <param name="workingCopyPath">Path to the working copy.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.Exists(System.Uri)">
            <summary>
            Determines whether the specified file exists in the source control repository.
            </summary>
            <param name="sourceControlFileUri">The path to the file in the source control system.</param>
            <returns><c>true</c>, if file exists <paramref name = "sourceControlFileUri"/>; 
            otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.Add(System.String)">
            <summary>
            Adds unversioned file to version control system.
            </summary>
            <param name="workingCopyFilePath">The path to the file in the working copy.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.GetIsLocked(System.String)">
            <summary>
            Check whether the file is locked on version control system level.
            </summary>
            <param name="localFilePath">Local file path.</param>
            <returns><c>true</c>, if file <paramref name = "localFilePath"/> is locked on version control system level
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.GetIsLockedByCurrentUser(System.String)">
            <summary>
            Check whether the file is locked on version control system level by current user.
            </summary>
            <param name="localFilePath">Local file path.</param>
            <returns><c>true</c>, if file <paramref name = "localFilePath"/> is locked by current user
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.GetIsLockedByOtherUser(System.String)">
            <summary>
            Check whether the file is locked on version control system level by other user.
            </summary>
            <param name="localFilePath">Local file path.</param>
            <returns><c>true</c>, if file <paramref name = "localFilePath"/> is locked by other user
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.GetLocalFilePathsForLock(System.String,System.String,System.String)">
            <summary>
            Returns a list of local paths, which can be locked on version control system level.
            </summary>
            <param name="workingCopyPath">Path to the working copy.</param>
            <param name="itemLocalPath">Directory from which files are taken to lock (local path).</param>
            <param name="itemName">Element name.</param>
            <returns>List of local paths to files that are in <paramref name = "itemLocalPath"/> and which may be
            locked to the version control system level.</returns>
            <exception cref="T:Terrasoft.Common.SourceControlLockException">An exception is generated if the path is
            obtained from <paramref name = "itemLocalPath"/> indicates a non-existent folder in source control,
            or if at least one file from a directory <paramref name = "itemLocalPath"/> is locked by another user,
            or if at least one file from a directory <paramref name = "itemLocalPath"/> is outdated.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.GetLocalFilePathsLockedByCurrentUser(System.String)">
            <summary>
            Returns a list of local paths, locked on version control system level by current user.
            </summary>
            <param name="workingCopyPath">Path to the working copy.</param>
            <returns>List of local paths to files that are in <paramref name = "workingCopyPath"/> and which are
            locked on version control system level by current user.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.GetHeadRevisionNumber(System.Uri)">
            <summary>
            Returns the number of the last revision to the specified path in the version control system.
            </summary>
            <param name="sourceControlUri">Path to the root folder of the repository versioning system.</param>
            <returns>Latest revision number for the path <paramref name = "sourceControlUri"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.ApplySourceControlChanges(System.String)">
            <summary>
            Actualizes the status of files in version control system in accordance with the state of the
            file in the working copy.
            </summary>
            <param name="workingCopyPath">Path to the working copy.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.SetPropertyMimeType(System.String)">
            <summary>
            Sets the MimeType property for files.
            </summary>
            <param name="workingCopyPath">Path to the working copy.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.CreateDirectoryIfNotExist(System.Uri,System.String)">
            <summary>
            Creates directory on source control system server if it does not exist.
            </summary>
            <param name="directoryUri">Directory path.</param>
            <param name="logMessage">Commit comments. Optional.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.CreateDirectoriesIfNotExist(System.Collections.Generic.ISet{System.Uri},System.String)">
            <summary>
            Creates directory on source control system server if it does not exist.
            </summary>
            <param name="directoryUries">Directory paths.</param>
            <param name="logMessage">Commit comments. Optional.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.SvnSourceControlClient.ProcessWorkingCopyConflicts(System.String)">
            <summary>
            In case of conflicts in existing working copy fires a <see cref="E:Terrasoft.Core.Packages.SvnSourceControlClient.Conflict"/> event.
            If there is no any subscription to <see cref="E:Terrasoft.Core.Packages.SvnSourceControlClient.Conflict"/> event does nothing.
            </summary>
            <param name="workingCopyPath">Path to a working copy.</param>
        </member>
        <member name="P:Terrasoft.Core.Packages.SvnSourceControlClient.Realm">
            <summary>
            The scope for user authentication when logging into the version control system.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Packages.SvnSourceControlClient.Conflict">
            <summary>
            Occurs when a conflict happened during the SVN operation or working copy processing.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Packages.ItemValidationMessage">
            <summary>
            Содержит информацию о результатах проверки элемента конфигурации.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.ItemValidationMessage.#ctor(Terrasoft.Core.Packages.Descriptor,Terrasoft.Common.ResultMessage)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Packages.ItemValidationMessage"/> для заданного элемента конфигурации.
            </summary>
            <param name="item">Элемент конфигурации.</param>
            <param name="message">Сообщение <see cref="T:Terrasoft.Common.ResultMessage"/> с информацией о результатах проверки.</param>
        </member>
        <member name="P:Terrasoft.Core.Packages.ItemValidationMessage.Item">
            <summary>
            Элемент конфигурации.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.ItemValidationMessage.Message">
            <summary>
            Сообщение с информацией о результатах проверки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.PackageValidationOptions.ValidateHierarchy">
            <summary>
            Determines whether packages hierarchy has to be validated.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.HierarchyValidationFailEventArgs.#ctor(System.Exception)">
            <summary>
            Class constructor.
            </summary>
            <param name="exception">Hierarchy validation exeption.</param>
        </member>
        <member name="P:Terrasoft.Core.Packages.HierarchyValidationFailEventArgs.Exception">
            <summary>
            Hierarchy validation exeption.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageValidator.GetIsPackageValid(System.String)">
            <summary>
            Checks if package is valid in file system.
            </summary>
            <param name="packageName">Package name.</param>
            <returns><c>true</c> if package is valid, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageValidator.Validate(Terrasoft.Core.Packages.PackageStorage,Terrasoft.Core.Packages.PackageStorage,Terrasoft.Core.Packages.PackageValidationOptions)">
            <summary>
            Determines possibility of packages instalation from <paramref name="sourceStorage"/> to
            <paramref name="targetStorage"/>.
            </summary>
            <param name="sourceStorage">Storage to install packages from.</param>
            <param name="targetStorage">Storage to install packages to.</param>
            <param name="options">Checking options.</param>
            <returns><c>true</c>, if checking was successful. Otherwise returns <c>false</c>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">If <paramref name="sourceStorage"/>
            or <paramref name="targetStorage"/> or <paramref name="options"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Terrasoft.Core.Process.BpmnElementVocabulary">
            <summary>
            The types of the flow elements.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.BpmnElementVocabulary.GetShouldProcessByTaskService(Terrasoft.Core.Process.FlowElement)">
            <summary>
            Определяет, что элемент бизнес-процесса требует выполнения сервисом <see cref="T:Terrasoft.Core.Process.TaskService"/>.
            </summary>
            <returns><c>true</c>, если элемент бизнес-процесса требует выполнения сервисом <see cref="T:Terrasoft.Core.Process.TaskService"/>;
            иначе — <c>false</c>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ConditionalSequenceFlow">
            <summary>
            Представляет соединение элементов бизнес-процесса с условием.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.SequenceFlow">
            <summary>
            Представляет соединение элементов бизнес-процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.SequenceFlow.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.SequenceFlow"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.SequenceFlow.WriteProperties(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет запись свойств.
            </summary>
            <param name="dataWriter">
            Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого осуществляется запись свойств.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Process.SequenceFlow.ReadProperties(Terrasoft.Common.DataReader)">
            <summary>
            Выполняет чтение свойств.
            </summary>
            <param name="dataReader">
            Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется вычитка свойств.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Process.SequenceFlow.Equals(System.Object)">
            <summary>
            Определяет, равны ли данный экземпляр <see cref="T:Terrasoft.Core.Process.SequenceFlow"/> и заданный экземпляр 
            <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">Экземпляр <see cref="T:System.Object"/>, который сравнивается с текущим экземпляром 
            <see cref="T:Terrasoft.Core.Process.SequenceFlow"/>.</param>
            <returns><c>true</c>, если сравниваемые объекты идентичны; иначе — <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SequenceFlow.GetHashCode">
            <summary>
            Возвращает хэш-код объекта.
            </summary>
            <returns>Хэш-код объекта.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.SequenceFlow.CheckCondition(System.Guid)">
            <summary>
            Метод не реализован.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SequenceFlow.TargetFlowElementUId">
            <summary>
            Идентификатор элемента, в который приходит соединение.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SequenceFlow.SourceFlowElementUId">
            <summary>
            Идентификатор элемента, из которого исходит соединение.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.SequenceFlow.ExpressionText">
            <summary>
            Текст выражения.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ConditionalSequenceFlow.#ctor(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.ConditionalSequenceFlow"/>,
            используя схему процесса <see cref="T:Terrasoft.Core.Process.FlowSchema"/>.
            </summary>
            <param name="flowSchema">Схема процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ConditionalSequenceFlow.WriteProperties(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет запись свойств.
            </summary>
            <param name="dataWriter">
            Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого осуществляется запись свойств.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Process.ConditionalSequenceFlow.ReadProperties(Terrasoft.Common.DataReader)">
            <summary>
            Выполняет чтение свойств.
            </summary>
            <param name="dataReader">
            Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется вычитка свойств.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Process.ConditionalSequenceFlow.CheckCondition(System.Guid)">
            <summary>
            Выполняет проверку условия перехода к следующему элементу бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор экземпляра процесса, для которого необходимо проверять условие.
            </param>
            <returns><c>true</c>, если выполняется условие перехода к следующему элементу бизнес-процесса;
            иначе — <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ConditionalSequenceFlow.Equals(System.Object)">
            <summary>
            Определяет, равны ли данный экземпляр <see cref="T:Terrasoft.Core.Process.ConditionalSequenceFlow"/> и заданный экземпляр 
            <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">Экземпляр <see cref="T:System.Object"/>, который сравнивается с текущим экземпляром 
            <see cref="T:Terrasoft.Core.Process.ConditionalSequenceFlow"/>.</param>
            <returns><c>true</c>, если сравниваемые объекты идентичны; иначе — <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ConditionalSequenceFlow.GetHashCode">
            <summary>
            Возвращает хэш-код объекта.
            </summary>
            <returns>Хэш-код объекта.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ConditionalSequenceFlow.ActivityResults">
            <summary>
            Результаты активности бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ConditionalSequenceFlow.PressedButtonsCode">
            <summary>
            Коды нажатых кнопок.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ConditionalSequenceFlow.ResultParameterName">
            <summary>
            Имя результирующего параметра элемента бизнес-процесса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowConditionalGateway">
            <summary>
            Базовый класс для элементов BPMN, содержащих условные потоки.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowConditionalGateway.#ctor(Terrasoft.Core.Process.FlowSchema,System.String,Terrasoft.Core.Process.ConditionEvalStrategy)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowConditionalGateway"/>, используя схему процесса
            <see cref="T:Terrasoft.Core.Process.FlowSchema"/>.
            </summary>
            <param name="flowSchema">Схема процесса.</param>
            <param name="bpmnElementName">Имя типа элемента процесса.</param>
            <param name="conditionEvalStrategy">Стратегия вычисления набора условных потоков.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowConditionalGateway.#ctor(Terrasoft.Core.Process.FlowElement,Terrasoft.Core.Process.ConditionEvalStrategy)">
            <summary>
            Создает копию экземпляра <see cref="T:Terrasoft.Core.Process.FlowConditionalGateway"/>.
            </summary>
            <param name="flowElement">"Экземпляр <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса.</param>
            <param name="conditionEvalStrategy">Стратегия вычисления набора условных потоков.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowConditionalGateway.OnVisited(Terrasoft.Core.Process.FlowElement)">
            <summary>
            Called when <see cref="E:Terrasoft.Core.Process.FlowElement.Visited"/> event fired.
            </summary>
            <param name="flowElement">The flow element.</param>
            <returns>The elements that should be executed in the flow after the current gateway.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowConditionalGateway.SubscribeOnVisited(System.Func{Terrasoft.Core.Process.FlowElement,System.Collections.Generic.IEnumerable{Terrasoft.Core.Process.FlowElement}})">
            <summary>
            Подписывает экземпляр <see cref="T:Terrasoft.Core.Process.FlowElement"/> на событие "посещен".
            </summary>
            <param name="defaultHandler">Метод по умолчанию для вызова события "посещен".</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowConditionalGateway.Accept(Terrasoft.Core.Process.FlowVisitor,Terrasoft.Core.Process.FlowElement)">
            <summary>
            Обрабатывает элемент бизнес-процесса.
            </summary>
            <param name="visitor">Экземпляр класса <see cref="T:Terrasoft.Core.Process.FlowVisitor"/>, который отвечает за переход между
            элементами процесса.</param>
            <param name="previousFlowElement">Предыдущий элемент процесса.</param>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowConditionalGateway.ShouldRemoveDefSequenceFlowOnVisited">
            <summary>
            Gets a value indicating whether the default sequence flow shoud be removed on <see cref="M:Terrasoft.Core.Process.FlowConditionalGateway.OnVisited(Terrasoft.Core.Process.FlowElement)"/> event
            when conditional flows exist in <see cref="P:Terrasoft.Core.Process.FlowConditionalGateway.ResultSequenceFlows"/>.
            </summary>
            <value>
            <c>true</c> if the default sequence flow should be removed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowConditionalGateway.UseClonedInstance">
            <summary>
            Определяет, нужно ли схеме при инстанцировании элемента клонировать его.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowConditionalGateway.ResultSequenceFlows">
            <summary>
            The set of output sequence flows.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowConditionalGateway.ConditionEvalStrategy">
            <summary>
            Набор результирующих исходящих потоков.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowEngineStateService">
            <summary>
            Управляет данными процессов, ранее запущенных в системе.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessComponentSetStateService.FindProcessComponentSet(System.Guid)">
            <summary>
            Осуществляет поиск набора компонентов процесса по заданному идентификатору.
            </summary>
            <param name="processComponentSetUId">Идентификатор набора компонентов процесса.</param>
            <returns>Набор компонентов процесса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessComponentSetStateService.GetProcessComponentSet(System.Guid)">
            <summary>
            Возвращает набор компонентов процесса по заданному идентификатору. Если набор компонентов не найден, 
            генерируется исключение.
            </summary>
            <param name="processComponentSetUId">Идентификатор набора компонентов процесса.</param>
            <returns>Набор компонентов процесса.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если набор компонентов процесса с идентификатором
            <paramref name="processComponentSetUId"/> не найден в хранилище.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessComponentSetStateService.SaveProcessComponentSet(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Сохраняет в хранилище набор компонентов процесса.
            </summary>
            <param name="processComponentSet">Набор компонентов запущенного процесса, помещаемый в хранилище.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessComponentSetStateService.FindFlowSchema(System.Guid)">
            <summary>
            Осуществляет поиск данных схемы процесса по заданному идентификатору.
            </summary>
            <param name="schemaId">Идентификатор схемы процесса.</param>
            <returns>Данные схемы процесса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessComponentSetStateService.GetFlowSchema(System.Guid)">
            <summary>
            Возвращает данные схемы процесса по заданному идентификатору. Если схема процесса не найдена, 
            генерируется исключение.
            </summary>
            <param name="schemaId">Идентификатор схемы процесса.</param>
            <returns>Данные схемы процесса.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если схема процесса с идентификатором
            <paramref name="schemaId"/> не найдена в хранилище.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessComponentSetStateService.SaveFlowSchema(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Сохраняет в хранилище данные схемы процесса.
            </summary>
            <param name="flowSchema">Данные схемы процесса, помещаемые в хранилище.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessComponentSetStateService.RemoveFlowVisitor(System.Guid)">
            <summary>
            Удаляет данные схемы процесса из хранилища.
            </summary>
            <param name="processUId">Идентификатор экземпляра процесса, для которого был создан FlowVisitor.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Process.IProcessComponentSetStateService.RemoveProcessComponentSet(System.Guid)">
            <summary>
            Удаляет набор компонентов процесса из хранилища.
            </summary>
            <param name="processComponentSetUId">Идентификатор удаляемого элемента.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaStateService.FindFlowSchema(System.Guid)">
            <summary>
            Осуществляет поиск данных схемы процесса по заданному идентификатору.
            </summary>
            <param name="schemaId">Идентификатор схемы процесса.</param>
            <returns>Данные схемы процесса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaStateService.GetFlowSchema(System.Guid)">
            <summary>
            Возвращает данные схемы процесса по заданному идентификатору. Если схема процесса не найдена, 
            генерируется исключение.
            </summary>
            <param name="schemaId">Идентификатор схемы процесса.</param>
            <returns>Данные схемы процесса.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если схема процесса с идентификатором
            <paramref name="schemaId"/> не найдена в хранилище.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaStateService.FindFlowVisitor(System.Guid,Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Process.FlowVisitor"/> по заданному идентификатору процесса.
            </summary>
            <param name="processUId">Идентификатор экземпляра процесса.</param>
            <param name="flowSchema">Данные схемы процесса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Process.FlowVisitor"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaStateService.SaveFlowSchema(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Сохраняет в хранилище данные схемы процесса.
            </summary>
            <param name="flowSchema">Данные схемы процесса, помещаемые в хранилище.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaStateService.SaveFlowVisitor(Terrasoft.Core.Process.FlowVisitor)">
            <summary>
            Сохраняет в хранилище посетитель элементов процесса.
            </summary>
            <param name="flowVisitor">Данные схемы процесса, помещаемые в хранилище.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaStateService.RemoveFlowSchema(System.Guid)">
            <summary>
            Удаляет данные схемы процесса из хранилища.
            </summary>
            <param name="flowSchemaId">Идентификатор удаляемого элемента.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IFlowSchemaStateService.RemoveFlowVisitor(System.Guid)">
            <summary>
            Удаляет данные схемы процесса из хранилища.
            </summary>
            <param name="processUId">Идентификатор экземпляра процесса, для которого был создан FlowVisitor.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowEngineStateService"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.#ctor(Terrasoft.Core.PersistentStore)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowEngineStateService"/> с заданным алгоритмом восстановления набора
            компонентов бизнес-процесса.
            </summary>
            <param name="store">Постоянное хранилище данных.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.#ctor(System.Func{System.String,System.String,Terrasoft.Core.Process.ProcessComponentSet},Terrasoft.Core.PersistentStore)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowEngineStateService"/> с заданным алгоритмом восстановления набора
            компонентов бизнес-процесса.
            </summary>
            <param name="processComponentSetRestoreMethod">Алгоритм восстановления набора компонентов бизнес-процесса.
            </param>
            <param name="store">Постоянное хранилище данных.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.FindProcessComponentSet(System.Guid)">
            <summary>
            Осуществляет поиск набора компонентов процесса по заданному идентификатору.
            </summary>
            <param name="processComponentSetUId">Идентификатор набора компонентов процесса.</param>
            <returns>Набор компонентов процесса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.GetProcessComponentSet(System.Guid)">
            <summary>
            Возвращает набор компонентов процесса по заданному идентификатору. Если набор компонентов не найден, 
            генерируется исключение.
            </summary>
            <param name="processComponentSetUId">Идентификатор набора компонентов процесса.</param>
            <returns>Набор компонентов процесса.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если набор компонентов процесса с идентификатором
            <paramref name="processComponentSetUId"/> не найден в хранилище.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.SaveProcessComponentSet(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Сохраняет в хранилище набор компонентов процесса.
            </summary>
            <param name="processComponentSet">Набор компонентов запущенного процесса, помещаемый в хранилище.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.RemoveProcessComponentSet(System.Guid)">
            <summary>
            Удаляет набор компонентов процесса из хранилища.
            </summary>
            <param name="processComponentSetUId">Идентификатор удаляемого элемента.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.FindFlowSchema(System.Guid)">
            <summary>
            Осуществляет поиск схемы процесса по заданному идентификатору.
            </summary>
            <param name="schemaId">Идентификатор схемы процесса.</param>
            <returns>Данные схемы процесса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.GetFlowSchema(System.Guid)">
            <summary>
            Возвращает схему процесса по заданному идентификатору. Если схема процесса не найдена, 
            генерируется исключение.
            </summary>
            <param name="schemaId">Идентификатор схемы процесса.</param>
            <returns>Cхема процесса.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если схема процесса с идентификатором
            <paramref name="schemaId"/> не найдена в хранилище.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.FindFlowVisitor(System.Guid,Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Осуществляет поиск посетителя процесса по заданному идентификатору экземпляра процесса.
            </summary>
            <param name="processUId">Идентификатор экзепляра процесса.</param>
            <param name="flowSchema">Схема процесса, для которой возвращается посетитель.</param>
            <returns>Экземпляр посетителя.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.SaveFlowSchema(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Сохраняет в хранилище схему процесса.
            </summary>
            <param name="flowSchema">Схема процесса, помещаемая в хранилище.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.SaveFlowVisitor(Terrasoft.Core.Process.FlowVisitor)">
            <summary>
            Сохраняет в хранилище посетитель экземпляра процесса.
            </summary>
            <param name="flowVisitor">Экземпляр посетителя.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.RemoveFlowSchema(System.Guid)">
            <summary>
            Удаляет данные схемы процесса из хранилища.
            </summary>
            <param name="flowSchemaUId">Идентификатор удаляемого элемента.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.RemoveFlowVisitor(System.Guid)">
            <summary>
            Удаляет данные посетителя процесса из хранилища.
            </summary>
            <param name="processUId">Идентификатор экзямпляра процесса, для которого был создан посетитель.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.GetParameterInfoPathes(System.Guid)">
            <summary>
            Возвращает набор путей, по которым можно извлечь данные параметров бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <returns>
            Хэш-таблица, содержащая набор путей к данным параметров процесса.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.FindParameterInfo(System.Guid,System.String)">
            <summary>
            Осуществляет поиск данных параметра процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к данным параметра процесса.</param>
            <returns>
            Экземпляр типа <see cref="T:Terrasoft.Core.Process.ProcessParameterInfo"/> или <c>null</c>, если данные не найдены.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.GetParameterInfo(System.Guid,System.String)">
            <summary>
            Возвращает данные параметра процесса. Если данные не найдены, генерируется исключение.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к данным параметра процесса.</param>
            <returns>
            Экземпляр типа <see cref="T:Terrasoft.Core.Process.ProcessParameterInfo"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если данные параметра процесса не найдены.</exception>&gt;.
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.SaveParametersInfo(System.Guid,System.Collections.Generic.IDictionary{System.String,Terrasoft.Core.Process.ProcessParameterInfo})">
            <summary>
            Сохраняет данные параметров заданного бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="pathParametersInfo">Список пар ключ/значение, где ключ - путь к параметру,
            а значение - данные параметра процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.SaveParameterInfo(System.Guid,System.String,Terrasoft.Core.Process.ProcessParameterInfo)">
            <summary>
            Сохраняет данные параметра заданного бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к данным параметра процесса.</param>
            <param name="parameterInfo">Данные параметра бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.RemoveParametersInfo(System.Guid)">
            <summary>
            Удаляет все данные параметров заданного бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.GetParametersMapInfo(System.Guid)">
            <summary>
            Возвращает таблицу связей параметров процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.GetProcessParameterPathes(System.Guid)">
            <summary>
            Возвращает набор путей, по которым можно извлечь значения параметров бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <returns>
            Хэш-таблица, содержащая набор путей к значениям параметров процесса.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.SetParameterValue(System.Guid,System.String,System.Int32)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.Int32"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Int32"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.SetParameterValue(System.Guid,System.String,System.Guid)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.Guid"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Guid"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.SetParameterValue(System.Guid,System.String,System.Decimal)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.Decimal"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Decimal"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.SetParameterValue(System.Guid,System.String,System.String)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.String"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.SetParameterValue(System.Guid,System.String,System.Enum)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.Enum"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Enum"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.SetParameterValue(System.Guid,System.String,System.DateTime)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.DateTime"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.SetParameterValue(System.Guid,System.String,System.Boolean)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.Boolean"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Boolean"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.SetParameterValue(System.Guid,System.String,Terrasoft.Common.LocalizableString)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:Terrasoft.Common.LocalizableString"/> по сформированному
            ключу. Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="localizableString">Значение параметра типа <see cref="T:Terrasoft.Common.LocalizableString"/>.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.SetParameterValue(System.Guid,System.String,System.Double)">
            <summary>
            Устанавливает значение параметра типа <see cref="T:System.Double"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра процесса.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Double"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.TryGetParameterValue(System.Guid,System.String,System.String@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.String"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.String"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.TryGetParameterValue(System.Guid,System.String,System.Guid@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Guid"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Guid"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.TryGetParameterValue(System.Guid,System.String,System.Int32@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Int32"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Int32"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.TryGetParameterValue(System.Guid,System.String,System.Decimal@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Decimal"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Decimal"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.TryGetParameterValue(System.Guid,System.String,System.Double@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Double"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Double"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.TryGetParameterValue(System.Guid,System.String,System.Enum@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Enum"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Enum"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.TryGetParameterValue(System.Guid,System.String,System.DateTime@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.DateTime"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.DateTime"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.TryGetParameterValue(System.Guid,System.String,System.Boolean@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:System.Boolean"/> по сформированному ключу.
            Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Boolean"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.TryGetParameterValue(System.Guid,System.String,Terrasoft.Common.LocalizableString@)">
            <summary>
            Пытается извлечь значение параметра типа <see cref="T:Terrasoft.Common.LocalizableString"/>
            по сформированному ключу. Ключ формируется по значению идентификатора <paramref name="processUId"/> и
            значению параметра <paramref name="parameterPath"/>.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="parameterPath">Путь к значению параметра, которое необходимо получить.</param>
            <param name="value">Значение параметра типа <see cref="T:Terrasoft.Common.LocalizableString"/>.</param>
            <returns>
            <c>true</c>, если хранилище содержит значение параметра по сформированному ключу; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.FindParameterValue(System.Guid,System.String)">
            <summary>
            Extracts the value of any type by generated key. The key is generated based on the value 
            of the <paramref name="processUId"/> Id and the value of the <paramref name="parameterPath"/> parameter.
            </summary>
            <param name="processUId">Business process UId.</param>
            <param name="parameterPath">Path to the parameter value that must be retrieved.</param>
            <returns>
            Parameter value or <c>null</c>, if parameter not found.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.GetParameterValue(System.Guid,System.String)">
            <summary>
            Extracts the value of any type by generated key. The key is generated based on the value 
            of the <paramref name="processUId"/> Id and the value of the <paramref name="parameterPath"/> parameter.
            </summary>
            <param name="processUId">Business process UId.</param>
            <param name="parameterPath">Path to the parameter value that must be retrieved.</param>
            <returns>
            Parameter value.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">
            Throws when parameter value does not exist in repository.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.RemoveParameterValues(System.Guid)">
            <summary>
            Удаляет все значения параметров заданного бизнес-процесса.
            </summary>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.ContainsParameterPath(System.Guid,System.String)">
            <summary>
            Determines whether a parameter path is in the repository.
            </summary>
            <param name="processUId">Process UId.</param>
            <param name="parameterPath">Parameter path.</param>
            <returns>
            <c>true</c>, if repository contains parameter path, otherwise - <c>false</c>.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowEngineStateService.ConcurrentStore`2">
            <summary>
            Хранилище элементов с улучшенным конкурентным доступом.
            </summary>
            <typeparam name="TKey">Тип ключа элемента/>.</typeparam>
            <typeparam name="TItem">Тип элемента/>.</typeparam>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.ConcurrentStore`2.TryGetValue(`0,`1@)">
            <summary>
            Осуществляет поиск элемента в хранилище по заданному идентификатору.
            </summary>
            <param name="uId">Идентификатор элемента.</param>
            <param name="value">Экземпляр элемента.</param>
            <returns>Возвращает <c>true</c> если элемент найден, иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.ConcurrentStore`2.AddOrUpdate(`0,`1)">
            <summary>
            Добавляет экземляр элемента в хранилище, если он не найден по указанному идентификатору,
            иначе - обновляет элемент.
            </summary>
            <param name="uId">Идентификатор элемента.</param>
            <param name="value">Экземпляр элемента.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngineStateService.ConcurrentStore`2.Remove(`0)">
            <summary>
            Удаляет элемент из хранилищ всех уровней.
            </summary>
            <param name="uId">Идентификатор удаляемого элемента.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowExclusiveGateway">
            <summary>
            Представляет элемент "Исключающее ИЛИ" бизнес-процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowExclusiveGateway.#ctor(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowExclusiveGateway"/>, используя схему процесса
            <see cref="T:Terrasoft.Core.Process.FlowSchema"/>.
            </summary>
            <param name="flowSchema">Схема процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowExclusiveGateway.#ctor(Terrasoft.Core.Process.FlowElement)">
            <summary>
            Создает копию экземпляра <see cref="T:Terrasoft.Core.Process.FlowExclusiveGateway"/>.
            </summary>
            <param name="flowElement">"Экземпляр <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowExclusiveGateway.Clone">
            <summary>
            Создает копию экземпляра элемента бизнес-процесса.
            </summary>
            <returns>Копия экземпляра <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowInclusiveGateway">
            <summary>
            Представляет элемент "Включающее ИЛИ" бизнес-процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowInclusiveGateway.#ctor(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowInclusiveGateway"/>, используя схему процесса
            <see cref="T:Terrasoft.Core.Process.FlowSchema"/>.
            </summary>
            <param name="flowSchema">Схема процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowInclusiveGateway.#ctor(Terrasoft.Core.Process.FlowElement)">
            <summary>
            Создает копию экземпляра <see cref="T:Terrasoft.Core.Process.FlowInclusiveGateway"/>.
            </summary>
            <param name="flowElement">"Экземпляр <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowInclusiveGateway.Clone">
            <summary>
            Создает копию экземпляра элемента бизнес-процесса.
            </summary>
            <returns>Копия экземпляра <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowIntermediateCatchMessage">
            <summary>
            Представляет элемент "Промежуточное обрабатывающее сообщение" бизнес-процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowIntermediateCatchMessage.#ctor(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowIntermediateCatchMessage"/>, используя схему процесса
            <see cref="T:Terrasoft.Core.Process.FlowSchema"/>.
            </summary>
            <param name="flowSchema">"Экземпляр <see cref="T:Terrasoft.Core.Process.FlowSchema"/> схемы бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowIntermediateCatchMessage.Accept(Terrasoft.Core.Process.FlowVisitor,Terrasoft.Core.Process.FlowElement)">
            <summary>
            Обрабатывает элемент бизнес-процесса.
            </summary>
            <param name="visitor">Экземпляр класса <see cref="T:Terrasoft.Core.Process.FlowVisitor"/>, который отвечает за переход между
            элементами процесса.</param>
            <param name="previousFlowElement">Предыдущий элемент процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowIntermediateCatchMessage.Clone">
            <summary>
            Создает копию экземпляра элемента бизнес-процесса.
            </summary>
            <returns>Копия экземпляра <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowIntermediateThrowMessage">
            <summary>
            Представляет элемент "Промежуточное генерирующее сообщение" бизнес-процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowIntermediateThrowMessage.#ctor(Terrasoft.Core.Process.FlowIntermediateThrowMessage)">
            <summary>
            Создает копию экземпляра <see cref="T:Terrasoft.Core.Process.FlowIntermediateThrowMessage"/>.
            </summary>
            <param name="flowElement">"Экземпляр <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowIntermediateThrowMessage.#ctor(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowIntermediateThrowMessage"/>, используя схему процесса
            <see cref="T:Terrasoft.Core.Process.FlowSchema"/>.
            </summary>
            <param name="flowSchema">"Экземпляр <see cref="T:Terrasoft.Core.Process.FlowSchema"/> схемы бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowIntermediateThrowMessage.Accept(Terrasoft.Core.Process.FlowVisitor,Terrasoft.Core.Process.FlowElement)">
            <summary>
            Обрабатывает элемент бизнес-процесса.
            </summary>
            <param name="visitor">Экземпляр класса <see cref="T:Terrasoft.Core.Process.FlowVisitor"/>, который отвечает за переход между
            элементами процесса.</param>
            <param name="previousFlowElement">Предыдущий элемент процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowIntermediateThrowMessage.Clone">
            <summary>
            Создает копию экземпляра элемента бизнес-процесса.
            </summary>
            <returns>Копия экземпляра <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowParallelGateway">
            <summary>
            Представляет элемент "И" бизнес-процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowParallelGateway.#ctor(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowParallelGateway"/>, используя схему процесса
            <see cref="T:Terrasoft.Core.Process.FlowSchema"/>.
            </summary>
            <param name="flowSchema"></param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowParallelGateway.WriteProperties(Terrasoft.Common.DataWriter)">
            <summary>
            Записывает свойства элемента бизнес-процесса с помощью заданного экземпляра <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="dataWriter">Экземпляр класса для записи свойств.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowParallelGateway.ReadProperties(Terrasoft.Common.DataReader)">
            <summary>
            Читает свойства элемента бизнес-процесса с помощью заданного экземпляра <see cref="T:Terrasoft.Common.DataReader"/>.
            </summary>
            <param name="dataReader">Экземпляр класса для чтения свойств.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowParallelGateway.Accept(Terrasoft.Core.Process.FlowVisitor,Terrasoft.Core.Process.FlowElement)">
            <summary>
            Обрабатывает элемент бизнес-процесса.
            </summary>
            <param name="visitor">Экземпляр класса <see cref="T:Terrasoft.Core.Process.FlowVisitor"/>, который отвечает за переход между
            элементами процесса.</param>
            <param name="previousFlowElement">Предыдущий элемент процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowParallelGateway.Clone">
            <summary>
            Создает копию экземпляра элемента бизнес-процесса.
            </summary>
            <returns>Копия экземпляра <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowParallelGateway.UseClonedInstance">
            <summary>
            Определяет, нужно ли схеме при инстанцировании элемента клонировать его.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowSchema">
            <summary>
            Схема бизнес-процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.#ctor(System.Guid,System.String)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowSchema"/>, используя принимаемые параметры.
            </summary>
            <param name="schemaUId">Идентификатор схемы бизнес-процесса.</param>
            <param name="schemaName">Наименование схемы бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.GenerateSequenceFlowName(System.String,System.String)">
            <summary>
            Generates sequence flow name.
            </summary>
            <param name="source">Source element name.</param>
            <param name="target">Target element name.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.CreateSequenceFlow(System.String,System.String)">
            <summary>
            Creates and adds to schema sequence flow from 'source' to 'target' element.
            </summary>
            <param name="sourceName">Source element name.</param>
            <param name="targetName">Target element name.</param>
            <returns>Instance of <see cref="T:Terrasoft.Core.Process.SequenceFlow"/></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.CreateSequenceFlow(Terrasoft.Core.Process.BaseProcessSchemaElement,Terrasoft.Core.Process.BaseProcessSchemaElement)">
            <summary>
            Creates and adds to schema sequence flow
            from 'source' to 'target' element with exclusive gateway.
            </summary>
            <param name="source">Source element.</param>
            <param name="target">Target element.</param>
            <returns>Instance of <see cref="T:Terrasoft.Core.Process.ConditionalSequenceFlow"/></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.CreateConditionalSequenceFlowWithGateway(Terrasoft.Core.Process.BaseProcessSchemaElement,Terrasoft.Core.Process.BaseProcessSchemaElement)">
            <summary>
            Creates and adds to schema conditional sequence flow
            from 'source' to 'target' element with exclusive gateway.
            </summary>
            <param name="source">Source element.</param>
            <param name="target">Target element.</param>
            <returns>Instance of <see cref="T:Terrasoft.Core.Process.ConditionalSequenceFlow"/></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.CreateConditionalSequenceFlow(Terrasoft.Core.Process.BaseProcessSchemaElement,Terrasoft.Core.Process.BaseProcessSchemaElement)">
            <summary>
            Creates and adds to schema conditional sequence flow from 'source' to 'target' element.
            </summary>
            <param name="source">Source element.</param>
            <param name="target">Target element.</param>
            <returns>Instance of <see cref="T:Terrasoft.Core.Process.ConditionalSequenceFlow"/></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.Deserialize(System.String)">
            <summary>
            Производит десериализацию экземпляра <see cref="T:Terrasoft.Core.Process.FlowSchema"/> из заданного параметра.
            </summary>
            <param name="serializedValue">Строковое представление класса <see cref="T:Terrasoft.Core.Process.FlowSchema"/>.</param>
            <returns>Возвращает экземпляр <see cref="T:Terrasoft.Core.Process.FlowSchema"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.ReadProperties(Terrasoft.Common.DataReader)">
            <summary>
            Выполняет чтение свойств.
            </summary>
            <param name="dataReader">
            Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется вычитка свойств.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.WriteProperties(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет запись свойств.
            </summary>
            <param name="dataWriter">
            Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого осуществляется запись свойств.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.Accept(Terrasoft.Core.Process.FlowVisitor,Terrasoft.Core.Process.FlowElement)">
            <summary>
            Выполняет запуск обработки элементов бизнес-процесса.
            </summary>
            <param name="visitor">
            Экземпляр <see cref="T:Terrasoft.Core.Process.FlowVisitor"/>, осуществляющий переход между элементами процесса.
            </param>
            <param name="previousFlowElement">Не используется.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.FindFlowElement(System.String)">
            <summary>
            Осуществляет поиск элемента бизнес-процесса по наименованию.
            </summary>
            <param name="name">Наименование элемента.</param>
            <returns>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса, если элемент найден, 
            если нет - возвращает <c>null</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.FindFlowElement(System.Guid)">
            <summary>
            Осуществляет поиск элемента бизнес-процесса по идентификатору.
            </summary>
            <param name="uid">Идентификатор элемента.</param>
            <returns>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса, если элемент найден, 
            если нет - возвращает <c>null</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.GetFlowElement(System.String)">
            <summary>
            Осуществляет поиск элемента бизнес-процесса по наименованию.
            </summary>
            <param name="name">Наименование элемента.</param>
            <returns>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса, если элемент найден, 
            если нет - генерирует исключение.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">
            Генерируется, если элемент с именем <paramref name="name"/> не найден.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.GetFlowElement(System.Guid)">
            <summary>
            Осуществляет поиск элемента бизнес-процесса по идентификатору.
            </summary>
            <param name="uid">Идентификатор элемента.</param>
            <returns>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса, если элемент найден, 
            если нет - генерирует исключение.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">
            Генерируется, если элемент с идентификатором <paramref name="uid"/> не найден.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.Add(Terrasoft.Core.Process.FlowElement)">
            <summary>
            Добавляет в схему элемент бизнес-процесса.
            </summary>
            <param name="flowElement">Элемент бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.Add(Terrasoft.Core.Process.SequenceFlow)">
            <summary>
            Добавляет в схему соединения между элементами.
            </summary>
            <param name="sequenceFlow">Экземпляр соединения элементов.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.GetFlowElementInstance(Terrasoft.Core.Process.FlowElement)">
            <summary>
            Создает экземпляр элемента бизнес-процесса на основе элемента схемы.
            </summary>
            <param name="flowElement">Экземпляра элемента бизнес-процесса.</param>
            <returns>Копия экземпляра <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.CreateFlowElement(System.String)">
            <summary>
            Creates a flow element by the given BPMN element name <seealso cref="T:Terrasoft.Core.Process.BpmnElementVocabulary"/>.
            </summary>
            <param name="bpmnElementName">BPMN element name.</param>
            <returns>The instance of the <see cref="T:Terrasoft.Core.Process.FlowElement"/> class.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.CreateFlowElement(System.Guid,System.String,System.String)">
            <summary>
            Создает элемент бизнес-процесса.
            </summary>
            <param name="uid">Идентификатор элемента.</param>
            <param name="name">Наименование элемента.</param>
            <param name="bpmnElementName">BPMN наименование элемента.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Process.FlowElement"/> элемента бизнес-процесса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.CreateSequenceFlow(System.Guid,System.String)">
            <summary>
            Создает экземпляр соединения между элементами.
            </summary>
            <param name="uid">Идентификатор соединения.</param>
            <param name="name">Наименование соединения.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Process.SequenceFlow"/> соединения между элементами бизнес-процесса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.CreateConditionalSequenceFlow(System.Guid,System.String)">
            <summary>
            Создает экземпляр соединения между элементами c условием.
            </summary>
            <param name="uid">Идентификатор соединения.</param>
            <param name="name">Наименование соединения.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Process.ConditionalSequenceFlow"/> соединения между элементами бизнес-процесса
            c условием.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.FindSequenceFlow(System.String)">
            <summary>
            Осуществляет поиск соединения между элементами бизнес-процесса по наименованию соединения.
            </summary>
            <param name="name">Наименование соединения.</param>
            <returns>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Process.SequenceFlow"/> соединения между элементами бизнес-процесса,
            если элемент найден, если нет - возвращает <c>null</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.FindSequenceFlow(System.Guid)">
            <summary>
            Осуществляет поиск соединения между элементами бизнес-процесса по идентификатору.
            </summary>
            <param name="uid">Идентификатор соединения.</param>
            <returns>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Process.SequenceFlow"/> соединения между элементами бизнес-процесса,
            если элемент найден, если нет - возвращает <c>null</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.GetSequenceFlow(System.Guid)">
            <summary>
            Осуществляет поиск соединения между элементами бизнес-процесса по идентификатору.
            </summary>
            <param name="uid">Идентификатор элемента.</param>
            <returns>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Process.SequenceFlow"/> соединения между элементами бизнес-процесса,
            если элемент найден, если нет - возвращает <c>null</c>.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">
            Генерируется, если элемент с идентификатором <paramref name="uid"/> не найден.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.FindSequenceFlowsByTargetUId(System.Guid)">
            <summary>
            Осуществляет поиск соединения между элементами бизнес-процесса по идентификатору элемента, в который
            приходит соединение.
            </summary>
            <param name="targetFlowElementUId">Идентификатор элемента, в который приходит соединение.</param>
            <returns>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Process.SequenceFlow"/> соединения между элементами бизнес-процесса,
            если элемент найден, если нет - возвращает <c>null</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.FindSequenceFlowsBySourceUId(System.Guid)">
            <summary>
            Осуществляет поиск соединения между элементами бизнес-процесса по идентификатору элемента, из которого
            выходит соединение.
            </summary>
            <param name="sourceFlowElementUId">Идентификатор элемента, из которого выходит соединение.</param>
            <returns>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Process.SequenceFlow"/> соединения между элементами бизнес-процесса,
            если элемент найден, если нет - возвращает <c>null</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchema.Serialize">
            <summary>
            Сериализирует экземпляр данного класса.
            </summary>
            <returns>Возвращает строковое представление класса <see cref="T:Terrasoft.Core.Process.FlowSchema"/>.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowSchema.SchemaId">
            <summary>
            Возвращает идентификатор схемы бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowSchema.SequenceFlows">
            <summary>
            Возвращает набор соединений между элементами процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowSchema.FlowElements">
            <summary>
            Возвращает набор элементов процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowSchema.ParametersMapInfo">
            <summary>
            Таблица связей параметров процесса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowSchemaGenerator">
            <summary>
            The generator for the business process schema.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.FlowSchemaGenerator.ZeroWidthSpaceCharacter">
            <summary>
            The zero-width space is a non-printing character.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGenerator.#ctor(Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.FlowSchemaGenerator"/> class with the specified
            business-process schema.
            </summary>
            <param name="processSchema">Schema of the business-process.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGenerator.GetParameterMapData(System.String)">
            <summary>
            Generates data about bindings of parameter value to process parameters.
            </summary>
            <param name="schemaParameterValue">Value of the process schema parameter or process element parameter.
            </param>
            <returns>Data about parameter value bindings to process parameters.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGenerator.GetIsProcessParameterBinding(System.Collections.Generic.LinkedList{Terrasoft.Core.Process.ProcessParameterMapInfo},System.String)">
            <summary>
            Determines that parameter value is set from another parameter of process.
            </summary>
            <param name="parameterMapData">Data about bindings between parameter value and process parameters.</param>
            <param name="parameterValue">Process parameter value.</param>
            <returns><c>true</c>, if the parameter value is set from a different process parameter;
            else — <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGenerator.CreateProcessParameterInfo(Terrasoft.Core.Process.ProcessSchemaParameter)">
            <summary>
            Creates an instance of <see cref="T:Terrasoft.Core.Process.ProcessParameterInfo"/> with data of process parameter.
            </summary>
            <param name="schemaParameter">Process schema parameter.</param>
            <returns>Process parameter data.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGenerator.TryGetParameterMapPath(System.String,Terrasoft.Core.Process.ProcessParameterMapInfo@)">
            <summary>
            Parses parameter meta path and creates an instance of <see cref="T:Terrasoft.Core.Process.ProcessParameterMapInfo"/> that 
            provides information about parameter value binding to a process parameter.
            </summary>
            <param name="parameterMetaPath">Parameter meta path string in process schema.</param>
            <param name="mapPathInfo">An instance of <see cref="T:Terrasoft.Core.Process.ProcessParameterMapInfo"/>.</param>
            <returns>Returns <c>true</c>, if meta path has been converted successfully, else - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGenerator.GenerateProcessParameterMappings">
            <summary>
            Creates a table of process parameter mappings.
            </summary>
            <returns>Table of process parameter mappings.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGenerator.Generate">
            <summary>
            Generates the process flow schema.
            </summary>
            <returns>Process flow schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGenerator.FindProcessSchemaParameter(Terrasoft.Core.Process.ProcessParameterMapInfo)">
            <summary>
            Finds the process schema parameter by its map info.
            </summary>
            <param name="parameterMapInfo">The process schema parameter path.</param>
            <returns>The found process schema parameter or <c>null</c> if its not found.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGenerator.GetParametrizedProcessSchemaElement(System.Guid)">
            <summary>
            Gets the parametrized process schema element by the its identifier.
            </summary>
            <param name="schemaElementUId">The element's identifier.</param>
            <returns>"The process schema element implemented interface
            <see cref="T:Terrasoft.Core.Process.IParametrizedProcessSchemaElement"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGenerator.GetParametrizedSchemaElements">
            <summary>
            Returns the process schema elements that implement <see cref="T:Terrasoft.Core.Process.IParametrizedProcessSchemaElement"/>.
            </summary>
            <returns>The list of the elements.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowSchemaGenerator.TryGetProcessItemName(System.String,System.String@)">
            <summary>
            Attempts to get process schema parameter name or process element parameter name.
            </summary>
            <param name="parameterMapPath">Represents parameter mapping path.</param>
            <param name="itemName">Represents a string consisting of comma-separated parameter names.</param>
            <returns><c>true</c> if the parameter exists, otherwise - <c>false</c>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowService">
            <summary>
            Обработчик BPMN-диаграммы и исполнитель элементов бизнес-процессов.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowService.#ctor(Terrasoft.Core.Process.IMessageQueueManagerItem,Terrasoft.Core.Process.IFlowSchemaStateService)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowService"/> с заданным элементом менеджера очередей сообщений.
            </summary>
            <param name="flowQueue">Элемент менеджера очередей сообщений.</param>
            <param name="flowSchemaStateService">Элемент управления данными процессов.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowService.SendCheckGatewayConditionsMessage(Terrasoft.Core.Process.FlowElement,System.Collections.Generic.LinkedList{Terrasoft.Core.Process.SequenceFlow},Terrasoft.Core.Process.ConditionEvalStrategy,System.Guid)">
            <summary>
            Помещает в очередь сообщение на вычисление выражений условных потоков.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowService.SendErrorMessage(System.Guid,Terrasoft.Core.Process.FlowElement,Terrasoft.Core.Process.FlowElement,System.String)">
            <summary>
            Помещает в очередь сообщение о возникновении ошибки.
            </summary>
            <param name="processUId">Идентификатор процесса.</param>
            <param name="flowElement">Элемент процесса, на котором произошла ошибка.</param>
            <param name="previousFlowElement">Предыдущий элемент процесса.</param>
            <param name="errorMessage">Сообщение об ошибке.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowService.Dispose">
            <summary>
            Освобождает ресурсы.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowVisitorQueueItem">
            <summary>
            Представляет переходы между элементами бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowVisitorQueueItem.FlowElement">
            <summary>
            Элемент бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowVisitorQueueItem.PreviousFlowElement">
            <summary>
            Предыдущий элемент бизнес-процесса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowVisitor">
            <summary>
            Отвечает за переход между элементами процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowVisitor.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowVisitor"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowVisitor.#ctor(Terrasoft.Core.Process.IProcessParameterStore)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowVisitor"/> с заданным хранилищем параметров бизнес-процесса.
            </summary>
            <param name="parameterStore">Хранилище параметров бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowVisitor.#ctor(Terrasoft.Core.Process.IProcessParameterStore,Terrasoft.Core.Process.FlowService,System.Guid)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.FlowVisitor"/> с заданным хранилищем параметров бизнес-процесса
            и службой обмена сообщений.
            </summary>
            <param name="parameterStore">Хранилище параметров бизнес-процесса.</param>
            <param name="flowService">Служба обмена сообщений.</param>
            <param name="processUId">Идентификатор экземпляра процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowVisitor.RestoreState(Terrasoft.Core.Process.FlowSchema,System.String)">
            <summary>
            Восстанавливает состояние экземпляра класса <see cref="T:Terrasoft.Core.Process.FlowVisitor"/>.
            </summary>
            <param name="flowSchema">Схема процесса.</param>
            <param name="serializedValue">Строковое представление класса <see cref="T:Terrasoft.Core.Process.FlowVisitor"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowVisitor.SetFlowService(Terrasoft.Core.Process.FlowService)">
            <summary>
            Указывает службу обмена сообщений.
            </summary>
            <param name="flowService">Служба обмена сообщений.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowVisitor.Deserialize(Terrasoft.Core.Process.FlowSchema,System.String)">
            <summary>
            Производит десериализацию экземпляра <see cref="T:Terrasoft.Core.Process.FlowVisitor"/> из заданного сериализованного значения.
            </summary>
            <param name="flowSchema">Схема процесса.</param>
            <param name="serializedValue">Строковое представление класса <see cref="T:Terrasoft.Core.Process.FlowVisitor"/>.</param>
            <returns>Возвращает экземпляр <see cref="T:Terrasoft.Core.Process.FlowVisitor"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowVisitor.Equals(System.Object)">
            <summary>
            Определяет, равны ли данный экземпляр <see cref="T:Terrasoft.Core.Process.FlowVisitor"/> и заданный экземпляр 
            <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">Экземпляр <see cref="T:System.Object"/>, который сравнивается с текущим экземпляром 
            <see cref="T:Terrasoft.Core.Process.FlowVisitor"/>.</param>
            <returns><c>true</c>, если сравниваемые объекты идентичны; иначе — <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowVisitor.GetHashCode">
            <summary>
            Возвращает хэш-код объекта.
            </summary>
            <returns>Хэш-код объекта.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowVisitor.Visit(System.Collections.Generic.IEnumerable{Terrasoft.Core.Process.FlowElement},Terrasoft.Core.Process.FlowElement)">
            <summary>
            Посещает элементы, указанные в параметрах.
            </summary>
            <param name="flowElements">Коллекция элементов бизнес-процесса.</param>
            <param name="previousFlowElement">Предыдущий экземпляр элемента бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowVisitor.Serialize">
            <summary>
            Сериализирует экземпляр данного класса.
            </summary>
            <returns>Возвращает строковое представление класса <see cref="T:Terrasoft.Core.Process.FlowVisitor"/>.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowVisitor.ProcessUId">
            <summary>
            Идентификатор экземпляра процесса, для которого используется данный посетитель.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Process.FlowVisitor.Visited">
            <summary>
            Событие генерируется, когда элемент посещен.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessValidationRule">
            <summary>
            Определяет сигнатуру методов валидации схемы бизнес-процесса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.InterpretationValidator">
            <summary>
            Анализирует возможность выполнения процесса с помощью механизма интерпретации.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.InterpretationValidator.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Инициализирует пользовательские настройки.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.InterpretationValidator.ValidateFormulaValue(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessSchema,System.String,System.String,System.Type)">
            <summary>
            Validates the formula value.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="processSchema">The process schema.</param>
            <param name="formulaValue">The formula value.</param>
            <param name="parameterPath">The parameter path.</param>
            <param name="resultParameterValueType">Type of the result parameter value.</param>
            <returns>The result of the validation.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.InterpretationValidator.Validate(Terrasoft.Core.Process.ProcessSchema,System.Collections.Generic.LinkedList{Terrasoft.Core.Process.ProcessValidationRule},System.Boolean)">
            <summary>
            Validates that the process schema is correct and interpretable. Fills the
            <see cref="P:Terrasoft.Core.Process.ProcessValidationResult.Results"/> collection with the validation info about the process items.
            </summary>
            <param name="processSchema">The process schema.</param>
            <param name="validationRules">The validation functions chain.</param>
            <param name="checkAllRules">Indicates that all validation rules should be checked. If <c>false</c>, stops
            on the first rule that found incorrect or non-interpretable process schema item.
            </param>
            <returns><c>true</c>, if all rules were passed, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.InterpretationValidator.Validate(Terrasoft.Core.Process.ProcessSchema,System.Boolean)">
            <summary>
            Валидирует схему процесса на предмет возможности интерпретации и заполняет коллекцию ValidatorInfo 
            сообщениями об элементах, которые требуют компиляции, - если таковые были найдены.
            </summary>
            <param name="processSchema">Схема бизнес процесса.</param>
            <param name="checkAllRules">Признак, указывающий на необходимость проверить все правила валидации. Если
            равен <c>false</c> - прекращает валидацию на первом правиле, которое обнаружило неинтерпретируемый элемент.
            </param>
            <returns><c>true</c> - если все правила валидации успешно пройдены и </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.InterpretationValidator.Validate(Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Validates the specified process schema.
            </summary>
            <param name="processSchema">The process schema.</param>
            <returns></returns>
        </member>
        <member name="T:Terrasoft.Core.Process.IScriptSession">
            <summary>
            Интерфейс класса скрипта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.IScriptSession.Eval``1(System.String)">
            <summary>
            Выполняет выражение, возвращающее результат указанного типа данных.
            </summary>
            <typeparam name="T">Тип данных, который должно вернуть выражение.</typeparam>
            <param name="expression">Текст выражения.</param>
            <returns>Результат выполнения выражения.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IScriptSession.Eval(System.String,System.Type)">
            <summary>
            Выполняет выражение, возвращающее результат типа <see cref="T:System.Object"/>.
            </summary>
            <param name="expression">Текст выражения.</param>
            <param name="resultType">Ожидаемый тип результата вычисления.</param>
            <returns>Выполняет выражение, возвращающее результат типа <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.IScriptSession.SetVariable(System.String,System.Object)">
            <summary>
            Устанавливает переменной с указанным именем переданное значение.
            </summary>
            <param name="name">Имя переменной.</param>
            <param name="value">Значение переменной.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IScriptSession.SetVariable(System.String,System.Object,System.Type)">
            <summary>
            Устанавливает переменной с указанным именем и типом переданное значение.
            </summary>
            <param name="name">Имя переменной.</param>
            <param name="value">Значение переменной.</param>
            <param name="type">Тип значения переменной.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IScriptSession.AddReference(System.Type)">
            <summary>
            Добавляет ссылку на тип, используемый в выражении.
            </summary>
            <param name="type">Тип.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.IScriptSession.Validate(System.String,System.Type)">
            <summary>
            Validates the expression.
            </summary>
            <param name="expression">The text of expression.</param>
            <param name="resultType">The expression result type.</param>
            <exception cref="T:Terrasoft.Core.ValidateExpressionException">Throws, if the expression is not valid.</exception>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessParameterInfo">
            <summary>
            Представляет данные параметра бизнес-процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterInfo.GetHashCode">
            <summary>
            Хэш-код для текущего экземпляра класса.
            </summary>
            <returns>Возвращает целочисленное значение хэш-кода для текущего экземпляра класса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterInfo.Equals(System.Object)">
            <summary>
            Сравнение текущего экземпляра класса с указанным.
            </summary>
            <param name="other">Экземпляр класса для сравнения <see cref="T:Terrasoft.Core.Process.ProcessParameterInfo"/>.</param>
            <returns>
            Возвращает <c>true</c>, если экземпляры идентичны; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterInfo.Clone">
            <summary>
            Создает копию данных параметра бизнесс-процесса.
            </summary>
            <returns>Копия экземпляра <see cref="T:Terrasoft.Core.Process.ProcessParameterInfo"/> параметра бизнес-процесса.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterInfo.Value">
            <summary>
            Значение параметра.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterInfo.DataValueTypeUId">
            <summary>
            Идентификатор типа значения параметра.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterInfo.Name">
            <summary>
            Имя параметра.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterInfo.Source">
            <summary>
            Тип источника значения параметра.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterInfo.InitialValue">
            <summary>
            Значение параметра на этапе инициализации схемы процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterInfo.InitialSource">
            <summary>
            Тип источника значения параметра на этапе инициализации схемы процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterInfo.MustReadFromParameterStore">
            <summary>
            Флаг, указывающий на принудительное чтение текущего значения из хранилища данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterInfo.SubParameterMetaPathSet">
            <summary>
            Набор метапутей к компонентам основного параметра (например, идентификаторы колонок для параметра типа 
            <see cref="T:Terrasoft.Core.Entities.Entity"/>).
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterInfo.ProcessParameterInfoPathes">
            <summary>
            Список пар ключ/значение, где ключ - путь к параметру, а значение - макрос параметра процесса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessParameterMapInfo">
            <summary>
            Представляет информацию привязки значения параметра к параметру бизнес-процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMapInfo.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.ProcessParameterMapInfo"/> с заданным идентификатором параметра схемы
            бизнес-процесса.
            </summary>
            <param name="parameterUId">Идентификатор параметра схемы бизнес-процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterMapInfo.#ctor(System.String,System.String)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.ProcessParameterMapInfo"/> с заданным идентификатором параметра и
            элемента схемы бизнес-процесса.
            </summary>
            <param name="schemaElementUId">Идентификатор элемента схемы бизнес-процесса.</param>
            <param name="parameterUId">Идентификатор параметра схемы бизнес-процесса.</param>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterMapInfo.ParameterUId">
            <summary>
            Идентификатор параметра схемы бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterMapInfo.SchemaElementUId">
            <summary>
            Идентификатор элемента схемы бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterMapInfo.MapPath">
            <summary>
            Строка пути к параметру элемента или схемы бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterMapInfo.SubParameterMetaPath">
            <summary>
            Строка мета пути к параметру элемента или схемы бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterMapInfo.ParameterMacros">
            <summary>
            Макрос параметра элемента или схемы бизнес-процесса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessParametersDataReader">
            <summary>
            Class provides methods for reading parameter values.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.#ctor(System.Collections.Generic.IEnumerable{Terrasoft.Core.Process.ProcessSchemaParameter})">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.Process.ProcessParametersDataReader"/> with the specified
            parameter list.
            </summary>
            <param name="schemaElementParameters">List of parameters from which settings should be read.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.#ctor(System.Collections.Generic.IEnumerable{Terrasoft.Core.Process.ProcessSchemaParameter},Terrasoft.Core.Process.ProcessParameterValueProvider)">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.Process.ProcessParametersDataReader"/> with the specified
            parameter list and value provider.
            </summary>
            <param name="schemaElementParameters">List of parameters from which settings should be read.</param>
            <param name="valueProvider">Instance of the class <see cref="T:Terrasoft.Core.Process.ProcessParameterValueProvider"/>
            - set of methods for getting the values of the process parameters.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.#ctor(System.Guid,System.Collections.Generic.IEnumerable{Terrasoft.Core.Process.ProcessSchemaParameter},Terrasoft.Core.Process.ProcessParameterValueProvider,System.Boolean)">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.Process.ProcessParametersDataReader"/>.
            </summary>
            <param name="processUId">Business process identifier.</param>
            <param name="schemaParameters">List of parameters from which settings should be read.</param>
            <param name="valueProvider">Instance of the class <see cref="T:Terrasoft.Core.Process.ProcessParameterValueProvider"/>
            - set of methods for getting the values of the process parameters.</param>
            <param name="isReexecution">Flag that indicates repeated execution of element.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.#ctor(System.Guid,System.Guid,System.Collections.Generic.IEnumerable{Terrasoft.Core.Process.ProcessSchemaParameter},Terrasoft.Core.Process.ProcessParameterValueProvider,System.Boolean)">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.Process.ProcessParametersDataReader"/>.
            </summary>
            <param name="processUId">Business process identifier.</param>
            <param name="schemaElementUId">Identifier of the process element.</param>
            <param name="schemaParameters">List of parameters from which settings should be read.</param>
            <param name="valueProvider">Instance of the class <see cref="T:Terrasoft.Core.Process.ProcessParameterValueProvider"/>
            - set of methods for getting the values of the process parameters.</param>
            <param name="isReexecution">Flag that indicates repeated execution of element.</param>
        </member>
        <member name="F:Terrasoft.Core.Process.ProcessParametersDataReader._parameterStore">
            <summary>
            Storage of the process parameters.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.ProcessParametersDataReader._currentName">
            <summary>
            Returns parameter name.
            </summary>
            <value>
            Parameter name.
            </value>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.Read(System.String)">
            <summary>
            Moves the current position in the data set to the parameter with the specified name.
            </summary>
            <returns>
            Name of the current parameter.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.Read(Terrasoft.Core.Process.ProcessSchemaParameter)">
            <summary>
            Moves the current position in the data set to the specified parameter.
            </summary>
            <returns>
            Name of the current parameter.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.Read">
            <summary>
            Moves the current position in the data set to the next parameter.
            </summary>
            <returns>
            Returns string with the name of a parameter in the next data set position or an empty string if reached
            the end of the data set.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.ReadInto">
            <summary>
            Returns the name of the data set type.
            </summary>
            <returns>
            String which is the name of the class <see cref="T:Terrasoft.Core.Process.ProcessSchemaParameterCollection"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.ReadOut">
            <summary>
            Returns empty string.
            </summary>
            <returns>
            Empty string. You must call the function <see cref="M:Terrasoft.Common.DataReader.Read"/>, to get the name
            of the next parameter.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetStringValue">
            <summary>
            Returns a string representation of the parameter value that is at the current position of the data set.
            </summary>
            <returns>
            The current value of the parameter type with <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetGuidValue">
            <summary>
            Returns the instance of the <see cref="T:System.Guid"/>, type corresponding to parameter value
            that is at the current position of data set.
            </summary>
            <returns>
            The current value of the parameter type with <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetIntValue">
            <summary>
            Returns the instance of the <see cref="T:System.Int32"/>, type corresponding to parameter value
            that is at the current position of data set.
            </summary>
            <returns>
            The current value of the parameter type with <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetDoubleValue">
            <summary>
            Returns the instance of the <see cref="T:System.Double"/>, type corresponding to parameter value
            that is at the current position of data set.
            </summary>
            <returns>
            The current value of the parameter type with <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetDateTimeValue">
            <summary>
            Returns the instance of the <see cref="T:System.DateTime"/>, type corresponding to parameter value
            that is at the current position of data set.
            </summary>
            <returns>
            The current value of the parameter type with <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetBoolValue">
            <summary>
            Returns the instance of the <see cref="T:System.Boolean"/>, type corresponding to parameter value
            that is at the current position of data set.
            </summary>
            <returns>
            The current value of the parameter type with <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetValue(System.Type)">
            <summary>
            Returns the parameter value at the current position of data set that is converted to specified type.
            </summary>
            <param name="valueType">Type.</param>
            <returns>
            Current parameter value that is converted to specified in <paramref name="valueType"/> type.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetValue``1">
            <summary>
            Returns the parameter value at the current position of data set that is converted to specified type.
            </summary>
            <typeparam name="TValue">The value of any type.</typeparam>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetLocalizableStringValue">
            <summary>
            Returns the instance of the <see cref="T:Terrasoft.Common.LocalizableString"/>, type corresponding to parameter value
            that is at the current position of data set.
            </summary>
            <returns>
            The current value of the parameter type with <see cref="T:Terrasoft.Common.LocalizableString"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.Close">
            <summary>
            Releases resources.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.ReadNextCollectionItem">
            <summary>
            The method is not implemented.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetStreamValue">
            <summary>
            The method is not implemented.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetStreamValue(System.IO.Stream)">
            <summary>
            The method is not implemented.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetEnumValue``1">
            <summary>
            The method is not implemented.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetValue(Terrasoft.Common.DataConverter)">
            <summary>
            The method is not implemented.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetSerialazebleObjectValue(System.Type)">
            <summary>
            The method is not implemented.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetSerializableObjectValue">
            <summary>
            The method is not implemented.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.GetSerializableObjectValue``1">
            <summary>
            The method is not implemented.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataReader.HasValue">
            <summary>
            Indicates that there is a value to read in the current position of the data set.
            </summary>
            <returns>
            <c>True</c>, if there is a value to read, otherwise - <c>false</c>.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParametersDataReader.CurrentValue">
            <summary>
            Returns current value of the parameter.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessComponentSetStrategy">
            <summary>
            Представляет семейство алгоритмов, которые переопределяют поведение экземпляра.
            <see cref="T:Terrasoft.Core.Process.ProcessComponentSet"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessComponentSetStrategy.CompleteProcess">
            <summary>
            Алгоритм завершения бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessComponentSetStrategy.ForceGetFlowElementInstance">
            <summary>
            Алгоритм получения экземпляра элемента бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessComponentSetStrategy.ProcessComponentSetCreator">
            <summary>
            Алгоритм создания набора компонентов бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessComponentSetStrategy.GetAssembly">
            <summary>
            Алгоритм получения сборки, которая является модулем с возможностью многократного использования, поддержкой
            версий и встроенным механизмом описания общеязыковой исполняющей среды.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessComponentSetStrategy.GetNamespaceName">
            <summary>
            Алгоритм получения названия пространства имен, в котором определен тип реализующий интерфейс
            <see cref="T:Terrasoft.Core.Process.IProcessModel"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessComponentSetStrategy.CreateProcessModel">
            <summary>
            Provides access to the process instance methods.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessComponentSetStrategy.CreateFlowEngine">
            <summary>
            Flow engine factory method.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessDescriptor">
            <summary>
            Represents the status of process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessDescriptor.UId">
            <summary>
            Id of the process.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessDescriptor.ProcessStatus">
            <summary>
            Contains information about the process status.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessDescriptor.IsNextElementReady">
            <summary>
            Gets or sets a value that indicates whether the next process element is ready to be executed.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessParametersDataWriterSettings">
            <summary>
            Предоставляет настройки для класса <see cref="T:Terrasoft.Core.Process.ProcessParametersDataWriter"/>
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessParametersDataWriter">
            <summary>
            Представляет методы для последовательной записи значений параметров бизнес-процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.#ctor(Terrasoft.Core.Process.ProcessParametersDataWriterSettings,System.Guid,Terrasoft.Core.Process.ProcessSchemaParameterCollection,Terrasoft.Core.Process.IProcessParameterStore)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Process.ProcessParametersDataWriter"/>.
            </summary>
            <param name="settings">Настройки для нового экземпляра <see cref="T:Terrasoft.Core.Process.ProcessParametersDataWriterSettings"/>.
            </param>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="schemaElementParameters">Список параметров элемента бизнес-процесса.</param>
            <param name="processParameterStore">Хранилище параметров процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.#ctor(Terrasoft.Core.Process.ProcessParametersDataWriterSettings,System.Guid,System.Guid,Terrasoft.Core.Process.ProcessSchemaParameterCollection,Terrasoft.Core.Process.IProcessParameterStore)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Process.ProcessParametersDataWriter"/>.
            </summary>
            <param name="settings">Настройки для нового экземпляра <see cref="T:Terrasoft.Core.Process.ProcessParametersDataWriterSettings"/>.
            </param>
            <param name="processUId">Идентификатор бизнес-процесса.</param>
            <param name="schemaElementUId">Идентификатор элемента бизнес-процесса.</param>
            <param name="schemaElementParameters">Список параметров элемента бизнес-процесса.</param>
            <param name="processParameterStore">Хранилище параметров процесса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteTypedValue(System.String,System.Type,System.Object,System.Object)">
            <summary>
            Writes the value of the parameter with the specified name, type and default value.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="type">The parameter type.</param>
            <param name="value">The parameter value.</param>
            <param name="defValue">The default parameter value.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteValue(Terrasoft.Core.Process.ProcessSchemaParameter,Terrasoft.Core.Process.ProcessParametersDataReader)">
            <summary>
            Осуществляет запись значения для заданного параметра.
            </summary>
            <param name="schemaParameter">Параметр процесса.</param>
            <param name="dataReader">Объект для чтения данных.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.Close">
            <summary>
            Освобождает ресурсы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteValue(System.String,System.String,System.String)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.String"/> для параметра с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра типа <see cref="T:System.String"/>.</param>
            <param name="defValue">Значение по умолчанию для параметра.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteValue(System.String,System.Guid,System.Guid)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Guid"/> для параметра с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Guid"/>.</param>
            <param name="defValue">Значение по умолчанию для параметра.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteValue(System.String,System.Int32,System.Int32)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Int32"/> для параметра с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Int32"/>.</param>
            <param name="defValue">Значение по умолчанию для параметра.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteValue(System.String,System.Decimal,System.Decimal)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Decimal"/> для параметра с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Decimal"/>.</param>
            <param name="defValue">Значение по умолчанию для параметра.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteValue(System.String,System.Double,System.Double)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Double"/> для параметра с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Double"/>.</param>
            <param name="defValue">Значение по умолчанию для параметра.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteValue(System.String,System.Enum,System.Enum)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Enum"/> для параметра с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Enum"/>.</param>
            <param name="defValue">Значение по умолчанию для параметра.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteValue(System.String,System.DateTime,System.DateTime)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.DateTime"/> для параметра с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра типа <see cref="T:System.DateTime"/>.</param>
            <param name="defValue">Значение по умолчанию для параметра.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteValue(System.String,System.Boolean,System.Boolean)">
            <summary>
            Осуществляет запись значения типа <see cref="T:System.Boolean"/> для параметра с заданными именем и
            значением по умолчанию.
            </summary>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра типа <see cref="T:System.Boolean"/>.</param>
            <param name="defValue">Значение по умолчанию для параметра.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteValue(System.String,Terrasoft.Common.LocalizableString,Terrasoft.Common.LocalizableString)">
            <summary>
            Осуществляет запись значения типа <see cref="T:Terrasoft.Common.LocalizableString"/> для параметра с
            заданными именем и значением по умолчанию.
            </summary>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра типа <see cref="T:Terrasoft.Common.LocalizableString"/>.</param>
            <param name="defValue">Значение по умолчанию для параметра.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteValue(System.String,System.IO.Stream)">
            <summary>
            Метод не реализован.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteValue(System.String,Terrasoft.Common.DataConverter,System.Object,System.Object)">
            <summary>
            Метод не реализован.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteValue(System.String,System.Type,System.Object,System.Object)">
            <summary>
            Writes the value of the specified type for the property with the specified name and default value.
            </summary>
            <param name="name">The property name.</param>
            <param name="valueType">Type of the value.</param>
            <param name="value">The property value.</param>
            <param name="defValue">The default value.</param>
            <exception cref="T:System.ArgumentNullException">When empty value or <c>null</c> passed as <paramref name="name"/> 
            and <paramref name="value"/>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidTypeCastException">When you try to convert the value of the property
            <paramref name="name"/>to an invalid data type<paramref name="valueType"/>.</exception>
            <remarks>Method writes to the output stream the value of those types that support mapping parameters
            business process; all other types - are ignored.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteValue(System.Object[])">
            <summary>
            Метод не реализован.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteSerializableObjectValue(System.String,System.Object,System.Object)">
            <summary>
            Метод не реализован.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteStartObject">
            <summary>
            Метод не используется.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteStartObject(System.String)">
            <summary>
            Начинает запись составного параметра с заданным именем в поток вывода.
            </summary>
            <param name="name">Имя параметра.</param>
            <remarks>Метод записывает в поток вывода имя составного объекта, относительно которого все последующие 
            параметры будут записаны в хранилище значений с путем, составленным из идентификатора основного объекта и 
            уникального идентификатора параметра - вплоть до следующего вызова метода WriteFinishObject.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteFinishObject">
            <summary>
            Завершает запись составного параметра.
            </summary>
            <remarks>
            Метод прекращает запись текущего составного параметра; если по уровню вложенности имеется составной
            параметр, являющийся "родительским" для текущего - он становится вновь основным для последующих записываемых
            в хранилище параметров, иначе - будет продолжаться запись в хранилище в обычном режиме (без вложенности).
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteStartCollection(System.String)">
            <summary>
            Метод не используется.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParametersDataWriter.WriteFinishCollection">
            <summary>
            Метод не используется.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessParameterValueProvider">
            <summary>
            Class represents methods for evaluating and validating parameter values.
            <see cref="T:Terrasoft.Core.Process.ProcessParametersDataReader"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterValueProvider.#ctor">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.Process.ProcessParameterValueProvider"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterValueProvider.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.Process.ProcessParameterValueProvider"/> with the specified
            user connection.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterValueProvider.#ctor(Terrasoft.Core.UserConnection,System.Guid,Terrasoft.Core.Process.IProcessParameterStore,Terrasoft.Core.Process.IFlowSchemaGenerator)">
            <summary>
            Initializes a new instance of the class <see cref="T:Terrasoft.Core.Process.ProcessParameterValueProvider"/>.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="processUId">Process identifier.</param>
            <param name="parameterStore">Storage of process parameters.</param>
            <param name="flowSchemaGenerator">Flow schema generator of the process schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterValueProvider.ValidateExpression(System.String,System.Type)">
            <summary>
            Verifies the correctness of expression. Generates exception when expression is incorrect.
            </summary>
            <param name="expressionText">Expression text.</param>
            <param name="resultType">Expected type of the evaluation result.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterValueProvider.GetNoneEmptySysSettingsValue(System.String,System.Type)">
            <summary>
            Returns existing value of the system settings and checks whether the value is set.
            </summary>
            <param name="code">Code of the system settings.</param>
            <param name="type">Type of the system settings.</param>
            <returns>Value of the system settings.</returns>
            <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">
            Throws exception if the system settings with <paramref name="code"/> code is not set.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterValueProvider.EvalExpression``1(System.String)">
            <summary>
            Evaluates expression and returns the value with specified type.
            </summary>
            <param name="expressionText">Expression text.</param>
            <returns>Evaluation result.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterValueProvider.EvalExpression(System.String,System.Type)">
            <summary>
            Evaluates expression and returns the value with <see cref="T:System.Object"/> type.
            </summary>
            <param name="expressionText">Expression text.</param>
            <param name="resultType">Expected type of the evaluation result.</param>
            <returns>Evaluation result.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterValueProvider.GetParameterValue(Terrasoft.Core.Process.ProcessParameterMapInfo,System.Boolean)">
            <summary>
            Returns value of the process parameter.
            </summary>
            <param name="parameterMapInfo"> Data of the process parameter mapping.</param>
            <param name="isReexecution">Flag that indicates repeated execution of element.</param>
            <returns>Value of the process parameter.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterValueProvider.GetParameterValue(Terrasoft.Core.Process.ProcessSchemaParameter,System.Guid,System.Boolean)">
            <summary>
            Returns value of the process parameter.
            </summary>
            <param name="schemaParameter">Process parameter</param>
            <param name="schemaElementUId">Identifier of the process element.</param>
            <param name="isReexecution">Flag that indicates repeated execution of element.</param>
            <returns>Value of the process parameter.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterValueProvider.GetEntityColumnValue(System.Guid,System.String,System.String)">
            <summary>
            Gets the entity column value.
            </summary>
            <param name="entitySchemaUId">The entity schema identifier.</param>
            <param name="recordIdPath">The path to "RecordId" parameter.</param>
            <param name="columnMetaPath">The read column metapath.</param>
            <returns>Entity column value or <see cref="M:Terrasoft.Common.ReflectionUtilities.GetDefValue(System.Type)"/> when entity column
            value is <c>null</c>.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">
            If "RecordId" parameter can not be got.
            </exception>
            <exception cref="T:Terrasoft.Core.ProcessParameterValueException">
            If unable to find entity record with Id specified in "RecordId" parameter.
            </exception>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterValueProvider.FlowSchemaGenerator">
            <summary>
            Generator of a process scheme.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterValueProvider.ProcessParameterStore">
            <summary>
            Storage of process parameters.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterValueProvider.GetSysSettingsValue">
            <summary>
            Function of getting system settings.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterValueProvider.GetSysVariableValue">
            <summary>
            Function of getting system variables.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterValueProvider.CreateEntity">
            <summary>
            Function of getting reference object to which process parameter refers.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterValueProvider.ConvertExpressionTextToCode">
            <summary>
            Function of converting of expression text in a line of a code.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessParameterValueProvider.ScriptSession">
            <summary>
            The service which is carrying out expression execution.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessModel">
            <summary>
            Представляет доступ к значениям параметров экземпляра процесса и методов элементов бизнес-процесса
            "Задание сценарий".
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessModel.GetScriptTaskMethod(System.String)">
            <summary>
            Возвращает ссылку на экземпляр метода элемента бизнес-процесса "Задание сценарий" по его имени.
            </summary>
            <param name="methodName">Имя метода.</param>
            <returns>Делегат c определенной сигнатурой метода.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessServiceProvider">
            <summary>
            Представляет класс, ответственный за инициализацию всех компонентов системы исполнения бизнесс-процессов.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessServiceProvider.Subscribe(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Подписывается на событие выполнения элемента бизнес-процесса для отправки результата в очередь сообщений.
            </summary>
            <param name="processComponentSet">Набор компонентов бизнес-процессв.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessServiceProvider.StartServices``1(``0,Terrasoft.Core.Process.IMessageQueueManager)">
            <summary>
            Starts the services.
            </summary>
            <param name="stateService">The state service.</param>
            <param name="queueManager">The queue manager.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessServiceProvider.GetInstance">
            <summary>
            Инициализирует единый для приложения экземпляр класса <see cref="T:Terrasoft.Core.Process.ProcessServiceProvider"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessServiceProvider.StartServices(System.Func{System.String,Terrasoft.Core.UserConnection})">
            <summary>
            Starts all the necessary services for the execution of processes.
            </summary>
            <param name="userConnectionFactoryMethod">The user connection factory method.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessServiceProvider.StopServices">
            <summary>
            Останавливает запущенные службы и освобождает ресурсы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessServiceProvider.CreateProcessComponentSet(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.BaseProcessSchema)">
            <summary>
            Creates component set base on the process schema. Prepares it for work with messages queue.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="schema">The process schema.</param>
            <returns>The process component set.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessServiceProvider.CreateProcessComponentSet(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.BaseProcessSchema,Terrasoft.Core.Process.IProcessParameterStore)">
            <summary>
            Creates component set base on the process schema. Prepares it for work with messages queue.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="schema">The process schema.</param>
            <param name="parameterStore">The store of process paramater values.</param>
            <returns>The process component set.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessServiceProvider.TaskQueueManager">
            <summary>
            Gets the task queue manager for the process elements executing.
            </summary>
            <value>
            The task queue manager.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessServiceProvider.FlowEngineStateService">
            <summary>
            The flow engine state service.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.QueueEmulator">
            <summary>
            Представляет класс, который имитирует работу очереди.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.QueueEmulator.Dispose">
            <summary>
            Освобождает ресурсы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.QueueEmulator.FlowEngineInstance">
            <summary>
            Инициализирует и возвращает экземпляр <see cref="T:Terrasoft.Core.Process.QueueEmulatorItem"/>
            для общения с очередью на стороне исполнения схемы бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.QueueEmulator.TaskExecutorInstance">
            <summary>
            Инициализирует и возвращает экземпляр <see cref="T:Terrasoft.Core.Process.QueueEmulatorItem"/>
            для общения с очередью на стороне исполнения задач бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.QueueEmulator.IsExternalQueue">
            <summary>
            Признак того, что очередь служит для встроенного режима обработки бизнес-процессов.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.FlowEngine">
            <summary>
            Represents a class that initiates the start of the business process and initializes all the necessary 
            components for its execution.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngine.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessComponentSetStrategy)">
            <summary>
            Initialize instance of <see cref="T:Terrasoft.Core.Process.FlowEngine"/> with user connection settings.
            </summary>
            <param name="userConnection">User Connection.</param>
            <param name="processComponentSetStrategy">Instance of <see cref="T:Terrasoft.Core.Process.ProcessComponentSetStrategy"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngine.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initialize instance of <see cref="T:Terrasoft.Core.Process.FlowEngine"/> with user connection settings.
            </summary>
            <param name="userConnection">User Connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngine.GetIsVersionSupported(System.String)">
            <summary>
            Returns true if version is supported by <see cref="T:Terrasoft.Core.Process.FlowEngine"/>.
            </summary>
            <param name="versionToCheck">The version to check.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngine.CreateProcessComponentSet(Terrasoft.Core.Process.BaseProcessSchema)">
            <summary>
            Returns instance of the <see cref="T:Terrasoft.Core.Process.ProcessComponentSet"/> class.
            </summary>
            <param name="schema">Schema of the process.</param>
            <returns>Instance of the <see cref="T:Terrasoft.Core.Process.ProcessComponentSet"/> class.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngine.EnqueueProcess(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Move to queue started message for the process running.
            </summary>
            <param name="processComponentSet">Instance of <see cref="T:Terrasoft.Core.Process.ProcessComponentSet"/></param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngine.InitializeProcess(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Initialized process data before run.
            </summary>
            <param name="processComponentSet">Instanse of <see cref="T:Terrasoft.Core.Process.ProcessComponentSet"/></param>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngine.RunSubProcess(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Runs the subprocess.
            </summary>
            <param name="process">Instance of the subprocess.</param>
            <returns>Process descriptor.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngine.RunProcess(Terrasoft.Core.Process.BaseProcessSchema)">
            <summary>
            Runs the process.
            </summary>
            <param name="schema">Schema of the process.</param>
            <returns>Process descriptor.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngine.RunProcess(Terrasoft.Core.Process.BaseProcessSchema,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Runs the process.
            </summary>
            <param name="schema">Schema of the process.</param>
            <param name="nameValueMap">Parameter values.</param>
            <returns>Process descriptor.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngine.RunProcess(Terrasoft.Core.Process.BaseProcessSchema,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Runs the process.
            </summary>
            <param name="schema">Schema of the process.</param>
            <param name="nameValueMap">Parameter values.</param>
            <returns>Process descriptor.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.FlowEngine.RunProcess(Terrasoft.Core.Process.ProcessComponentSet,System.Guid,System.Guid)">
            <summary>
            Runs the process.
            </summary>
            <param name="processComponentSet">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessComponentSet"/> class.</param>
            <param name="startSignalUId">Identifier of the start signal.</param>
            <param name="entityId">Identifier of the entity.</param>
            <returns>Process descriptor.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.FlowEngine.CreatedInAppVersion">
            <summary>
            The application version, from which the process can be interpreted.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessComponentSet">
            <summary>
            Represents a set of process components that are required to run it.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.BaseProcessSchema,Terrasoft.Core.Process.ProcessComponentSetStrategy,Terrasoft.Core.Process.IProcessParameterStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessComponentSet"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="schema">The schema.</param>
            <param name="processComponentSetStrategy">The process component set strategy.</param>
            <param name="parameterStore">The process parameter store.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.BaseProcessSchema,Terrasoft.Core.Process.IProcessParameterStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessComponentSet"/> class for the given user connection and
            the process schema.
            </summary>
            <param name="connection">The user connection.</param>
            <param name="schema">The schema.</param>
            <param name="store">The process parameter store.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.CompleteApplyingFlowElementsPropertiesData">
            <summary>
            Completes applying state of the process elements.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.PrepareStart(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Prepares to start the current process.
            </summary>
            <param name="context">The execution context.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.TryCreateFlowElementInstance(System.String,System.Guid,Terrasoft.Core.Process.ProcessFlowElement@)">
            <summary>
            Tries the create flow element instance.
            </summary>
            <param name="propertyName">Name of the corresponding process class property.</param>
            <param name="schemaElementUId">The schema element identifier.</param>
            <param name="processFlowElement">The process flow element.</param>
            <returns><c>True</c>, if the instance was created, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.GetSchema(System.Guid)">
            <summary>
            Returns instance of the schema.
            </summary>
            <param name="schemaUId">UId of the schema.</param>
            <returns>Instance of the schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.CompleteApplyingPropertiesDataValues">
            <summary>
            Completes applying state of the current process.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.WriteProcessParameters">
            <summary>
            Writes parameter values of the current process.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.ApplyPropertiesDataValues(Terrasoft.Common.DataReader)">
            <summary>
            Applies state of the current process.
            </summary>
            <param name="reader">Instance that provides sequential reading of data.</param>		
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.ClearProcessData">
            <summary>
            Clears the process data.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.ForceGetProcessFlowElement(System.String)">
            <summary>
            Returns an instance of the process element. If the element is not initialized, it will be initialized first.
            </summary>
            <param name="schemaElementName">Name of the schema element.</param>
            <returns>Instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> type..</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.CreateParametersDataReader">
            <summary>
            Creates the data reader for current instance parameter values.
            </summary>
            <returns>Parameter data reader.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.ReadSubProcessParameters(Terrasoft.Core.Process.IProcessElementMetaInfo,Terrasoft.Core.Process.Process)">
            <summary>
            Reads the parameter values of sub process to the parameter values of current instance.
            </summary>
            <param name="subProcessElementSchema">The sub process element schema.</param>
            <param name="subProcessElementInstance">The sub process element instance.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.InternalExecuteProcess(Terrasoft.Core.Process.ProcessExecutingContext)">
            <summary>
            Executes process.
            </summary>
            <param name="context">The executing context.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.InitMemoryParameterStore">
            <summary>
            Initializes the memory parameter store.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.ActualizeProcessElement(Terrasoft.Core.Process.ProcessFlowElement)">
            <summary>
            Actualizes instance of the process into the private field of the class.
            </summary>
            <param name="element">Element of the process.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.CreateParametersDataWriter(Terrasoft.Core.Process.ProcessSchemaParameterCollection,System.Guid)">
            <summary>
            Creates the parameters data writer.
            </summary>
            <param name="parameterCollection">The parameters collection.</param>
            <param name="schemaElementUId">The schema element unique identifier.</param>
            <returns>Parameters data writer</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.Register">
            <summary>
            Performs registration of the process components set in DB.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.Execute(System.String,System.Guid)">
            <summary>
            Executes the process element.
            </summary>
            <param name="elementName">Name of the process element.</param>
            <param name="entityId">Identifier of the entity.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.InitializeProcessComponentSetParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes parameter values of the current process.
            </summary>
            <param name="parameterNameValueMap">Set of the parameter values.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.InitializeProcessComponentSetParameters(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initalizes parameter values of the current process.
            </summary>
            <param name="parameterNameValueMap">Set of the parameter values.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.InitializeProcessComponentSetParameters(Terrasoft.Core.Process.Process)">
            <summary>
            Initalizes parameter values of the specified subprocess.
            </summary>
            <param name="process">Instance of the process.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.CreateProcessComponentSet(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.BaseProcessSchema)">
            <summary>
            Creates the process component set for schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="baseProcessSchema">The base process schema.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.Assign(Terrasoft.Core.Process.ProcessFlowElement)">
            <summary>
            Assigns the property values of the current process element to the properties of the specified element.
            </summary>
            <param name="processElement">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessFlowElement"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.SetParameterValue``1(System.String,``0)">
            <summary>
            Sets protected parameter value by it's name.
            </summary>
            <typeparam name="T">The type of parameter.</typeparam>
            <param name="parameterName">The parameter name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.GetParameterValue``1(System.String)">
            <summary>
            Gets parameter value by it's name.
            </summary>
            <typeparam name="T">The type of parameter.</typeparam>
            <param name="parameterName">The name of parameter.</param>
            <returns>Returns the value of the property by name.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.Restore(System.String,Terrasoft.Core.UserConnection)">
            <summary>
            Restores a process based on serialized property values.
            </summary>
            <param name="serializedPropertiesData">Serialized state of the process.</param>
            <param name="userConnection">User connection.</param>
            <returns>Instance of the <see cref="T:Terrasoft.Core.Process.ProcessComponentSet"/> type.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.Execute(Terrasoft.Core.Process.ProcessFlowElement,System.Object[])">
            <summary>
            Executes the process element.
            </summary>
            <param name="processElement">Process element.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.WritePropertiesData(Terrasoft.Common.DataWriter,System.Boolean)">
            <summary>
            Writes state of the current process.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
            <param name="shouldWriteElements">Indicates whether to write process elements.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.CloneShallow">
            <summary>
            Clones current instance without its flow elements.
            </summary>
            <returns>Shallow clone of current instance.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.InitializeFlowElementProperties(Terrasoft.Core.Process.ProcessFlowElement)">
            <summary>
            Reads flow element parameter values from parameter store.
            </summary>
            <param name="flowElement">The flow element instance.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.GetParameterValueByMetaPath(System.String)">
            <summary>
            Gets the process parameter value by meta path.
            </summary>
            <param name="metaPath">The process parameter meta path.</param>
            <returns>The process parameter value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.Execute(System.String)">
            <summary>
            Executes process element by its name.
            </summary>
            <param name="elementName">Name of the process element.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessComponentSet.Equals(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Determines whether the specified process is equal to the current process.
            </summary>
            <param name="other">The process to compare with the current process.</param>
            <returns><c>true</c> if the specified process is equal to the current process; otherwise,
            <c>false</c>.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessComponentSet.ProcessModel">
            <summary>
            Gets instance that implements the<see cref="T:Terrasoft.Core.Process.IProcessModel"/> interface.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessComponentSet.FlowSchemaUId">
            <summary>
            Gets unique identifier of the flow schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessComponentSet.MaxLoopCount">
            <summary>
            Gets maximum number of repetitions.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Process.ProcessComponentSet.ProcessFlowElementExecuted">
            <summary>
            Occurs when the process element is successfully executed.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.MessageQueueManager">
            <summary>
            Класс очереди, реализующей интерфейс <see cref="T:Terrasoft.Core.Process.IMessageQueueManager"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.MessageQueueManager.Create">
            <summary>
            Возвращает экземпляр очереди, тип которой задан параметром <c>MsgQueueTypeName</c> конфигурационного файла.
            </summary>
            <returns>Экземпляр класса очереди, который реализует интерфейс <see cref="T:Terrasoft.Core.Process.IMessageQueueManager"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaGeneratorNew.AddSchemaMethods(Terrasoft.Core.Process.ProcessSchema,Terrasoft.Core.Process.ProcessSchema,System.Collections.ObjectModel.Collection{Terrasoft.Core.CodeGeneration.CodeGenerator.MethodCollectionItem},System.Collections.ObjectModel.Collection{Terrasoft.Core.CodeGeneration.CodeGenerator.MethodCollectionItem})">
            <summary>
            Fills public methods collection with user defined functions.
            </summary>
            <param name="schema">Target schema with methods.</param>
            <param name="parentSchema">Parent schema for target.</param>
            <param name="protectedMethodCollection">Collection with prefilled protected methods.</param>
            <param name="publicMethodCollection">Collection with prefilled public methods.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaGeneratorNew.GenerateProcessMethodBody(Terrasoft.Core.UserConnection,Terrasoft.Core.SchemaMethod,Terrasoft.Core.CodeGeneration.GeneratorTokenVisibility)">
            <summary>
            Generates string representation of process schema method.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="method">Target process schema method.</param>
            <param name="methodVisibility">Visibility of target method.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaGeneratorNew.WriteProcessMethodsWrapper(Terrasoft.Core.CodeGeneration.GeneratorContext,Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Generates source code of the "Script task" process element.
            </summary>
            <param name="context">Context of source code generator.</param>
            <param name="processSchema">Process schema.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.IParametrizedProcessSchemaElement">
            <summary>
            Provides properties of the parametrized process element and instance methods for the synchronization of
            parameters.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.IProcessSchemaSignalEvent"/>
        </member>
        <member name="M:Terrasoft.Core.Process.IParametrizedProcessSchemaElement.SynchronizeParameters">
            <summary>
            Synchronizes process parameters.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IParametrizedProcessSchemaElement.BpmnElementName">
            <summary>
            Returns the element name in BPM notation.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IParametrizedProcessSchemaElement.Parameters">
            <summary>
            Gets process parameters.
            </summary>
            <returns>
            Collection of process parameters.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.Process.IParametrizedProcessSchemaElement.EntitySchemaUId">
            <summary>
            Gets or sets the entity schema identifier.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaEvent.InitializeSchemaParameters(Terrasoft.Core.Process.ProcessSchemaParameterCollection)">
            <summary>
            Initializes process parameters of the schema element.
            </summary>
            <param name="parameters">The list of the process element parameters.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaEvent.FillParameters(Terrasoft.Core.Process.ProcessSchemaParameterCollection)">
            <summary>
            Fills out the list of the process element parameters.
            </summary>
            <param name="parameters">List of forcibly generated parameters.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaEvent.AssignParameterValue(System.String,System.String)">
            <summary>
            Assigns the value of the process parameter.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaEvent.AssignParameterValue(Terrasoft.Core.Process.ProcessSchemaParameter,System.String)">
            <summary>
            Assigns the value of the process parameter.
            </summary>
            <param name="parameter">Process parameter.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaEvent.CreateParameter(System.Guid,System.String,System.Guid)">
            <summary>
            Creates an instance of the process parameter.
            </summary>
            <param name="uId">Parameter Id.</param>
            <param name="name">Parameter name.</param>
            <param name="dataValueTypeUId">Data value type Id.</param>
            <returns>Returns instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaParameter"/> type.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaEvent.AddParameterIfNotExists(Terrasoft.Core.Process.ProcessSchemaParameterCollection,System.Guid,System.String,System.Guid)">
            <summary>
            Adds process parameter if it does not exist in the list.
            </summary>
            <param name="parameters">The list of the process parameters.</param>
            <param name="uId">Parameter Id.</param>
            <param name="name">Parameter name.</param>
            <param name="dataValueTypeUId">Data value type Id.</param>
            <returns>Returns instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaParameter"/> type.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaEvent.GetCaptionRecordIdParameter">
            <summary>
            Returns caption of the RecordId process parameter.
            </summary>
            <returns>Returns instance of the <see cref="T:Terrasoft.Common.LocalizableString"/> type.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaEvent.ForceGetParameters">
            <summary>
            Forcibly obtains process parameters.
            </summary>
            <returns>
            Collection of process parameters.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.Process.QueueEmulatorItem">
            <summary>
            Представляет класс, который реализует возможность общения с имитируемой очередью.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.QueueEmulatorItem.#ctor(System.Action{Terrasoft.Core.Process.TaskServiceQueueItem})">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.TaskServiceQueueItem"/> с заданным алгоритмом отправки сообщений.
            </summary>
            <param name="sendMessageDel">Алгоритм, реализующий отправку сообщения.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.QueueEmulatorItem.InvokeMessage(Terrasoft.Core.Process.TaskServiceQueueItem)">
            <summary>
            Имитирует приходящее сообщение из очереди.
            </summary>
            <param name="message">Сообщение <see cref="T:Terrasoft.Core.Process.TaskServiceQueueItem"/></param>
        </member>
        <member name="M:Terrasoft.Core.Process.QueueEmulatorItem.Dispose">
            <summary>
            Освобождает ресурсы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.QueueEmulatorItem.Send(Terrasoft.Core.Process.TaskServiceQueueItem,System.Byte)">
            <summary>
            Выполняет отправку сообщения.
            </summary>
            <param name="message">Сообщение <see cref="T:Terrasoft.Core.Process.TaskServiceQueueItem"/>.</param>
            <param name="priority">
            Приоритет отправки сообщения. Значение по умолчанию - 0 (приоритет не используется).
            </param>
        </member>
        <member name="E:Terrasoft.Core.Process.QueueEmulatorItem.Error">
            <summary>
            Событие генерируется в результате возникновения ошибки при отправке или получении сообщения.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Process.QueueEmulatorItem.ReceiveMessage">
            <summary>
            Событие, возникающее при получении нового сообщения.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessParameterInfoComposer">
            <summary>
            Представляет интерфейс, ответственный за коррекцию таблицы связей процесса в случае, когда его схема была
            изменена после запуска.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterInfoComposer.#ctor(Terrasoft.Core.Process.IProcessParameterStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessParameterInfoComposer"/> class.
            </summary>
            <param name="processParameterStore">The process parameter store.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterInfoComposer.GetComposedParameterMappings(System.Guid,System.Collections.Generic.Dictionary{System.String,Terrasoft.Core.Process.ProcessParameterInfo})">
            <summary>
            Выполняет слияние таблицы связей запущенного процесса с указанным шаблонным набором связей параметров.
            </summary>
            <param name="processUId">Идентификатор процесса.</param>
            <param name="parameterMappings">Таблица связей параметров схемы процесса.</param>
            <returns>Объединенную таблицу связей с дополнениями из шаблона и изменениями, внесенными в ходе исполнения
            процесса. </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessParameterInfoComposer.UpdateParameterInfoValue``1(System.Guid,Terrasoft.Core.Process.ProcessParameterInfo,System.String,``0)">
            <summary>
            Updates <see cref="T:Terrasoft.Core.Process.ProcessParameterInfo"/> value during process execution.
            </summary>
            <typeparam name="T">The type of the parameter value.</typeparam>
            <param name="processUId">The process identifier.</param>
            <param name="parameterInfo">The process parameter info.</param>
            <param name="parameterPath">The parameter path.</param>
            <param name="value">New value for the parameter.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.ScriptEngine">
            <summary>
            Класс, реализующий создание сессии для выполнения выражений.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ScriptEngine.CreateSession">
            <summary>
            Возвращает экземпляр сессии для выполнения выражений.
            </summary>
            <returns>Экземпляр сессии для выполнения выражений.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">
            Если <see cref="T:Terrasoft.Core.Factories.ClassFactory"/> не смог получить
            экземпляр класса по интерфейсу <see cref="T:Terrasoft.Core.Process.IScriptSession"/>.
            </exception>
        </member>
        <member name="P:Terrasoft.Core.Process.ScriptEngine.ReplaceCreateSessionDelegate">
            <summary>
            Алгоритм замещающий создание сессии выполнения формул.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.TaskService">
            <summary>
            Представляет сервис для выполнения компонентов процесса, которые требуют доступа к данным и взаимодействия с
            пользователем.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.TaskService.#ctor(Terrasoft.Core.Process.IMessageQueueManagerItem,Terrasoft.Core.Process.TaskServiceSettings)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Process.TaskService"/> с заданным элементом менеджера очередей сообщений и
            настройками.
            </summary>
            <param name="messageQueueManagerItem">Элемент менеджера очередей сообщений.</param>
            <param name="taskServiceSettings">Настройки сервиса.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.TaskService.Subscribe(Terrasoft.Core.Process.ProcessComponentSet)">
            <summary>
            Подписывается на событие выполнения элемента бизнес-процесса для отправки результата в очередь сообщений.
            </summary>
            <param name="processComponentSet">
            Набор компонентов запущенного процесса, элемент которого будет выполнен.
            </param>
        </member>
        <member name="T:Terrasoft.Core.Process.ConditionEvalStrategy">
            <summary>
            Стратегия вычисления набора условных потоков для Gateway элементов.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.ConditionEvalStrategy.Exclusive">
            <summary>Группу формул в наборе условных потокох вычислять до первого положительного результата.</summary>
        </member>
        <member name="F:Terrasoft.Core.Process.ConditionEvalStrategy.Inclusive">
            <summary>Вычислять все формулы в наборе условных потоков.</summary>
        </member>
        <member name="T:Terrasoft.Core.Process.TaskServiceQueueItem">
            <summary>
            Представляет элемент очереди для общения с сервисом выполнения задач бизнес-процесса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.TaskServiceQueueItem.Serialize(Terrasoft.Core.Process.TaskServiceQueueItem)">
            <summary>
            Сериализация элемента очереди в JSON формат.
            </summary>
            <param name="taskServiceQueueItem">Экземпляр элемента очереди.</param>
            <returns>Возвращает экземпляр элемента очереди в формате JSON.</returns>
            <exception cref="T:Terrasoft.Common.NullOrEmptyException">
            Если передаваемый параметр <paramref name="taskServiceQueueItem"/> равен <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Process.TaskServiceQueueItem.Deserialize(System.String)">
            <summary>
            Десериализация элемента очереди из JSON формата.
            </summary>
            <param name="taskServiceQueueItemString">Экземпляр элемента очереди в формате JSON.</param>
            <returns>Возвращает экземпляр элемента очереди <see cref="T:Terrasoft.Core.Process.TaskServiceQueueItem"/>.</returns>
            <exception cref="T:Terrasoft.Common.NullOrEmptyException">
            Если передаваемый параметр <paramref name="taskServiceQueueItemString"/> пустой или <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            Если передаваемый параметр <paramref name="taskServiceQueueItemString"/> содержит некорректный JSON формат.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Process.TaskServiceQueueItem.GetHashCode">
            <summary>
            Хэш-код для текущего экземпляра элемента очереди.
            </summary>
            <returns>Возвращает целочисленное значение хэш-кода для текущего экземпляра элемента очереди.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.TaskServiceQueueItem.Equals(System.Object)">
            <summary>
            Сравнение текущего элемента очереди с указанным в параметре.
            </summary>
            <param name="obj">Экземпляр элемента очереди <see cref="T:Terrasoft.Core.Process.TaskServiceQueueItem"/>.</param>
            <returns>
            Возвращает <c>true</c>, если экземпляры идентичны; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.Process.TaskServiceQueueItem.Result">
            <summary>
            Результат выполнения задачи.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.TaskServiceQueueItem.UId">
            <summary>
            Идентификатор бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.TaskServiceQueueItem.SchemaId">
            <summary>
            Идентификатор схемы бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.TaskServiceQueueItem.FlowElementUId">
            <summary>
            Идентификатор элемента бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.TaskServiceQueueItem.PreviousFlowElementUId">
            <summary>
            Идентификатор предыдущего элемента бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.TaskServiceQueueItem.FlowElementName">
            <summary>
            Наименование элемента бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.TaskServiceQueueItem.GatewayConditions">
            <summary>
            Данные выражений условных потоков.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.TaskServiceQueueItem.Type">
            <summary>
            Тип пакета.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.TaskServiceQueueItem.Body">
            <summary>
            Переменная, содержащая десериализованные данные схемы бизнес-процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.TaskServiceQueueItem.ErrorMessage">
            <summary>
            Описание ошибки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.TaskServiceQueueItem.FlowSchema">
            <summary>
            Схема бизнес-процесса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.TaskServiceSettings">
            <summary>
            Представляет настройки, которые необходимы для создания экземпляра <see cref="T:Terrasoft.Core.Process.TaskService"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.TaskServiceSettings.FlowEngineStateService">
            <summary>
            Сервис состояний.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaImporter.SchemaDataDescriptor.JsContent">
            <summary>
            JS content property of schema
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaImporter.SchemaDataDescriptor.LessContent">
            <summary>
            Less content property of schema
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaImporter.SchemaDataDescriptor.CsharpContent">
            <summary>
            C# content property of schema
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysCulture.ResetSysCulturesCache(Terrasoft.Core.UserConnection)">
            <summary>
            Resets system cultures cache.
            </summary>
            <param name="userConnection">User connection</param>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysExtServiceOperationRightSchema">
            <exclude/>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysExtServiceOperationRight">
            <summary>
            Operations permissions for external services.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysExtServiceOperationRight.SysAdminUnitId">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysExtServiceOperationRight.SysAdminUnitName">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysExtServiceOperationRight.CanRead">
            <summary>
            Read.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysExtServiceOperationRight.CanAppend">
            <summary>
            New.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysExtServiceOperationRight.CanEdit">
            <summary>
            Edit.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysExtServiceOperationRight.CanDelete">
            <summary>
            Delete.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysExtServiceOperationRight.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysLookup">
            <summary>
            System lookup.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLookup.IsSystem">
            <summary>
            Системный.
            </summary>
            <remarks>
            Важный системный справочник, участвующий в бизнес-процессах. Изменение запрещено.
            </remarks>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLookup.IsSimple">
            <summary>
            Простой.
            </summary>
            <remarks>
            Простой справочник с небольшим количеством записей. Кешируется.
            </remarks>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLookup.SysEditPageSchemaUId">
            <summary>
            Edit page schema unique identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLookup.SysGridPageSchemaUId">
            <summary>
            Grid page schema unique identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysLookup.SysEntitySchemaUId">
            <summary>
            Entity schema unique identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPackage.IsContentChanged">
            <summary>
            Признак, определяющий, было ли изменено содержимое пакета.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysPackageDependency.DependOnPackageVersion">
            <summary>
            Версия пакета, от которого зависит текущий.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysProcessElementLogSchema">
            <summary>
            Entity schema "Process element log".
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysProcessElementLog">
            <summary>
            Process element log.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Configuration.SysProcessElementLog._sysProcess">
            <summary>
            Процесс.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Configuration.SysProcessElementLog._status">
            <summary>
            Состояние.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Configuration.SysProcessElementLog._owner">
            <summary>
            Ответственный.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessElementLog.SchemaElementUId">
            <summary>
            Элемент схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessElementLog.StartDate">
            <summary>
            Дата начала.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessElementLog.CompleteDate">
            <summary>
            Дата завершения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessElementLog.DurationInMinutes">
            <summary>
            Длительность, минут.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessElementLog.DurationInHours">
            <summary>
            Длительность, часов.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessElementLog.DurationInDays">
            <summary>
            Длительность, дней.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessElementLog.Type">
            <summary>
            Тип.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessElementLog.Caption">
            <summary>
            Подпись.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessElementLog.ErrorDescription">
            <summary>
            Описание ошибки.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysProcessLogSchema">
            <summary>
            Схема объекта "Журнал процессов".
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysProcessLogSchema.InitializeColumns">
            <summary>
            Initializes the columns collection.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysProcessLog">
            <summary>
            Журнал процессов.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Configuration.SysProcessLog._parent">
            <summary>
            Родитель.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Configuration.SysProcessLog._status">
            <summary>
            Состояние процесса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessLog.Name">
            <summary>
            Заголовок.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessLog.StartDate">
            <summary>
            Дата начала.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessLog.CompleteDate">
            <summary>
            Дата завершения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessLog.Owner">
            <summary>
            Ответственный.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessLog.SysWorkspaceId">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessLog.SysWorkspaceName">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessLog.SysWorkspace">
            <summary>
            Рабочее пространство.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessLog.DurationInMinutes">
            <summary>
            Длительность, минут.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessLog.DurationInHours">
            <summary>
            Длительность, часов.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessLog.DurationInDays">
            <summary>
            Длительность, дней.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessLog.PackageName">
            <summary>
            Name of the package.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessLog.Version">
            <summary>
            Version number of the current schema.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysSyncMetaDataSchema">
            <summary>
            Схема объекта "SysSyncMetaData".
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSyncMetaData.SyncSchemaName">
            <summary>
            Имя EntitySchema-ы в которой хранится связаный элемент </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSyncMetaData.RemoteItemName">
            <summary>
            Имя типа элемента синхронизации из внешнего хранилища </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSyncMetaData.RemoteId">
            <summary>
            Идентификатор элемента во внешнем хранилище </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSyncMetaData.LocalId">
            <summary>
            Идентификатор элемента BPMonline </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSyncMetaData.RemoteStoreId">
            <summary>
            идентификатор внешнего хранилища с которым был синхронизирован элемент </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSyncMetaData.IsLocalDeleted">
            <summary>
            Указывает, удален ли элемент из локального хранилища с времени последней синхронизации.
            Устарел, использовать LocalState</summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSyncMetaData.IsRemoteDeleted">
            <summary>
            Указывает, удален ли элемент из внешнего хранилища с времени последней синхронизации 
            Устарел, использовать RemoteState</summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSyncMetaData.ModifiedInStoreId">
            <summary>
            Идентификатор хранилища в котором выполнено последнее изменение </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSyncMetaData.Version">
            <summary>
            Версия последнего выполненного изменения элемента (дата модификации) </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSyncMetaData.CreatedInStoreId">
            <summary>
            Идентификатор хранилища в котором создан элемент синхронизации </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSyncMetaData.ExtraParameters">
            <summary> 
            Дополнительные данные в метаданных определеные пользователем </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSyncMetaData.SchemaOrder">
            <summary>
            Порядковый номер применения изменений в BPMonline </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSyncMetaData.LocalState">
            <summary>
            LocalState.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSyncMetaData.RemoteState">
            <summary>
            RemoteState.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Configuration.VwSysPackageDependencies._package">
            <summary>
            Пакет.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Configuration.VwSysPackageDependencies._dependOnPackage">
            <summary>
            Зависит от пакета.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.HintType">
            <summary>
            Тип табличного указания.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.HintType.None">
            <summary>
            Табличное указание не задано/не определено.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.HintType.ForceSeek">
            <summary>
            Табличное указание "Использовать поиск в индексе".
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.HintType.NoLock">
            <summary>
            Табличное указание "Чтение недействительных результатов".
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.HintType.Index">
            <summary>
            Табличное указание "Использовать индекс".
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.HintType.RowLock">
            <summary>
            Табличное указание "Блокировка по записям".
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.BaseHint">
            <summary>
            Базовый класс табличного указания.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.BaseHint.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса табличного указания.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.BaseHint.Clone">
            <summary>
            Создает клон текущего экземпляра.
            </summary>
            <returns>Новый экземпляр, являющийся клоном текущего экземпляра.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.BaseHint.HintType">
            <summary>
            Тип табличного указания.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.ForceSeekHint">
            <summary>
            Класс табличного указания "Использовать поиск в индексе".
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.ForceSeekHint.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса табличного указания.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.ForceSeekHint.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.ForceSeekHint"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.ForceSeekHint"/>, являющийся клоном текущего экземпляра.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.ForceSeekHint.HintType">
            <summary>
            Тип табличного указания.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.NoLockHint">
            <summary>
            Класс табличного указания "Чтение недействительных результатов".
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.NoLockHint.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса табличного указания.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.NoLockHint.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.NoLockHint"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.NoLockHint"/>, являющийся клоном текущего экземпляра.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.NoLockHint.HintType">
            <summary>
            Тип табличного указания.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.RowLockHint">
            <summary>
            Класс табличного указания "Блокировка по записям".
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.RowLockHint.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса табличного указания.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.RowLockHint.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.RowLockHint"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.RowLockHint"/>, являющийся клоном текущего экземпляра.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.RowLockHint.HintType">
            <summary>
            Тип табличного указания.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.IndexHint">
            <summary>
            Класс табличного указания "Использовать индекс".
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.IndexHint.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.IndexHint"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.IndexHint.#ctor(Terrasoft.Core.DB.IndexHint)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.BaseHint"/>, являющийся клоном переданного табличного указания.
            </summary>
            <param name="hint">Экземпляр класса <see cref="T:Terrasoft.Core.DB.BaseHint"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.IndexHint.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.IndexHint"/>.
            </summary>
            <param name="name">Название индекса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.IndexHint.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса табличного указания.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.IndexHint.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.IndexHint"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.IndexHint"/>, являющийся клоном текущего экземпляра.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.IndexHint.HintType">
            <summary>
            Тип табличного указания.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.IndexHint.SourceAlias">
            <summary>
            Псевдоним источика.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.IndexHint.IndexName">
            <summary>
            Название индекса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.HintsHelper.WithHints(Terrasoft.Core.DB.Delete,Terrasoft.Core.DB.BaseHint[])">
            <summary>
            Добавляет табличные указания в текущий запрос удаления данных.
            </summary>
            <param name="source">Запрос на удаление данных.</param>
            <param name="hints">Перечисление табличных указаний.</param>
            <returns>Текущий запрос удаления.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.HintsHelper.WithHints(Terrasoft.Core.DB.Update,Terrasoft.Core.DB.BaseHint[])">
            <summary>
            Добавляет табличные указания в текущий запрос обновления данных.
            </summary>
            <param name="source">Запрос обновления данных.</param>
            <param name="hints">Перечисление табличных указаний.</param>
            <returns>Запрос обновления данных.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.HintsHelper.SpecifyNoLockHints(Terrasoft.Core.DB.Select,System.Boolean)">
            <summary>
            Добавляет табличное указание <see cref="F:Terrasoft.Core.DB.HintType.NoLock"/> в текущий запрос.
            </summary>
            <param name="source">Запрос на выборку.</param>
            <param name="useHint">Признак, определяющий, применять ли табличное указание при выполнении запроса.
            Необязательный параметр, по умолчанию - <c>true</c>.</param>
        </member>
        <member name="T:Terrasoft.Core.DB.Hints">
            <summary>
            Класс табличных указаний.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Hints.Index(System.String)">
            <summary>
            Создает объект табличного указания "Использовать индекс".
            </summary>
            <param name="name">Имя индекса.</param>
            <returns>Табличное указание "Использовать индекс".</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.Hints.ForceSeek">
            <summary>
            Табличное указание "Использовать поиск в индексе".
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Hints.NoLock">
            <summary>
            Табличное указание "Чтение недействительных результатов".
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Hints.RowLock">
            <summary>
            Табличное указание "Блокировка по записям".
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.IParametrizedQuery">
            <summary>
            Предоставляет методы и свойства параметризированного запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.IParametrizedQuery.GetUsingParameters">
            <summary>
            Возвращает коллекцию параметров запроса.
            </summary>
            <returns>Коллекция параметров данного запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.IParametrizedQuery.ResetParameters">
            <summary>
            Очищает коллекцию параметров запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.IParametrizedQuery.InitializeParameters">
            <summary>
            Выполняет инициализацию параметров запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.IParametrizedQuery.Parameters">
            <summary>
            Коллекция параметров запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.IParametrizedQuery.HasParameters">
            <summary>
            Признак, имеет ли запрос параметры.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.IParametrizedQuery.BuildParametersAsValue">
            <summary>
            Определяет, добавлять ли параметры запроса в текст запроса как значения.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.IDBReadableCommand">
            <summary>
            Представляет собой оператор SQL, предназначенный для чтения данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.IDBReadableCommand.ExecuteReader(Terrasoft.Core.DB.DBExecutor)">
            <summary>
            Используя переданный экземпляр <see cref="T:Terrasoft.Core.DB.DBExecutor"/>, выполняет оператор	SQL и возвращает 
            <see cref="T:System.Data.IDataReader"/> с результирующим набором строк.
            </summary>
            <param name="dbExecutor">Экземпляр <see cref="T:Terrasoft.Core.DB.DBExecutor"/>, с помощью которого выполняется запрос к базе 
            данных.</param>
            <returns>Экземпляр <see cref="T:System.Data.IDataReader"/> с результирующим набором строк.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.IDBReadableCommand.ExecuteScalar``1(Terrasoft.Core.DB.DBExecutor)">
            <summary>
            Используя переданный экземпляр <see cref="T:Terrasoft.Core.DB.DBExecutor"/>, выполняет оператор SQL и возвращает типизированный 
            первый столбец первой строки результирующего набора, возвращаемого запросом.
            </summary>
            <typeparam name="TResult">Тип возвращаемого значения столбца.</typeparam>
            <param name="dbExecutor">Экземпляр <see cref="T:Terrasoft.Core.DB.DBExecutor"/>, с помощью которого выполняется запрос к базе 
            данных.</param>
            <returns>Первый столбец первой строки в результирующем наборе типа <typeparamref name="TResult"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.IDBReadableCommand.ExecuteScalar``1">
            <summary>
            Выполняет оператор SQL и возвращает типизированный первый столбец первой строки результирующего набора, 
            возвращаемого запросом.
            </summary>
            <typeparam name="TResult">Тип возвращаемого значения столбца.</typeparam>
            <returns>Первый столбец первой строки в результирующем наборе типа <typeparamref name="TResult"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityQueryBaseBlockBuilder.BuildBlock(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Обработать вызов метода текущим посетителем
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntityQueryProvider.CanReadUncommitedDataProperty">
            <summary>
            Название свойства web.config, отвечающего за режим "грязного" чтения таблиц для запросов 
            <see cref="T:Terrasoft.Core.Entities.EntityQueryProvider"/> по умолчанию.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityQueryProvider.ResetProvider">
            <summary>
            Один провайдер может использоваться для построения и выполнения нескольких,
            несвязаных между собой, запросов на основе одной Entity.
            Например при использовании inline count</summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityQueryProvider.ContinuationToken">
            <summary>
            Указывает количество строк, которые необходимо пропустить при постраничности.
            Эквивалентно SkipCount для постраничности</summary>
            <remarks>
            Вынесен в отдельный параметр так как SkipCount
            может быть перезаписан значением $skip из запроса</remarks>
        </member>
        <member name="T:Terrasoft.Core.Factories.ConstructorArgument">
            <summary>
            Argument of the class constructor, which is created using the factory of replacement classes.
            </summary>
            <remarks>This class is designed for initialization of the arguments of parameter-based 
            class constructors, which are created using factory.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Factories.ConstructorArgument.#ctor(System.String,System.Object)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.Factories.ConstructorArgument" /> 
            with the specified name and value. 
            </summary>
            <param name="name">Argument name.</param>
            <param name="value">Argument value.</param>
        </member>
        <member name="P:Terrasoft.Core.Factories.ConstructorArgument.Name">
            <summary>
            Argument name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Factories.ConstructorArgument.Value">
            <summary>
            Argument value.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Factories.ClassFactory">
            <summary>
            Factory of the replacement classes.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Factories.ClassFactory.Get``1(Terrasoft.Core.Factories.ConstructorArgument[])">
            <summary>
            Returns an instance of replacing type for specified replacement type.
            </summary>
            <typeparam name="T">Replacement type.</typeparam>
            <param name="constructorArguments">Array of the constructor arguments of the replacement type.</param>
            <returns>Instance of type that replaces the <typeparamref name="T" /> type.</returns>
        </member>
        <member name="M:Terrasoft.Core.Factories.ClassFactory.TryGet``1(System.String,``0@,Terrasoft.Core.Factories.ConstructorArgument[])">
            <summary>
            Tries to get an instance of the specified service by using the first binding
            with the specified name.
            </summary>
            <typeparam name="T">The service to resolve</typeparam>
            <param name="name">Full name of class.</param>
            <param name="instance">Instance of resolve service.</param>
            <param name="constructorArguments">Array of the constructor arguments of the replacement type.</param>
            <returns><c>true</c> if find instance of the class.</returns>
        </member>
        <member name="M:Terrasoft.Core.Factories.ClassFactory.ForceGet``1(System.String,Terrasoft.Core.Factories.ConstructorArgument[])">
            <summary>
            Returns an instance of the class by name. 
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="fullClassName">Full name of class.</param>
            <param name="constructorArguments">Array of the constructor arguments.</param>
            <returns>Instance of the class, or null.</returns>
        </member>
        <member name="M:Terrasoft.Core.Factories.ClassFactory.Bind``1(System.Type)">
            <summary>
            Declares a binding for the specified service by type.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="classType">Type of class.</param>
        </member>
        <member name="M:Terrasoft.Core.Factories.ClassFactory.Bind``1(System.Func{``0})">
            <summary>
            Declares a binding for the specified service.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="resolveMethod">Method that returns the specified service.</param>
        </member>
        <member name="M:Terrasoft.Core.Factories.ClassFactory.RebindWithFactoryMethod``1(System.Func{``0})">
            <summary>
            Rewrites a binding for the specified service.
            </summary>
            <typeparam name="T">The service to resolve.</typeparam>
            <param name="resolveMethod">Method that returns the specified service.</param>
        </member>
        <member name="T:Terrasoft.Core.Factories.ClassFactory.InitializeModule">
            <summary>
            Module for binding types to the types that replace them.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Factories.ClassFactory.InitializeModule.Load">
            <summary>
            Initialization of the module for binding types of the configuration assembly
            to the types that replace them.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Factories.OverrideAttribute">
            <summary>
            Указывает, что класс замещает своего родителя в иерархии. 
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentFileProvider.GetSchemaStreamValues(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema metadata in binary representation.
            </summary>
            <param name="package">Package containing schema.</param>
            <param name="schema">Schema descriptor.</param>
            <returns>Dictionary of schema metadata in binary representation.</returns>
            <remarks>Metadata is obtained from file downloaded from repository.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentFileProvider.GetCoreResources(Terrasoft.Core.Packages.Package)">
            <summary>
            Returns the core resources from <see cref="T:Terrasoft.Core.Packages.PackageContentFileProvider"/>.
            </summary>
            <param name="package">Package.</param>
            <returns>A collection of the manager names and culture.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentFileProvider.GetCoreResource(Terrasoft.Core.Packages.Package,System.String,System.String)">
            <summary>
            Returns core resources by manager and culture.
            </summary>
            <param name="package">Instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.</param>
            <param name="managerName">Name of manager.</param>
            <param name="cultureName">Name of culture.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentFileProvider.GetPackageResources(Terrasoft.Core.Packages.Package)">
            <summary>
            Returns the package resources from <see cref="T:Terrasoft.Core.Packages.PackageContentFileProvider"/>.
            </summary>
            <param name="package">Package.</param>
            <returns>A collection of the schema names and culture.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentFileProvider.GetSchemaResource(Terrasoft.Core.Packages.Package,System.String,System.String,System.String)">
            <summary>
            Returns package resources by schema and culture.
            </summary>
            <param name="package">Instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.</param>
            <param name="schemaName">Name of schema.</param>
            <param name="cultureName">Name of culture.</param>
            <param name="managerName">Name of manager.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentFileProvider.GetSchemaCs(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema's Cs-content.
            </summary>
            <param name="package">An instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.
            Schema's package.</param>
            <param name="schema">An instance of <see cref="T:Terrasoft.Core.Packages.SchemaDescriptor"/> class.
            Schema whose content must be returned.</param>
            <returns>Stream of Cs-content</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentFileProvider.GetSchemaJs(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema's Js-content.
            </summary>
            <param name="package">An instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.
            Schema's package.</param>
            <param name="schema">An instance of <see cref="T:Terrasoft.Core.Packages.SchemaDescriptor"/> class.
            Schema whose content must be returned.</param>
            <returns>Stream of Js-content</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentFileProvider.GetSchemaLess(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema's Less-content.
            </summary>
            <param name="package">An instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.
            Schema's package.</param>
            <param name="schema">An instance of <see cref="T:Terrasoft.Core.Packages.SchemaDescriptor"/> class.
            Schema whose content must be returned.</param>
            <returns>Stream of Less-content</returns>
        </member>
        <member name="P:Terrasoft.Core.Packages.PackageSchemaDataUtilities.SerializeColumnName">
            <summary>
            Gets or sets a value indicating whether column name is serialized.
            </summary>
            <value>
            <c>true</c> if column name is serialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentRepositoryProvider.GetSchemaStreamValues(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema metadata in binary representation.
            </summary>
            <param name="package">Package containing schema.</param>
            <param name="schema">Schema descriptor.</param>
            <returns>Dictionary of schema metadata in binary representation.</returns>
            <remarks>Metadata is obtained from package archive.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentRepositoryProvider.GetCoreResources(Terrasoft.Core.Packages.Package)">
            <summary>
            Returns core resources.
            </summary>
            <param name="package">Instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.</param>
            <returns>Resources collection.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentRepositoryProvider.GetPackageResources(Terrasoft.Core.Packages.Package)">
            <summary>
            Returns package resources.
            </summary>
            <param name="package">Instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.</param>
            <returns>Resources collection.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentRepositoryProvider.GetCoreResource(Terrasoft.Core.Packages.Package,System.String,System.String)">
            <summary>
            Returns core resources by manager and culture.
            </summary>
            <param name="package">Instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.</param>
            <param name="managerName">Name of manager.</param>
            <param name="cultureName">Name of culture.</param>
            <returns>Resources collection.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentRepositoryProvider.GetSchemaResource(Terrasoft.Core.Packages.Package,System.String,System.String,System.String)">
            <summary>
            Returns package resources by schema and culture.
            </summary>
            <param name="package">Instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.</param>
            <param name="schemaName">Name of schema.</param>
            <param name="cultureName">Name of culture.</param>
            <param name="managerName">Name of manager.</param>
            <returns>Resources collection.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentRepositoryProvider.GetSchemaCs(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema's Cs-content.
            </summary>
            <param name="package">An instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.
            Schema's package.</param>
            <param name="schema">An instance of <see cref="T:Terrasoft.Core.Packages.SchemaDescriptor"/> class.
            Schema whose content must be returned.</param>
            <returns>Stream of Cs-content</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentRepositoryProvider.GetSchemaJs(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema's Js-content.
            </summary>
            <param name="package">An instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.
            Schema's package.</param>
            <param name="schema">An instance of <see cref="T:Terrasoft.Core.Packages.SchemaDescriptor"/> class.
            Schema whose content must be returned.</param>
            <returns>Stream of Js-content</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.PackageContentRepositoryProvider.GetSchemaLess(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.SchemaDescriptor)">
            <summary>
            Returns schema's Less-content.
            </summary>
            <param name="package">An instance of <see cref="T:Terrasoft.Core.Packages.Package"/> class.
            Schema's package.</param>
            <param name="schema">An instance of <see cref="T:Terrasoft.Core.Packages.SchemaDescriptor"/> class.
            Schema whose content must be returned.</param>
            <returns>Stream of Less-content</returns>
        </member>
        <member name="T:Terrasoft.Core.Packages.SourceControlLockErrorEventArgs">
            <summary>
            Аргументы ошибки блокирования элемента в системе контроля версий.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.SourceControlLockErrorEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр класса
            <see cref="T:Terrasoft.Core.Packages.SourceControlLockErrorEventArgs"/>, используя заданные параметры.
            </summary>
            <param name="itemName">Имя элемента, вызвавшего ошибку.</param>
            <param name="errorMessage">Текст ошибки.</param>
            <param name="lockedByName">Имя пользователя, заблокировавшего элемент. Необязательный параметр.</param>
        </member>
        <member name="P:Terrasoft.Core.Packages.SourceControlLockErrorEventArgs.ItemName">
            <summary>
            Имя элемента, вызвавшего ошибку.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SourceControlLockErrorEventArgs.LockedByName">
            <summary>
            Имя пользователя, заблокировавшего элемент.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Packages.SourceControlLockErrorEventArgs.ErrorMessage">
            <summary>
            Текст ошибки.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceModuleStorageTransaction.Add(System.String,System.Byte[])">
            <summary>Добавляет блок данных в хранилище с указанным ключом</summary>
            <param name="key">Ключ</param>
            <param name="data">Данные</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceModuleStorageTransaction.Add(System.String,System.String)">
            <summary>Добавляет указанный файл в хранилище с указанным ключом</summary>
            <param name="key">Ключ</param>
            <param name="filePath">Путь к файлу для добавления</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceModuleStorageTransaction.Get">
            <summary>Поиск модулей для текущей конфигурации.</summary>
            <returns>Словарь, содержащий в качестве ключа имя модуля, в качестве значения - массив байт модуля.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.CreateQueryCaseIsPackagesElementsChanged(Terrasoft.Core.UserConnection)">
            <summary>
            Формирует экземпляр выражения <c>CASE</c> для проверки наличия изменения в содержимом пакета.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Экземпляр выражения <c>CASE</c>.</returns>
            <remarks>Возращаемое значение используется как параметр для метода 
            <see cref="M:Terrasoft.Core.DB.Select.Column(Terrasoft.Core.DB.QueryCase)"/> класса <see cref="T:Terrasoft.Core.DB.Select"/>. 
            Проверка осуществляется по колонке <c>IsChanged</c> для следующих схем:
            <list type="bullet">
            <item><term>Схема</term><description><c>SysSchema</c></description></item>
            <item><term>SQL-сценарий</term><description><c>SysPackageSqlScript</c></description></item>
            <item><term>Сборки в пакете</term><description><c>SysPackageReferenceAssembly</c></description></item>
            <item><term>Данные схемы пакета</term><description><c>SysPackageSchemaData</c></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.SetPackageInstallType(Terrasoft.Core.UserConnection,System.Guid,System.Collections.Generic.IEnumerable{Terrasoft.Core.Packages.Package},Terrasoft.Common.SysPackageInstallType)">
            <summary>
            Устанавливает указанный признак установки пакета для указанных пакетов в указанной конфигурации.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="workspaceId">Идентификатор конфигурации.</param>
            <param name="packages">Список пакетов.</param>
            <param name="packageInstallType">Тип установки пакета.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.FindSchemaIdByUId(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Tries to find and return schema Id by schema UId.
            </summary>
            <param name="schemaUId">Schema UId as search parameter</param>
            <param name="userConnection">User connection.</param>
            <returns>Returns schema Id if it was found. Otherwise returns <c>Guid.Empty</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.FindSchemaIdByUId(System.Guid,Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Tries to find and return schema Id by schema UId from specified workspace.
            </summary>
            <param name="schemaUId">Schema UId as search parameter.</param>
            <param name="userConnection">User connection.</param>
            <param name="workspaceId">Specified workspace identifier.</param>
            <returns>Returns schema Id if it was found. Otherwise returns <c>Guid.Empty</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.GetSchemaIdByUId(System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Returns schema Id by schema UId.
            </summary>
            <param name="schemaUId">Schema UId as search parameter.</param>
            <param name="userConnection">User connection.</param>
            <returns>Returns schema Id if it was found. Otherwise throws
            <see cref="T:Terrasoft.Common.ItemNotFoundException"/>.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Throws exception if schema Id was not found.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.GetSchemaIdByUId(System.Guid,Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Returns schema Id by schema UId from specified workspace.
            </summary>
            <param name="schemaUId">Schema UId as search parameter.</param>
            <param name="userConnection">User connection.</param>
            <param name="workspaceId">Specified workspace identifier.</param>
            <returns>Returns schema Id if it was found. Otherwise throws
            <see cref="T:Terrasoft.Common.ItemNotFoundException"/>.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Throws exception if schema Id was not found.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.ForceGetCustomPackageUId(Terrasoft.Core.UserConnection)">
            <summary>
            Returns custom package UId from system setting. If system setting or package doesn't exist,
            they will be created.
            </summary>
            <param name="userConnection">User connection.</param>
            <returns>Custom package UId.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.GetPackageHierarchyIds(Terrasoft.Core.UserConnection,System.Guid,System.Guid)">
            <summary>
            Возвращает перечислитель уникальных идентификаторов иерархии пакетов, начиная с базового пакета.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="basePackageUId">UId пакета, начиная с которого раскручивается иерархия.</param>
            <param name="workspaceId">Уникальный идентификатор рабочего пространства.</param>
            <returns>Перечислитель уникальных идентификаторов иерархии пакетов.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.GetPackageHierarchyIdsById(Terrasoft.Core.UserConnection,System.Guid,System.Guid)">
            <summary>
            Возвращает перечислитель уникальных идентификаторов иерархии пакетов, начиная с базового пакета.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="basePackageId">Уникальный идентификатор пакета, начиная с которого раскручивается иерархия.
            </param>
            <param name="workspaceId">Уникальный идентификатор рабочего пространства.</param>
            <returns>Перечислитель уникальных идентификаторов иерархии пакетов.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.ComposeAndSaveSvnStorage(Terrasoft.Core.Packages.PackageSvnStorage,Terrasoft.Core.Packages.PackageDBStorage,Terrasoft.Core.Packages.PackageStorageChangeCollection)">
            <summary>
            Cинхронизирует состояния элементов в хранилище системы контроля версий с состояниями элементов в хранилище
            базы данных и применяет изменения.
            </summary>
            <param name="svnStorage">Хранилище системы контроля версий.</param>
            <param name="dbStorage">Хранилище базы данных.</param>
            <param name="changes">Коллекция изменений элементов конфигурации.</param>
            <returns>Коллекция измененых элементов конфигурации.</returns>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.ComposeSourceControlPackages(Terrasoft.Core.Packages.PackageSvnStorage,Terrasoft.Core.Packages.PackageDBStorage,Terrasoft.Core.Packages.PackageStorageChangeCollection)">
            <summary>
            Cинхронизирует состояния элементов в хранилище системы контроля версий с состояниями элементов в хранилище
            базы данных.
            </summary>
            <param name="svnStorage">Хранилище системы контроля версий.</param>
            <param name="dbStorage">Хранилище базы данных.</param>
            <param name="changes">Коллекция изменений элементов конфигурации.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.UpdateSchemasChecksum(Terrasoft.Core.UserConnection,Terrasoft.Core.Packages.PackageStorageChangeCollection,Terrasoft.Core.Packages.PackageStorage)">
            <summary>
            Updates package schema's checksum.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="packageStorageChanges">Collection of package storage changes.</param>
            <param name="storage">Collection of package storage changes.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.CleanUpWorkspace(Terrasoft.Core.UserConnection)">
            <summary>
            Restores configuration from the repository.
            </summary>
            <param name="userConnection">User connection/</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.GetIsNeedToInitializeSysSchemaContent(Terrasoft.Core.UserConnection)">
            <summary>
            Checks necessity to initialize SysSchemaContent table with data.
            </summary>
            <param name="userConnection">User connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Packages.WorkspaceUtilities.InitializeSysSchemaContent(Terrasoft.Core.Packages.Package,Terrasoft.Core.Packages.PackageContentFileProvider,Terrasoft.Core.DesignMode.ISchemaContentSaver)">
            <summary>
            Initializes SysSchemaContent table with content from source files.
            </summary>
            <param name="package">Current package.</param>
            <param name="fileProvider">File provider.</param>
            <param name="schemaContentSaver">Schema content saver.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.IProcessSchemaSignalEvent">
            <summary>
            Provides properties that represent meta information of start signal.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.IProcessSchemaSignalEvent"/>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessSchemaSignalEvent.Caption">
            <summary>
            Gets or sets caption of the current element.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessSchemaSignalEvent.WaitingRandomSignal">
            <summary>
            Gets or sets flag that indicates whether the current signal is waiting random event.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessSchemaSignalEvent.WaitingEntitySignal">
            <summary>
            Gets or sets flag that indicates whether the current signal is listening event of entity modifications.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessSchemaSignalEvent.EntitySignal">
            <summary>
            Gets or sets types of entity modifications.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessSchemaSignalEvent.Entity">
            <summary>
            Gets or sets Id of the entity.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessSchemaSignalEvent.Signal">
            <summary>
            Gets or sets string, which value is listened by event.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessSchemaSignalEvent.EntitySchemaUId">
            <summary>
            Gets or sets UId of the entity schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessSchemaSignalEvent.HasEntityColumnChange">
            <summary>
            Gets or sets flag that indicates whether the entity has modifications of column values.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessSchemaSignalEvent.EntityChangedColumns">
            <summary>
            Gets or sets list of column names which values have been modified.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessSchemaSignalEvent.HasEntityFilters">
            <summary>
            Gets or sets flag that indicates whether the current signal has entity filters.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.IProcessSchemaSignalEvent.EntityFilters">
            <summary>
            Gets or sets serialized entity filters.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaActivity.SynchronizeParameters">
            <summary>
            Synchronizes element parameters.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaActivity.ForceGetParameters">
            <summary>
            Forcibly obtains process parameters.
            </summary>
            <returns>
            Collection of process parameters.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaActivity.Parameters">
            <summary>
            The process schema parameter collection.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaScriptTask.ForceGetParameters">
            <summary>
            Forcibly obtains process parameters.
            </summary>
            <returns>
            Collection of process parameters.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaFormulaTask.ForceGetParameters">
            <summary>
            Forcibly obtains process parameters.
            </summary>
            <returns>
            Collection of process parameters.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessStartSignalEvent.ApplyPropertiesDataValues(Terrasoft.Common.DataReader)">
            <summary>
            Applies meta data values.
            </summary>
            <param name="reader">Instance of the <see cref="T:Terrasoft.Common.DataReader"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessStartSignalEvent.WritePropertiesDataToOwner(Terrasoft.Common.DataWriter)">
            <summary>
            Writes the properties data to owner process data writer.
            </summary>
            <param name="writer">The data writer.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.EntityColumnMappingItem.GetSchemaColumnByMetaPath(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Gets the schema column by meta path.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="processSchema">The process schema.</param>
            <returns>The schema column.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.EntityColumnMappingItem.GetSchemaColumnByMetaPath(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Gets the schema column by meta path regarding the given package.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="packageUId">The schema's package identifier.</param>
            <returns>The schema column.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.EntityColumnMappingCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.EntityColumnMappingCollection"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.EntityColumnMappingCollection.#ctor(System.Collections.Generic.Dictionary{System.String,Terrasoft.Core.Process.ProcessSchemaParameterValue},System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.EntityColumnMappingCollection"/> class.
            </summary>
            <param name="columnsInfo">The column values information. Key - column metapath, value - process schema
            parameter value for the column.</param>
            <param name="entitySchemaUId">The entity schema unique identifier.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.EntityColumnMappingCollection.op_Explicit(Terrasoft.Core.Process.LocalizableParameterValuesList)~Terrasoft.Core.Process.EntityColumnMappingCollection">
            <summary>
            Performs an explicit conversion from <see cref="T:Terrasoft.Core.Process.LocalizableParameterValuesList"/> to
            <see cref="T:Terrasoft.Core.Process.EntityColumnMappingCollection"/>.
            </summary>
            <param name="localizableList">The localizable list.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.EntityColumnMappingCollection.DeserializeValue(Terrasoft.Core.Process.ProcessSchemaParameterValue)">
            <summary>
            Deserializes the value.
            </summary>
            <param name="sourceValue">Parameter source value.</param>
            <returns>Deserialized value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.EntityColumnMappingCollection.DeserializeValue(System.String)">
            <summary>
            Deserializes the value.
            </summary>
            <param name="value">Serialized value.</param>
            <returns>Deserialized value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.EntityColumnMappingCollection.SerializeValue">
            <summary>
            Serializes the value to json string.
            </summary>
            <returns>Serialized value.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.EntityColumnMappingCollection.ToLocalizableList(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Converts current collection to localizable list.
            </summary>
            <param name="dataValueTypeManager">The data value type manager.<remarks>Used to define which parameter
            values should be localized.</remarks></param>
            <returns>
            Localizable list that represents current mapping collection.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.EntityColumnMappingValues.#ctor(Terrasoft.Core.UserConnection,System.Guid,Terrasoft.Core.Process.EntityColumnMappingCollection,System.String,System.Func{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.EntityColumnMappingValues"/> class.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="packageUId">Package identifier of the entity.</param>
            <param name="mappingCollection">Entity mapping collection.</param>
            <param name="parameterName">The name of the process parameter.</param>
            <param name="getColumnValueFunc">The function, which returns the value for the column macro.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessIntermediateCatchSignalEvent.WritePropertiesDataToOwner(Terrasoft.Common.DataWriter)">
            <summary>
            Writes the properties data to owner process data writer.
            </summary>
            <param name="writer">The data writer.</param>
        </member>
        <member name="T:Terrasoft.Core.SecurityUtilities">
            <summary>
            Utility class. Provides methods for secure work with application.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SecurityUtilities.RemoveLocalPath(System.String)">
            <summary>
            Removes local path to file or directory if FileDesign mode is disabled.
            </summary>
            <param name="stringWithLocalPath">Full path to current to file or directory in filesystem.</param>
            <returns>Relative path to object if FileDesign mode is disabled, 
            or full path if FileDesign mode is enabled.</returns>
        </member>
        <member name="F:Terrasoft.Core.SourceCodeSchema._body">
            <summary>
            CS content of current ClientUnitSchema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SourceCodeSchema.InnerBody">
            <summary>
            Cached CS content from metadata.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SourceCodeSchema.BaseSchemaUId">
            <summary>
            Unique identifier of base schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SourceCodeSchema.SchemaContentReader">
            <summary>
            Returns new instance of <see cref="T:Terrasoft.Core.DesignMode.ISchemaContentReader"/> implementation.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysProcessElementDataSchema">
            <summary>
            Схема объекта "Данные элемента процесса".
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysProcessElementData">
            <summary>
            Process item data.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Configuration.SysProcessElementData._sysProcess">
            <summary>
            Process.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Configuration.SysProcessElementData._owner">
            <summary>
            Owner.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessElementData.SchemaElementUId">
            <summary>
            Diagram item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysProcessElementData.SchemaUId">
            <summary>
            Schema.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Configuration.SysProcessDataSchema">
            <summary>
            Схема объекта "Данные процесса".
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Configuration.SysProcessData._sysSchema">
            <summary>
            Схема процесса.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Configuration.SysProcessData._parent">
            <summary>
            Родитель.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Configuration.SysProcessData._owner">
            <summary>
            Ответственный.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.LDAP.LdapUtilities.WriteToLog(System.String)">
            <summary>
            Записывает в лог информационное сообщение.
            </summary>
            <param name="message">Текст сообщения.</param>
        </member>
        <member name="M:Terrasoft.Core.LDAP.LdapUtilities.LogInfo(System.String,System.Object[])">
            <summary>
            Записывает в лог информационное сообщение.
            </summary>
            <param name="format">Строка составного формата с информационным сообщением.</param>
            <param name="args">Параметры формата сообщения.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            Если значение объекта <paramref name="format"/> или <paramref name="args"/> равно <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.LDAP.LdapUtilities.LogError(System.String,System.Object[])">
            <summary>
            Записывает в лог сообщение об ошибке.
            </summary>
            <param name="format">Строка составного формата с сообщением об ошибке.</param>
            <param name="args">Параметры формата сообщения.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            Если значение объекта <paramref name="format"/> или <paramref name="args"/> равно <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.LDAP.LdapUtilities.LogDebug(System.String,System.Object[])">
            <summary>
            Записывает в лог отладочное сообщение.
            </summary>
            <param name="format">Строка составного формата с отладочным сообщением.</param>
            <param name="args">Параметры формата сообщения.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            Если значение объекта <paramref name="format"/> или <paramref name="args"/> равно <c>null</c>.
            </exception>
        </member>
        <member name="P:Terrasoft.Core.LDAP.LdapUtilities.IsPhoneNeedUpdate">
            <summary>
            Признак необходимости изменения номера телефона пользователя при синхронизации с LDAP.
            </summary>
            <value>
            <c>true</c>, если номер телефона нужно изменять; иначе - <c>false</c>.
            </value>
        </member>
        <member name="P:Terrasoft.Core.LDAP.LdapUtilities.IsEmailNeedUpdate">
            <summary>
            Признак необходимости изменения email пользователя при синхронизации с LDAP.
            </summary>
            <value>
            <c>true</c>, если email нужно изменять; иначе - <c>false</c>.
            </value>
        </member>
        <member name="P:Terrasoft.Core.LDAP.LdapUtilities.IsJobTitleNeedUpdate">
            <summary>
            Признак необходимости изменения должности пользователя при синхронизации с LDAP.
            </summary>
            <value>
            <c>true</c>, если должность нужно изменять; иначе - <c>false</c>.
            </value>
        </member>
        <member name="M:Terrasoft.Core.DB.DBSecurityEngine.GetRecordDefRightsInsert(System.Guid,System.Guid,System.Guid,System.Guid,System.Guid,System.Boolean)">
            <summary>
            Returns <see cref="T:Terrasoft.Core.DB.InsertSelect"/> for record default rights.
            </summary>
            <param name="userId">User identifier.</param>
            <param name="contactId">Contact identifier.</param>
            <param name="schemaUId">Schema unique identifier value.</param>
            <param name="recordId">Record identifier.</param>
            <param name="ownerId">Owner identifier.</param>
            <param name="isNewRecord">Signs that record is new.</param>
            <returns><see cref="T:Terrasoft.Core.DB.InsertSelect"/> for record default rights.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.DBSecurityEngine.GetRecordDefRightsInsert(System.Guid,System.Guid,System.Guid,System.Guid,System.Boolean)">
            <summary>
            Returns <see cref="T:Terrasoft.Core.DB.InsertSelect"/> for record default rights.
            </summary>
            <param name="userId">User identifier.</param>
            <param name="schemaUId">Schema unique identifier value.</param>
            <param name="recordId">Record identifier.</param>
            <param name="ownerId">Owner identifier.</param>
            <param name="isNewRecord">Signs that record is new.</param>
            <returns><see cref="T:Terrasoft.Core.DB.InsertSelect"/> for record default rights.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.DBSecurityEngine.AddDefRights(System.Guid,System.Guid,System.Guid,Terrasoft.Core.Entities.EntitySchema)">
            <summary>
            Adds default rights.
            </summary>
            <param name="primaryColumnValue">Record identifier.</param>
            <param name="userId">User identifier.</param>
            <param name="contactId">Contact identifier.</param>
            <param name="schema"><see cref="T:Terrasoft.Core.Entities.EntitySchema"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DBSecurityEngine.AddDefRights(System.Guid,Terrasoft.Core.Entities.EntitySchema)">
            <summary>
            Adds default rights.
            </summary>
            <param name="primaryColumnValue">Record identifier.</param>
            <param name="schema"><see cref="T:Terrasoft.Core.Entities.EntitySchema"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DBSecurityEngine.GetIsEntitySchemaRecordDeletingAllowed(Terrasoft.Core.Entities.EntitySchema,System.Guid)">
            <summary>
            Определяет наличие прав у текущего пользователя для удаления записи из указанного объекта.
            </summary>
            <param name="schema">Экземпляр схемы <see cref="T:Terrasoft.Core.Entities.EntitySchema"/>.</param>
            <param name="recordId">Идентификатор записи.</param>
            <returns>Возвращает <c>true</c>, если у пользователя есть права на удаление записи.
            Иначе <c>false</c>.</returns>
        </member>
        <member name="F:Terrasoft.Core.UserConnection._dcmSchemaManager">
            <summary>
            Gets DCM schema manager.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.UserConnection._processUserTaskSchemaManager">
            <summary>
            Gets Process user task schema manager.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.UserConnection.SetCurrentUserCulture">
            <summary>
            Sets date/time format using user settings.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.UserConnection.RequestData">
            <summary>
            Request-level data storage.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.UserConnection.SessionData">
            <summary>
            Session-level data storage.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.UserConnection.ApplicationData">
            <summary>
            Application-level data storage.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Store.CacheStoreProvider">
            <summary>
            Провайдер кэша.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Store.BaseStoreProvider`2">
            <summary>
            Базовый класс провайдера хранилища.
            </summary>
            <typeparam name="TStore">Класс, определяющий тип хранилища.</typeparam>
            <typeparam name="TStoreLevel">Структура, значения которой определяют уровни доступа к данным хранилища.
            </typeparam>
        </member>
        <member name="P:Terrasoft.Core.Store.BaseStoreProvider`2.Item(`1)">
            <summary>
            Индексатор для доступа к хранилищу типа <typeparamref name="TStore"/> с заданным уровнем доступа к данным 
            хранилища.
            </summary>
            <param name="level">Уровень доступа к данным хранилища.</param>
            <returns>Экземпляр хранилища типа <typeparamref name="TStore"/> с уровнем доступа к данным 
            <paramref name="level"/>.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если хранилище не сконфигурировано на уровене 
            <paramref name="level"/>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Store.CacheStoreProvider.#ctor">
            <summary>
            Иницализирует экземпляр <see cref="T:Terrasoft.Core.Store.CacheStoreProvider"/>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Store.CacheStoreProvider.Empty">
            <summary>
            Возвращает пустой кэш.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Store.CacheStoreUtilities">
            <summary>
            Предоставляет служебные методы для работы с хранилищем данных и кэшем.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Store.CacheStoreUtilities.WithLocalCaching(Terrasoft.Core.Store.ICacheStore,System.String)">
            <summary>Применяет локальное хранение данных при работе с кэшем.</summary>
            <param name="source">Кэш.</param>
            <param name="groupName">Имя группы элементов для контроля актуальности. Все элементы, которые 
            помещаются в данную группу будут терять актуальность при вызове метода <see cref="M:Terrasoft.Core.Store.CacheStoreUtilities.ExpireGroup(Terrasoft.Core.Store.ICacheStore,System.String)"/>.</param>
            <returns>Кэш-обертка, осуществляющая локальное хранение данных и проверку признака актуальности данных в 
            первоначальном кэше. Признак актуальности проверяется при каждом обращении к объекту.</returns>
            <remarks>Рекомендуется использовать только в случае работы с кэшем с относительно "дорогим" доступом 
            (например, кэш с доступом по сети) и при значительных объемах кэшируемых элементов.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Store.CacheStoreUtilities.WithLocalCaching(Terrasoft.Core.Store.ICacheStore)">
            <summary>Применяет локальное хранение данных при работе с кэшем. Каждый помещаемый в кеш элемент будет 
            иметь свой собственный признак актуальности.</summary>
            <param name="source">Кэш.</param>
            <returns>Кеш-обертка, осуществляющая локальное хранение данных и проверку признака актуальности данных в 
            первоначальном кеше. Признак актуальности проверяется при каждом обращении к объекту.</returns>
            <remarks>Рекомендуется использовать только в случае работы с кэшем с относительно "дорогим" доступом 
            (например, кэш с доступом по сети) и при значительных объемах кэшируемых элементов.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Store.CacheStoreUtilities.WithLocalCachingOnly(Terrasoft.Core.Store.ICacheStore,System.String,System.Boolean)">
            <summary>Осуществляет локальное хранение данных с мониторингом актуальности данных с использованием 
            указанного (глобального) кэша.</summary>
            <param name="source">Кэш.</param>
            <param name="groupName">Имя группы элементов для контроля актуальности. Все элементы, которые 
            помещаются в данную группу, будут терять актуальность при вызове метода <see cref="M:Terrasoft.Core.Store.CacheStoreUtilities.ExpireGroup(Terrasoft.Core.Store.ICacheStore,System.String)"/>.</param>
            <param name="ignoreUserIdentity">Признак участия имени текущего пользователя в формировании ключа
            доступа к кэшу.</param>
            <returns>Кэш-обертка, осуществляющая локальное хранение данных и проверку признака актуальности данных в 
            первоначальном кэше. Признак актуальности проверяется при каждом обращении к объекту.</returns>
            <remarks>Сами данные в кэш не передаются - в кэше проверяется только признак актуальности данных. 
            Элементы в локальном кэше теряют актуальность только при вызове метода <see cref="M:Terrasoft.Core.Store.CacheStoreUtilities.ExpireGroup(Terrasoft.Core.Store.ICacheStore,System.String)"/>, но не 
            при записи нового объекта в кэш.</remarks>
            <exception cref="T:System.ArgumentException">Если в качестве параметра <paramref name="groupName"/> передана пустая 
            строка или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Store.CacheStoreUtilities.ExpireGroup(Terrasoft.Core.Store.ICacheStore,System.String)">
            <summary>Устанавливает признак устаревания для заданной группы элементов кэша.</summary>
            <param name="source">Кэш.</param>
            <param name="groupName">Имя группы элементов.</param>
        </member>
        <member name="M:Terrasoft.Core.Store.CacheStoreUtilities.SetOrRemoveValue(Terrasoft.Core.Store.ICacheStore,System.String,System.Object)">
            <summary>Производит попытку записи значения <paramref name="value"/> в кэш по ключу <paramref name="key"/>.
            В случае, если <paramref name="value"/> == <c>null</c>, удаляет ключ из кэша.</summary>
            <param name="source">Кэш.</param>
            <param name="key">Ключ, по которому значение <paramref name="value"/> записывается в кэш.</param>
            <param name="value">Значение, которое записывается в кэш по ключу <paramref name="key"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Store.CacheStoreUtilities.GetValue``1(Terrasoft.Core.Store.IBaseStore,System.String)">
            <summary>Получает из хранилища данных или кэша значение по ключу <paramref name="key"/> и приводит 
            полученное значение к заданному типу. Если значение по ключу не найдено, метод возвращает <c>null</c>.
            </summary>
            <typeparam name="T">Тип, к которому приводится значение, получаемое из хранилища/кэша.</typeparam>
            <param name="source">Хранилище данных или кэш.</param>
            <param name="key">Ключ значения.</param>
            <returns>Значение по ключу <paramref name="key"/>, приведеное к типу <typeparamref name="T"/> либо 
            <c>null</c>, если значение не найдено.</returns>
        </member>
        <member name="M:Terrasoft.Core.Store.CacheStoreUtilities.GetValue``1(Terrasoft.Core.Store.IBaseStore,System.String,``0)">
            <summary>Получает из хранилища данных или кэша значение по ключу <paramref name="key"/> и приводит 
            полученное значение к заданному типу. Если значение по ключу не найдено, метод возвращает 
            заданное значение по умолчанию.</summary>
            <typeparam name="T">Тип, к которому приводится значение, получаемое из хранилища/кэша.</typeparam>
            <param name="source">Хранилище данных или кэш.</param>
            <param name="key">Ключ значения.</param>
            <param name="defaultValue">Значение по умолчанию, которое будет возвращено методом, если по данному ключу
            значение в хранилище/кэше не найдено.</param>
            <returns>Значение по ключу <paramref name="key"/>, приведенное к типу <typeparamref name="T"/> или 
            <paramref name="defaultValue"/>, если значение не найдено.</returns>
        </member>
        <member name="M:Terrasoft.Core.Store.CacheStoreUtilities.Pop``1(Terrasoft.Core.Store.IDataStore,System.String)">
            <summary>Получает из хранилища данных значение по ключу <paramref name="key"/>, приводит 
            полученное значение к заданному типу и удаляет данный ключ из хранилища.</summary>
            <typeparam name="T">Тип, к которому приводится значение, получаемое из хранилища данных.</typeparam>
            <param name="source">Хранилище данных.</param>
            <param name="key">Ключ значения.</param>
            <returns>Значение по ключу <paramref name="key"/>, приведенное к типу <typeparamref name="T"/> или 
            <c>null</c>, если значение не найдено.</returns>
        </member>
        <member name="M:Terrasoft.Core.Store.CacheStoreUtilities.GetValues(Terrasoft.Core.Store.ICacheStore,System.String[])">
            <summary>Возвращает значения из кэша по заданному списку ключей.</summary>
            <param name="source">Кэш.</param>
            <param name="keys">Перечень ключей, для которых требуется получить значения.</param>
            <returns>Словарь, содержащий весь список ключей и соответствующие этим ключам значения. Если значение по
            определенному ключу не было найдено, то запись в словаре будет присутствовать, но ее значение будет 
            равно <c>null</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Store.CacheStoreUtilities.GetRootStore(Terrasoft.Core.Store.ICacheStore)">
            <summary>
            Возвращает корневой кэш.
            </summary>
            <param name="source">Кэш.</param>
            <returns>Корневой кэш.</returns>
            <remarks>Метод продвигается по цепочке прокси-объектов, начиная от <paramref name="source"/>, пока не 
            достигнет самого первого (корневого) кэша.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Store.CacheStoreUtilities.GetRootStore(Terrasoft.Core.Store.IDataStore)">
            <summary>
            Возвращает корневое хранилище данных.
            </summary>
            <param name="source">Хранилище данных.</param>
            <returns>Корневое хранилище данных.</returns>
            <remarks>Метод продвигается по цепочке прокси-объектов, начиная от <paramref name="source"/>, пока не 
            достигнет самого первого (корневого) хранилища данных.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Store.CacheStoreUtilities.AdjustRawGetValuesResult(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Проверяет переданный словарь со значениями на присутствие в нем значений с заданными ключами.
            </summary>
            <param name="keys">Список ключей, наличие которых проверяется в словаре 
            <paramref name="rawGetValuesResult"/>.</param>
            <param name="rawGetValuesResult">Словарь, в котором проверяется наличие значений с ключами 
            <paramref name="keys"/>.</param>
            <returns>Словарь со значениями для ключей <paramref name="keys"/>. Если в переданном словаре 
            <paramref name="rawGetValuesResult"/> изначально отсутствовало значение с каким-либо ключом из 
            <paramref name="keys"/>, то в возвращаемый словарь добавляется запись с этим ключом и значением 
            <c>null</c>. Если в качестве словаря <paramref name="rawGetValuesResult"/> передано значение <c>null</c>, 
            то будет возвращен словарь, в котором для каждого ключа из <paramref name="keys"/> добавлено значение 
            <c>null</c>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Store.IDataStore">
            <summary>Хранилище данных.</summary>
            <remarks>Данные, размещенные в хранилище, будут храниться в нем до явного удаления.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Store.IDataStore.Keys">
            <summary>
            Возвращает список всех ключей хранилища.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Store.ICacheStore">
            <summary>Кэш.</summary>
            <remarks>
            Данные, размещенные в кэше, могут быть удалены автоматически без всякого предупреждения.
            Поэтому логика приложения не должна быть жестко завязана на обязательное наличие в кэше ранее записанного 
            туда значения (если требуется такое поведение, нужно использовать <see cref="T:Terrasoft.Core.Store.IDataStore"> хранилище</see>).
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.Store.ICacheStore.GetValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Получение значений по списку ключей.</summary>
            <param name="keys">Множество ключей, для которых требуется получить значения из кэша.</param>
            <returns>Словарь, содержащий весь список ключей и соответствующие этим ключам значения. Если значение по
            определенному ключу не было найдено, то в словарь будет добавлена запись с этим ключом со значением 
            <c>null</c>.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.Store.ICacheStore.IsLocalCache">
            <summary>
            Признак, определяющий, что данные хранятся в локальной памяти.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Store.ConcurrentDictionaryAdapter.IsLocalCache">
            <summary>
            Признак, определяющий, что данные хранятся в локальной памяти.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Store.DataStoreKeyTransformerProxy">
            <summary>
            Прокси-класс, преобразующий ключи хранилища данных путем добавления к ключу префикса.
            </summary>
            <remarks>Данный класс предоставляет простой и эффективный механизм организации выделенного пространства ключей 
            в хранилище. Этот механизм может использоваться для разделения находящихся в хранилище данных различных 
            пользователей.</remarks>
        </member>
        <member name="T:Terrasoft.Core.Store.IDataStoreProxy">
            <summary>
            Интерфейс для прокси-классов хранилища данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Store.IDataStoreProxy.DataStore">
            <summary>
            Хранилище данных, с которым работает прокси-класс.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Store.DataStoreKeyTransformerProxy.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр прокси-класса <see cref="T:Terrasoft.Core.Store.DataStoreKeyTransformerProxy"/> с заданным префиксом, 
            который добавляется к ключам элементов хранилища.
            </summary>
            <param name="keyPrefix">Префикс, который добавляется к ключам.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="keyPrefix"/> 
            передана пустая строка или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Store.DataStoreKeyTransformerProxy.Remove(System.String)">
            <summary>
            Удалает элемент хранилища данных по заданому ключу.
            </summary>
            <param name="key">Ключ удаляемого элемента.</param>
            <remarks>Переданный ключ <paramref name="key"/> предварительно преобразуется следующим образом: к нему 
            добавляется префикс, определенный свойством <see cref="P:Terrasoft.Core.Store.DataStoreKeyTransformerProxy.KeyPrefix"/>. После этого из хранилища данных 
            удаляется элемент с полученным трансформированным ключом.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Store.DataStoreKeyTransformerProxy.Initialize(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Инициалзирует свойства прокси-класса переданными параметрами.
            </summary>
            <param name="parameters">Параметры для инициализации.</param>
        </member>
        <member name="P:Terrasoft.Core.Store.DataStoreKeyTransformerProxy.Item(System.String)">
            <summary>
            Возвращает или устанавливает элемент хранилища данных по заданному ключу.
            </summary>
            <param name="key">Ключ элемента.</param>
            <returns>Значение элемента для ключа <paramref name="key"/> или <c>null</c>, если элемент не найден. 
            </returns>
            <remarks>Переданный ключ <paramref name="key"/> предварительно преобразуется следующим образом: к нему 
            добавляется префикс, определенный свойством <see cref="P:Terrasoft.Core.Store.DataStoreKeyTransformerProxy.KeyPrefix"/>. После этого возвращается или 
            устанавливается элемент хранилища данных с полученным трансформированным ключом.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Store.DataStoreKeyTransformerProxy.DataStore">
            <summary>
            Хранилище данных, с которым работает прокси-класс.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Store.DataStoreKeyTransformerProxy.KeyPrefix">
            <summary>
            Префикс ключа элемента хранилища.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Store.DataStoreKeyTransformerProxy.Keys">
            <summary>
            Список нетрансформированных ключей хранилища.
            </summary>
            <remarks>Метод из всей коллекции ключей глобального хранилища определяет те, которые начинаются префиксом 
            <see cref="P:Terrasoft.Core.Store.DataStoreKeyTransformerProxy.KeyPrefix"/> и возвращает их в нетрансформированном виде (то есть без этого префикса).
            </remarks>
        </member>
        <member name="T:Terrasoft.Core.Store.DataStoreProvider">
            <summary>
            Провайдер хранилища данных.
            </summary>
            <remarks>Реализация провайдера хранилища данных совпадает с реализацией базового провайдера хранилища 
            <see cref="T:Terrasoft.Core.Store.BaseStoreProvider`2"/>.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Store.EmptyCacheStoreAdapter.IsLocalCache">
            <summary>
            Признак, определяющий, что данные хранятся в локальной памяти.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Store.KeyTransformerProxy">
            <summary>
            Базовый класс для прокси-классов, преобразующих ключи кэша.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Store.ICacheStoreProxy">
            <summary>
            Интерфейс для прокси-класов кэша.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Store.ICacheStoreProxy.CacheStore">
            <summary>
            Кэш, с которым работает прокси-класс.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Store.KeyTransformerProxy.GetValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Возвращает словарь значений из кэша для заданного списка ключей. 
            </summary>
            <param name="keys">Список ключей.</param>
            <returns>Словарь значений из кэша для ключей <paramref name="keys"/>.</returns>
            <remarks>Каждый ключ из списка предварительно преобразуется в соответствии с правилами трансформации 
            ключей прокси-класса, после чего в результирующий словарь значений добавляется значение, полученное из 
            кэша по трансформированному ключу. Ключ значения в результирующем словаре при этом остается неизменным.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.Store.KeyTransformerProxy.Remove(System.String)">
            <summary>
            Удаляет элемент из кэша по заданному ключу.
            </summary>
            <param name="key">Ключ удаляемого элемента.</param>
            <remarks>Переданный ключ <paramref name="key"/> предварительно преобразуется в соответствии с правилами 
            трансформации ключей прокси-класса, после чего из кэша удаляется элемент по трансформированному ключу.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.Store.KeyTransformerProxy.Initialize(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Инициализирует свойства прокси-класса переданными параметрами.
            </summary>
            <param name="parameters">Параметры для инициализации.</param>
        </member>
        <member name="P:Terrasoft.Core.Store.KeyTransformerProxy.IsLocalCache">
            <summary>
            Признак, определяющий, что данные хранятся в локальной памяти.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Store.KeyTransformerProxy.Item(System.String)">
            <summary>
            Возвращает или устанавливает элемент кэша по заданному ключу. 
            </summary>
            <param name="key">Ключ элемента.</param>
            <returns>Значение элемента для ключа <paramref name="key"/> или <c>null</c>, если элемент не найден.
            </returns>
            <remarks>Переданный ключ <paramref name="key"/> предварительно преобразуется в соответствии с правилами 
            трансформации ключей прокси-класса, после чего возвращается или устанавливается элемент кэша по 
            трансформированному ключу.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Store.KeyTransformerProxy.CacheStore">
            <summary>
            Кэш, с которым работет прокси-класс.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Store.LocalCachingProxyBase.IsLocalCache">
            <summary>
            Признак, определяющий, что данные хранятся в локальной памяти.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Store.MemoryCacheStore">
            <summary>
            Кеш.
            </summary>
            <remarks>
            Данные кешируются в локальной памяти.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.Store.MemoryCacheStore.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Store.MemoryCacheStore"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Store.MemoryCacheStore.#ctor(System.String,System.TimeSpan)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Store.MemoryCacheStore"/>.
            </summary>
            <param name="name">Имя кеша.</param>
            <param name="slidingExpiration">Время устаревания значения.</param>
        </member>
        <member name="M:Terrasoft.Core.Store.MemoryCacheStore.GetValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Получение значений по списку ключей.</summary>
            <param name="keys">Множество ключей, для которых требуется получить значения из кеша.</param>
            <returns>
            Словарь, содержащий весь список ключей и соответствующие этим ключам значения. Если значение по
            определенному ключу не было найдено, то в словарь будет добавлена запись с этим ключом со значением 
            <c>null</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Store.MemoryCacheStore.Remove(System.String)">
            <summary>Удаляет элемент с заданным ключом из кеша.</summary>
            <param name="key">Ключ элемента.</param>
        </member>
        <member name="M:Terrasoft.Core.Store.MemoryCacheStore.Clear">
            <summary>
            Removes all elements from cache.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Store.MemoryCacheStore.Initialize(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Инициализирует кеша заданными конфигурационными параметрами.</summary>
            <param name="parameters">Параметры для конфигурирования кеша.</param>
        </member>
        <member name="P:Terrasoft.Core.Store.MemoryCacheStore.Item(System.String)">
            <summary>
            Устанавливает или возвращает значение по ключу.
            </summary>
            <param name="key">Ключ элемента.</param>
            <returns>Значение элемента.</returns>
        </member>
        <member name="P:Terrasoft.Core.Store.MemoryCacheStore.IsLocalCache">
            <summary>
            Признак, определяющий, что элементы хранятся в локальной памяти.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Store.PrefixKeyTransformerProxy">
            <summary>
            Прокси-класс, преобразующий ключи кэша путем добавления к ключу префикса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Store.PrefixKeyTransformerProxy.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Store.PrefixKeyTransformerProxy"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Store.PrefixKeyTransformerProxy.#ctor(System.String,Terrasoft.Core.Store.ICacheStore)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Store.PrefixKeyTransformerProxy"/> с заданными кэшем и префиксом, 
            который добавляется к ключам.
            </summary>
            <param name="prefix">Префикс, который добавляется к ключам.</param>
            <param name="store">Кэш, с которым работает прокси-класс.</param>
        </member>
        <member name="M:Terrasoft.Core.Store.PrefixKeyTransformerProxy.Initialize(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Инициализирует свойства прокси-класса переданными параметрами.
            </summary>
            <param name="parameters">Параметры для инициализации.</param>
        </member>
        <member name="T:Terrasoft.Core.Store.DataLevel">
            <summary>Уровень размещения данных в хранилище.</summary>
        </member>
        <member name="F:Terrasoft.Core.Store.DataLevel.Request">
            <summary>Уровень запроса. Данные, размещенные на этом уровне, доступны только в течении обработки
            текущего запроса.</summary>
        </member>
        <member name="F:Terrasoft.Core.Store.DataLevel.Session">
            <summary>Уровень сессии. Данные, размещенные на этом уровне, доступны только в сессии текущего 
            пользователя.</summary>
        </member>
        <member name="F:Terrasoft.Core.Store.DataLevel.Application">
            <summary>Уровень приложения. Данные, размещенные на этом уровне, доступны для всего приложения.</summary>
        </member>
        <member name="T:Terrasoft.Core.Store.CacheLevel">
            <summary>Уровень размещения данных в кэше.</summary>
        </member>
        <member name="F:Terrasoft.Core.Store.CacheLevel.Session">
            <summary>Уровень сессии. Данные, размещенные на этом уровне, доступны только в сессии текущего 
            пользователя.</summary>
        </member>
        <member name="F:Terrasoft.Core.Store.CacheLevel.Workspace">
            <summary>Глобальный уровень приложения. Данные, размещенные на этом уровне, будут доступны всем узлам 
            веб-фермы. Данные разных рабочих пространств не пересекаются между собой.</summary>
        </member>
        <member name="F:Terrasoft.Core.Store.CacheLevel.Application">
            <summary>Глобальный уровень приложения. Данные, размещенные на этом уровне, будут доступны всем узлам 
            веб-фермы без учета рабочего пространства.</summary>.
            <remarks>Использовать этот уровень следует только в случае крайней необходимости и с четким 
            понимаем особенностей работы приложения в веб-ферме.</remarks> 
        </member>
        <member name="T:Terrasoft.Core.Store.ISessionStore">
            <summary>
            Интерфейс хранилища сессиионных данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Store.ISessionStore.Clear">
            <summary>
            Удаляет все элементы сессии из хранилища. 
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Store.CacheItem">
            <summary>
            Элемент кэша.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Store.CacheItem.Value">
            <summary>
            Значение элемента кэша.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Store.Store">
            <summary>
            Предоставляет доступ к хранилищам данных и кэшу различных уровней.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Store.Store.Data">
            <summary>
            Провайдер хранилища данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Store.Store.Cache">
            <summary>
            Провайдер кэша.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.SysSettingRuleOperation">
            <summary>Операция правила системной настройки.</summary>
        </member>
        <member name="F:Terrasoft.Core.SysSettingRuleOperation.Min">
            <summary>Минимальное значение.</summary>
        </member>
        <member name="F:Terrasoft.Core.SysSettingRuleOperation.Max">
            <summary>Максимальное значение.</summary>
        </member>
        <member name="F:Terrasoft.Core.SysSettingRuleOperation.Const">
            <summary>Константа.</summary>
        </member>
        <member name="T:Terrasoft.Core.SysSettingRuleType">
            <summary>
            System setting rule type.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.SysSettingRuleType.Int">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.SysSettingRuleType.String">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.SysSettingRuleType.Bool">
            <summary>
            Logical.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.SysSettingRuleType.Lookup">
            <summary>
            Lookup.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.SysSettingRule">
            <summary>
            Правило системной настройки.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SysSettingRule.#ctor(System.String,System.String,Terrasoft.Core.SysSettingRuleType,Terrasoft.Core.SysSettingRuleOperation)">
            <summary>
            Создает экземпляр класса <see cref="T:Terrasoft.Core.SysSettingRule"/> для правила с заданным ключом, значением, типом и
            операцией.
            </summary>
            <param name="key">Ключ системной настройки.</param>
            <param name="value">Значение правила системной настройки.</param>
            <param name="valueType">Тип правила системной настройки.</param>
            <param name="operation">Операция правила системной настройки.</param>
        </member>
        <member name="F:Terrasoft.Core.SysSettingRule._key">
            <summary>
            Код правила системной настройки.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.SysSettingRule._value">
            <summary>
            Значение правила системной настройки.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.SysSettingRule._valueType">
            <summary>
            Тип правила системной настройки.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.SysSettingRule._operation">
            <summary>
            Операция правила системной настройки.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.SysSettingRuleUtilities">
            <summary>Used by system settings rules.</summary>
        </member>
        <member name="M:Terrasoft.Core.SysSettingRuleUtilities.CheckSysSettingRules(Terrasoft.Core.SysSettingRule,System.Object)">
            <summary>
            Checks system settings value for compliance with rules.
            </summary>
            <param name="sysSettingRule">System settings rule.</param>
            <param name="sysSettingValue">System settings value.</param>
        </member>
        <member name="M:Terrasoft.Core.SysSettingRuleUtilities.TryCheckSysSettingRules(Terrasoft.Core.SysSettingRule,System.Object)">
            <summary>
            Checks system settings value for compliance with rules.
            </summary>
            <param name="sysSettingRule">System settings rule.</param>
            <param name="sysSettingValue">System settings value.</param>
            <returns>True if system settings value is equal. Otherwise returns false.</returns>
        </member>
        <member name="M:Terrasoft.Core.SysSettingRuleUtilities.GetValidSettingValue(System.Collections.Generic.IEnumerable{Terrasoft.Core.SysSettingRule},System.String,System.Object)">
            <summary>
            Gets system setting value which is compliant with the rules.
            </summary>
            <param name="rules">Rule list <see cref="T:Terrasoft.Core.SysSettingRule"/>.</param>
            <param name="code">System setting code.</param>
            <param name="value">System setting value.</param>
            <returns><c>value</c> if system setting value is valid. Otherwise returns
            <see cref="T:Terrasoft.Core.SysSettingRule.Value"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.SysSettingRuleUtilities.CheckIfTypeIsContainsInSysSettingRuleTypes(System.String)">
            <summary>
            Checks if type is contains in system setting rule types.
            </summary>
            <param name="source">Value type name.</param>
            <returns>True if type is contains. Otherwise returns false.</returns>
        </member>
        <member name="M:Terrasoft.Core.SystemUserConnection.SetEntitySchemaManager_Old(Terrasoft.Core.Entities.EntitySchemaManager)">
            <summary>Метод не использовать! Временное решение!</summary>
            <param name="entitySchemaManager">Менеджер схем</param>
        </member>
        <member name="M:Terrasoft.Core.TerrasoftPrincipal.Create(System.String,System.String)">
            <summary>
            Creates instance of <see cref="T:Terrasoft.Core.TerrasoftPrincipal"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="sessionId">The session identifier.</param>
            <returns>Instance of <see cref="T:Terrasoft.Core.TerrasoftPrincipal"/> class.</returns>
        </member>
        <member name="T:Terrasoft.Core.Translation.ActionResult">
            <summary>
            Provides methods and properties for result of execution resource saving action.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Translation.IActionResult">
            <summary>
            Предоставляет свойства результата выполнения действия применения ресурса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Translation.IActionResult.IsSuccess">
            <summary>
            Признак успешности действия.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Translation.IActionResult.Message">
            <summary>
            Сообщение о возможной ошибке.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Translation.ActionResult.CreateSuccessResult">
            <summary>
            Creates successful result of action.
            </summary>
            <returns>Successful result of action.</returns>
        </member>
        <member name="M:Terrasoft.Core.Translation.ActionResult.CreateFailureResult(System.String)">
            <summary>
            Creates a failed action result.
            </summary>
            <param name="message">Error message.</param>
            <returns>Failed action result.</returns>
        </member>
        <member name="P:Terrasoft.Core.Translation.ActionResult.IsSuccess">
            <summary>
            Flag which indicates a success of the action execution.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Translation.ActionResult.Message">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Translation.IResourceReader">
            <summary>
            Предоставляет методы для чтения локализируемых ресурсов.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Translation.IResourceReader.ReadLocalizableValues(System.DateTime,System.Action{Terrasoft.Core.Translation.ILocalizableItem})">
            <summary>
            Выбирает локализируемые ресурсы, у которых были обнаружены изменения, начиная с указанной даты.
            </summary>
            <param name="dateFrom">Дата.</param>
            <param name="readMethod">Метод обработки локализируемого ресурса.</param>
        </member>
        <member name="T:Terrasoft.Core.Translation.ResourceKind">
            <summary>
            Resource kind.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Translation.ResourceKind.Configuration">
            <summary>
            Configuration resource.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Translation.ResourceKind.Data">
            <summary>
            Data.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Translation.ResourceProvider">
            <summary>
            Предоставляет методы для работы с локализируемыми ресурсами.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Translation.IResourceProvider">
            <summary>
            Предоставляет методы для работы с локализируемыми ресурсами.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Translation.IResourceProvider.WriteLocalizableValue(Terrasoft.Core.Translation.ILocalizableItem)">
            <summary>
            Устанавливает значение локализируемого ресурса.
            </summary>
            <param name="item">Локализуемый ресурс.</param>
            <returns>Результат выполнения действия.</returns>
        </member>
        <member name="M:Terrasoft.Core.Translation.IResourceProvider.ReadLocalizableValues(System.DateTime,System.Action{Terrasoft.Core.Translation.ILocalizableItem})">
            <summary>
            Выбирает локализируемые ресурсы, у которых были обнаружены изменения, начиная с указанной даты.
            </summary>
            <param name="dateFrom">Дата.</param>
            <param name="readMethod">Метод обработки локализируемого ресурса.</param>
        </member>
        <member name="M:Terrasoft.Core.Translation.IResourceProvider.Actualize">
            <summary>
            Актуализирует состояние ресурсов.
            </summary>
            <remarks>Должен вызываться по окончанию всех операций <see cref="M:Terrasoft.Core.Translation.IResourceProvider.WriteLocalizableValue(Terrasoft.Core.Translation.ILocalizableItem)"/>.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Translation.ResourceProvider.#ctor(Terrasoft.Core.Translation.IResourceReader,Terrasoft.Core.Translation.IResourceWriter)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Translation.ResourceProvider"/>.
            </summary>
            <param name="resourceReader">Класс, реализующий интерфейс <see cref="T:Terrasoft.Core.Translation.IResourceReader"/>.</param>
            <param name="resourceWriter">Класс, реализующий интерфейс <see cref="T:Terrasoft.Core.Translation.IResourceWriter"/>.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            Если в качестве параметра <paramref name="resourceReader"/> передано значение <c>null</c>.
            </exception>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            Если в качестве параметра <paramref name="resourceWriter"/> передано значение <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Translation.ResourceProvider.ReadLocalizableValues(System.DateTime,System.Action{Terrasoft.Core.Translation.ILocalizableItem})">
            <summary>
            Выбирает локализируемые ресурсы, у которых были обнаружены изменения, начиная с указанной даты.
            </summary>
            <param name="dateFrom">Дата.</param>
            <param name="readMethod">Метод обработки локализируемого ресурса.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            Если в качестве параметра <paramref name="readMethod"/> передано значение <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Translation.ResourceProvider.WriteLocalizableValue(Terrasoft.Core.Translation.ILocalizableItem)">
            <summary>
            Устанавливает значение локализируемого ресурса.
            </summary>
            <param name="item">Локализуемый ресурс.</param>
            <returns>Результат выполнения действия.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            Если в качестве параметра <paramref name="item"/> передано значение <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Translation.ResourceProvider.Actualize">
            <summary>
            Актуализирует состояние ресурсов.
            </summary>
            <remarks>Должен вызываться по окончанию всех операций <see cref="M:Terrasoft.Core.Translation.ResourceProvider.WriteLocalizableValue(Terrasoft.Core.Translation.ILocalizableItem)"/>.</remarks>
        </member>
        <member name="T:Terrasoft.Core.Translation.ILocalizableItem">
            <summary>
            Provides properties of the localized resource.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Translation.ILocalizableItem.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Translation.ILocalizableItem.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Translation.ILocalizableItem.CultureId">
            <summary>
            Culture identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Translation.ILocalizableItem.ModifiedOn">
            <summary>
            Modification date.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Translation.ILocalizableItem.IsAutogenerated">
            <summary>
            Flag that indicates whether the value is automatically generated.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Translation.IResourceWriter">
            <summary>
            Provides methods for saving and actualization of localizable resources.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Translation.IResourceWriter.WriteLocalizableValue(System.String,System.String,System.Guid)">
            <summary>
            Sets value for the localized resource.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value of the localized resource.</param>
            <param name="cultureId">Culture Id.</param>
            <returns>Action result.</returns>
        </member>
        <member name="M:Terrasoft.Core.Translation.IResourceWriter.Actualize">
            <summary>
            Actualizes the state of localized resources.
            </summary>
            <remarks>Should be called after all operations <see cref="M:Terrasoft.Core.Translation.IResourceWriter.WriteLocalizableValue(System.String,System.String,System.Guid)"/> are finished.</remarks>
        </member>
        <member name="T:Terrasoft.Core.Translation.LocalizableItem">
            <summary>
            Provides properties of the localized resource.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Translation.LocalizableItem.#ctor(System.String,System.String,System.Guid,System.DateTime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Translation.LocalizableItem"/> class.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
            <param name="cultureId">Culture identifier.</param>
            <param name="modifiedOn">Modification date.</param>
            <param name="isAutogenerated">Flag that indicates whether the value is automatically generated.</param>
        </member>
        <member name="P:Terrasoft.Core.Translation.LocalizableItem.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Translation.LocalizableItem.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Translation.LocalizableItem.CultureId">
            <summary>
            Culture identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Translation.LocalizableItem.ModifiedOn">
            <summary>
            Modification date.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Translation.LocalizableItem.IsAutogenerated">
            <summary>
            Flag that indicates whether the value is automatically generated.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.ResourceProviders.ResourceData">
            <summary>
            Provides properties of the resource data.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceData.PackageName">
            <summary>
            Package name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceData.PackageId">
            <summary>
            Package Id.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceData.SchemaName">
            <summary>
            Base schema name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceData.SchemaId">
            <summary>
            Base schema Id.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceData.SchemaUId">
            <summary>
            Base schema UId.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceData.ResourceName">
            <summary>
            Resource name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceData.CultureId">
            <summary>
            Culture Id.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceData.ModifiedOn">
            <summary>
            Modification date.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceData.Value">
            <summary>
            Resource value.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceData.ResourceType">
            <summary>
            Resource type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceData.ImageData">
            <summary>
            Image data.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.ResourceProviders.ResourceFilters">
            <summary>
            Provides properties of the resource filter.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceFilters.SchemaName">
            <summary>
            Schema name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceFilters.ResourceName">
            <summary>
            Resource name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceFilters.ModifiedFrom">
            <summary>
            Modified from date.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceFilters.ResourceType">
            <summary>
            Type of resource.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ResourceProviders.ResourceFilters.SchemaIds">
            <summary>
            Identifiers of schemas.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.UserProperty">
            <summary>
            The class for the user properties.
            </summary>
            <seealso cref="T:Terrasoft.Core.ExtraProperty"/>
        </member>
        <member name="T:Terrasoft.Core.ExtraProperty">
            <summary>
            The class for the manager items extra property.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ExtraProperty.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ExtraProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="type">The property type.</param>
        </member>
        <member name="M:Terrasoft.Core.ExtraProperty.#ctor(System.String,System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.ExtraProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="type">The property type.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="T:Terrasoft.Core.UserPropertyCollection">
            <summary>
            The collection of the <see cref="T:Terrasoft.Core.UserProperty"/> items.
            </summary>
            <seealso cref="T:Terrasoft.Core.BaseExtraPropertyCollection`1"/>
        </member>
        <member name="T:Terrasoft.Core.DB.QueryUtilities">
            <summary>
            Содержит служебные методы для работы с запросами к базе данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryUtilities.AddDBEngineCompatibleIsEqualCondition(Terrasoft.Core.DB.Query,System.String,Terrasoft.Core.Entities.EntitySchemaColumn,System.Object,Terrasoft.Common.LogicalOperation)">
            <summary>
            К заданному запросу добавляет соответствующее типу данных условие проверки равенства значения заданной 
            колонки схемы и указанного значения.
            </summary>
            <param name="query">Запрос, к которому добавляется условие.</param>
            <param name="schemaName">Имя схемы, для которой добавляется условие.</param>
            <param name="conditionColumn">Колонка схемы <paramref name="schemaName"/>, для которой добавляется условие.
            </param>
            <param name="conditionValue">Значение для сравнения с <paramref name="conditionColumn"/>.</param>
            <param name="logicalOperation">Тип логической операции, с помощью которой условие добавляется к запросу.
            </param>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaColumnDefSource">
            <summary>
            Источники значений по умолчанию.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnDefSource.None">
            <summary>
            Нет источника.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnDefSource.Const">
            <summary>
            Константа.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnDefSource.Settings">
            <summary>
            Настройка.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnDefSource.SystemValue">
            <summary>
            Системное значение.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaColumnDefSourceSystemValueSource">
            <summary>
            Источники системных значений по умолчанию.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnDefSourceSystemValueSource.CurrentTime">
            <summary>
            Текущее время.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnDefSourceSystemValueSource.CurrentDate">
            <summary>
            Текущая дата.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnDefSourceSystemValueSource.CurrentDateTime">
            <summary>
            Текущие дата и время.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnDefSourceSystemValueSource.CurrentUser">
            <summary>
            Текущий пользователь.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnDefSourceSystemValueSource.CurrentUserContact">
            <summary>
            Контакт текущего пользователя.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnDefSourceSystemValueSource.CurrentUserAccount">
            <summary>
            Контрагент текущего пользователя.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnDefSourceSystemValueSource.GenerateUId">
            <summary>
            Уникальный идентификатор.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnDefSourceSystemValueSource.GenerateSequentialUId">
            <summary>
            Последовательный идентификатор.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaColumnDef">
            <summary>
            Представляет значение по умолчанию для колонки схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnDef.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumnDef"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnDef.#ctor(Terrasoft.Core.Entities.EntitySchemaColumnDef)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumnDef"/>, который является клоном заданной 
            колонки.
            </summary>
            <param name="source">Колонка, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnDef.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Инициализирует основные свойства колонки на основании метаданных.
            </summary>
            <param name="reader">Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется 
            вычитка метаданных.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnDef.GetFilteredSettingsList(Terrasoft.Core.DataValueType,Terrasoft.Core.UserConnection)">
            <summary>
            Возвращает отфильтрованный список настроек в зависимости от указанного типа данных колонки.
            </summary>
            <param name="dataValueType">Тип данных колонки.</param>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Отфильтрованный список настроек для типа данных <paramref name="dataValueType"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnDef.Equals(System.Object)">
            <summary>
            Определяет, равен ли заданный объект <see cref="T:System.Object"/> текущему значению по умолчанию.
            </summary>
            <param name="obj">Объект, который требуется сравнить с текущим значением по умолчанию.</param>
            <returns>
            <c>true</c>, если <paramref name="obj"/> равен текущему значению по умолчанию; иначе - <c>false</c>.
            </returns>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnDef.GetHashCode">
            <summary>
            Возвращает хэш-код экземпляра значения по умолчанию.
            </summary>
            <returns>Хэш-код колонки.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnDef.Equals(Terrasoft.Core.Entities.EntitySchemaColumnDef)">
            <summary>
            Определяет, равно ли заданное значение по умолчанию <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumnDef"/> текущему значению 
            по умолчанию.
            </summary>
            <param name="comparedValue">Значение по умолчанию, которое требуется сравнить с текущим значением по 
            умолчанию.</param>
            <returns>
            <c>true</c>, если <paramref name="comparedValue"/> равна текущей колонке; иначе - <c>false</c>.
            </returns>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnDef.ReadMetaData(Terrasoft.Common.DataReader)">
            <summary>
            Осуществляет вычитку значения по умолчанию из метаданных с помощью заданного 
            <see cref="T:Terrasoft.Common.DataReader"/>.
            </summary>
            <param name="reader">
            Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого вычитываются метаданные 
            значения по умолчанию.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnDef.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Осуществляет запись метаданных значения по умолчанию с помощью заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">
            Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого записываются метаданные значения 
            по умолчанию.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnDef.GetDisplayValue">
            <summary>
            Возвращает отображаемое значение значения по умолчанию.
            </summary>
            <returns>
            Отображаемое значение значения по умолчанию.
            </returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если для колонки установлен не поддерживаемый источник значения 
            по умолчанию.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnDef.Clone">
            <summary>
            Возвращает значение по умолчанию, которое является клоном текущего значения по умолчанию.
            </summary>
            <returns>
            Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumnDef"/>, который является клоном текущего значения по 
            умолчанию.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumnDef.Source">
            <summary>
            Источник для значения по умолчанию.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumnDef.Value">
            <summary>
            Значение по умолчанию.
            </summary>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если источник для значения по умолчанию не допустим для данной 
            колонки.</exception>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumnDef.ValueSource">
            <summary>
            Источник получения значения по умолчанию.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumnDef.IsDateOrTimeDataValueType">
            <summary>
            Определяет, является ли значение по умолчанию значением даты или даты и времени.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumnDef.IsValueListDataValueType">
            <summary>
            Определяет, является ли значение по умолчанию значением из виртуального набора данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumnDef.IsConstantValue">
            <summary>
            Определяет, является ли значение по умолчанию константой.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumnDef.IsSystemValue">
            <summary>
            Определяет, является ли значение по умолчанию системным значением.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumnDef.ReferenceSchemaUId">
            <summary>
            Ссылка на схему, которая содержит колонку, которая содержит данное значение по умолчанию.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumnDef.ReferenceValueListSchemaUId">
            <summary>
            Уникальный идентификатор виртуального набора данных, на который ссылается текущее значение по умолчанию.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumnDef.SystemValue">
            <summary>
            Системное значение колонки.
            </summary>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">
            Если для значения по умолчанию установлен неверный идентификатор системного значения.
            </exception>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumnDef.ParentColumn">
            <summary>
            Колонка, которая содержит данное значение по умолчанию.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumnDef.SystemUserConnection">
            <summary>
            Пользовательское подключение.
            </summary>
            TODO #138944
        </member>
        <member name="P:Terrasoft.Core.ImageListSchema.BaseSchemaUId">
            <summary>
            Уникальный идентификатор базовой схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.MetaDataSerializer.Serialize(Terrasoft.Core.MetaSchema,System.IO.TextWriter)">
            <summary>
            Сериализует метаданные схемы <paramref name="schema"/>
            с помощью <paramref name="textWriter"/>.
            </summary>
            <param name="schema">Метаданные схемы.</param>
            <param name="textWriter">Экземпляр <see cref="T:System.IO.TextWriter"/>, с помощью которого выполняется
            сериализация.</param>
        </member>
        <member name="M:Terrasoft.Core.MetaDataSerializer.Serialize(Terrasoft.Core.MetaSchema,System.IO.Stream)">
            <summary>
            Сериализует метаданные схемы <paramref name = "schema"/> в поток <paramref name = "stream"/>.
            </summary>
            <param name="schema">Метаданные схемы.</param>
            <param name="stream">Поток.</param>
        </member>
        <member name="M:Terrasoft.Core.MetaDataSerializer.Serialize(System.Collections.Generic.IEnumerable{Terrasoft.Core.MetaSchema},System.IO.TextWriter)">
            <summary>
            Сериализует метаданные списка схем <paramref name="schemaList"/>
            с помощью <paramref name="textWriter"/>.
            </summary>
            <param name="schemaList">Список метаданных схем для сериализации.</param>
            <param name="textWriter">Экземпляр <see cref="T:System.IO.TextWriter"/>, с помощью которого выполняется
            сериализация.</param>
        </member>
        <member name="M:Terrasoft.Core.MetaDataSerializer.Serialize(System.Collections.Generic.IEnumerable{Terrasoft.Core.MetaSchema},System.IO.Stream)">
            <summary>
            Сериализует метаданные списка схем <paramref name = "schemaList"/> в поток <paramref name = "stream"/>.
            </summary>
            <param name="schemaList">Список метаданных схем для сериализации.</param>
            <param name="stream">Поток.</param>
        </member>
        <member name="M:Terrasoft.Core.MetaDataSerializer.Deserialize(System.IO.TextReader)">
            <summary>
            Десериализует метаданные списка схем с помощью <paramref name="input"/>.
            </summary>
            <param name="input">Экземпляр <see cref="T:System.IO.TextReader"/>, с помощью которого выполняется
            десериализация.</param>
            <returns>Список десериализованных элеметов менеджера схем.</returns>
        </member>
        <member name="M:Terrasoft.Core.MetaDataSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Десериализует метаданные списка схем из потока <paramref name = "input"/>.
            </summary>
            <param name="input">Поток.</param>
            <returns>Список десериализованных элеметов менеджера схем.</returns>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessSchema">
            <summary>
            Represents class for the business process diagram.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.ProcessSchema._parentSchemaUId">
            <summary>
            Parent schema identifier.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.ProcessSchema._compressor">
            <summary>
            Provides methods for compression and unpacking data.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchema.LoadResources">
            <summary>
            Loads schema resources.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchema.GetIsEnabled">
            <summary>
            Returns the enabled state.
            </summary>
            <returns>
            <c>true</c> if current schema is enabled; otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchema.GetStartSignalsMetaInfo">
            <summary>
            Gets the collection of meta information items for each start signal.
            </summary>
            <returns>
            The collection of meta information items for each start signal.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchema.GetInvalidElementNames(System.String)">
            <summary>
            Returns list of invalid process elements.
            </summary>
            <param name="ownerProcessSchemaName">Sub-process owner schema name.</param>
            <returns>List of invalid process elements.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchema.Verify">
            <summary>
            Verifies the current schema.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchema.RemoveParametersMappingInfo(Terrasoft.Core.Process.ProcessSchemaParameterCollection)">
            <summary>
            Provides bindings delete data parameter values to other business process parameters.
            </summary>
            <param name="parameters">The parameters of the process scheme.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchema.GetMethodNames">
            <summary>
            Returns list of methods or scripts names in process schema.
            </summary>
            <returns>List of methods or scripts names in process schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchema.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
            <returns>A new instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchema"/> type.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchema.SynchronizeParameters">
            <summary>
            Synchronizes elements parameters.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchema.AssignParentSchema(Terrasoft.Core.Process.ProcessSchema)">
            <Summary>
            For the current scheme built process sets the target schema as a parent.
            </Summary>
            <Param name = "parentSchema"> The circuit built process is set as a parent for the current
            Scheme.</Param>
            <Returns>
            <C> true </C>, if the built-in process of the current scheme as set parental scheme
            <Paramref name = "parentSchema" />; otherwise - <C> false </C>.
            </Returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchema.ActualizeFormatData">
            <summary>
            Actualizes the schema with the current format of the data.
            <remarks>When format of the schema data changes, it's required to modify this method or
            <see cref="M:Terrasoft.Core.Process.ProcessSchemaParameterValue.ActualizeFormatData"/>.</remarks>
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchema.ActualizeFormatData(System.Boolean)">
            <summary>
            Actualizes the schema with the current format of the data.
            <remarks>When format of the schema data changes, it's required to modify this method or
            <see cref="M:Terrasoft.Core.Process.ProcessSchemaParameterValue.ActualizeFormatData"/>.</remarks>
            </summary>
            <param name="convertLocalizableStringToParameter">Flags that indicates convert localilzable 
            strings to parameters</param>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchema.DependencyFactory">
            <summary>
            Gets the dependency factory.
            </summary>
            <value>
            The dependency factory.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchema.BaseElements">
            <summary>
            Gets the base elements.
            </summary>
            <value>
            The base elements.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchema.IsInterpretable">
            <summary>
            Gets or sets flag that indicates whether the process is interpretable.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchema.Enabled">
            <summary>
            Gets whether the process is enabled.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchema.CultureName">
            <summary>
            Culture name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchema.BpmnElementName">
            <summary>
            Returns the name of the business process element BPMN.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchema.ChangedMethods">
            <summary>
            Changed methods.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchema.UseForceCompile">
            <summary>
            Symptom forced compilation process scheme.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchema.ZipMethodsBody">
            <summary>
            Zipped source of process methods designed by user.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchema.ZipCompiledMethodsBody">
            <summary>
            Zipped source of process methods in obsolete format for compiled processes.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchema.MethodsBody">
            <summary>
            Source of process methods designed by user.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchema.CompiledMethodsBody">
            <summary>
            Source of process methods in obsolete format for compiled processes.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaSequenceFlow.CreateSequenceFlowElement(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Создает экземпляр соединения между элементами.
            </summary>
            <param name="flowSchema">Схема процесса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Process.SequenceFlow"/> соединения между элементами бизнес-процесса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaConditionalFlow.CreateSequenceFlowElement(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Создает экземпляр соединения между элементами c условием.
            </summary>
            <param name="flowSchema">Схема процесса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Process.SequenceFlow"/> соединения между элементами бизнес-процесса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaSubProcess.SynchronizeParameters">
            <summary>
            Synchronizes elements parameters.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessSchemaFlowElementTypesProvider">
            <summary>
            Represents type provider for mixed item types.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaFlowElementTypesProvider.GetMixedCollectionItemTypes(Terrasoft.Core.Configuration.SysWorkspace,System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Fills collection with items of the <see cref="T:System.Type"/> references.
            </summary>
            <param name="workspace">Not uses.</param>
            <param name="itemTypes">Collection of items with the <see cref="T:System.Type"/> references.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessSchemaStartSignalEvent">
            <summary>
            Represents class for the "start signal event" element.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Process.ProcessSchemaStartSignalEvent.EntitySignalMetaPropertyName">
            <summary>
            Meta name of the EntitySignal property.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaStartSignalEvent.InitializeSchemaParameters(Terrasoft.Core.Process.ProcessSchemaParameterCollection)">
            <summary>
            Initializes process parameters of the schema element.
            </summary>
            <param name="parameters">The list of the process element parameters.</param>
        </member>
        <member name="T:Terrasoft.Core.SchemaManagerProvider">
            <summary>
            Provides methods and properties to manage schema managers.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerProvider.#ctor(Terrasoft.Core.AppConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.SchemaManagerProvider"/> class.
            </summary>
            <param name="appConnection">Application connection.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerProvider.GetManager(System.String)">
            <summary>
            Creates schema manager.
            </summary>
            <param name="managerName">Schema manager name.</param>
            <returns>Schema manager.</returns>
            <remarks>
            Schema manager is created only once. After creating it is cached and will be returned on next request.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerProvider.GetManager``1">
            <summary>
            Creates schema manager.
            </summary>
            <typeparam name="T">Schema manager type.</typeparam>
            <returns>Schema manager.</returns>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerProvider.Initialize(System.Configuration.ConfigurationSection)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Core.SchemaManagerProvider"/> class 
            </summary>
            <param name="schemaManagerProviderConfigurationSection">Configuration data.</param>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerProvider.RefreshManager(System.String)">
            <summary>
            Refreshes schema manager.
            </summary>
            <param name="managerName">Schema manager name.</param>
            <remarks>Refreshes only cached schema manager.</remarks>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerProvider.Workspace">
            <summary>
            Workspace.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerProvider.AppConnection">
            <summary>
            Application connection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerProvider.ManagerNames">
            <summary>
            Manager names collection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerProvider.Terrasoft#Core#ISchemaManagerProvider#ManagerNames">
            <summary>
            Manager names collection.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.CodeGeneration.GeneratorContext.WriteToken(Terrasoft.Core.CodeGeneration.GeneratorToken)">
            <summary>
            Writes token text to the output stream.
            </summary>
            <param name="token">Token to write.</param>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSchema.DenyExtending">
            <summary>
            Forbid substitution of schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSchema.IncludeDependenciesSource">
            <summary>
            Include schema dependencies source codes to schema's code.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Configuration.SysSchema.Checksum">
            <summary>
            Checksum of schema and it's content.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysAdminUnit.ValidateAdminUnitNamePassword(Terrasoft.Core.UserConnection,System.String@,System.String)">
            <summary>
            Проверяет наличие пользователя в БД и соотвествие пароля
            </summary>
            <param name="userConnection"></param>
            <param name="userName">Имя пользователя, без учета регистра. Если регистр не совпадает, 
            имя пользователя будет исправлено в соотвествии с значением в БД </param>
            <param name="userPassword">Пароль пользователя.</param>
            <returns>
            <c>true</c>, если пользователь с переданным <paramref name="userName"/> существует и пароль 
            <paramref name="userName"/> совпадает с хранящимся в БД
            </returns>
        </member>
        <member name="F:Terrasoft.Core.ProcessEngine.DefMaxLoopCount">
            <summary>
            <see cref="P:Terrasoft.Core.ProcessEngine.MaxLoopCount"/> property default value.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.#ctor(Terrasoft.Core.Process.ProcessEngineStrategy)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.ProcessEngine"/> type of a given behavior.
            </summary>
            <param name="processEngineStrategy">The list of algorithms that determine the behavior of an instance
            <see cref="T:Terrasoft.Core.ProcessEngine"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessEngineStrategy)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.ProcessEngine"/> type of a given behavior.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="processEngineStrategy">The list of algorithms that determine the behavior of an instance
            <see cref="T:Terrasoft.Core.ProcessEngine"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.ProcessEngine"/> type with given user connection.
            </summary>
            <param name="userConnection">The user connection.</param>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.ClearEntityStartSignalCache">
            <summary>
            Clears the schema start signal information cache.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.GetMaxLoopCount(Terrasoft.Core.UserConnection)">
            <summary>
            Returns maximum number of repetitions for process item.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.CheckEntityUsedByProcess(Terrasoft.Core.Entities.Entity,System.Guid)">
            <summary>
            Checks entity for usage by process. If used throws exception <see cref="T:System.InvalidOperationException"/>
            Ignores dcm listeners.
            </summary>
            <param name="entity">Entity.</param>
            <param name="entityId">Entity identifier.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.GetSysEntityPrcStartEventSelect">
            <summary>
            Returns select query of start events, filtered by current workspace and ordered by manager name.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.ActualizeProcessSchemaListeners(Terrasoft.Core.UserConnection,Terrasoft.Core.Entities.Entity,System.Collections.ObjectModel.Collection{Terrasoft.Core.Configuration.ProcessSchemaListener})">
            <summary>
            Actualizes the list of process signals.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="entity">Instance of the <see cref="T:Terrasoft.Core.Entities.Entity"/> type.</param>
            <param name="listeners">List of process listeners.</param>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.FindProcessByUId(System.String,System.Boolean)">
            <summary>
            Finds the process instance by unique identifier.
            </summary>
            <param name="processUId">The process unique identifier.</param>
            <param name="findInDB">if set to <c>true</c> also find process instance in DB.</param>
            <returns>The process instance or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.FindProcessByUId(System.String)">
            <summary>
            Finds the process instance by unique identifier in memory cache only.
            </summary>
            <param name="processUId">The process unique identifier.</param>
            <returns>The process instance or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.GetProcessByUId(System.String,System.Boolean)">
            <summary>
            Gets the process by unique identifier.
            </summary>
            <param name="processUId">The process unique identifier.</param>
            <param name="findInDB">if set to <c>true</c> also find process instance in DB.</param>
            <returns>The process instance.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">If the process instance not found.</exception>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.GetProcessByUId(System.String)">
            <summary>
            Gets the process by unique identifier in memory cache only.
            </summary>
            <param name="processUId">The process unique identifier.</param>
            <returns>The process instance.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">If the process instance not found.</exception>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.FindProcessFlowElementByUId(System.Guid)">
            <summary>
            Finds the process flow element by it's unique identifier.
            </summary>
            <param name="processElementUId">The process element unique identifier.</param>
            <returns>Found process flow element.</returns>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.FindProcessByProcessElementUId(System.Guid)">
            <summary>
            Finds the process by UId of the process element.
            </summary>
            <param name="processElementUId">The UId of the process element.</param>
            <returns>Found process.</returns>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.GetProcessByElementUId(System.Guid)">
            <summary>
            Gets the process by the process element identifier.
            </summary>
            <param name="elementUId">The identifier of the process element.</param>
            <returns>Found process.</returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException"></exception>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.LinkProcessToEntity(Terrasoft.Core.Process.Process,System.Guid,System.Guid)">
            <summary>
            Connects the entity to the specified process.
            </summary>
            <param name="process">The process.</param>
            <param name="entitySchemaUId">The UId of the entity schema.</param>
            <param name="entityId">The Id of the entity.</param>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.GetIsProcessLinkedToEntity(Terrasoft.Core.Process.Process,System.Guid,System.Guid)">
            <summary>
            Determines whether the specified process is connected to entity.
            </summary>
            <param name="process">Process instance.</param>
            <param name="entitySchemaUId">The entity schema unique identifier.</param>
            <param name="entityId">The entity primary column value.</param>
            <returns><c>true</c> if process is connected to entity, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.GetProcessListeners(Terrasoft.Core.UserConnection,Terrasoft.Core.Entities.Entity,Terrasoft.Core.Entities.EntityChangeType)">
            <summary>
            Gets list of process listeners.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="entity">Instance of the <see cref="T:Terrasoft.Core.Entities.Entity"/> type.</param>
            <param name="changeType">Type of entity modification.</param>
            <returns>List of instances of the <see cref="T:Terrasoft.Core.Configuration.ProcessListener"/> type.</returns>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.GetProcessSchemaListeners(Terrasoft.Core.Entities.Entity,Terrasoft.Core.Entities.EntityChangeType)">
            <summary>
            Gets list of process signals.
            </summary>
            <param name="entity">Instance of the <see cref="T:Terrasoft.Core.Entities.Entity"/> type.</param>
            <param name="changeType">Type of entity modification.</param>
            <returns>List of instances of the <see cref="T:Terrasoft.Core.Configuration.ProcessListener"/> type.</returns>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.ContinueExecuting(Terrasoft.Core.UserConnection,Terrasoft.Core.Entities.Entity,System.Collections.ObjectModel.Collection{Terrasoft.Core.Configuration.ProcessListener})">
            <summary>
            Continues executing process elements.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="entity">Instance of the <see cref="T:Terrasoft.Core.Entities.Entity"/> type.</param>
            <param name="processListeners">List of process listeners.</param>
            <returns>List of instances of the <see cref="T:Terrasoft.Core.Process.ProcessDescriptor"/> type.</returns>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.RunProcesses(Terrasoft.Core.UserConnection,Terrasoft.Core.Entities.Entity,System.Collections.ObjectModel.Collection{Terrasoft.Core.Configuration.ProcessSchemaListener})">
            <summary>
            Runs processes by signal event.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="entity">Instance of the <see cref="T:Terrasoft.Core.Entities.Entity"/> type.</param>
            <param name="listeners">List of process listeners.</param>
            <returns>List of instances of the <see cref="T:Terrasoft.Core.Process.ProcessDescriptor"/> type.</returns>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.RunDcmProcess(Terrasoft.Core.Entities.Entity,System.Collections.Generic.IList{Terrasoft.Core.Configuration.ProcessListener})">
            <summary>
            Runs the DCM process if it was not ran by signal.
            </summary>
            <param name="entity">The changed entity.</param>
            <param name="processListeners">The process listeners of the changed entity.</param>
            <returns>The executed process or <c>null</c> if process was already executed by signal or if there is no
            enabled <see cref="T:Terrasoft.Core.DcmProcess.DcmSchema"/> for the current entity.</returns>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.RunDcmProcess(System.Guid,Terrasoft.Core.DcmProcess.DcmSchema)">
            <summary>
            Runs the DCM process.
            </summary>
            <param name="entityPrimaryColumnValue">The entity primary column value.</param>
            <param name="dcmSchema">The DCM schema.</param>
            <returns>The executed process.</returns>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.CancelNotEnabledDcmProcess(System.Guid,System.Guid)">
            <summary>
            Cancel the DCM process which is disabled, but enabled DCM process for the given entity exists.
            </summary>
            <param name="entitySchemaUId">The entity schema unique identifier.</param>
            <param name="entityId">The entity primary column value.</param>
        </member>
        <member name="M:Terrasoft.Core.ProcessEngine.RunDcmProcesses(Terrasoft.Core.Entities.Entity,System.Collections.Generic.IList{Terrasoft.Core.Configuration.ProcessListener})">
            <summary>
            Runs the DCM processes if it was not ran by signal.
            </summary>
            <param name="entity">The changed entity.</param>
            <param name="listeners">The process listeners of the changed entity.</param>
            <returns>The executed process or <c>null</c> if process was already executed by signal or if there is no
            enabled <see cref="T:Terrasoft.Core.DcmProcess.DcmSchema"/> for the current entity.</returns>
        </member>
        <member name="P:Terrasoft.Core.ProcessEngine.Log">
            <summary>
            Gets or sets the global logger instance for this type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ProcessEngine.SysEntityCommonPrcElSchemaName">
            <summary>
            Gets the name for the "SysEntityCommonPrcEl" entity schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ProcessEngine.MaxLoopCountSysSettingsCode">
            <summary>
            Gets the code for the settings "Maximum number of process item repetitions".
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ProcessEngine.UserConnection">
            <summary>
            Gets or sets the user connection.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ProcessEngine.ProcessSchemaManager">
            <summary>
            Gets the schema manager, that works with <see cref="T:Terrasoft.Core.Process.ProcessSchema"/> items.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ProcessEngine.EntitySchemaManager">
            <summary>
            Gets the schema manager, that works with <see cref="T:Terrasoft.Core.Entities.EntitySchema"/> items.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ProcessEngine.MaxLoopCount">
            <summary>
            Gets maximum number of process item repetitions.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ProcessEngine.ProcessActivityStatus">
            <summary>
            Gets a list of key/value pairs, where key is the state of activity,
            and the value is the state Id.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ProcessEngine.SysEntityPrcStartEvents">
            <summary>
            Gets a list of key/value pairs, where key is the entity schema Id
            and value is the list of process schema listeners for entity schema.
            </summary>
            <seealso cref="T:Terrasoft.Core.Configuration.ProcessSchemaListener"/>
        </member>
        <member name="P:Terrasoft.Core.ProcessEngine.ProcessListenersColumnName">
            <summary>
            Gets the name for the "Active processes" column.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ProcessEngine.ProcessExecutor">
            <summary>
            Gets the process executor <see cref="T:Terrasoft.Core.Process.IProcessExecutor"/>.
            </summary>
            <value>
            The process executor.
            </value>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaDataObject.ForceGetParameters">
            <summary>
            Forcibly obtains process parameters.
            </summary>
            <returns>
            Collection of process parameters.
            </returns>
        </member>
        <member name="F:Terrasoft.Core.Process.ProcessUserTaskSchema.DesignSchemaMethods">
            <summary>
            List of design schema methods names.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessUserTaskSchema.SynchronizeDynamicParameters(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessUserTaskSchema)">
            <summary>
            Synchronizes dynamic parameters.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="target">Target user task schema.</param>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessUserTaskSchema.BaseSchemaUId">
            <summary>
            Уникальный идентификатор базовой схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessUserTaskSchema.IsPartial">
            <summary>
            Flag that indicates if user task is partial class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessUserTaskSchemaManager.Clear">
            <summary>
            Удаляет все элементы из коллекции элементов менеджера, после чего очищает кэш
            <see cref="P:Terrasoft.Core.Process.ProcessUserTaskSchemaManager.MetaDataContractCacheGroupName"/>
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessUserTaskSchemaManager.AddDefaultMethods(Terrasoft.Core.Process.ProcessUserTaskSchema)">
            <summary>
            Adds default methods to the spicified schema.
            </summary>
            <param name="schema">User task schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaIntermediateCatchMessageEvent.CreateFlowElement(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Creates flow element.
            </summary>
            <param name="flowSchema">Instance of the <see cref="T:Terrasoft.Core.Process.FlowSchema"/> type.</param>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessSchemaIntermediateCatchSignalEvent">
            <summary>
            Represents class for the "intermediate catch signal event" element.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaIntermediateCatchSignalEvent.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaIntermediateCatchSignalEvent"/> type.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaIntermediateCatchSignalEvent.#ctor(Terrasoft.Core.Process.ProcessSchemaIntermediateCatchSignalEvent)">
            <summary>
            Creates a new instance that is a copy of another instance.
            </summary>
            <param name="source">Instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaIntermediateCatchSignalEvent"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaIntermediateCatchSignalEvent.#ctor(Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Creates a new instance with specified process schema.
            </summary>
            <param name="processSchema">Schema of the process.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaIntermediateCatchSignalEvent.#ctor(Terrasoft.Core.Process.ProcessSchema,System.Boolean)">
            <summary>
            Creates a new instance with specified process schema.
            </summary>
            <param name="processSchema">Schema of the process.</param>
            /// <param name="isNonInterrupting">Flag indicates whether it can be interrupted.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaIntermediateCatchSignalEvent.InitializeSchemaParameters(Terrasoft.Core.Process.ProcessSchemaParameterCollection)">
            <summary>
            Initializes process parameters of the schema element.
            </summary>
            <param name="parameters">The list of the process element parameters.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaIntermediateCatchSignalEvent.FillParameters(Terrasoft.Core.Process.ProcessSchemaParameterCollection)">
            <summary>
            Fills out the list of the process element parameters.
            </summary>
            <param name="parameters">List of forcibly generated parameters.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaIntermediateCatchSignalEvent.InitializeProperties">
            <summary>
            Initializes properties.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaIntermediateCatchSignalEvent.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Writes meta data values.
            </summary>
            <param name="writer">Instance of the <see cref="T:Terrasoft.Common.DataWriter"/> type.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaIntermediateCatchSignalEvent.Clone">
            <summary>
            Creates a new instance that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaIntermediateThrowMessageEvent.CreateFlowElement(Terrasoft.Core.Process.FlowSchema)">
            <summary>
            Creates flow element.
            </summary>
            <param name="flowSchema">Instance of the <see cref="T:Terrasoft.Core.Process.FlowSchema"/> type.</param>
        </member>
        <member name="T:Terrasoft.Core.SchemaResourceStorage">
            <summary>
            Provides methods for receiving schema resource managers.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaResourceStorage.#ctor(Terrasoft.Core.Configuration.SysWorkspace)">
            <summary>
            Initializes an instance of the <see cref="T:Terrasoft.Core.SchemaResourceStorage"/> class for the specified
            <paramref name="workspace"/>.
            </summary>
            <param name="workspace">Workspace.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            In case if <paramref name="workspace"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.SchemaResourceStorage.GetManager(System.String)">
            <summary>
            Returns resource manager from current storage.
            </summary>
            <param name="managerName">Name of resource manager.</param>
            <returns>
            Instance of <see cref="T:Terrasoft.Common.IResourceManager"/> with name <paramref name="managerName"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            In case if <paramref name="managerName"/> is <c>null</c> or empty string.
            </exception>
        </member>
        <member name="P:Terrasoft.Core.SchemaResourceStorage.Managers">
            <summary>
            Contains all loaded resource managers.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.IDBCommand">
            <summary>
            Представляет собой команду SQL.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.IDBCommand.Execute(Terrasoft.Core.DB.DBExecutor)">
            <summary>
            Выполняет команду SQL, используя заданный экземпляр <see cref="T:Terrasoft.Core.DB.DBExecutor"/> и возвращает количество 
            строк, задействованных при выполнении команды.
            </summary>
            <param name="dbExecutor">Экземпляр <see cref="T:Terrasoft.Core.DB.DBExecutor"/>, с помощью которого выполняется запрос к базе 
            данных.</param>
            <returns>Количество строк, задействованных при выполнении оператора.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.IDBCommand.Execute">
            <summary>
            Выполняет команду SQL и возвращает количество строк, задействованных при выполнении команды.
            </summary>
            <returns>Количество строк, задействованных при выполнении команды.</returns>
        </member>
        <member name="T:Terrasoft.Core.DB.ActionsConfig">
            <summary>
            Битовое перечисление настроек обновления структуры базы данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.DBMetaAction.Execute(Terrasoft.Core.DB.ActionsConfig)">
            <summary>
            Выполняет действия по обновлению структуры базы данных.
            </summary>
            <param name="actionsConfig">Настройки обновления структуры базы данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DBMetaActionCollection.Execute(Terrasoft.Core.DB.ActionsConfig)">
            <summary>
            Выполняет все действия для обновления структуры базы данных.
            </summary>
            <param name="actionsConfig">Настройки обновления структуры базы данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.GroupAction.Execute(Terrasoft.Core.DB.ActionsConfig)">
            <summary>
            Выполняет группу действий по обновлению структуры базы данных.
            </summary>
            <param name="actionsConfig">Настройки обновления структуры базы данных.</param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если группа не содержит действий.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.ValidateAction.Execute(Terrasoft.Core.DB.ActionsConfig)">
            <summary>
            Выполняет действия по обновлению структуры базы данных.
            </summary>
            <param name="actionsConfig">Настройки обновления структуры базы данных.</param>
        </member>
        <member name="T:Terrasoft.Core.Entities.SystemEntitySchemaManager">
            <summary>
            System entities schema manager.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaManager.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaManager"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaManager.GetGenerator(Terrasoft.Core.UserConnection)">
            <summary>
            Returns schema source code generator, using specified user connection.
            </summary>
            <param name="userConnection">User connection.</param>
            <returns>Schema source code generator.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaManager.GetProcessSchemaGenerator(Terrasoft.Core.UserConnection)">
            <summary>
            Возвращает генератор схем процессов, используя заданное пользовательское подключение. 
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Генератор схем процессов.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaManager.GetMetaDataSerializer(Terrasoft.Core.UserConnection)">
            <summary>
            Возвращает сериализатор метаданных схем, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Сериализатор метаданных схем.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaManager.Initialize(Terrasoft.Core.SchemaManagerProvider,Terrasoft.Core.SchemaManagerProviderConfigurationElement)">
            <summary>
            Инициализирует менеджер схем, используя заданный провайдер и информацию конфигурационного файла.
            </summary>
            <param name="provider">Провайдер менеджера схем.</param>
            <param name="configuration">Информация конфигурационного файла.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaManager.ActualizeItemDescriptor(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Actualizes schema manager item descriptor.
            </summary>
            <param name="item">Schema manager item that needs actualization.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaManager.SaveSchema(System.Guid,Terrasoft.Core.UserConnection,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Saves schema. 
            </summary>
            <param name="uid">Specified designed schema UId.</param>
            <param name="userConnection">Specified instance of <see cref="T:Terrasoft.Core.UserConnection"/>.</param>
            <param name="validateNamePrefixes">Determines if need to validate prefixes of the schema's and its
            elements names before save.</param>
            <param name="generateBundles">Determines if schema bundles should be generated after save.</param>
            <param name="lockSchemaInSourceControlStorage">Determines if schema bundles should be generated after save.
            </param>
            <returns><c>true</c> if schema is successfully saved; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.Security.SecurityException">If user have no rights to modify schema.</exception>
            <remarks>The method is overloaded.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaManager.GetSchemaOppositeReferences(System.Guid,Terrasoft.Core.Entities.EntitySchemaColumnUsageType,Terrasoft.Core.UserConnection,System.Boolean)">
            <summary>
            Returns collection of references to schema with specified <paramref name="schemaUId"/>,
            <paramref name="usageType"/> and <paramref name="userConnection"/>.
            </summary>
            <param name="schemaUId">Referenced schema identifier.</param>
            <param name="usageType">Specifies column usage type.</param>
            <param name="userConnection">User connection.</param>
            <param name="includeSysTable">Specifies whether to use system tables.</param>
            <returns>Collection of references to schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaManager.GetSchemaChildren(System.Guid)">
            <summary>
            Returns child schema references collection.
            </summary>
            <param name="schemaUId">Parent schema identifier.</param>
            <returns>Child schema references collection.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaManager.ItemCaption">
            <summary>
            Заголовок элемента менеджера.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaManager.ResourceManagerName">
            <summary>
            Имя менеджера ресурсов.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaManager.DataValueTypeManager">
            <summary>
            Менеджер значений типов данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaManager.SystemValueManager">
            <summary>
            Менеджер системных значений.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaManager.HashFunc">
            <summary>
            Функция хеширования. По умолчанию - MD5.
            </summary>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            Если устанавливаемое значение равно <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.SystemEntitySchemaManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Entities.SystemEntitySchemaManager"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.SystemEntitySchemaManager.InitializeInstance(Terrasoft.Core.ISchemaManagerItem{Terrasoft.Core.Entities.EntitySchema})">
            <summary>
            Initializes a new instance of the system schema in the specified item of manager. 
            </summary>
            <param name="item"> The manager item for which the instance is being creating.</param>
            <returns> Initialized item of system schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.SystemEntitySchemaManager.InitializeItems">
            <summary>
            Initializes items of manager.
            </summary>
            <returns>
            <c>true</c>, if manager items are successfully initialized; otherwise - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.SystemEntitySchemaManager.InitializeEntitySchemaRights">
            <summary>
            Initializing permissions for the schemas.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.SystemEntitySchemaManager.InitializeSchema(Terrasoft.Core.ISchemaManagerItem,System.Reflection.Assembly)">
            <summary>
            Creates the schema instance for the type specified in the passed-in manager item. If no such schema type is 
            found, an exception is thrown.</summary>
            <param name="schemaManagerItem">The manager item where the schema is to be initialized.</param>
            <param name="assembly">The assembly that contains the type of the scheme whose instance is being created.
            </param>
            <returns>The initialized instance of the schema.</returns>
        </member>
        <member name="T:Terrasoft.Core.ExtraPropertyCollection">
            <summary>
            The collection of the <see cref="T:Terrasoft.Core.ExtraProperty"/> items.
            </summary>
            <seealso cref="T:Terrasoft.Core.BaseExtraPropertyCollection`1"/>
        </member>
        <member name="M:Terrasoft.Core.LicHelper.GetSchemaLicRights(System.String)">
            <summary>
            Returns list of licensing rights to schema.
            </summary>
            <param name="schemaName">Schema name.</param>
            <returns>Schema licensing rights collection of <see cref="T:SchemaOperationRightLevels"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.LicHelper.GetSchemaLicRights(System.String,System.Boolean)">
            <summary>
            Returns list of licensing rights to schema.
            </summary>
            <param name="schemaName">Schema name.</param>
            <param name="useDemoMode">Indicates if demo-mode flag should be used.</param>
            <returns>Schema licensing rights collection of <see cref="T:SchemaOperationRightLevels"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.LicHelper.ActualizeLicPackageOperations(System.String)">
            <summary>
            Actualizes list of available conditional operations for target licensing product.
            </summary>
            <param name="licPackageName">Licensing product name.</param>
        </member>
        <member name="M:Terrasoft.Core.LicHelper.ActualizeLicPackagesOperations">
            <summary>
            Actualizes list of available conditional operations for all licensing products.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.LicHelper.GetLicPackageMaxConditionCount(System.String)">
            <summary>
            Returns maximum value of conditional license for the license package <paramref name="licPackageName"/>.
            </summary>
            <param name="licPackageName">Name of the license package.</param>
            <remarks>
            Returns -1, if license package wasn't found or doesn't contain conditional licenses.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.LicHelper.GetLicPackageCurrentConditionResult(System.String)">
            <summary>
            Returns actual result of conditional license check for the license package
            <paramref name="licPackageName"/>.
            </summary>
            <param name="licPackageName">License package name.</param>
            <remarks>
            Returns 0, if license package wasn't found or doesn't contain conditional licenses.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.LicHelper.GetLicPackageCurrentConditionDate(System.String)">
            <summary>
            Возвращает дату и время (UTC) последней проверки условной лицензии для лицензионного решения
            <paramref name="licPackageName"/>.
            </summary>
            <param name="licPackageName">Имя лицензионного решения.</param>
            <remarks>
            Возвращает минимальную дату, если лицензионное решение не найдено либо не содержит условных лицензий.
            </remarks>
        </member>
        <member name="F:Terrasoft.Core.SystemValue.CurrentTimeSystemValueName">
            <summary>
            The name for the "CurrentTime" system value.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.IWorkspaceManager">
            <summary>Интерфейс для манипулирования рабочими пространствами пользователя (workspace)</summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._booleanDataValueTypeUId">
            <summary>
            Boolean data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._shortTextDataValueTypeUId">
            <summary>
            ShortText data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._mediumTextDataValueTypeUId">
            <summary>
            MediumText data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._longTextDataValueTypeUId">
            <summary>
            LongText data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._maxSizeTextDataValueTypeUId">
            <summary>
            MaxSizeText data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._textDataValueTypeUId">
            <summary>
            Text data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._secureTextDataValueTypeUId">
            <summary>
            SecureText data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._hashTextDataValueTypeUId">
            <summary>
            HashText data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._dbObjectNameDataValueTypeUId">
            <summary>
            DbObjectName data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._localizableStringDataValueTypeUId">
            <summary>
            Localizable string data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._integerDataValueTypeUId">
            <summary>
            Integer data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._floatDataValueTypeUId">
            <summary>
            Float data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._float1DataValueTypeUId">
            <summary>
            Float1 data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._float2DataValueTypeUId">
            <summary>
            Float2 data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._float3DataValueTypeUId">
            <summary>
            Float3 data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._float4DataValueTypeUId">
            <summary>
            Float4 data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._moneyDataValueTypeUId">
            <summary>
            Money data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._lookupDataValueTypeUId">
            <summary>
            Lookup data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._guidDataValueTypeUId">
            <summary>
            Guid data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._dateTimeDataValueTypeUId">
            <summary>
            DateTime data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._dateDataValueTypeUId">
            <summary>
            Date data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._binaryDataValueTypeUId">
            <summary>
            Binary data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._timeDataValueTypeUId">
            <summary>
            Time data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._entityCollectionDataValueTypeUId">
            <summary>
            EntityCollection data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._entityColumnMappingCollectionDataValueTypeUId">
            <summary>
            EntityColumnMappingCollectio data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._localizableParameterValuesListDataValueTypeUId">
            <summary>
            LocalizableParameterValuesList data value type Id.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DataValueType._metaDataTextDataValueTypeUId">
            <summary>
            MetaDataText data value type Id.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DataValueType.GetIsComplexLocalizableValueType(System.Guid)">
            <summary>
            Indicates that the parameter value is of complex localizable type.
            </summary>
            <param name="dataValueTypeUId">UId of the data value type.</param>
            <returns><c>true</c>, if value is a complex localizable type, otherwise - <c>false</c>.</returns>
        </member>
        <member name="P:Terrasoft.Core.DataValueType.IsLocalizableText">
            <summary>
            Indicates whether data value type is a localizable text type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.TextDataValueType.IsLocalizableText">
            <summary>
            Indicates whether data value type is a localizable text type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.HashTextDataValueType.IsLocalizableText">
            <summary>
            Indicates whether data value type is a localizable text type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SecureTextDataValueType.IsLocalizableText">
            <summary>
            Indicates whether data value type is a localizable text type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ColorDataValueType.IsLocalizableText">
            <summary>
            Indicates whether data value type is a localizable text type.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.MetaDataTextDataValueType">
            <summary>
            Type for storing text in metadata(not in resource storage).
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.Func">
            <summary>
            Предоставляет служебные методы для работы функциями.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Count(System.String)">
            <summary>
            Возвращает функцию для вычисления количества непустых значений колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, вычисляющая количество непустых значений в колонке с псевдонимом 
            <paramref name="sourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Count(System.String,System.String)">
            <summary>
            Возвращает функцию для вычисления количества непустых значений колонки с заданным псевдонимом из указанного 
            источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, вычисляющая количество непустых значений колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> из источника <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Count(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию для вычисления количества непустых значений переданного выражения колонки.
            </summary>
            <param name="columnExpression">Выражение колонки запроса.</param>
            <returns>Функция, вычисляющая количество непустых значений выражения <paramref name="columnExpression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Count(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию для вычисления количества непустых значений переданного выражения.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Функция, вычисляющая количество непустых значений выражения <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Sum(System.String)">
            <summary>
            Возвращает функцию для вычисления суммы непустых значений колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, вычисляющая сумму непустых значений колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Sum(System.String,System.String)">
            <summary>
            Возвращает функцию для вычисления суммы непустых значений колонки с заданным псевдонимом из указанного 
            источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, вычисляющая сумму непустых значений колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> из источника <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Sum(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию для вычисления суммы непустых значений переданного выражения колонки.
            </summary>
            <param name="columnExpression">Выражение колонки запроса.</param>
            <returns>Функция, вычисляющая сумму непустых значений выражения колонки <paramref name="columnExpression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Sum(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию для вычисления суммы непустых значений переданного выражения.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Функция, вычисляющая сумму непустых значений выражения <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Avg(System.String)">
            <summary>
            Возвращает функцию для вычисления среднего значения колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, вычисляющая среднее значение колонки с псевдонимом <paramref name="sourceColumnAlias"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Avg(System.String,System.String)">
            <summary>
            Возвращает функцию для вычисления среднего значения колонки с заданным псевдонимом из указанного 
            источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, вычисляющая среднее значение колонке с псевдонимом 
            <paramref name="sourceColumnAlias"/> из источника <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Avg(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию для вычисления среднего значения переданного выражения колонки.
            </summary>
            <param name="columnExpression">Выражение колонки.</param>
            <returns>Функция, вычисляющая среднее значение выражения <paramref name="columnExpression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Avg(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию для вычисления среднего значения переданного выражения.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Функция, вычисляющая среднее значение выражения <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Min(System.String)">
            <summary>
            Возвращает функцию для вычисления минимального значения колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, вычисляющая минимальное значение колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Min(System.String,System.String)">
            <summary>
            Возвращает функцию для вычисления минимального значения колонки с заданным псевдонимом из указанного 
            источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, вычисляющая минимальное значение колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> из источника <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Min(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию для вычисления минимального значения переданного выражения колонки.
            </summary>
            <param name="columnExpression">Выражение колонки.</param>
            <returns>Функция, вычисляющая минимальное значение выражения колонки <paramref name="columnExpression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Min(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию для вычисления минимального значения переданного выражения.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Функция, вычисляющая минимальное значение выражения <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Max(System.String)">
            <summary>
            Возвращает функцию для вычисления максимального значения колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, вычисляющая максимальное значение колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Max(System.String,System.String)">
            <summary>
            Возвращает функцию для вычисления максимального значения колонки с заданным псевдонимом из указанного 
            источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, вычисляющая максимальное значение колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> из источника <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Max(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию для вычисления максимального значения переданного выражения колонки.
            </summary>
            <param name="columnExpression">Выражение колонки.</param>
            <returns>Функция, вычисляющая максимальное значение выражения колонки <paramref name="columnExpression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Max(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию для вычисления максимального значения переданного выражения.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Функция, вычисляющая максимальное значение выражения <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.IsNull(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию замены значения <c>null</c> замещающим выражением для заданных проверяемого и 
            замещающего выражений.
            </summary>
            <param name="checkExpression">Выражение, которое необходимо проверить на равенство <c>null</c>.</param>
            <param name="replacementValue">Выражение, возвращаемое функцией, если <paramref name="checkExpression"/> 
            равно <c>null</c>.</param>
            <returns>Функция, которая заменяет значение <c>null</c> в выражении <paramref name="checkExpression"/> на 
            выражение <paramref name="replacementValue"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.IsNull(Terrasoft.Core.DB.IQueryColumnExpressionConvertible,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию замены значения <c>null</c> замещающим выражением для заданных проверяемого и 
            замещающего выражений.
            </summary>
            <param name="checkExpression">Выражение, которое необходимо проверить на равенство <c>null</c>.</param>
            <param name="replacementValue">Выражение, возвращаемое функцией, если <paramref name="checkExpression"/> 
            равно <c>null</c>.</param>
            <returns>Функция, которая заменяет значение <c>null</c> в выражении <paramref name="checkExpression"/> на 
            выражение <paramref name="replacementValue"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.CreateGuid">
            <summary>
            Возвращает функцию генерации нового идентификатора.
            </summary>
            <returns>Функция, которая генерирует новый идентификатор.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.CurrentDateTime">
            <summary>
            Возвращает функцию текущей даты и времени.
            </summary>
            <returns>Функция, возвращающая текущие дату и время.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Coalesce(Terrasoft.Core.DB.QueryColumnExpressionCollection)">
            <summary>
            Возвращает функцию возврата первого выражения из переданной коллекции выражений колонок, не 
            равного <c>null</c>.
            </summary>
            <param name="expressions">Коллекция выражений колонок.</param>
            <returns>Функция, возвращающая первое выражение из коллекции <paramref name="expressions"/>, не равное 
            <c>null</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Coalesce(Terrasoft.Core.DB.QueryColumnExpression[])">
            <summary>
            Возвращает функцию определения первого не равного <c>null</c> значения из заданного массива выражений 
            колонок.
            </summary>
            <param name="expressions">Массив выражений колонок.</param>
            <returns>Функция, возвращающая первое выражение из массива выражений колонок 
            <paramref name="expressions"/>, не равное <c>null</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Coalesce(Terrasoft.Core.DB.IQueryColumnExpressionConvertible[])">
            <summary>
            Возвращает функцию определения первого не равного <c>null</c> значения из заданного массива выражений.
            </summary>
            <param name="expressions">Массив выражений.</param>
            <returns>Функция, возвращающая первое выражение массива <paramref name="expressions"/>, не равное 
            <c>null</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DatePart(Terrasoft.Core.DB.DatePartQueryFunctionInterval,System.String)">
            <summary>
            Возвращает функцию определения указанной части даты для колонки с заданным псевдонимом.
            </summary>
            <param name="interval">Часть даты.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты <paramref name="interval"/> для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DatePart(Terrasoft.Core.DB.DatePartQueryFunctionInterval,System.String,System.String)">
            <summary>
            Возвращает функцию определения указанной части даты для колонки с заданным псевдонимом из указанного 
            источника.
            </summary>
            <param name="interval">Часть даты.</param>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты <paramref name="interval"/> для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> источника <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DatePart(Terrasoft.Core.DB.DatePartQueryFunctionInterval,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию определения указанной части даты для переданного выражении колонки.
            </summary>
            <param name="interval">Часть даты.</param>
            <param name="expression">Выражение колонки запроса.</param>
            <returns>Функция, возвращающая часть даты <paramref name="interval"/> для выражения 
            <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DatePart(Terrasoft.Core.DB.DatePartQueryFunctionInterval,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию определения указанной части даты для переданного выражения.
            </summary>
            <param name="interval">Часть даты.</param>
            <param name="expression">Выражение.</param>
            <returns>Функция, возвращающая часть даты <paramref name="interval"/> для выражения 
            <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Day(System.String)">
            <summary>
            Возвращает функцию определения части даты [День] для колонки с заданным псевдонимом. 
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты [День] для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Day(System.String,System.String)">
            <summary>
            Возвращает функцию для определения части даты [День] для колонки с заданным псевдонимом из указанного 
            источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты [День] для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> источника <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Day(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию для определения части даты [День] для переданного выражения колонки.
            </summary>
            <param name="expression">Выражение колонки.</param>
            <returns>Функция, возвращающая часть даты [День] для выражения колонки <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Day(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию для определения части даты [День] для переданного выражения.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Функция, возвращающая часть даты [День] для выражения <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Week(System.String)">
            <summary>
            Возвращает функцию для определения части даты [Неделя] для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты [Неделя] для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Week(System.String,System.String)">
            <summary>
            Возвращает функцию для определения части даты [Неделя] для колонки с заданным псевдонимом из 
            указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты [Неделя] для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> из источника <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Week(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию для определения части даты [Неделя] для заданного выражения колонки.
            </summary>
            <param name="expression">Выражение колонки.</param>
            <returns>Функция, возвращающая часть даты [Неделя] для выражения колонки <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Week(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию для определения части даты [Неделя] для заданного выражения.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Функция, возвращающая часть даты [Неделя] для выражения <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Month(System.String)">
            <summary>
            Возвращает функцию для определения части даты [Месяц] для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты [Неделя] для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Month(System.String,System.String)">
            <summary>
            Возвращает функцию для определения части даты [Месяц] для колонки с заданным псевдонимом из указанного 
            источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты [Месяц] для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> источника <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Month(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию для определения части даты [Месяц] для переданного выражения колонки.
            </summary>
            <param name="expression">Выражение колонки.</param>
            <returns>Функция, возвращающая часть даты [Месяц] для выражения колонки <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Year(System.String)">
            <summary>
            Возвращает функцию для определения части даты [Год] для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты [Год] для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Year(System.String,System.String)">
            <summary>
            Возвращает функцию для определения части даты [Год] для колонки с заданным псевдонимом из указанного 
            источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты [Год] для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> источника <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Hour(System.String)">
            <summary>
            Возвращает функцию для определения части даты [Час] для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты [Час] для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Hour(System.String,System.String)">
            <summary>
            Возвращает функцию для определения части даты [Час] для колонки с заданным псевдонимом из указанного 
            источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты [Час] для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> источника <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Hour(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию для определения части даты [Час] для переданного выражения колонки.
            </summary>
            <param name="expression">Выражение колонки.</param>
            <returns>Функция, возвращающая часть даты [Час] для выражения колонки <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Hour(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию для определения части даты [Час] для переданного выражения.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Функция, возвращающая часть даты [Час] для выражения <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.HourMinute(System.String)">
            <summary>
            Возвращает функцию для определения части даты [Минута] для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты [Минута] для колонки с заданным псевдонимом.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.HourMinute(System.String,System.String)">
            <summary>
            Возвращает функцию для определения части даты [Минута] для колонки с заданным псевдонимом из 
            указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая компонент [Минута] для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> источника <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.HourMinute(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию для определения части даты [Минута] для переданного выражения колонки.
            </summary>
            <param name="expression">Выражение колонки.</param>
            <returns>Функция, возвращающая часть даты [Минута] для выражения колонки <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.HourMinute(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию для определения части даты [Минута] для переданного выражения.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Функция, возвращающая часть даты [Минута] для выражения <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Weekday(System.String)">
            <summary>
            Возвращает функцию для определения части даты [День недели] для колонки с заданным псевдонимом. 
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты [День недели] для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Weekday(System.String,System.String)">
            <summary>
            Возвращает функцию для определения части даты [День недели] для колонки с заданным псевдонимом из 
            указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, возвращающая часть даты [День недели] для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> из источника <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Month(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию для определения части даты [Месяц] для переданного выражения.
            </summary> 
            <param name="expression">Выражение.</param>
            <returns>Функция, возвращающая часть даты [Месяц] для выражения <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Year(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию для определения части даты [Год] для переданного выражения колонки.
            </summary>
            <param name="expression">Выражение колонки.</param>
            <returns>Функция, возвращающая часть даты [Год] для выражения <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Year(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию для определения части даты [Год] для переданного выражения.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Функция, возвращающая часть даты [Год] для выражения <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Weekday(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию для определения части даты [День недели] для переданного выражения колонки.
            </summary>
            <param name="expression">Выражение колонки.</param>
            <returns>Функция, возвращающая часть даты [День недели] для выражения колонки 
            <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Weekday(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию для определения части даты [День недели] для переданного выражения.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Функция, возвращающая часть даты [День недели] для выражения <paramref name="expression"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Upper(System.String)">
            <summary>
            Возвращает функцию для преобразования символов значения колонки с заданным псевдонимом к верхнему регистру.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, преобразующая символы значений колонки с псевдонимом <paramref name="sourceColumnAlias"/> 
            к верхнему регистру.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Upper(System.String,System.String)">
            <summary>
            Возвращает функцию для преобразования символов значения колонки с заданным псевдонимом из указанного 
            источника к верхнему регистру.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Функция, преобразующая символы значений колонки с псевдонимом <paramref name="sourceColumnAlias"/> 
            из источника <paramref name="sourceAlias"/> к верхнему регистру.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Upper(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию для преобразования символов значения переданного выражения колонки к верхнему регистру.
            </summary>
            <param name="expression">Выражение колонки.</param>
            <returns>Функция, преобразующая символы значения выражения колонки <paramref name="expression"/> к верхнему 
            регистру.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAdd(Terrasoft.Core.DB.DatePartQueryFunctionInterval,System.Int32,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            часть даты, временной промежуток и псевдоним колонки, содержащей исходное значение даты.
            </summary>
            <param name="interval">Часть даты, к которой добавляется временной промежуток.</param>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, которая содержит исходное значение даты и времени.
            </param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAdd(Terrasoft.Core.DB.DatePartQueryFunctionInterval,System.Int32,System.String,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            часть даты, временой промежуток, псевдоним источника и псевдоним колонки, содержащей исходное значение даты.
            </summary>
            <param name="interval">Часть даты, к которой добавляется временной промежуток.</param>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, которая содержит исходное значение даты и времени.
            </param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAdd(Terrasoft.Core.DB.DatePartQueryFunctionInterval,System.Int32,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            часть даты, временной промежуток и выражение колонки, содержащей исходное значение даты и времени.
            </summary>
            <param name="interval">Часть даты, к которой добавляется временной промежуток.</param>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAdd(Terrasoft.Core.DB.DatePartQueryFunctionInterval,System.Int32,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            часть даты, временной промежуток и выражение колонки, содержащей исходное значение даты и времени.
            </summary>
            <param name="interval">Часть даты, к которой добавляется временной промежуток.</param>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddDay(System.Int32,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и псевдоним колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [День].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddDay(System.Int32,System.String,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток, псевдоним источника и псевдоним колонки, содержащей исходное значение даты и времени. 
            В качестве части даты, к которой добавляется временной промежуток, выступает [День].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddDay(System.Int32,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и выражение колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [День].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddDay(System.Int32,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и выражение колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [День].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddDay(Terrasoft.Core.DB.IQueryColumnExpressionConvertible,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и выражение колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [День].
            </summary>
            <param name="numberExpression">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddWeekday(System.Int32,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и псевдоним колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [День недели].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddWeekday(System.Int32,System.String,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток, псевдоним источника и псевдоним колонки, содержащей исходное значение даты и времени. 
            В качестве части даты, к которой добавляется временной промежуток, выступает [День недели].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddWeekday(System.Int32,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и выражение колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [День недели].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddWeekday(System.Int32,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и выражение колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [День недели].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddWeek(System.Int32,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и псевдоним колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [Неделя].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddWeek(System.Int32,System.String,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток, псевдоним источника и псевдоним колонки, содержащей исходное значение даты и времени. 
            В качестве части даты, к которой добавляется временной промежуток, выступает [Неделя].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddWeek(System.Int32,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и выражение колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [Неделя].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddWeek(System.Int32,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и выражение колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [Неделя].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddMonth(System.Int32,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и псевдоним колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [Месяц].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddMonth(System.Int32,System.String,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток, псевдоним источника и псевдоним колонки, содержащей исходное значение даты и времени. 
            В качестве части даты, к которой добавляется временной промежуток, выступает [Месяц].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddMonth(System.Int32,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и выражение колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [Месяц].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddMonth(System.Int32,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и выражение колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [Месяц]. 
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddYear(System.Int32,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и псевдоним колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [Год].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddYear(System.Int32,System.String,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток, псевдоним источника и псевдоним колонки, содержащей исходное значение даты и времени. 
            В качестве части даты, к которой добавляется временной промежуток, выступает [Год].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddYear(System.Int32,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и выражение колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [Год].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddYear(Terrasoft.Core.DB.IQueryColumnExpressionConvertible,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и выражение колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [Год].
            </summary>
            <param name="numberExpression">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddYear(System.Int32,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и выражение колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [Год].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddHour(System.Int32,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и псевдоним колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной интервал, выступает [Час].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddHour(System.Int32,System.String,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток, псевдоним источника и псевдоним колонки, содержащей исходное значение даты и времени. 
            В качестве части даты, к которой добавляется временной промежуток, выступает [Час].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddHour(System.Int32,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и выражение колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [Час].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateAddHour(System.Int32,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, которой в качестве аргументов передаются 
            временной промежуток и выражение колонки, содержащей исходное значение даты и времени. В качестве части 
            даты, к которой добавляется временной промежуток, выступает [Час].
            </summary>
            <param name="number">Добавляемый временной промежуток.</param>
            <param name="expression">Выражение колонки, содержащей исходное значение даты и времени.</param>
            <returns>Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateDiff(Terrasoft.Core.DB.DateDiffQueryFunctionInterval,Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает функцию определения разницы дат для переданных выражений колонок.
            </summary>
            <param name="interval">Единица измерения разницы дат.</param>
            <param name="startDateExpression">Выражение колонки, содержащей начальную дату.</param>
            <param name="endDateExpression">Выражение колонки, содержащей конечную дату.</param>
            <returns>Функция, возвращающая разницу дат <paramref name="interval"/> для выражений
            <paramref name="startDateExpression"/> и <paramref name="endDateExpression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateDiff(Terrasoft.Core.DB.DateDiffQueryFunctionInterval,Terrasoft.Core.DB.IQueryColumnExpressionConvertible,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Возвращает функцию определения разницы дат для переданных выражений колонок.
            </summary>
            <param name="interval">Единица измерения разницы дат.</param>
            <param name="startDateExpression">Выражение колонки, содержащей начальную дату.</param>
            <param name="endDateExpression">Выражение колонки, содержащей конечную дату.</param>
            <returns>Функция, возвращающая разницу дат <paramref name="interval"/> для выражений
            <paramref name="startDateExpression"/> и <paramref name="endDateExpression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DateDiff(Terrasoft.Core.DB.DateDiffQueryFunctionInterval,System.String,System.String)">
            <summary>
            Возвращает функцию определения разницы дат для переданных выражений колонок.
            </summary>
            <param name="interval">Единица измерения разницы дат.</param>
            <param name="startDateSourceColumnAlias">Псевдоним колонки, содержащей начальное значение даты и времени.
            </param>
            <param name="endDateSourceColumnAlias">Псевдоним колонки, содержащей конечное значение даты и времени.
            </param>
            <returns>Функция, возвращающая разницу дат <paramref name="interval"/> для выражений
            <paramref name="startDateSourceColumnAlias"/> и <paramref name="endDateSourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.DataLength(System.String)">
            <summary>
            Возвращает функцию возврата числа байтов, использованных для представления выражения.
            </summary>
            <param name="columnName">Имя колонки.</param>
            <returns>Функция, вычисляющая длину колонки с названием <paramref name="columnName"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Len(System.String)">
            <summary>
            Returns the function of column value length.
            </summary>
            <param name="columnName">Column name.</param>
            <returns>Function that returns text column value lenght.<paramref name="columnName"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Cast(System.String,Terrasoft.Core.DBDataValueType)">
            <summary>
            Returns the function which casts the column value with specified alias to specified data type.
            </summary>
            <param name="sourceColumnAlias">Alias of the column.</param>
            <param name="dataValueType">Target data type.</param>
            <returns>Function which casts the column value with specified alias <paramref name="sourceColumnAlias"/>
            to specified data type <paramref name="dataValueType"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Cast(System.String,System.String,Terrasoft.Core.DBDataValueType)">
            <summary>
            Returns the function which casts the column value with specified column alias of the table with
            specified table alias to specified data type.
            </summary>
            <param name="sourceAlias">Alias of the source.</param>
            <param name="sourceColumnAlias">Alias of the column.</param>
            <param name="dataValueType">Target data type.</param>
            <returns>Function which casts the column value with specified column alias
            <paramref name="sourceColumnAlias"/> of the table with specified table alias
            <paramref name="sourceAlias"/> to specified data type.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Cast(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DBDataValueType)">
            <summary>
            Returns the function which casts the column expression to specified data type.
            </summary>
            <param name="expression">Column expression.</param>
            <param name="dataValueType">Target data type.</param>
            <returns>Function which casts the expression <paramref name="expression"/> to specified data type 
            <paramref name="dataValueType"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Substring(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the function which gets part of a string.
            </summary>
            <param name="sourceColumnAlias">Alias of the column.</param>
            <param name="start">Substring start position.</param>
            <param name="length">Substring length</param>
            <returns>Function which gets part of a string.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Substring(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns the function which gets part of a string.
            </summary>
            <param name="sourceAlias">Alias of the table.</param>
            <param name="sourceColumnAlias">Alias of the column.</param>
            <param name="start">Substring start position.</param>
            <param name="length">Substring length</param>
            <returns>Function which gets part of a string.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.Substring(Terrasoft.Core.DB.QueryColumnExpression,System.Int32,System.Int32)">
            <summary>
            Returns the function which gets part of a string.
            </summary>
            <param name="expression">Column expression.</param>
            <param name="start">Substring start position.</param>
            <param name="length">Substring length</param>
            <returns>Function which gets part of a string.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.CustomFunction(System.String,Terrasoft.Core.DB.QueryColumnExpressionCollection)">
            <summary>
            Returns custom query instance.
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="expressions">Column expression collection.</param>
            <returns>
            Custom function.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.CustomFunction(System.String,Terrasoft.Core.DB.QueryColumnExpression[])">
            <summary>
            Returns custom query instance.
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="expressions">Column expressions array.</param>
            <returns>
            Custom function.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Func.CustomFunction(System.String,Terrasoft.Core.DB.IQueryColumnExpressionConvertible[])">
            <summary>
            Returns custom query instance.
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="expressions">Column expressions array.</param>
            <returns>
            Custom function.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.SchemaLocalizablePropertyChangeAction">
            <summary>
            Действия с локализированными значениями схемы.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.SchemaLocalizablePropertyChangeAction.Edit">
            <summary>
            Редактирование.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.SchemaLocalizablePropertyChangeAction.Delete">
            <summary>
            Удаление.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.SchemaLocalizablePropertyChangeAction.Rename">
            <summary>
            Переименование.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaLocalizablePropertyChange.Culture">
            <summary>
            Культура.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaLocalizablePropertyChange.SourceUId">
            <summary>
            Уникальный идентификатор.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaLocalizablePropertyChange.Name">
            <summary>
            Имя.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaLocalizablePropertyChange.PropertyName">
            <summary>
            Имя свойства.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaLocalizablePropertyChange.ActionValue">
            <summary>
            Значение действия.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaLocalizablePropertyChange.Action">
            <summary>
            Действие.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ChangedSchemaMethod.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.ChangedSchemaMethod"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.ChangedSchemaMethod.#ctor(System.String,System.Boolean)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.ChangedSchemaMethod"/>.
            </summary>
            <param name="name">Имя метода.</param>
            <param name="isNew">Признак, метод был создан, но еще не опубликован.</param>
        </member>
        <member name="P:Terrasoft.Core.ChangedSchemaMethod.Name">
            <summary>
            Имя метода.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.ChangedSchemaMethod.IsNew">
            <summary>
            Признак, метод был создан, но еще не опубликован.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.GetRegexPropertyNameParser">
            <summary>
            Gets the regular expression searching property names.
            </summary>
            <returns>Regular expression searching property names</returns>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.GetRegexParameterMacros">
            <summary>
            Gets the regular expression searching process parameter macros.
            </summary>
            <returns>Regular expression searching process parameter macros</returns>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.GetRegexConstString">
            <summary>
            Gets the regular expression searching constant strings.
            </summary>
            <returns>Regular expression searching constant strings</returns>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.GetRegexLookupValueMacros">
            <summary>
            Gets the regular expression searching lookup value macros.
            </summary>
            <returns>Regular expression searching lookup value macros</returns>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.GetRegexSysVariableMacros">
            <summary>
            Gets the regular expression searching system variable value macros.
            </summary>
            <returns>Regular expression searching system variable value macros</returns>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.GetRegexSysSettingsMacros">
            <summary>
            Gets the regular expression searching system settings value macros.
            </summary>
            <returns>Regular expression searching system settings value macros</returns>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.GetRegexDateValueMacros">
            <summary>
            Gets the regular expression searching date value macros.
            </summary>
            <returns>Regular expression searching date value macros</returns>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.GetRegexTimeValueMacros">
            <summary>
            Gets the regular expression searching time value macros.
            </summary>
            <returns>Regular expression searching time value macros</returns>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.GetRegexTimeValueMacrosOnly">
            <summary>
            Gets the regular expression searching alone time value macros.
            </summary>
            <returns>Regular expression searching alone time value macros</returns>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.GetRegexDateTimeValueMacros">
            <summary>
            Gets the regular expression searching datetime value macros.
            </summary>
            <returns>Regular expression searching datetime value macros</returns>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.ConvertToCodeSysVariableMacros(Terrasoft.Core.UserConnection,System.Text.StringBuilder)">
            <summary>
            Converts macros of the system variables to C# code.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="code">The C# code <see cref="T:System.Text.StringBuilder"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.ConvertToCodeBooleanMacros(System.Text.StringBuilder)">
            <summary>
            Converts boolean macroses to C# code.
            </summary>
            <param name="sb">The C# code <see cref="T:System.Text.StringBuilder"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.ConvertToCodeSysSettingsMacros(Terrasoft.Core.UserConnection,System.Text.StringBuilder,System.Func{System.String,System.String,System.String})">
            <summary>
            Converts system settings macroses to C# code.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="code">The C# code <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="getCodeConvertionTemplateSysSettings">Optional delegate returns code convertion template
            for system settings. If passed <c>null</c> then used <see cref="M:Terrasoft.Core.GeneratorUtilities.GetCodeConvertionTemplateSysSettings(System.String,System.String)"/>
            </param>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.ConvertToCodeTimeSpanValueMacros(System.Text.StringBuilder)">
            <summary>
            Converts time span value macroses to C# code.
            </summary>
            <param name="sb">The C# code <see cref="T:System.Text.StringBuilder"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.ConvertToCodeDateTimeValueMacros(System.Text.StringBuilder,System.Text.RegularExpressions.Regex)">
            <summary>
            Converts date time value macroses to C# code .
            </summary>
            <param name="sb">The C# code <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="dateTimeRegex">The datetime regular expression.</param>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.ConvertToCodeAllDateTimeValuesMacros(System.Text.StringBuilder)">
            <summary>
            Converts all datetime macroses to C# code.
            </summary>
            <param name="sb">The C# code <see cref="T:System.Text.StringBuilder"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.GeneratorUtilities.ConvertToCodeEntityColumnValueMacros(Terrasoft.Core.UserConnection,System.Text.StringBuilder,System.String)">
            <summary>
            Converts entity column value macros to C# code.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="sb">The C# code <see cref="T:System.Text.StringBuilder"/>.</param>
            <param name="recordIdPath">The "Record Id" parameter path.</param>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaKind">
            <summary>
            Тип схемы.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaKind.General">
            <summary>
            Обычная.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaKind.RecordRight">
            <summary>
            Права по записям.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaKind.TrackChangesInDB">
            <summary>
            Отслеживание изменений по записям.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaKind.Localization">
            <summary>
            Localization schema.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaDBInheritanceType">
            <summary>
            Типы наследования схем на уровне базе данных.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaDBInheritanceType.IndependentTable">
            <summary>
            Независимое наследование. Структура наследника полностью копирует структуру родителя.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaDBInheritanceType.OneToOneParentAssociation">
            <summary>
            Наследование один к одному. Структура наследника не копирует структуру родителя, а ссылается на него и 
            содержит свои специфические колонки.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.IsVirtualAttribute">
            <summary>
            Определяет атрибут виртуальности схемы.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.IsDBViewAttribute">
            <summary>
            Атрибут требует реализации схемы в виде представления на уровне базы данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSettings.SetDefValue(Terrasoft.Core.UserConnection,System.String,System.Object)">
            <summary>
            Устанавливает значение системной настройки по умолчанию.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="code">Код системной настройки.</param>
            <param name="value">Значение системной настройки.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysSettingsValue.SetDefValue(Terrasoft.Core.UserConnection,Terrasoft.Core.Configuration.SysSettings,System.Object)">
            <summary>
            Sets default system setting value.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="settings">System settings.</param>
            <param name="value">System setting value.</param>
        </member>
        <member name="M:Terrasoft.Core.MetaUtilities.GetReadableMetaItemMetaData(Terrasoft.Core.UserConnection,Terrasoft.Core.MetaItem,System.Boolean)">
            <summary>
            Returns item readable meta data.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="metaItem">Meta data source</param>
            <param name="toLowerCamelCase">Flag that indicates how to write property names.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.MetaUtilities.GetReadableMetaData(Terrasoft.Core.UserConnection,System.String,System.Type,System.Boolean)">
            <summary>
            Returns readable meta data.
            </summary>
            <param name="userConnection">User connection.</param>
            <param name="metaData">Initial meta data with meta-idexes.</param>
            <param name="type">Meta data instance type</param>
            <param name="toLowerCamelCase">Flag that indicates how to write property names.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysUserInfo.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Configuration.TimeProvider)">
            <summary>
            Creates a new instance of the <see cref="T:Terrasoft.Core.Configuration.SysUserInfo"/> type.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="timeProvider">The time provider.</param>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysUserInfo.GetCurrentDateTime">
            <summary>
            Returns a <see cref="T:System.DateTime"/> instance that is set to the current date and time on this computer
            which is converted to the time in a specified time zone.
            </summary>
            <returns>The date and time in the destination time zone.</returns>
        </member>
        <member name="M:Terrasoft.Core.Configuration.SysUserInfo.GetTimeZoneOffset">
            <summary>
            Returns Coordinated Universal Time (UTC) offset for current user time.
            </summary>
            <returns>UTC offset for current user time.</returns>
            <remarks>Returned offset reflects whether time falls in time zone's standard time or its daylight 
            saving time.</remarks>
        </member>
        <member name="T:Terrasoft.Core.DB.ICacheableQuery">
            <summary>
            Предоставляет методы и свойства кэшируемого запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.ICacheableQuery.ResetCachedSqlText">
            <summary>
            Очищает кэшированный текст запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.ICacheableQuery.IsCacheEnabled">
            <summary>
            Определяет, кэшируется ли текст запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.ICacheableQuery.CachedSqlText">
            <summary>
            Кэшированный текст запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.BaseInsert.SetParameterValue(System.String,System.Object)">
            <summary>
            Sets insert query parameter value.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="T:Terrasoft.Core.DB.Column">
            <summary>
            Предоставляет служебные методы для работы с выражениями колонок запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.SourceColumn(System.String)">
            <summary>
            Возвращает выражение для колонки запроса с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки запроса.</param>
            <returns>Выражение колонки запроса с псевдонимом <paramref name="sourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.SourceColumn(System.String,System.String)">
            <summary>
            Возвращает выражение для колонки запроса с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним колонки запроса.</param>
            <param name="sourceColumnAlias">Псевдоним источника.</param>
            <returns>Выражение для колонки запроса с псевдонимом <paramref name="sourceAlias"/> из источника 
            <paramref name="sourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.Asterisk">
            <summary>
            Возвращает выражение типа [Все колонки].
            </summary>
            <returns>Выражение типа [Все колонки].</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.Asterisk(System.String)">
            <summary>
            Возвращает выражение типа [Все колонки] для источника с заданным псевдонимом.
            </summary>
            <param name="sourceAlias">Псевдоним источника данных.</param>
            <returns>Выражение типа [Все колонки] для данных с псевдонимом <paramref name="sourceAlias"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.Const(System.Object)">
            <summary>
            Возвращает выражение типа [Константа] для переданного значения.
            </summary>
            <param name="value">Значение, для которого создается выражение.</param>
            <returns>Выражение типа [Константа] для значения <paramref name="value"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.Parameter(System.Object)">
            <summary>
            Возвращает выражение типа [Параметр] с заданным значением.
            </summary>
            <param name="value">Значение параметра.</param>
            <returns>Выражение типа [Параметр] со значением <paramref name="value"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.Parameter(System.Object,System.String,Terrasoft.Common.ParameterDirection)">
            <summary>
            Возвращает выражение типа [Параметр] с заданными значением, именем и направлением передачи параметра.
            </summary>
            <param name="value">Значение параметра.</param>
            <param name="name">Имя параметра.</param>
            <param name="direction">Направление передачи параметра.</param>
            <returns>Выражение типа [Параметр] с именем <paramref name="name"/>, значением 
            <paramref name="value"/> и направлением передачи <paramref name="direction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.Parameter(System.IO.Stream)">
            <summary>
            Возвращает выражение типа [Параметр] с заданным значением.
            </summary>
            <param name="streamValue">Значение параметра.</param>
            <returns>Выражение типа [Параметр] со значением <paramref name="streamValue"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.Parameter(System.Object,Terrasoft.Core.DataValueType)">
            <summary>
            Возвращает выражение типа [Параметр] с заданным значением заданного типа данных.
            </summary>
            <param name="value">Значение параметра.</param>
            <param name="parameterType">Тип данных значения параметра.</param>
            <returns>Выражение типа [Параметр] со значением <paramref name="value"/> типа данных 
            <paramref name="parameterType"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.Parameter(System.Object,System.String)">
            <summary>
            Возвращает выражение типа [Параметр] с заданным значением типа данных с указанным именем.
            </summary>
            <param name="value">Значение параметра.</param>
            <param name="parameterTypeName">Имя типа данных значения параметра.</param>
            <returns>Выражение типа [Параметр] со значением <paramref name="value"/>, которое имеет тип данных с именем 
            <paramref name="parameterTypeName"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.Parameters``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Возвращает выражение типа [Параметр] со значениями из заданного перечислителя.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="values">Перечислитель значений параметров.</param>
            <returns>Выражение типа [Параметр] со значениями из перечислителя <paramref name="values"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.Parameters(System.Object[])">
            <summary>
            Возвращает выражение типа [Параметр] со значениями из переданного массива.
            </summary>
            <param name="values">Массив значений параметров.</param>
            <returns>Выражение типа [Параметр] со значениями из массива <paramref name="values"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.SubSelect(Terrasoft.Core.DB.Select)">
            <summary>
            Возвращает выражение типа [Подзапрос] для переданного подзапроса на выборку.
            </summary>
            <param name="select">Подзапрос на выборку.</param>
            <returns>Выражение типа [Подзапрос] для подзапроса на выборку <paramref name="select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.SubSelect(Terrasoft.Core.DB.Query)">
            <summary>
            Возвращает выражение типа [Подзапрос] для переданного произвольного подзапроса.
            </summary>
            <param name="selectQuery">Произвольный подзапрос.</param>
            <returns>Выражение типа [Подзапрос] для произвольного подзапроса <paramref name="selectQuery"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Column.SqlText(System.String)">
            <summary>
            Возвращает выражение типа [Sql-текст] для заданного текста.
            </summary>
            <param name="value">Текст.</param>
            <returns>Выражение типа [Sql-текст] для текста <paramref name="value"/>.</returns>
        </member>
        <member name="T:Terrasoft.Core.DB.SchemaDBActionMessageEventArgs">
            <summary>
            Provides message about action for entity schema structure changing.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.SchemaDBActionMessageEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates instance of <see cref="T:Terrasoft.Core.DB.SchemaDBActionMessageEventArgs"/>.
            </summary>
            <param name="schemaName">Schema name.</param>
            <param name="message">Message.</param>
        </member>
        <member name="P:Terrasoft.Core.DB.SchemaDBActionMessageEventArgs.SchemaName">
            <summary>
            Schema name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.SchemaDBActionMessageEventArgs.Message">
            <summary>
            Message.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.DBMetaScript.GetIsDBLevelRequirementTypeColumn(Terrasoft.Core.Entities.EntitySchema,Terrasoft.Core.Entities.EntitySchemaColumn)">
            <summary>
            Determines if column value is required on database level.
            </summary>
            <param name="entitySchema">Schema.</param>
            <param name="entitySchemaColumn">Column in schema.</param>
            <returns>Value that indicates whether column value is required on database level.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.DBMetaScript.GetIsDefValueTypeColumn(Terrasoft.Core.Entities.EntitySchema,Terrasoft.Core.Entities.EntitySchemaColumn)">
            <summary>
            Determines if column is of type that requires default value.
            </summary>
            <param name="entitySchema">Schema.</param>
            <param name="entitySchemaColumn">Column in schema.</param>
            <returns>Value that indicates whether column is of type that requires default value.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.DBMetaScript.GetForeignKeysDataReader(Terrasoft.Core.DB.DBExecutor,System.String)">
            <summary>
            Returns foreign keys data reader.
            </summary>
            <param name="dbExecutor">Instance of <see cref="T:Terrasoft.Core.DB.DBExecutor"/>. Provides DB query execution.</param>
            <param name="entitySchemaName">Schema name to get foreign keys for.</param>
            <returns><see cref="T:System.Data.IDataReader"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.DBMetaScript.GetIsForeignKeyCascade(System.Data.IDataReader)">
            <summary>
            Determines whether foreign key is cascade.
            </summary>
            <param name="dataReader">>Instance of <see cref="T:Terrasoft.Core.DataReader"/> to read property.</param>
            <returns><c>true</c> if foreign key is cascade. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.DBMetaScript.GetIsIndexUnique(System.Data.IDataReader)">
            <summary>
            Determines whether index is unique.
            </summary>
            <param name="dataReader">>Instance of <see cref="T:Terrasoft.Core.DataReader"/> to read property.</param>
            <returns><c>true</c> if index is unique. Otherwise returns <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.DBMetaScript.AddEntitySchemaBaseStructureSavingActions(Terrasoft.Core.DB.DBMetaActionCollection,Terrasoft.Core.Entities.EntitySchema)">
            <summary>
            Adds saving actions for schema structure.
            </summary>
            <param name="actions">Actions.</param>
            <param name="entitySchema">Schema.</param>
        </member>
        <member name="T:Terrasoft.Core.DB.QueryJoinRightLevel">
            <summary>Условия наложения прав при использовании связанных таблиц, 
            если схема администрируется по записям.</summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryJoinRightLevel.EnabledAlways">
            <summary>Всегда</summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryJoinRightLevel.EnabledForAdditionalColumns">
            <summary>Накладывать только если из связанной схемы в запросе используются колонки отличные первичной 
            (PrimaryColumn) и первичной для отображения</summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryJoinRightLevel.Disabled">
            <summary>Никогда не накладывать</summary>
        </member>
        <member name="T:Terrasoft.Core.DB.IQueryExpression">
            <summary>
            Предоставляет методы и свойства выражения запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.IQueryExpression.Alias">
            <summary>
            Псевдоним выражения запроса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.JoinType">
            <summary>
            Вид оператора Join.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.JoinType.Inner">
            <summary>
            Внутреннее соединение.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.JoinType.LeftOuter">
            <summary>
            Левое внешнее соединение.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.JoinType.RightOuter">
            <summary>
            Правое внешнее соединение.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.JoinType.FullOuter">
            <summary>
            Полное соединение.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.JoinType.Cross">
            <summary>
            Перекрестное соединение.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.Join">
            <summary>
            Оператор Join запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Join.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Join.#ctor(Terrasoft.Core.DB.Query)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.Join"/> для заданного родительского запроса.
            </summary>
            <param name="parentQuery">Родительский запрос.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Join.#ctor(Terrasoft.Core.DB.Select,Terrasoft.Core.DB.JoinType)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.Join"/> указанного типа для заданного родительского запроса.
            </summary>
            <param name="parentSelect">Родительский запрос.</param>
            <param name="joinType">Тип оператора <c>Join</c>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Join.#ctor(Terrasoft.Core.DB.Join)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, являющийся клоном переданного оператора <c>Join</c>.
            </summary>
            <param name="source">Оператор <c>Join</c>, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Join.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.Join"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, представляющий копию текущего экземпляра.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Join.As(System.String)">
            <summary>
            Устанавливает псевдоним источника данных оператора Join. 
            </summary>
            <param name="alias">Псевдоним, устанавливаемый источнику данных оператора <c>Join</c>.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Join.On">
            <summary>
            К текущему оператору <c>Join</c> добавляет пустое условие.
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие оператора.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Join.On(System.String)">
            <summary>
            К текущему оператору <c>Join</c> добавляет условие для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие оператора.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Join.On(System.String,System.String)">
            <summary>
            К текущему оператору <c>Join</c> добавляет условие для колонки с заданным псевдонимом из указанного 
            источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие оператора.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Join.On(Terrasoft.Core.DB.Select)">
            <summary>
            К текущему оператору <c>Join</c> добавляет условие для переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие оператора.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Join.On(Terrasoft.Core.DB.Query)">
            <summary>
            К текущему оператору <c>Join</c> добавляет условие для переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие оператора.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Join.On(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            К текущему оператору <c>Join</c> добавляет условие для переданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие оператора.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Join.On(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            К текущему оператору <c>Join</c> добавляет условие для переданного выражения колонки запроса.
            </summary>
            <param name="columnExpression">Выражение колонки запроса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.Join.SourceExpression">
            <summary>
            Источник данных, присоединяемый оператором <c>Join</c>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Join.Condition">
            <summary>
            Условие оператора <c>Join</c>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Join.JoinType">
            <summary>
            Тип оператора <c>Join</c>.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.JoinCollection">
            <summary>
            Коллекция операторов <c>Join</c> запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.JoinCollection.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.JoinCollection"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.JoinCollection.#ctor(Terrasoft.Core.DB.JoinCollection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.JoinCollection"/>, являющийся клоном переданной коллекции 
            операторов <c>Join</c>.
            </summary>
            <param name="source">Коллекция операторов <c>Join</c>, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.JoinCollection.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.JoinCollection"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.JoinCollection"/>, представляющий копию текущего экземпляра.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.JoinCollection.FindByAlias(System.String)">
            <summary>
            В текущей коллекции операторов <c>Join</c> осуществляет поиск оператора по заданному псевдониму 
            присоединяемого источника данных.
            </summary>
            <param name="alias">Псевдоним источника данных, присоединяемый искомым оператором.</param>
            <returns>Экземпляр оператора <see cref="T:Terrasoft.Core.DB.Join"/> с псевдонимом источника данных <paramref name="alias"/> 
            либо <c>null</c>, если оператор не найден.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.JoinCollection.GetByAlias(System.String)">
            <summary>
            Из текущей коллекции операторов <c>Join</c> возвращает оператор с заданным псевдонимом присоединяемого 
            источника данных. Если оператор не найден в коллекции, генерируется исключение. 
            </summary>
            <param name="alias">Псевдоним источника данных, присоединяемый оператором <c>Join</c>.</param>
            <returns>Экземпляр оператора <see cref="T:Terrasoft.Core.DB.Join"/> с псевдонимом источника данных <paramref name="alias"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если в текущей коллекции операторов <c>Join</c> не найден оператор 
            с псевдонимом источника данных <paramref name="alias"/>.</exception>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="alias"/> передано 
            пустое значение или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.JoinCollection.Exists(System.String)">
            <summary>
            Определяет, есть ли в текущей коллекции оператор <c>Join</c> с заданным псевдонимом присоединяемого 
            источника данных.
            </summary>
            <param name="alias">Псевдоним источника данных, присоединяемого искомым оператором.</param>
            <returns><c>true</c>, если в текущей коллекции операторов есть оператор, присоединяющий источник данных с 
            псевдонимом <paramref name="alias"/>; иначе - <c>false</c>.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.ModifyQuerySource.Hints">
            <summary>
            Коллекция табличных указаний.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.ModifyQuerySource.HasHints">
            <summary>
            Признак, определяющий, что существуют табличные указания.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.OrderByItem">
            <summary>
            Представляет выражение, по которому выполняется сортировка результатов запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.OrderByItem.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.OrderByItem"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.OrderByItem.#ctor(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Common.OrderDirectionStrict)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.OrderByItem"/> для заданного выражения колонки с указанным 
            порядком сортировки.
            </summary>
            <param name="expression">Выражение колонки, по которому выполняется сортировка.</param>
            <param name="direction">Порядок сортировки.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.OrderByItem.#ctor(Terrasoft.Core.DB.OrderByItem)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.OrderByItem"/>, являющийся клоном переданного выражения.
            </summary>
            <param name="source">Выражение, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.OrderByItem.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.OrderByItem"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.OrderByItem"/>, представляющий копию текущего экземпляра.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.OrderByItem.Expression">
            <summary>
            Выражение колонки, по которому выполняется сортировка.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.OrderByItem.Direction">
            <summary>
            Порядок сортировки.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.OrderByItemCollection">
            <summary>
            Коллекция выражений, по которым выполняется сортировка результатов запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.OrderByItemCollection.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.OrderByItemCollection"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.OrderByItemCollection.#ctor(Terrasoft.Core.DB.OrderByItemCollection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.OrderByItemCollection"/>, являющийся копией переданной коллекцией 
            выражений для сортировки.
            </summary>
            <param name="source">Коллекция выражений для сортировки, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.OrderByItemCollection.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.OrderByItemCollection"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.OrderByItemCollection"/>, представляющий копию текущего экземпляра.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.DB.Query">
            <summary>
            Базовый класс запроса к базе данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.GetSqlText">
            <summary>
            Возвращает текст запроса.
            </summary>
            <returns>Текст запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.BuildSqlText(System.Text.StringBuilder)">
            <summary>
            Строит текст запроса, используя переданный экземпляр <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется 
            текст запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.Query"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>, представляющий копию текущего экземпляра.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Execute">
            <summary>
            Выполняет текст запроса и возвращает количество строк, задействованных при выполнении запроса.
            </summary>
            <returns>Количество строк, задействованных при выполнении запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Execute(Terrasoft.Core.DB.DBExecutor)">
            <summary>
            Выполняет текст запроса, используя заданный экземпляр <see cref="T:Terrasoft.Core.DB.DBExecutor"/>, и возвращает число строк, 
            задействованных при выполнении запроса.
            </summary>
            <param name="dbExecutor">Экземпляр <see cref="T:Terrasoft.Core.DB.DBExecutor"/>, с помощью которого выполняется запрос.</param>
            <returns>Количество строк, задействованных при выполнении запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.GetUsingParameters">
            <summary>
            Возвращает коллекцию параметров запроса.
            </summary>
            <returns>Коллекция параметров запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.ResetParameters">
            <summary>
            Очищает коллекцию параметров запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.InitializeParameters">
            <summary>
            Инициализация параметров запроса.
            </summary>
            <returns>Коллекция проинициализированных параметров запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Terrasoft#Core#DB#IParametrizedQuery#InitializeParameters">
            <summary>
            Инициализация параметров запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Join(Terrasoft.Core.DB.JoinType,System.String)">
            <summary>
            Связывает с текущим запросом указанную схему, используя заданный тип соединения.
            </summary>
            <param name="joinType">Тип соединения.</param>
            <param name="schemaName">Имя связываемой схемы.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом схему с именем 
            <paramref name="schemaName"/>, используя тип соединения <paramref name="joinType"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Join(Terrasoft.Core.DB.JoinType,Terrasoft.Core.DB.Select)">
            <summary>
            Связывает с текущим запросом указанный подзапрос на выборку данных, используя заданный тип соединения.
            </summary>
            <param name="joinType">Тип соединения.</param>
            <param name="subSelect">Связываемый подзапрос на выборку данных.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом подзапрос на 
            выборку данных <paramref name="subSelect"/>, используя тип соединения <paramref name="joinType"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Join(Terrasoft.Core.DB.JoinType,Terrasoft.Core.DB.Query)">
            <summary>
            Связывает с текущим запросом указанный произвольный подзапрос, используя заданный тип соединения.
            </summary>
            <param name="joinType">Тип соединения.</param>
            <param name="subSelectQuery">Связываемый произвольный подзапрос.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом произвольный 
            подзапрос <paramref name="subSelectQuery"/>, используя тип соединения <paramref name="joinType"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Join(Terrasoft.Core.DB.JoinType,Terrasoft.Core.DB.QuerySourceExpression)">
            <summary>
            Связывает с текущим запросом указанное выражение, используя заданный тип соединения.
            </summary>
            <param name="joinType">Тип соединения.</param>
            <param name="sourceExpression">Связываемое выражение.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом выражение 
            <paramref name="sourceExpression"/>, используя тип соединения <paramref name="joinType"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.InnerJoin(System.String)">
            <summary>
            Связывает с текущим запросом указанную схему, используя внутреннее соединение.
            </summary>
            <param name="schemaName">Имя связываемой схемы.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом схему с именем 
            <paramref name="schemaName"/>, используя внутреннее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.InnerJoin(Terrasoft.Core.DB.Select)">
            <summary>
            Связывает с текущим запросом указанный подзапрос на выборку, используя внутреннее соединение.
            </summary>
            <param name="subSelect">Связываемый подзапрос на выборку.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом подзапрос на 
            выборку <paramref name="subSelect"/>, используя внутреннее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.InnerJoin(Terrasoft.Core.DB.Query)">
            <summary>
            Связывает с текущим запросом указанный произвольный подзапрос, используя внутреннее соединение. 
            </summary>
            <param name="subSelectQuery">Связываемый произвольный подзапрос.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом произвольный 
            подзапрос <paramref name="subSelectQuery"/>, используя внутреннее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.InnerJoin(Terrasoft.Core.DB.QuerySourceExpression)">
            <summary>
            Связывает с текущим запросом указанное выражение, используя внутреннее соединение.
            </summary>
            <param name="sourceExpression">Связываемое выражение.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом выражение 
            <paramref name="sourceExpression"/>, используя внутреннее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.LeftOuterJoin(System.String)">
            <summary>
            Связывает с текущим запросом схему с указанным именем, используя левое внешнее соединение.
            </summary>
            <param name="schemaName">Имя связываемой схемы.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом схему с именем 
            <paramref name="schemaName"/>, используя левое внешнее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.LeftOuterJoin(Terrasoft.Core.DB.Select)">
            <summary>
            Связывает с текущим запросом указанный подзапрос на выборку, используя левое внешнее соединение.
            </summary>
            <param name="subSelect">Связываемый подзапрос на выборку.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом подзапрос на 
            выборку <paramref name="subSelect"/>, используя левое внешнее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.LeftOuterJoin(Terrasoft.Core.DB.Query)">
            <summary>
            Связывает с текущим запросом указанный произвольный подзапрос, используя левое внешнее соединение.
            </summary>
            <param name="subSelectQuery">Связываемый произвольный подзапрос.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом произвольный 
            подзапрос <paramref name="subSelectQuery"/>, используя левое внешнее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.LeftOuterJoin(Terrasoft.Core.DB.QuerySourceExpression)">
            <summary>
            Связывает с текущим запросом указанное выражение, используя левое внешнее соединение.
            </summary>
            <param name="sourceExpression">Связываемое выражение.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом выражение 
            <paramref name="sourceExpression"/>, используя левое внешнее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.RightOuterJoin(System.String)">
            <summary>
            Связывает с текущим запросом схему с указанным именем, используя правое внешнее соединение.
            </summary>
            <param name="schemaName">Имя связываемой схемы.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом схему с именем 
            <paramref name="schemaName"/>, используя правое внешнее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.RightOuterJoin(Terrasoft.Core.DB.Select)">
            <summary>
            Связывает с текущим запросом указанный произвольный подзапрос, используя правое внешнее соединение.
            </summary>
            <param name="subSelect">Связываемый произвольный подзапрос.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом произвольный 
            подзапрос <paramref name="subSelect"/>, используя правое внешнее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.RightOuterJoin(Terrasoft.Core.DB.Query)">
            <summary>
            Связывает с текущим запросом указанный подзапрос на выборку, используя правое внешнее соединение.
            </summary>
            <param name="subSelectQuery">Связываемый подзапрос на выборку.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом подзапрос на 
            выборку <paramref name="subSelectQuery"/>, используя правое внешнее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.RightOuterJoin(Terrasoft.Core.DB.QuerySourceExpression)">
            <summary>
            Связывает с текущим запросом указанное выражение, используя правое внешнее соединение.
            </summary>
            <param name="sourceExpression">Связываемое выражение.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом выражение 
            <paramref name="sourceExpression"/>, используя правое внешнее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.FullOuterJoin(System.String)">
            <summary>
            Связывает с текущим запросом схему с указанным именем, используя полное внешнее соединение.
            </summary>
            <param name="schemaName">Имя связываемой схемы.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом схему с именем 
            <paramref name="schemaName"/>, используя полное внешнее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.FullOuterJoin(Terrasoft.Core.DB.Select)">
            <summary>
            Связывает с текущим запросом указанный подзапрос на выборку, используя полное внешнее соединение.
            </summary>
            <param name="subSelect">Связываемый подзапрос на выборку.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом подзапрос на 
            выборку <paramref name="subSelect"/>, используя полное внешнее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.FullOuterJoin(Terrasoft.Core.DB.Query)">
            <summary>
            Связывает с текущим запросом указанный произвольный подзапрос, используя полное внешнее соединение.
            </summary>
            <param name="subSelectQuery">Связываемый произвольный подзапрос.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом произвольный 
            подзапрос <paramref name="subSelectQuery"/>, используя полное внешнее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.FullOuterJoin(Terrasoft.Core.DB.QuerySourceExpression)">
            <summary>
            Связывает с текущим запросом указанное выражение, используя полное внешнее соединение.
            </summary>
            <param name="sourceExpression">Связываемое выражение.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Join"/>, связывающий с текущим запросом выражение 
            <paramref name="sourceExpression"/>, используя полное внешнее соединение.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Where">
            <summary>
            Добавляет в текущий запрос пустое начальное условие.
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющее пустое начальное условие текущего запроса.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Where(System.String)">
            <summary>
            Добавляет в текущий запрос начальное условие для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки, для которой добавляется условие.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющее начальное условие для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Where(System.String,System.String)">
            <summary>
            Добавляет в текущий запрос начальное условие для колонки с заданным псевдонимом из заданного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий начальное условие для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> из источника с псевдонимом <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Where(Terrasoft.Core.DB.Select)">
            <summary>
            Добавляет в текущий запрос в начальное условие для результатов переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку, для результатов которого добавляется начальное условие.
            </param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий начальное условие для результатов 
            подзапроса на выборку <paramref name="subSelect"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Where(Terrasoft.Core.DB.Query)">
            <summary>
            Добавляет в текущий запрос начальное условие для результатов произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос, для результатов которого добавляется начальное условие.
            </param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий начальное условие для результатов 
            произвольного подзапроса <paramref name="subSelectQuery"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Where(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            Добавляет в текущий запрос начальное условие для переданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий начальное условие для параметра 
            запроса <paramref name="parameter"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Where(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Добавляет в текущий запрос начальное условие для значения переданного выражения. 
            </summary>
            <param name="columnExpression">Выражение, для значения которого добавляется начальное условие.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий начальное условие в виде выражения 
            <paramref name="columnExpression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Where(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Добавляет в текущий запрос начальное условие для значения переданного выражения.
            </summary>
            <param name="expression">Выражение, для значения которого добавляется начальное условие.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий начальное условие для значения выражения 
            <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Where(Terrasoft.Core.DB.QueryCondition)">
            <summary>
            Добавляет в текущий запрос в качестве начального условия переданное условие.
            </summary>
            <param name="condition">Условие запроса, добавляемое в качестве корневого условия к текущему запросу.
            </param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.And">
            <summary>
            К текущему условию запроса добавляет пустое условие, используя логическую операцию И. 
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.And(System.String)">
            <summary>
            К текущему условию запроса добавляет предикат для колонки с заданным псеводнимом, используя логическую 
            операцию И.
            </summary>
            <param name="sourceColumnAlias"></param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.And(System.String,System.String)">
            <summary>
            К текущему условию запроса добавляет предикат для колонки с заданным псевдонимом из указанного источника, 
            используя логическую операцию И.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.And(Terrasoft.Core.DB.Select)">
            <summary>
            К текущему условию запроса добавляет в качестве предиката переданный подзапрос на выборку, используя 
            логическую операцию И.
            </summary>
            <param name="subSelect">Подзапрос на выборку, добавляемый в качестве предиката в условие запроса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.And(Terrasoft.Core.DB.Query)">
            <summary>
            К текущему условию запроса добавляет в качестве предиката переданный запрос, используя 
            логическую операцию И.
            </summary>
            <param name="subSelectQuery">Запрос, добавляемый в качестве предиката в условие запроса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.And(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            К текущему условию запроса добавляет предикат для переданного параметра запроса, используя логическую 
            операцию И.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.And(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            К текущему условию запроса добавляет в качестве предиката переданное выражение.
            </summary>
            <param name="columnExpression">Выражение, добавляемое в качестве предиката в условие запроса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.And(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            К текущему условию запроса добавляет в качестве предиката переданное выражение, используя логическую 
            операцию И.
            </summary>
            <param name="expression">Выражение, добавляемое в качестве предиката в условие запроса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.And(Terrasoft.Core.DB.QueryCondition)">
            <summary>
            К текущему условию запроса добавляет в качестве предиката переданное условие запроса, используя логическую 
            операцию И.
            </summary>
            <param name="condition">Условие запроса, добавляемое в качестве предиката.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Or">
            <summary>
            К текущему условию запроса добавляет пустое условие, используя логическую операцию ИЛИ.
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Or(System.String)">
            <summary>
            К текущему условию запроса добавляет предикат для колонки с заданным псевдонимом, используя логическую 
            операцию ИЛИ.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Or(System.String,System.String)">
            <summary>
            К текущему условию запроса добавляет предикат для колонки с заданным псевдонимом из указанного источника, 
            используя логическую операцию ИЛИ.
            </summary>
            <param name="sourceAlias">Псевдоним колонки.</param>
            <param name="sourceColumnAlias">Псевдоним источника.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Or(Terrasoft.Core.DB.Select)">
            <summary>
            К текущему условию запроса добавляет в качестве предиката переданный подзапрос на выборку, используя 
            логическую операцию ИЛИ.
            </summary>
            <param name="subSelect">Подзапрос на выборку, добавляемый в качестве предиката в условие запроса. </param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Or(Terrasoft.Core.DB.Query)">
            <summary>
            К текущему условию запроса добавляет в качестве предиката переданный подзапрос, используя логическую 
            операцию ИЛИ.
            </summary>
            <param name="subSelectQuery">Подзапрос, добавляемый в качестве предиката в условие запроса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Or(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            К текущему условию запроса добавляет предикат для переданного параметра запроса, используя логическую 
            операцию ИЛИ.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Or(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            К текущему условию запросу добавляет в качестве предиката переданное выражение, используя логическую 
            операцию ИЛИ.
            </summary>
            <param name="columnExpression">Выражение, добавляемое в качестве предиката в условие запроса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Or(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            К текущему условию запроса добавляет в качестве предиката переданное выражение, используя логическую 
            операцию ИЛИ.
            </summary>
            <param name="expression">Выражение, добавляемое в качестве предиката в условие запроса.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Or(Terrasoft.Core.DB.QueryCondition)">
            <summary>
            К текущему условию запроса добавляет в качестве предиката переданное условие запроса, используя логическую 
            операцию ИЛИ.
            </summary>
            <param name="condition">Условие запроса, добавляемое в качестве предиката.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.AddCondition(Terrasoft.Common.LogicalOperation)">
            <summary>
            К текущему условию запроса добавляет пустое условие, используя указанную логическую операцию.
            </summary>
            <param name="logicalOperation">Логическая операция, с помощью которой добавляется условие.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если в качестве параметра <paramref name="logicalOperation"/> 
            передается неопределенный тип логической операции.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.AddCondition(System.String,Terrasoft.Common.LogicalOperation)">
            <summary>
            К текущему условию запроса добавляет предикат для колонки с заданным псевдонимом, используя указанную 
            логическую операцию.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <param name="logicalOperation">Логическая операция, с помощью которой добавляется предикат.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если в качестве параметра <paramref name="logicalOperation"/> 
            передается неопределенный тип логической операции.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.AddCondition(System.String,System.String,Terrasoft.Common.LogicalOperation)">
            <summary>
            К текущему условию запроса добавляет предикат для колонки с заданным псевдонимом из указанного источника, 
            используя указанную логическую операцию.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <param name="logicalOperation">Логическая операция, с помощью которой добавляется предикат.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если в качестве параметра <paramref name="logicalOperation"/> 
            передается неопределенный тип логической операции.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.AddCondition(Terrasoft.Core.DB.Select,Terrasoft.Common.LogicalOperation)">
            <summary>
            К текущему условию запроса добавляет в качестве предиката переданный подзапрос на выборку, используя 
            заданную логическую операцию. 
            </summary>
            <param name="subSelect">Подзапрос на выборку, который добавляется в качестве предиката в условие запроса.
            </param>
            <param name="logicalOperation">Логическая операция, с помощью которой добавляется предикат.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если в качестве параметра <paramref name="logicalOperation"/> 
            передается неопределенный тип логической операции.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.AddCondition(Terrasoft.Core.DB.Query,Terrasoft.Common.LogicalOperation)">
            <summary>
            К текущему условию запроса добавляет в качестве предиката переданный подзапрос, используя указанную 
            логическую операцию.
            </summary>
            <param name="subSelectQuery">Подзапрос, который добавляется в качестве предиката к условию запроса.</param>
            <param name="logicalOperation">Логическая операция, с помощью которой добавляется предикат.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если в качестве параметра <paramref name="logicalOperation"/> 
            передается неопределенный тип логической операции.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.AddCondition(Terrasoft.Core.DB.QueryParameter,Terrasoft.Common.LogicalOperation)">
            <summary>
            К текущему условию запроса добавляет предикат для переданного параметра запроса, используя указанный тип 
            логической операции.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <param name="logicalOperation">Логическая операция, с помощью которой добавляется предикат.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если в качестве параметра <paramref name="logicalOperation"/> 
            передается неопределенный тип логической операции.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.AddCondition(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Common.LogicalOperation)">
            <summary>
            К текущему условию запроса добавляет в качестве предиката переданное выражение, используя указанную 
            логическую операцию.
            </summary>
            <param name="columnExpression">Выражение, добавляемое в качестве предиката в условие запроса.</param>
            <param name="logicalOperation">Логическая операция, с помощью которой добавляется предикат.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если в качестве параметра <paramref name="logicalOperation"/> 
            передается неопределенный тип логической операции.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.AddCondition(Terrasoft.Core.DB.IQueryColumnExpressionConvertible,Terrasoft.Common.LogicalOperation)">
            <summary>
            К текущему условию запроса добавляет в качестве предиката переданное выражение, используя указанную 
            логическую операцию.
            </summary>
            <param name="expression">Выражение, добавляемое в качестве предиката в условие запроса.</param>
            <param name="logicalOperation">Логическая операция, с помощью которой добавляется предикат.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий результирующее условие запроса.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если в качестве параметра <paramref name="logicalOperation"/> 
            передается неопределенный тип логической операции.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.AddCondition(Terrasoft.Core.DB.QueryCondition,Terrasoft.Common.LogicalOperation)">
            <summary>
            К текущему условию запроса добавляет в качестве предиката переданное условие запроса, используя указанную 
            логическую операцию.
            </summary>
            <param name="condition">Условие запроса, добавляемое в качестве предиката.</param>
            <param name="logicalOperation">Логическая операция, с помощью которой добавляется предикат.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если в качестве параметра <paramref name="logicalOperation"/> 
            передается неопределенный тип логической операции.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.CloseBlock">
            <summary>
            Закрывает блок условий запроса.
            </summary>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если условие запроса не содержит открытых блоков.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderBy(Terrasoft.Common.OrderDirectionStrict,System.String)">
            <summary>
            Выполняет сортировку результатов запроса в указанном порядке по колонке с заданным псевдонимом.
            </summary>
            <param name="direction">Порядок сортировки результатов запроса.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, по которой выполняется сортировка.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderBy(Terrasoft.Common.OrderDirectionStrict,System.String,System.String)">
            <summary>
            Выполняет сортировку результатов запроса в указанном порядке по колонке с заданным псевдонимом из заданного 
            источника.
            </summary>
            <param name="direction">Порядок сортировки результатов запроса.</param>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, по которой выполняется сортировка.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderBy(Terrasoft.Common.OrderDirectionStrict,Terrasoft.Core.DB.QueryFunction)">
            <summary>
            Выполняет сортировку результатов запроса в указанном порядке, используя в качестве ключа сортировки 
            значение переданной функции.
            </summary>
            <param name="direction">Порядок сортировки результатов запроса.</param>
            <param name="queryFunction">Функция, значение которой используется в качестве ключа сортировки.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderBy(Terrasoft.Common.OrderDirectionStrict,Terrasoft.Core.DB.Select)">
            <summary>
            Выполняет сортировку результатов запроса в указанном порядке, используя в качестве ключа сортировки 
            результаты переданного подзапроса на выборку.
            </summary>
            <param name="direction">Порядок сортировки.</param>
            <param name="subSelect">Подзапрос на выборку, результаты которого используются в качестве ключа сортировки.
            </param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderBy(Terrasoft.Common.OrderDirectionStrict,Terrasoft.Core.DB.Query)">
            <summary>
            Выполняет сортировку результатов запроса в указанном порядке, используя в качестве ключа запроса результаты 
            переданного произвольного подзапроса.
            </summary>
            <param name="direction">Порядок сортировки результатов запроса.</param>
            <param name="subSelectQuery">Произвольный подзапрос, результаты которого используются в качестве ключа 
            сортировки.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderBy(Terrasoft.Common.OrderDirectionStrict,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Выполняет сортировку результатов запроса в указанном порядке, используя в качестве ключа сортировки 
            значение переданного выражения.
            </summary>
            <param name="direction">Порядок сортировки результатов запроса.</param>
            <param name="columnExpression">Выражение, значение которого используется в качестве ключа сортировки.
            </param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderBy(Terrasoft.Common.OrderDirectionStrict,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Выполняет сортировку результатов запроса в указанном порядке, используя в качестве ключа сортировки 
            значение переданного выражения.
            </summary>
            <param name="direction">Порядок сортировки результатов запроса.</param>
            <param name="expression">Выражение, значение которого используется в качестве ключа сортировки.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderByAsc(System.String)">
            <summary>
            Выполняет сортировку результатов запроса в порядке возрастания по колонке с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки, по которой выполняется сортировка.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderByAsc(System.String,System.String)">
            <summary>
            Выполняет сортировку результатов запроса в порядке возрастания по колонке с заданным псевдонимом из 
            указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, по которой выполняется сортировка.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderByAsc(Terrasoft.Core.DB.Select)">
            <summary>
            Выполняет сортировку результатов запроса в порядке возрастания, используя в качестве ключа сортировки 
            результаты переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку, результаты которого используются в качестве ключа сортировки.
            </param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderByAsc(Terrasoft.Core.DB.Query)">
            <summary>
            Выполняет сортировку результатов запроса в порядке возрастания, используя в качестве ключа сортировки 
            результаты переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос, результаты которого используются в качестве ключа 
            сортировки.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderByAsc(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Выполняет сортировку результатов запроса в порядке возрастания, используя в качестве ключа сортировки 
            значение переданного выражения.
            </summary>
            <param name="columnExpression">Выражение, значение которого используется в качестве ключа сортировки.
            </param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderByAsc(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Выполняет сортировку результатов запроса в порядке возрастания, используя в качестве ключа сортировки 
            значение переданного выражения.
            </summary>
            <param name="expression">Выражение, значение которого используется в качестве ключа сортировки.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderByDesc(System.String)">
            <summary>
            Выполняет сортировку результатов запроса в порядке убывания по колонке с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки, по которой выполняется сортировка.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderByDesc(System.String,System.String)">
            <summary>
            Выполняет сортировку результатов запроса в порядке убывания по колонке с заданным псевдонимом из указанного 
            источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, по которой выполняется сортировка.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderByDesc(Terrasoft.Core.DB.Select)">
            <summary>
            Выполняет сортировку результатов запроса в порядке убывания, используя в качестве ключа запроса результаты 
            переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку, результаты которого используются в качестве ключа сортировки.
            </param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderByDesc(Terrasoft.Core.DB.Query)">
            <summary>
            Выполняет сортировку результатов запроса в порядке убывания, используя в качестве ключа запроса результаты 
            переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос, результаты которого используются в качестве ключа 
            сортировки.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderByDesc(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Выполняет сортировку результатов запроса в порядке убывания, используя в качестве ключа сортировки значение 
            переданного выражения.
            </summary>
            <param name="columnExpression">Выражение, значение которого используется в качестве ключа сортировки.
            </param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.OrderByDesc(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Выполняет сортировку результатов запроса в порядке убывания, используя в качестве ключа сортировки значение 
            переданного выражения.
            </summary>
            <param name="expression">Выражение, значение которого используется в качестве ключа сортировки.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.GroupBy(System.String)">
            <summary>
            Выполняет группировку результатов запроса по колонке с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки, по которой выполняется группировка.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.GroupBy(System.String,System.String)">
            <summary>
            Выполняет группировку результатов запроса по колонке с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, по которой выполняется группировка.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.GroupBy(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Выполняет группировку результатов запроса, используя в качестве ключа группировки значение переданного 
            выражения.
            </summary>
            <param name="columnExpression">Выражение, значение которого используется в качестве ключа группировки.
            </param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.GroupBy(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Выполняет группировку результатов запроса, используя в качестве ключа группировки значение переданного 
            выражения.
            </summary>
            <param name="expression">Выражение, значение которого используется в качестве ключа группировки.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Having">
            <summary>
            Добавляет в текущий запрос пустое групповое условие.
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий пустое групповое условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Having(System.String)">
            <summary>
            Добавляет в текущий запрос групповое условие для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки, по которой добавляется групповое условие.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий групповое условие для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Having(System.String,System.String)">
            <summary>
            Добавляет в текущий запрос групповое условие для колонки с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки, по которой добавляется групповое условие.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий групповое условие для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> из источника с псевдонимом <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Having(Terrasoft.Core.DB.Select)">
            <summary>
            Добавляет в текущий запрос групповое условие для результатов переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку, для результатов которого добавляется групповое условие.
            </param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий групповое условие для результатов 
            подзапроса на выборку <paramref name="subSelect"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Having(Terrasoft.Core.DB.Query)">
            <summary>
            Добавляет в текущий запрос групповое условие для результатов переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос, для результатов которого добавляется групповое условие.
            </param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий групповое условие для результатов 
            произвольного подзапроса <paramref name="subSelectQuery"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Having(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Добавляет в текущий запрос групповое условие для значения переданного выражения.
            </summary>
            <param name="expression">Выражение, для значения которого добавляется групповое условие.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий групповое условие для значения выражения 
            <paramref name="expression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Having(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            Добавляет в текущий запрос групповое условие для заданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса, для которого добавляется групповое условие.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий групповое условие для параметра запроса 
            <paramref name="parameter"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Having(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Добавляет в текущий запрос групповое условие для значения переданного выражения.
            </summary>
            <param name="columnExpression">Выражение, для значения которого добавляется групповое условие.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, представляющий групповое условие для значения выражения 
            <paramref name="columnExpression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Union(Terrasoft.Core.DB.Select)">
            <summary>
            Объединяет с результатами текущего запроса результаты переданного запроса на выборку, исключая дубликаты 
            строк из результирующего набора.
            </summary>
            <param name="unionSelect">Запрос на выборку, результаты которого объединяются с результатами текущего 
            запроса.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.Union(Terrasoft.Core.DB.Query)">
            <summary>
            Объединяет с результатами текущего запроса результаты переданного произвольного запроса, исключая 
            дубликаты строк из результирующего набора.
            </summary>
            <param name="unionSelectQuery">Произвольный запрос, результаты которого объединяются с результатами 
            текущего запроса.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.UnionAll(Terrasoft.Core.DB.Select)">
            <summary>
            Объединяет с результатами текущего запроса результаты переданного запроса на выборку, при этом дубликаты 
            строк не исключаются из результирующего набора.
            </summary>
            <param name="unionSelect">Запрос на выборку, результаты которого объединяются с результатами текущего 
            запроса.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.UnionAll(Terrasoft.Core.DB.Query)">
            <summary>
            Объединяет с результатами текущего запроса результаты переданного произвольного запроса, при этом 
            дубликаты строк не исключаются из результирующего набора.
            </summary>
            <param name="unionSelectQuery">Произвольный запрос, результаты которого объединяются с результатами 
            текущего запроса.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Query"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.ResetCachedSqlText">
            <summary>
            Очищает кэшированный текст запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Query.SetParameterValue(System.String,System.Object)">
            <summary>
            Устанавливает значение параметра запроса.
            </summary>
            <param name="name">Имя параметра.</param>
            <param name="value">Значение параметра.</param>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.UserConnection">
            <summary>
            Пользовательское подключение.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.RowCount">
            <summary>
            Количество первых строк результирующего набора, возвращаемых запросом.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.Parameters">
            <summary>
            Коллекция параметров запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.HasParameters">
            <summary>
            Определяет, имеет ли запрос параметры. 
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.BuildParametersAsValue">
            <summary>
            Определяет, добавлять ли параметры запроса в текст запроса как значения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.Joins">
            <summary>
            Коллекция предложений Join данного запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.HasJoins">
            <summary>
            Определяет, есть ли в данном запросе хотя бы одно предложение Join.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.Condition">
            <summary>
            Возвращает условие Where запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.HasCondition">
            <summary>
            Определяет, есть ли в данном запросе условие Where.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.HavingCondition">
            <summary>
            Возвращает предложение Having запроса. 
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.HasHavingCondition">
            <summary>
            Определяет, есть ли в данном запросе предложение Having.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.OrderByItems">
            <summary>
            Коллекция выражений, по которым выполняется сортировка результатов запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.HasOrderByItems">
            <summary>
            Указывает, определены ли выражения запроса, по которым нужно выполнять сортировку.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.GroupByItems">
            <summary>
            Коллекция выражений, по которым выполняется группировка результатов запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.HasGroupByItems">
            <summary>
            Указывает, определены ли в запросе выражения запроса, по которым нужно выполнять группировку.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.UnionQueries">
            <summary>
            Коллекция запросов, объединяемых с данным запросом оператором Union.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.HasUnionQueries">
            <summary>
            Определяет, имеет ли данный запрос объединяемые с ним запросы оператором Union.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.IsUnionTypeAll">
            <summary>
            Определяет, применять ли в данном запросе параметр All для оператора Union.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.IsCacheEnabled">
            <summary>
            Определяет, кэшируется ли текст запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Query.CachedSqlText">
            <summary>
            Кэшированный текст запроса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.QueryCaseItem">
            <summary>
            Элемент условия оператора CASE.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCaseItem.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.DB.QueryCaseItem"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCaseItem.#ctor(Terrasoft.Core.DB.QueryCondition,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.DB.QueryCaseItem"/> с заданным условием запроса и 
            результирующим выражением.
            </summary>
            <param name="condition">Условие запроса.</param>
            <param name="resultExpression">Выражение, которое будет возвращено, если условие 
            <paramref name="condition"/> будет выполнено.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCaseItem.#ctor(Terrasoft.Core.DB.QueryCaseItem)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.DB.QueryCaseItem"/>, являющееся копией переданного элемента.
            </summary>
            <param name="source">Новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryCaseItem"/>, являющийся копией переданного элемента 
            оператора CASE.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCaseItem.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.QueryCaseItem"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего элемента оператора CASE.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCaseItem.AddCondition(Terrasoft.Core.DB.QueryCondition)">
            <summary>
            Добавляет в текущий элемент переданное условие запроса.
            </summary>
            <param name="condition">Условие запроса.</param>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryCaseItem.Condition">
            <summary>
            Условие запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryCaseItem.ResultExpression">
            <summary>
            Результирующее выражение. 
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.QueryCase">
            <summary>
            Выражение оператора CASE.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCase.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.DB.QueryCase"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCase.#ctor(Terrasoft.Core.DB.QueryCase)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.DB.QueryCase"/>, являющийся копией переданного выражения оператора.
            </summary>
            <param name="source">Выражение оператора CASE, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCase.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.QueryCase"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCase.AddWhenItem(Terrasoft.Core.DB.QueryCondition,System.String)">
            <summary>
            К текущему выражению оператора добавляет выражение предложения WHEN с заданными условием и псевдонимом 
            колонки результирующего выражения.
            </summary>
            <param name="condition">Условие предложения WHEN.</param>
            <param name="resultSourceColumnAlias">Псевдоним колонки результирующего выражения.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCase.AddWhenItem(Terrasoft.Core.DB.QueryCondition,Terrasoft.Core.DB.Select)">
            <summary>
            К текущему выражению оператора добавляет выражение предложения WHEN с заданными условием и подзапросом на 
            выборку, который возвращает результирующее выражение.
            </summary>
            <param name="condition">Условие предложения WHEN.</param>
            <param name="resultSubSelect">Подзапрос на выборку, возвращающий результирующее выражение.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCase.AddWhenItem(Terrasoft.Core.DB.QueryCondition,Terrasoft.Core.DB.Query)">
            <summary>
            К текущему выражению оператора добавляет выражение предложения WHEN с заданными условием и произвольным 
            подзапросом, который возвращает результирующее выражение.
            </summary>
            <param name="condition">Условие предложения оператора WHEN.</param>
            <param name="resultSubSelectQuery">Произвольный подзапрос, возвращающий результирующее выражение.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCase.AddWhenItem(Terrasoft.Core.DB.QueryCondition,Terrasoft.Core.DB.QueryParameter)">
            <summary>
            К текущему выражению оператора добавляет выражение предложения WHEN с заданными условием и параметром 
            результирующего выражения.
            </summary>
            <param name="condition">Условие предложения WHEN.</param>
            <param name="resultParameter">Параметр результирующего выражения.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCase.AddWhenItem(Terrasoft.Core.DB.QueryCondition,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            К текущему выражению оператора добавляет предложение WHEN с заданными условием и выражением колонки 
            результирующего выражения.
            </summary>
            <param name="condition">Условие предложения WHEN.</param>
            <param name="resultColumnExpression">Выражение колонки результирующего выражения.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCase.SetElseExpression(System.String)">
            <summary>
            Устанавливает в качестве выражения предложения ELSE текущего оператора выражение колонки с заданным 
            псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCase.SetElseExpression(Terrasoft.Core.DB.Select)">
            <summary>
            Устанавливает в качестве выражения предложения ELSE текущего оператора выражение колонки для переданного 
            подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCase.SetElseExpression(Terrasoft.Core.DB.Query)">
            <summary>
            Устанавливает в качестве предложения ELSE текущего оператора выражение колонки для переданного 
            произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCase.SetElseExpression(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            Устанавливает в качестве предложения ELSE текущего оператора выражение колонки для заданного параметра 
            запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCase.SetElseExpression(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Устанавливает в качестве предложения ELSE текущего оператора заданное выражение колонки.
            </summary>
            <param name="columnExpression">Выражение колонки.</param>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryCase.ElseExpression">
            <summary>
            Выражение предложения ELSE.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.QueryColumnExpressionType">
            <summary>
            Тип выражения колонки.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryColumnExpressionType.SourceColumnAlias">
            <summary>
            Псевдоним колонки.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryColumnExpressionType.Asterisk">
            <summary>
            Все колонки.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryColumnExpressionType.Const">
            <summary>
            Константа.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryColumnExpressionType.Parameter">
            <summary>
            Параметр.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryColumnExpressionType.SubSelect">
            <summary>
            Подзапрос.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryColumnExpressionType.Case">
            <summary>
            Выбор варианта.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryColumnExpressionType.Function">
            <summary>
            Функция.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryColumnExpressionType.ArithmeticOperation">
            <summary>
            Арифметическая операция.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryColumnExpressionType.SqlText">
            <summary>
            Sql-текст.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.QueryColumnExpression">
            <summary>
            Выражение колонки запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor(System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для колонки с заданным псевдонимом из 
            указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для заданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor(Terrasoft.Core.DB.Select)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor(Terrasoft.Core.DB.Select,System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для переданного подзапроса на выборку 
            с заданным псевдонимом.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <param name="alias">Псевдоним подзапроса на выборку.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor(Terrasoft.Core.DB.Query)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor(Terrasoft.Core.DB.Query,System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для переданного произвольного подзапроса 
            с заданным псевдонимом.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <param name="alias">Псевдоним произвольного подзапроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor(Terrasoft.Core.DB.QueryCase)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для заданного предложения <c>Case</c>. 
            </summary>
            <param name="queryCase">Предложение <c>Case</c> запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor(Terrasoft.Core.DB.QueryCase,System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для заданного предложения <c>Case</c> с 
            указанным псевдонимом.
            </summary>
            <param name="queryCase">Предложение <c>Case</c> запроса.</param>
            <param name="alias">Псевдоним предложения <c>Case</c> запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor(Terrasoft.Core.DB.QueryFunction)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для заданной функции выражения.
            </summary>
            <param name="queryFunction">Функция выражения.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor(Terrasoft.Core.DB.QueryFunction,System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для заданной функции выражения с 
            указанным псевдонимом.
            </summary>
            <param name="queryFunction">Функция выражения.</param>
            <param name="alias">Псевдоним функции выражения.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor(Terrasoft.Common.ArithmeticOperation,Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для арифметической операции с заданными 
            операндами.
            </summary>
            <param name="arithmeticOperation">Арифметическая операция.</param>
            <param name="leftArithmeticOperand">Левый операнд арифметической операции.</param>
            <param name="rightArithmeticOperand">Правый операнд арифметической операции.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor(Terrasoft.Common.ArithmeticOperation,Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryColumnExpression,System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для арифметической операции с заданными 
            операндами и указанным псевдонимом.
            </summary>
            <param name="arithmeticOperation">Арифметическая операция.</param>
            <param name="leftArithmeticOperand">Левый операнд арифметической операции.</param>
            <param name="rightArithmeticOperand">Правый операнд арифметической операции.</param>
            <param name="alias">Псевдоним арифметической операции.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.#ctor(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/>, являющийся клоном переданного выражения 
            колонки.
            </summary>
            <param name="source">Выражение колонки, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.Negate(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Устанавливает отрицание переданного значения выражения колонки.
            </summary>
            <param name="operand">Выражение колонки.</param>
            <returns>Отрицание значения выражения колонки <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.op_UnaryNegation(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Оператор отрицания переданного выражения колонки.
            </summary>
            <param name="operand">Выражение колонки.</param>
            <returns>Отрицание выражения колонки <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.Add(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает выражение арифметического сложения переданных выражений колонок.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд в операции сложения.</param>
            <param name="rightOperand">Выражение колонки - правый операнд в операции сложения.</param>
            <returns>Новое выражение колонки, представляющее сумму выражений-операндов <paramref name="leftOperand"/> и 
            <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.op_Addition(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Перегрузка оператора арифметического сложения для выражений колонок.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд в операции сложения.</param>
            <param name="rightOperand">Выражение колонки - правый операнд в операции сложения.</param>
            <returns>Новое выражение колонки, представляющее сумму выражений-операндов <paramref name="leftOperand"/> и 
            <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.op_Addition(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Перегрузка оператора арифметического сложения для выражений колонок.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд в операции сложения.</param>
            <param name="rightOperand">Выражение колонки - правый операнд в операции сложения.</param>
            <returns>Новое выражение колонки, представляющее сумму выражений-операндов <paramref name="leftOperand"/> и 
            <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.op_Addition(Terrasoft.Core.DB.IQueryColumnExpressionConvertible,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Перегрузка оператора арифметического сложения для выражений колонок.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд в операции сложения.</param>
            <param name="rightOperand">Выражение колонки - правый операнд в операции сложения.</param>
            <returns>Новое выражение колонки, представляющее сумму выражений-операндов <paramref name="leftOperand"/> и 
            <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.Subtract(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает выражение арифметического вычитания переданного правого выражения колонки из переданного левого 
            выражения колонки.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд в операции вычитания.</param>
            <param name="rightOperand">Выражение колонки - правый операнд в операции вычитания.</param>
            <returns>Новое выражение колонки, представляющее разность между выражениями-операндами 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.op_Subtraction(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Перегрузка оператора арифметического вычитания правого выражения колонки из левого выражения колонки.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд в операции вычитания.</param>
            <param name="rightOperand">Выражение колонки - правый операнд в операции вычитания.</param>
            <returns>Новое выражение колонки, представляющее разность между выражениями - операндами 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.op_Subtraction(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Перегрузка оператора арифметического вычитания правого выражения колонки из левого выражения колонки.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд в операции вычитания.</param>
            <param name="rightOperand">Выражение колонки - правый операнд в операции вычитания.</param>
            <returns>Новое выражение колонки, представляющее разность между выражениями - операндами 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.op_Subtraction(Terrasoft.Core.DB.IQueryColumnExpressionConvertible,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Перегрузка оператора арифметического вычитания правого выражения колонки из левого колонки.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд в операции вычитания.</param>
            <param name="rightOperand">Выражение колонки - правый операнд в операции вычитания.</param>
            <returns>Новое выражение колонки, представляющее разность между выражениями - операндами 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.Multiply(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает выражение арифметического умножения переданных выражений колонок.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд в операции умножения.</param>
            <param name="rightOperand">Выражение колонки - правый операнд в операции умножения.</param>
            <returns>Новое выражение колонки, представляющее произведение выражений - операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.op_Multiply(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Перегрузка оператора арифметического умножения двух выражений колонок.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд в операции умножения.</param>
            <param name="rightOperand">Выражение колонки - правый операнд в операции умножения.</param>
            <returns>Новое выражение колонки, представляющее произведение выражений - операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.op_Multiply(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Перегрузка оператора арифметического умножения двух выражений колонок.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд в операции умножения.</param>
            <param name="rightOperand">Выражение колонки - правый операнд в операции умножения.</param>
            <returns>Новое выражение колонки, представляющее произведение выражений - операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.op_Multiply(Terrasoft.Core.DB.IQueryColumnExpressionConvertible,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Перегрузка оператора арифметического умножения двух выражений колонок.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд в операции умножения.</param>
            <param name="rightOperand">Выражение колонки - правый операнд в операции умножения.</param>
            <returns>Новое выражение колонки, представляющее произведение выражений - операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.Divide(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Возвращает выражение арифметического деления переданного левого выражения колонки на переданное правое 
            выражение колонки.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд операции деления.</param>
            <param name="rightOperand">Выражение колонки - правый операнд операции деления.</param>
            <returns>Новое выражение колонки, представляющее частное выражений - операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.op_Division(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Перегрузка оператора арифметического деления левого выражения колокни на правое правое выражение колонки.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд операции деления.</param>
            <param name="rightOperand">Выражение колонки - правый операнд операции деления.</param>
            <returns>Новое выражение колонки, представляющее частное выражений - операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.op_Division(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Перегрузка оператора арифметического деления левого выражения колонки на правое выражение колонки.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд операции деления.</param>
            <param name="rightOperand">Выражение колонки - правый операнд операции деления.</param>
            <returns>Новое выражение колонки, представляющее частное выражений - операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.op_Division(Terrasoft.Core.DB.IQueryColumnExpressionConvertible,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Перегрузка оператора деления левого выражения колонки на правое выражение колонки.
            </summary>
            <param name="leftOperand">Выражение колонки - левый операнд операции деления.</param>
            <param name="rightOperand">Выражение колонки - правый операнд операции деления.</param>
            <returns>Новое выражение колонки, представляющее частное выражений - операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/>, представляющий копию текущего экземпляра.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.Block">
            <summary>
            Помещает текущее выражение колонки в блок.
            </summary>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/>, помещенный в блок.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpression.GetQueryColumnExpression">
            <summary>
            Возвращает текущее выражение колонки.
            </summary>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/>.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.ExpressionType">
            <summary>
            Тип выражения колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.IsBlock">
            <summary>
            Определяет, помещается ли выражение колонки в блок.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.IsNegative">
            <summary>
            Определяет, является ли выражение колонки отрицанием.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.Alias">
            <summary>
            Псевдоним выражения колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.SourceAlias">
            <summary>
            Псевдоним источника.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.SourceColumnAlias">
            <summary>
            Псевдоним колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.ConstValue">
            <summary>
            Константное значение.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.Parameter">
            <summary>
            Параметр запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.SubSelect">
            <summary>
            Подзапрос на выборку.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.Case">
            <summary>
            Предложение <c>Case</c>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.Function">
            <summary>
            Функция.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.ArithmeticOperation">
            <summary>
            Арифметическая операция.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.LeftArithmeticOperand">
            <summary>
            Левый операнд арифметической операции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.RightArithmeticOperand">
            <summary>
            Правый операнд арифметической операции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryColumnExpression.SqlText">
            <summary>
            Sql-текст.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.QueryColumnExpressionCollection">
            <summary>
            Коллекция выражений колонок.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpressionCollection"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.#ctor(Terrasoft.Core.DB.QueryColumnExpressionCollection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpressionCollection"/>, являющийся клоном переданной 
            коллекции выражений колонок.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.QueryColumnExpressionCollection"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpressionCollection"/>, представляющий копию текущего 
            экземпляра.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.AddExpression(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Добавляет в текущую коллекцию выражений колонок переданное выражение.
            </summary>
            <param name="expression">Выражение колонки, которое добавляется в текущую коллекцию.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="expression"/> передано 
            значение <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.Add(System.String)">
            <summary>
            Добавляет в текущую коллекцию выражений колонок выражение с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним выражения колонки, которое добавляется в текущую коллекцию.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.Add(System.String,System.String)">
            <summary>
            Добавляет в текущую коллекцию выражений колонок выражение с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.Add(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            Добавляет в текущую коллекцию выражений колонок выражение для заданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса, для которого добавляется выражение колонки.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.Add(Terrasoft.Core.DB.Select)">
            <summary>
            Добавляет в текущую коллекцию выражений колонок выражение для переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку, для которого добавляется выражение колонки.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.Add(Terrasoft.Core.DB.Query)">
            <summary>
            Добавляет в текущую коллекцию выражений колонок выражение для переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос, для которого добавляется выражение колонки.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.Add(Terrasoft.Core.DB.QueryFunction)">
            <summary>
            Добавляет в текущую коллекцию выражений колонок выражение для переданной функции выражения.
            </summary>
            <param name="queryFunction">Функция выражения, для которой добавляется выражение колонки.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.AddExpressionsRange(System.Collections.Generic.IEnumerable{Terrasoft.Core.DB.IQueryColumnExpressionConvertible})">
            <summary>
            Добавляет в текущую коллекцию выражений колонок диапазон выражений из заданного перечислителя.
            </summary>
            <param name="expressions">Перечислитель выражений колонок, которые добавляются в текущую коллекцию.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.AddRange(System.Collections.Generic.IEnumerable{Terrasoft.Core.DB.QueryColumnExpression})">
            <summary>
            Добавляет в текущую коллекцию выражений колонок диапазон выражений из заданного перечислителя.
            </summary>
            <param name="columnExpressions">Перечислитель выражений колонок, которые добавляются в текущую коллекцию.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Добавляет в текущую коллекцию выражений колонок диапазон выражений с псевдонимами из заданного 
            перечислителя.
            </summary>
            <param name="sourceColumnAliases">Перечислитель псевдонимов выражений колонок, который добавляются в 
            текущую коллекцию.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.AddRange(System.Collections.Generic.IEnumerable{Terrasoft.Core.DB.QueryParameter})">
            <summary>
            Добавляет в текущую коллекцию выражений колонок диапазон выражений для параметров из переданного 
            перечислителя.
            </summary>
            <param name="parameters">Перечислитель параметров, для которых добавляются выражения в текущую коллекцию.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.ExistsByAlias(System.String)">
            <summary>
            Определяет, есть ли в текущей коллекции выражений колонок выражение с заданным псевдонимом.
            </summary>
            <param name="alias">Псевдоним искомого выражения колонки.</param>
            <returns><c>true</c>, если в текущей коллекции выражений колонок есть выражение с псевдонимом 
            <paramref name="alias"/>; иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.FindByAlias(System.String)">
            <summary>
            Возвращает из текущей коллекции выражений колонок выражение с заданным псевдонимом.
            </summary>
            <param name="alias">Псевдоним возвращаемого выражения колонки.</param>
            <returns>Выражение колонки с псевдонимом <paramref name="alias"/>, принадлежащее текущей коллекции.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.GetByAlias(System.String)">
            <summary>
            Возвращает из текущей коллекции выражений колонок выражение с заданным псевдонимом. Если выражение не 
            найдено в коллекции, генерируется исключение.
            </summary>
            <param name="alias">Псевдоним возвращаемого выражения колонки.</param>
            <returns>Выражение колонки с псевдонимом <paramref name="alias"/>, принадлежащее текущей коллекции.
            </returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если выражения колонки с псевдонимом 
            <paramref name="alias"/> не найдено в текущей коллекции.</exception>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если в качестве параметра <paramref name="alias"/> передано пустое 
            значение или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryColumnExpressionCollection.GetUniqueAlias(System.String,System.Int32)">
            <summary>
            Для заданного псевдонима выражения колонки генерирует уникальный псевдоним с заданной максимальной длиной.
            </summary>
            <param name="alias">Псевдоним выражения колонки, для которого генерится уникальный псевдоним.</param>
            <param name="aliasMaxLength">Максимальная длина уникального псевдонима.</param>
            <returns>Уникальный псевдоним для выражения колонки с псевдонимом <paramref name="alias"/>, который имеет 
            максимальную длину <paramref name="aliasMaxLength"/> символов.</returns>
        </member>
        <member name="T:Terrasoft.Core.DB.QueryConditionType">
            <summary>
            Тип условия запроса.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.Blank">
            <summary>
            Пустое условие.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.Block">
            <summary>
            Блок.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.IsNull">
            <summary>
            Является <c>null</c> в базе данных.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.Equal">
            <summary>
            Равно.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.NotEqual">
            <summary>
            Не равно.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.Greater">
            <summary>
            Больше.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.GreaterOrEqual">
            <summary>
            Больше или равно.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.Less">
            <summary>
            Меньше.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.LessOrEqual">
            <summary>
            Меньше или равно.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.Between">
            <summary>
            Диапазон значений.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.Like">
            <summary>
            Совпадение строки с шаблоном.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.StartWith">
            <summary>
            Начинается выражением.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.Contain">
            <summary>
            Содержит выражение.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.EndWith">
            <summary>
            Заканчивается выражением.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.In">
            <summary>
            Входит в набор значений.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QueryConditionType.Exist">
            <summary>
            Существует по заданному условию.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.QueryCondition">
            <summary>
            Условие запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.#ctor(Terrasoft.Core.DB.Query)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/> для заданного запроса.
            </summary>
            <param name="parentQuery">Запрос, для которого инициализируется экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.#ctor(Terrasoft.Core.DB.QueryConditionType)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/> с заданным типом условия запроса.
            </summary>
            <param name="conditionType">Тип условия запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.#ctor(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/> для заданного выражения.
            </summary>
            <param name="leftExpression">Выражение, для которого инициализируется экземпляр 
            <see cref="T:Terrasoft.Core.DB.QueryCondition"/>.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.#ctor(Terrasoft.Core.DB.QueryCondition)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, являющийся клоном заданного экземпляра 
            <see cref="T:Terrasoft.Core.DB.QueryCondition"/>.
            </summary>
            <param name="source">Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.QueryCondition"/>.
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, являющийся клоном текущего экземпляра.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.Not">
            <summary>
            Добавляет отрицание в текущее условие.
            </summary>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, в которое добавлено отрицание.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.OpenBlock">
            <summary>
            К текущему условию добавляет блок условия.
            </summary>
            <returns>Условие <see cref="T:Terrasoft.Core.DB.QueryCondition"/> типа блок, добавленное к текущему условию.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.OpenBlock(System.String)">
            <summary>
            К текущему условию добавляет блок условия для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки, для которой открывается блок выражения.</param>
            <returns>Условие <see cref="T:Terrasoft.Core.DB.QueryCondition"/> для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/>, добавленное к текущему условию.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.OpenBlock(System.String,System.String)">
            <summary>
            К текущему условию добавляет блок условия для колонки с заданным псевдонимом из указанного 
            источника.</summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки</param>
            <returns>Условие <see cref="T:Terrasoft.Core.DB.QueryCondition"/> для колонки с псевдонимом 
            <paramref name="sourceColumnAlias"/> из источника <paramref name="sourceAlias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.OpenBlock(Terrasoft.Core.DB.Select)">
            <summary>
            К текущему условию добавляет блок условия для результатов заданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку, для результатов которого добавляется блок условия.</param>
            <returns>Условие <see cref="T:Terrasoft.Core.DB.QueryCondition"/> для результатов подзапроса на выборку 
            <paramref name="subSelect"/>, добавленное к текущему условию.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.OpenBlock(Terrasoft.Core.DB.Query)">
            <summary>
            К текущему условию добавляет блок условия для результатов заданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос, для результатов которого добавляет блок условия.
            </param>
            <returns>Условие <see cref="T:Terrasoft.Core.DB.QueryCondition"/> для результатов подзапроса <paramref name="subSelectQuery"/>, 
            добавленное к текущему условию запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.OpenBlock(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            К текущему условию добавляет блок условия для заданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса, для которого добавляется блок условия.</param>
            <returns>Условие <see cref="T:Terrasoft.Core.DB.QueryCondition"/> для параметра запроса <paramref name="parameter"/>, 
            добавленное к текущему условию.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.OpenBlock(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            К текущему условию добавляет блок условия для значения заданного выражения.
            </summary>
            <param name="columnExpression">Выражение, для значения которого добавляется блок условия.</param>
            <returns>Условие <see cref="T:Terrasoft.Core.DB.QueryCondition"/> для значения выражения <paramref name="columnExpression"/>, 
            добавленное к текущему условию.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.OpenBlock(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            К текущему условию добавляет блок условия для значения заданного выражения.
            </summary>
            <param name="expression">Выражение, для значения которого добавляется блок условия.</param>
            <returns>Условие <see cref="T:Terrasoft.Core.DB.QueryCondition"/> для значения выражения <paramref name="expression"/>, 
            добавленное к текущему условию.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.WrapBlock">
            <summary>
            Помещает текущее условие в блок.
            </summary>
            <returns>Текущее условие <see cref="T:Terrasoft.Core.DB.QueryCondition"/>, помещенное в блок.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsNull">
            <summary>
            К текущему условию добавляет проверку, является ли значение выражения условия <c>null</c>.
            </summary>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsEqual(System.String)">
            <summary>
            В текущем условии устанавливает тип сравнения [Равно] и добавляет в правую часть условия выражение для 
            колонки запроса с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsEqual(System.String,System.String)">
            <summary>
            В текущем условии устанавливает тип сравнения [Равно] и добавляет в правую часть условия выражение для 
            колонки с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsEqual(Terrasoft.Core.DB.Select)">
            <summary>
            В текущем условии устанавливает тип сравнения [Равно] и добавляет в правую часть условия выражение для 
            результатов переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsEqual(Terrasoft.Core.DB.Query)">
            <summary>
            В текущем условии устанавливает тип сравнения [Равно] и добавляет в правую часть условия выражение для 
            результатов переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsEqual(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            В текущем условии устанавливает тип сравнения [Равно] и добавляет в правую часть условия выражение для 
            переданного параметра запроса. 
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsEqual(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            В текущем условии устанавливает тип сравнения [Равно] и добавляет в правую часть условия переданное 
            выражение.
            </summary>
            <param name="columnExpression">Выражение, которое добавляется в правую часть условия.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsEqual(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            В текущем условии устанавливает тип сравнения [Равно] и добавляет в правую часть условия переданное 
            выражение.
            </summary>
            <param name="expression">Выражение, которого добавляется в правую часть условия.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsNotEqual(System.String)">
            <summary>
            В текущем условии устанавливает тип сравнения [Не равно] и добавляет в правую часть условия выражение для 
            колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsNotEqual(System.String,System.String)">
            <summary>
            В текущем условии устанавливает тип сравнения [Не равно] и добавляет в правую часть условия выражение для 
            колонки с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsNotEqual(Terrasoft.Core.DB.Select)">
            <summary>
            В текущем условии устанавливает тип сравнения [Не равно] и добавляет в правую часть условия выражение для 
            результатов переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsNotEqual(Terrasoft.Core.DB.Query)">
            <summary>
            В текущем условии устанавливает тип сравнения [Не равно] и добавляет в правую часть условия выражение для 
            результатов переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsNotEqual(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            В текущем условии запроса проверяет неравенство значения выражения условия и переданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsNotEqual(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            В текущем условии устанавливает тип сравнения [Не равно] и добавляет в правую часть условия переданное 
            выражение.
            </summary>
            <param name="columnExpression">Выражение, которое добавляется в правую часть условия.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsNotEqual(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            В текущем условии устанавливает тип сравнения [Не равно] и добавляет в правую часть условия переданное 
            выражение.
            </summary>
            <param name="expression">Выражение, которое добавляется в правую часть условия.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsGreater(System.String)">
            <summary>
            В текущем условии устанавливает тип сравнения [Больше] и добавляет в правую часть условия выражение для 
            колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsGreater(System.String,System.String)">
            <summary>
            В текущем условии устанавливает тип сравнения [Больше] и добавляет в правую часть условия выражение для 
            колонки с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsGreater(Terrasoft.Core.DB.Select)">
            <summary>
            В текущем условии устанавливает тип сравнения [Больше] и добавляет в правую часть условия выражение для 
            результатов переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsGreater(Terrasoft.Core.DB.Query)">
            <summary>
            В текущем условии устанавливает тип сравнения [Больше] и добавляет в правую часть условия выражение для 
            результатов переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsGreater(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            В текущем условии устанавливает тип сравнения [Больше] и добавляет в правую часть условия выражение для 
            переданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsGreater(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            В текущем условии устанавливает тип сравнения [Больше] и добавляет в правую часть условия переданное 
            выражение. 
            </summary>
            <param name="columnExpression">Выражение, которое добавляется в правую часть условия.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsGreater(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            В текущем условии устанавливает тип сравнения [Больше] и добавляет в правую часть условия переданное 
            выражение.
            </summary>
            <param name="expression">Выражение, которое добавляется в правую часть условия.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsGreaterOrEqual(System.String)">
            <summary>
            В текущем условии устанавливает тип сравнения [Больше или равно] и добавляет в правую часть условия 
            выражение для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsGreaterOrEqual(System.String,System.String)">
            <summary>
            В текущем условии устанавливает тип сравнения [Больше или равно] и добавляет в правую часть 
            условия выражение для колонки с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsGreaterOrEqual(Terrasoft.Core.DB.Select)">
            <summary>
            В текущем условии устанавливает тип сравнения [Больше или равно] и добавляет в правую часть условия 
            выражение для переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsGreaterOrEqual(Terrasoft.Core.DB.Query)">
            <summary>
            В текущем условии устанавливает тип сравнения [Больше или равно] и добавляет в правую часть условия 
            выражение для результатов переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Подзапрос на выборку.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsGreaterOrEqual(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            В текущем условии устанавливает тип сравнения [Больше или равно] и добавляет в правую часть условия 
            выражение для переданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsGreaterOrEqual(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            В текущем условии устанавливает тип сравнения [Больше или равно] и добавляет в правую часть условия 
            переданное выражение.
            </summary>
            <param name="columnExpression">Выражение, которое добавляется в правую часть условия.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsGreaterOrEqual(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            В текущем условии устанавливает тип сравнения [Больше или равно] и добавляет в правую часть условия 
            переданное выражения.
            </summary>
            <param name="expression">Выражение, которое добавляется в правую часть условия.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLess(System.String)">
            <summary>
            В текущем условии устанавливает тип сравнения [Меньше] и добавляет в правую часть условия выражение для 
            колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLess(System.String,System.String)">
            <summary>
            В текущем условии устанавливает тип сравнения [Меньше] и добавляет в правую часть условия выражение 
            для колонки с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLess(Terrasoft.Core.DB.Select)">
            <summary>
            В текущем условии устанавливает тип сравнения [Меньше] и добавляет в правую часть условия выражение для 
            результатов переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLess(Terrasoft.Core.DB.Query)">
            <summary>
            В текущем условии устанавливает тип сравнения [Меньше] и добавляет в правую часть условия выражение для 
            результатов переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLess(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            В текущем условии устанавливает тип сравнения [Меньше] и добавляет в правую часть условия выражение для 
            переданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLess(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            В текущем условии устанавливает тип сравнения [Меньше] и добавляет в правую часть условия переданное 
            выражение.
            </summary>
            <param name="columnExpression">Выражение, которое добавляется в правую часть условия.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLess(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            В текущем условии устанавливает тип сравнения [Меньше] и добавляет в правую часть условия переданное 
            выражение.
            </summary>
            <param name="expression">Выражение, которое добавляется в правую часть условия.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLessOrEqual(System.String)">
            <summary>
            В текущем условии устанавливает тип сравнения [Меньше или равно] и добавляет в правую часть условия 
            выражение для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLessOrEqual(System.String,System.String)">
            <summary>
            В текущем условии устанавливает тип сравнения [Меньше или равно] и добавляет в правую часть условия 
            выражение для колонки с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLessOrEqual(Terrasoft.Core.DB.Select)">
            <summary>
            В текущем условии запроса проверяет, является ли значение выражения условия меньшим или равным результатам 
            переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLessOrEqual(Terrasoft.Core.DB.Query)">
            <summary>
            В текущем условии устанавливает тип сравнения [Меньше или равно] и добавляет в правую часть условия 
            выражение для результатов переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLessOrEqual(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            В текущем условии устанавливает тип сравнения [Меньше или равно] и добавляет в правую часть условия 
            выражение для переданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLessOrEqual(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            В текущем условии устанавливает тип сравнения [Меньше или равно] и добавляет в правую часть условия 
            переданное выражение. 
            </summary>
            <param name="columnExpression">Выражение, которое добавляется в правую часть условия.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLessOrEqual(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            В текущем условии устанавливает тип сравнения [Меньше или равно] и добавляет в правую часть условия 
            переданное выражение.
            </summary>
            <param name="expression">Выражение, которое добавляется в правую часть условия.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsBetween(System.String)">
            <summary>
            В текущем условии запроса устанавливает тип сравнения [Диапазон значений] и добавляет в качестве нижней 
            границы выражение для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Текущее условие запроса <see cref="T:Terrasoft.Core.DB.QueryCondition"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsBetween(System.String,System.String)">
            <summary>
            В текущем условии запроса устанавливает тип сравнения [Диапазон значений] и добавляет в качестве нижней 
            границы выражение для колонки с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Текущее условие запроса <see cref="T:Terrasoft.Core.DB.QueryCondition"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsBetween(Terrasoft.Core.DB.Select)">
            <summary>
            В текущем условии запроса устанавливает тип сравнения [Диапазон значений] и добавляет в качестве нижней 
            границы выражение для результатов переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Текущее условие запроса <see cref="T:Terrasoft.Core.DB.QueryCondition"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsBetween(Terrasoft.Core.DB.Query)">
            <summary>
            В текущем условии запроса устанавливает тип сравнения [Диапазон значений] и добавляет в качестве нижней 
            границы выражение для результатов переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Текущее условие запроса <see cref="T:Terrasoft.Core.DB.QueryCondition"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsBetween(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            В текущем условии запроса устанавливает тип сравнения [Диапазон значений] и добавляет в качестве нижней 
            границы выражение для переданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Текущее условие запроса <see cref="T:Terrasoft.Core.DB.QueryCondition"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsBetween(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            В текущем условии запроса проверяет, входит ли значение выражения условия в диапазон, нижняя граница 
            которого равна значению переданного выражения.
            </summary>
            <param name="columnExpression">Выражение.</param>
            <returns>Текущее условие запроса <see cref="T:Terrasoft.Core.DB.QueryCondition"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsBetween(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            В текущем условии запроса устанавливает тип сравнения [Диапазон значений] и добавляет в качестве нижней 
            границы переданное выражение.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Текущее условие запроса <see cref="T:Terrasoft.Core.DB.QueryCondition"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.And(System.String)">
            <summary>
            В текущем условии запроса типа [Диапазон сравнения] добавляет в качестве верхней границы диапазона 
            выражение для колонки с заданным псевдонимом. 
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.And(System.String,System.String)">
            <summary>
            В текущем условии запроса типа [Диапазон сравнения] добавляет в качестве верхней границы диапазона 
            выражение для колонки с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.And(Terrasoft.Core.DB.Select)">
            <summary>
            В текущем условии запроса типа [Диапазон сравнения] добавляет в качестве верхней границы диапазона 
            выражение для результатов переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.And(Terrasoft.Core.DB.Query)">
            <summary>
            В текущем условии запроса типа [Диапазон сравнения] добавляет в качестве верхней границы диапазона 
            выражение для результатов переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.And(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            В текущем условии запроса типа [Диапазон сравнения] добавляет в качестве верхней границы диапазона 
            переданный параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.And(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            В текущем условии запроса типа [Диапазон сравнения] добавляет в качестве верхней границы диапазона 
            переданное выражение.
            </summary>
            <param name="columnExpression">Выражение.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.And(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            В текущем условии запроса типа [Диапазон сравнения] добавляет в качестве верхней границы диапазона 
            переданное выражение.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLike(System.String)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Совпадение с шаблоном] и в качестве шаблона 
            устанавливает выражение для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLike(System.String,System.String)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Совпадение с шаблоном] и в качестве шаблона 
            устанавливает выражение для колонки с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLike(Terrasoft.Core.DB.Select)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Совпадение с шаблоном] и в качестве шаблона 
            устанавливает выражение для результатов переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLike(Terrasoft.Core.DB.Query)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Совпадение с шаблоном] и в качестве шаблона 
            устанавливает выражение для результатов переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLike(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Совпадение с шаблоном] и в качестве шаблона 
            устанавливает выражение для переданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLike(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Совпадение с шаблоном] и в качестве шаблона 
            устанавливает переданное выражение.
            </summary>
            <param name="columnExpression">Выражение.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.IsLike(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Совпадение с шаблоном] и в качестве шаблона 
            устанавливает переданное выражение.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.StartsWith(System.String)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Начинается выражением] и с качестве шаблона сравнения 
            устанавливает выражение для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки, .</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.StartsWith(System.String,System.String)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Начинается выражением] и с качестве шаблона сравнения 
            устанавливает выражение для колонки с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.StartsWith(Terrasoft.Core.DB.Select)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Начинается выражением] и с качестве шаблона сравнения 
            устанавливает выражение для результатов переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.StartsWith(Terrasoft.Core.DB.Query)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Начинается выражением] и с качестве шаблона сравнения 
            устанавливает выражение для результатов переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.StartsWith(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Начинается выражением] и с качестве шаблона сравнения 
            устанавливает выражение для переданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.StartsWith(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Начинается выражением] и с качестве шаблона сравнения 
            устанавливает переданное выражение.
            </summary>
            <param name="columnExpression">Выражение.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.StartsWith(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Начинается выражением] и с качестве шаблона сравнения 
            устанавливает переданное выражение.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.ConsistsWith(System.String)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Содержит выражение] и с качестве шаблона сравнения 
            устанавливает выражение для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.ConsistsWith(System.String,System.String)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Содержит выражение] и с качестве шаблона сравнения 
            устанавливает выражение для колонки с заданным псевдонимом из указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.ConsistsWith(Terrasoft.Core.DB.Select)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Содержит выражение] и с качестве шаблона сравнения 
            устанавливает выражение для результатов переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.ConsistsWith(Terrasoft.Core.DB.Query)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Содержит выражение] и с качестве шаблона сравнения 
            устанавливает выражение для результатов переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.ConsistsWith(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Содержит выражение] и с качестве шаблона сравнения 
            устанавливает выражение для переданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.ConsistsWith(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Содержит выражение] и с качестве шаблона сравнения 
            устанавливает переданное выражение.
            </summary>
            <param name="columnExpression">Выражение.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.ConsistsWith(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Содержит выражение] и с качестве шаблона сравнения 
            устанавливает переданное выражение.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.EndsWith(System.String)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Заканчивается выражением] и с качестве шаблона 
            сравнения устанавливает выражение для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.EndsWith(System.String,System.String)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Заканчивается выражением] и с качестве шаблона 
            сравнения устанавливает выражение для колонки с заданным псевдонимом из указанного источника.</summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.EndsWith(Terrasoft.Core.DB.Select)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Заканчивается выражением] и с качестве шаблона 
            сравнения устанавливает выражение для результатов переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.EndsWith(Terrasoft.Core.DB.Query)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Заканчивается выражением] и с качестве шаблона 
            сравнения устанавливает выражение для переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.EndsWith(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Заканчивается выражением] и с качестве шаблона 
            сравнения устанавливает выражение для переданного параметра запроса.
            </summary>
            <param name="parameter">Параметр запроса.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.EndsWith(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Заканчивается выражением] и с качестве шаблона 
            сравнения устанавливает переданное выражение.
            </summary>
            <param name="columnExpression">Выражение.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.EndsWith(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            В текущее условие запроса добавляет сравнение типа [Заканчивается выражением] и с качестве шаблона 
            сравнения устанавливает переданное выражение.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.In(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            В текущем условии запроса устанавливает сравнение типа [Входит в набор значений] и добавляет в правую часть 
            условия выражение для заданного перечислителя псевдонимов колонок.
            </summary>
            <param name="sourceColumnAliases">Перечислитель псевдонимом колонок.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.In(System.String[])">
            <summary>
            В текущем условии запроса устанавливает сравнение типа [Входит в набор значений] и добавляет в правую часть 
            условия выражение для заданного массива псевдонимов колонок.
            </summary>
            <param name="sourceColumnAliases">Массив псевдонимов колонок.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.In(Terrasoft.Core.DB.Select)">
            <summary>
            В текущем условии запроса устанавливает сравнение типа [Входит в набор значений] и добавляет в правую часть 
            условия выражение для результатов переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.In(Terrasoft.Core.DB.Query)">
            <summary>
            В текущем условии запроса устанавливает сравнение типа [Входит в набор значений] и добавляет в правую часть 
            условия выражение для заданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.In(System.Collections.Generic.IEnumerable{Terrasoft.Core.DB.QueryParameter})">
            <summary>
            В текущем условии запроса устанавливает сравнение типа [Входит в набор значений] и добавляет в правую часть 
            условия выражение для заданного перечислителя параметров запроса.
            </summary>
            <param name="parameters">Перечислитель параметров запроса.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.In(Terrasoft.Core.DB.QueryParameter[])">
            <summary>
            В текущем условии запроса устанавливает сравнение типа [Входит в набор значений] и добавляет в правую часть 
            условия выражение для заданного массива параметров запроса.
            </summary>
            <param name="parameters">Массив параметров запроса.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.In(System.Collections.Generic.IEnumerable{Terrasoft.Core.DB.QueryColumnExpression})">
            <summary>
            В текущем условии запроса устанавливает сравнение типа [Входит в набор значений] и добавляет в правую часть 
            условия выражение для заданного перечислителя выражений колонок.
            </summary>
            <param name="columnExpressions">Перечислитель выражений колонок.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.In(System.Collections.Generic.IEnumerable{Terrasoft.Core.DB.IQueryColumnExpressionConvertible})">
            <summary>
            В текущем условии запроса устанавливает сравнение типа [Входит в набор значений] и добавляет в правую часть 
            условия выражение для заданного перечислителя выражений колонок.
            </summary>
            <param name="expressions">Перечислитель выражений колонок.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.In(Terrasoft.Core.DB.QueryColumnExpression[])">
            <summary>
            В текущем условии запроса устанавливает сравнение типа [Входит в набор значений] и добавляет в правую часть 
            условия выражение для заданного массива выражений колонок.
            </summary>
            <param name="columnExpressions">Массив выражений колонок.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.In(Terrasoft.Core.DB.IQueryColumnExpressionConvertible[])">
            <summary>
            В текущем условии запроса устанавливает сравнение типа [Входит в набор значений] и добавляет в правую часть 
            условия выражение для заданного массива выражений колонок.
            </summary>
            <param name="expressions">Массив выражений колонок.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.Exists(Terrasoft.Core.DB.Select)">
            <summary>
            В текущем условии запроса устанавливает сравнение типа [Существует по заданному условию] и добавляет в 
            качестве условия проверки выражение для результатов переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.Exists(Terrasoft.Core.DB.Query)">
            <summary>
            В текущем условии запроса устанавливает сравнение типа [Существует по заданному условию] и добавляет в 
            качестве условия проверки выражение для результатов переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryCondition.Exists(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            В текущем условии запроса устанавливает сравнение типа [Существует по заданному условию] и добавляет в 
            качестве условия проверки переданное выражение.
            </summary>
            <param name="columnExpression">Выражение.</param>
            <returns>Экземпляр запроса <see cref="T:Terrasoft.Core.DB.Query"/>, которому принадлежит текущее условие.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryCondition.ParentQuery">
            <summary>
            Запрос, которому принадлежит текущее условие.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryCondition.Name">
            <summary>
            Имя условия.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryCondition.ConditionType">
            <summary>
            Тип условия.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryCondition.IsNot">
            <summary>
            Определяет, использовать ли оператор NOT перед условием.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryCondition.LogicalOperation">
            <summary>
            Логический оператор, который связывает данное условие с предыдущим условием запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryCondition.LeftExpression">
            <summary>
            Выражение левой части условия.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryCondition.RightExpressions">
            <summary>
            Коллекция выражений правой части условия.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryCondition.HasRightExpressions">
            <summary>
            Определяет, есть ли хотя бы одно выражение в правой части условия.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.QueryFunction">
            <summary>
            Базовый класс функции выражения.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.Negate(Terrasoft.Core.DB.QueryFunction)">
            <summary>
            Возвращает выражение отрицания значения переданной функции.
            </summary>
            <param name="operand">Функция выражения.</param>
            <returns>Выражение колонки, представляющее отрицание функции выражения <paramref name="operand"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.op_UnaryNegation(Terrasoft.Core.DB.QueryFunction)">
            <summary>
            Перегрузка оператора отрицания переданной функции выражения.
            </summary>
            <param name="operand">Функция выражения.</param>
            <returns>Отрицание значения функции выражения <paramref name="operand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.Add(Terrasoft.Core.DB.QueryFunction,Terrasoft.Core.DB.QueryFunction)">
            <summary>
            Возвращает выражение арифметического сложения переданных функций выражения.
            </summary>
            <param name="leftOperand">Функция выражения - левый операнд в операции сложения.</param>
            <param name="rightOperand">Функция выражения - правый операнд в операции сложения.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/>, представляющий сумму операндов 
            <paramref name="leftOperand"/> И <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.op_Addition(Terrasoft.Core.DB.QueryFunction,Terrasoft.Core.DB.QueryFunction)">
            <summary>
            Перегрузка оператора сложения двух функций выражений.
            </summary>
            <param name="leftOperand">Функция выражения - левый операнд в операции сложения.</param>
            <param name="rightOperand">Функция выражения - правый операнд в операции сложения.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/>, представляющий сумму операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.Subtract(Terrasoft.Core.DB.QueryFunction,Terrasoft.Core.DB.QueryFunction)">
            <summary>
            Возвращает выражение вычитания переданной правой функции выражения из переданной левой функции выражения.
            </summary>
            <param name="leftOperand">Функция выражения - левый операнд в операции вычитания.</param>
            <param name="rightOperand">Функция выражения - правый операнд в функции вычитания.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/>, представляющий разность между операндами 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.op_Subtraction(Terrasoft.Core.DB.QueryFunction,Terrasoft.Core.DB.QueryFunction)">
            <summary>
            Перегрузка оператора вычитания правой функции выражения из левого функции выражения.
            </summary>
            <param name="leftOperand">Функция выражения - левый операнд в операции вычитания.</param>
            <param name="rightOperand">Функция выражения - правый операнд в операции вычитания.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/>, представляющий разность между операндами 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/></returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.Multiply(Terrasoft.Core.DB.QueryFunction,Terrasoft.Core.DB.QueryFunction)">
            <summary>
            Возвращает выражение умножения переданных функций выражений.
            </summary>
            <param name="leftOperand">Функция выражения - левый операнд в операции умножения.</param>
            <param name="rightOperand">Функция выражения - правый операнд в операции умножения.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/>, являющийся произведением операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.op_Multiply(Terrasoft.Core.DB.QueryFunction,Terrasoft.Core.DB.QueryFunction)">
            <summary>
            Перегрузка оператора умножения двух функций выражений.
            </summary>
            <param name="leftOperand">Функция запроса - левый операнд в операции умножения.</param>
            <param name="rightOperand">Функция запроса - правый операнд в операции умножения.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/>, представляющий произведение операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.Divide(Terrasoft.Core.DB.QueryFunction,Terrasoft.Core.DB.QueryFunction)">
            <summary>
            Возвращает выражение деления переданной левой функции выражения на переданную правую функцию выражения.
            </summary>
            <param name="leftOperand">Функция выражения - левый операнд в операции деления.</param>
            <param name="rightOperand">Функция выражения - правый операнд в операции деления.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/>, представляющий частное от деления операнда 
            <paramref name="leftOperand"/> на операнд <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.op_Division(Terrasoft.Core.DB.QueryFunction,Terrasoft.Core.DB.QueryFunction)">
            <summary>
            Перегрузка оператора деления функций выражений.
            </summary>
            <param name="leftOperand">Функция выражения - левый операнд в операции деления.</param>
            <param name="rightOperand">Функция выражения - правый операнд в операции деления.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/>, представляющий частное от деления операнда 
            <paramref name="leftOperand"/> на операнд <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.Clone">
            <summary>
            Создает копию текущего экземпляра <see cref="T:Terrasoft.Core.DB.QueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryFunction"/>, представляющий копию текущего экземпляра.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием переданных экземпляра <see cref="T:System.Text.StringBuilder"/> и 
            построителя запросов <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется 
            текст запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.AddUsingParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Добавляет переданную коллекцию параметров в аргументы функции.
            </summary>
            <param name="resultParameters">Коллекция параметров запроса, которые добавляются в аргументы функции.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.GetQueryColumnExpressions">
            <summary>
            Возвращает коллекцию выражений колонки запроса для текущей функции запроса.
            </summary>
            <returns>Коллекция <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для текущей функции запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryFunction.GetQueryColumnExpression">
            <summary>
            Возвращает выражение колонки запроса для текущей функции запроса.
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для текущей функции запроса.</returns>
        </member>
        <member name="T:Terrasoft.Core.DB.AggregationEvalType">
            <summary>
            Область применения агрегирующей функции.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.AggregationEvalType.None">
            <summary>
            Область не задана.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.AggregationEvalType.All">
            <summary>
            Применяется ко всем значениям.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.AggregationEvalType.Distinct">
            <summary>
            Применяется к уникальным значениям.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.AggregationQueryFunction">
            <summary>
            Агрегирующая функция выражения.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.AggregationQueryFunction.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.AggregationQueryFunction"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.AggregationQueryFunction.#ctor(Terrasoft.Common.AggregationTypeStrict,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.AggregationQueryFunction"/> с заданным типом агрегирующей функции 
            для указанного выражения колонки.
            </summary>
            <param name="aggregationType">Тип агрегирующей функции.</param>
            <param name="expression">Выражение колонки, к которому применяется агрегирующая функция.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.AggregationQueryFunction.#ctor(Terrasoft.Common.AggregationTypeStrict,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.AggregationQueryFunction"/> с заданным типом агрегирующей функции 
            для указанного выражения.
            </summary>
            <param name="aggregationType">Тип агрегирующей функции.</param>
            <param name="expression">Выражение, к которому применяется агрегирующая функция.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="expression"/> передано 
            значение <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.AggregationQueryFunction.#ctor(Terrasoft.Core.DB.AggregationQueryFunction)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.AggregationQueryFunction"/>, являющийся клоном переданной 
            агрегирующей функции выражения.
            </summary>
            <param name="source">Агрегирующая функция выражения <see cref="T:Terrasoft.Core.DB.AggregationQueryFunction"/>, клон которой 
            создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.AggregationQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием заданных экземпляров <see cref="T:System.Text.StringBuilder"/> и 
            построителя запроса<see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.AggregationQueryFunction.AddUsingParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Добавляет переданную коллекцию параметров в аргументы функции.
            </summary>
            <param name="resultParameters">Коллекция параметров запроса, которые добавляются в аргументы функции.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DB.AggregationQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.AggregationQueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.AggregationQueryFunction"/>, являющийся клоном текущего экземпляра.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.AggregationQueryFunction.All">
            <summary>
            Устанавливает для текущей агрегирующей функции область применения [Ко всем значениям].
            </summary>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.AggregationQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.AggregationQueryFunction.Distinct">
            <summary>
            Устанавливает для текущей агрегирующей функции область применения [К уникальным значениям].
            </summary>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.AggregationQueryFunction"/>.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.AggregationQueryFunction.AggregationType">
            <summary>
            Тип агрегирующей функции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.AggregationQueryFunction.AggregationEvalType">
            <summary>
            Область применения агрегирующей функции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.AggregationQueryFunction.Expression">
            <summary>
            Выражение аргумента функции.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.IsNullQueryFunction">
            <summary>
            Функция для замены значения <c>null</c> замещающим выражением. 
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.IsNullQueryFunction.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.IsNullQueryFunction"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.IsNullQueryFunction.#ctor(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.IsNullQueryFunction"/> для заданных проверяемого выражения и 
            замещающего выражения.
            </summary>
            <param name="checkExpression">Выражение, которое проверяется на равенство <c>null</c>.</param>
            <param name="replacementExpression">Выражение, которое возвращается функцией, если 
            <paramref name="checkExpression"/> равно <c>null</c>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.IsNullQueryFunction.#ctor(Terrasoft.Core.DB.IQueryColumnExpressionConvertible,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.IsNullQueryFunction"/> для заданных проверяемого выражения и 
            замещающего выражения.
            </summary>
            <param name="checkExpression">Выражение, которое проверяется на равенство <c>null</c>.</param>
            <param name="replacementExpression">Выражение, которое возвращается функцией, если 
            <paramref name="checkExpression"/> равно <c>null</c>.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве одного из параметров 
            <paramref name="checkExpression"/> или <paramref name="replacementExpression"/> передано значение 
            <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.IsNullQueryFunction.#ctor(Terrasoft.Core.DB.IsNullQueryFunction)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.IsNullQueryFunction"/>, являющийся клоном переданной 
            функции выражения.
            </summary>
            <param name="source">Функция <see cref="T:Terrasoft.Core.DB.IsNullQueryFunction"/>, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.IsNullQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием заданных экземпляров <see cref="T:System.Text.StringBuilder"/> и 
            построителя запросов <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.IsNullQueryFunction.AddUsingParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Добавляет переданную коллекцию параметров в аргументы функции.
            </summary>
            <param name="resultParameters">Коллекция параметров запроса, которые добавляются в аргументы функции.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DB.IsNullQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.IsNullQueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.IsNullQueryFunction"/>, являющийся клоном текущего экземпляра.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DB.IsNullQueryFunction.CheckExpression">
            <summary>
            Выражение аргумента функции, которое проверяется на равенство значению <c>null</c>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.IsNullQueryFunction.ReplacementExpression">
            <summary>
            Выражение аргумента функции, которое возвращается, если проверяемое выражение равно <c>null</c>.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.CreateGuidQueryFunction">
            <summary>
            Функция выражения нового идентификатора.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.CreateGuidQueryFunction.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.CreateGuidQueryFunction"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.CreateGuidQueryFunction.#ctor(Terrasoft.Core.DB.CreateGuidQueryFunction)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.CreateGuidQueryFunction"/>, являющийся клоном переданной 
            функции. 
            </summary>
            <param name="source">Функция <see cref="T:Terrasoft.Core.DB.CreateGuidQueryFunction"/>, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.CreateGuidQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием заданных экземпляров <see cref="T:System.Text.StringBuilder"/> и 
            построителя запросов <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запроса к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.CreateGuidQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.CreateGuidQueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.CreateGuidQueryFunction"/>, являющийся клоном текущего экземпляра.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.DB.CurrentDateTimeQueryFunction">
            <summary>
            Функция выражения текущей даты и времени.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.CurrentDateTimeQueryFunction.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.CurrentDateTimeQueryFunction"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.CurrentDateTimeQueryFunction.#ctor(Terrasoft.Core.DB.CurrentDateTimeQueryFunction)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.CurrentDateTimeQueryFunction"/>, являющийся клоном переданной 
            функции.
            </summary>
            <param name="source">Функция <see cref="T:Terrasoft.Core.DB.CurrentDateTimeQueryFunction"/>, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.CurrentDateTimeQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием заданных экземпляров <see cref="T:System.Text.StringBuilder"/> и 
            построителя запросов <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.CurrentDateTimeQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.CurrentDateTimeQueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.CurrentDateTimeQueryFunction"/>, являющийся клоном текущего экземпляра.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.DB.CoalesceQueryFunction">
            <summary>
            Функция возврата первого выражения из списка аргументов, не равного <c>null</c>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.CoalesceQueryFunction.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.CoalesceQueryFunction"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.CoalesceQueryFunction.#ctor(Terrasoft.Core.DB.CoalesceQueryFunction)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.CoalesceQueryFunction"/>, являющийся клоном переданной функции.
            </summary>
            <param name="source">Функция <see cref="T:Terrasoft.Core.DB.CoalesceQueryFunction"/>, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.CoalesceQueryFunction.#ctor(Terrasoft.Core.DB.QueryColumnExpressionCollection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.CoalesceQueryFunction"/> для переданной коллекции выражений 
            колонок.
            </summary>
            <param name="expressions">Коллекция выражений колонок запроса.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="expressions"/> передано 
            значение <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">Если коллекция <paramref name="expressions"/> не содержит ни 
            одного выражения колонки.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.CoalesceQueryFunction.#ctor(Terrasoft.Core.DB.QueryColumnExpression[])">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.CoalesceQueryFunction"/> для переданного массива выражений 
            колонок.
            </summary>
            <param name="expressions">Массив выражений колонок запроса.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="expressions"/> передано 
            значение <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">Если массив <paramref name="expressions"/> не содержит ни одного 
            выражения колонки.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.CoalesceQueryFunction.#ctor(Terrasoft.Core.DB.IQueryColumnExpressionConvertible[])">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.CoalesceQueryFunction"/> для переданного массива выражений
            колонок.
            </summary>
            <param name="expressions">Массив выражения колонок.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="expressions"/> передано 
            значение <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">Если массив <paramref name="expressions"/> не содержит ни одного 
            выражения колонки.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.CoalesceQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием заданных экземпляров <see cref="T:System.Text.StringBuilder"/> и 
            построителя запросов <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запрос в к базе данных.</param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если коллекция аргументов функции не содержит ни одного 
            выражения.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.CoalesceQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.CoalesceQueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.CoalesceQueryFunction"/>, являющийся клоном текущего экземпляра.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DB.CoalesceQueryFunction.Expressions">
            <summary>
            Коллекция выражений аргументов функции.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.DatePartQueryFunctionInterval">
            <summary>
            Часть даты.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.DatePartQueryFunctionInterval.Day">
            <summary>
            День.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.DatePartQueryFunctionInterval.Week">
            <summary>
            Неделя.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.DatePartQueryFunctionInterval.Month">
            <summary>
            Месяц.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.DatePartQueryFunctionInterval.Year">
            <summary>
            Год.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.DatePartQueryFunctionInterval.Weekday">
            <summary>
            День недели.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.DatePartQueryFunctionInterval.Hour">
            <summary>
            Час.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.DatePartQueryFunctionInterval.HourMinute">
            <summary>
            Минута.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.DatePartQueryFunction">
            <summary>
            Функция выражения части значения типа Дата/Время. 
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.DatePartQueryFunction.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.DatePartQueryFunction"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.DatePartQueryFunction.#ctor(Terrasoft.Core.DB.DatePartQueryFunctionInterval,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.DatePartQueryFunction"/> с заданным выражением колонки типа 
            Дата/Время и указанной частью даты.
            </summary>
            <param name="interval">Часть даты.</param>
            <param name="expression">Выражение колонки типа Дата/Время.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DatePartQueryFunction.#ctor(Terrasoft.Core.DB.DatePartQueryFunctionInterval,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.DatePartQueryFunction"/> с заданным выражением колонки типа 
            Дата/Время и указанной частью даты.
            </summary>
            <param name="interval">Часть даты.</param>
            <param name="expression">Выражение колонки типа Дата/Время.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="expression"/> передано 
            значение <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.DatePartQueryFunction.#ctor(Terrasoft.Core.DB.DatePartQueryFunction)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.DatePartQueryFunction"/>, являющийся клоном переданной функции.
            </summary>
            <param name="source">Функция <see cref="T:Terrasoft.Core.DB.DatePartQueryFunction"/>, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DatePartQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием заданных экземпляра <see cref="T:System.Text.StringBuilder"/> и 
            построителя запросов <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DatePartQueryFunction.AddUsingParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Добавляет в аргументы функции переданную коллекцию параметров.
            </summary>
            <param name="resultParameters">Коллекция параметров запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DatePartQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.DatePartQueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.DatePartQueryFunction"/>, являющийся клоном текущего экземпляра.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DB.DatePartQueryFunction.Expression">
            <summary>
            Выражение аргумента функции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.DatePartQueryFunction.Interval">
            <summary>
            Часть даты, возвращаемая функцией.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.DateAddQueryFunction">
            <summary>
            Функция выражения даты, полученной путем добавления указанного промежутка времени к заданной дате.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.DateAddQueryFunction.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.DateAddQueryFunction.#ctor(Terrasoft.Core.DB.DatePartQueryFunctionInterval,System.Int32,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/> с заданными параметрами.
            </summary>
            <param name="interval">Часть даты, к которой добавляется временной промежуток.</param>
            <param name="number">Значение, которое добавляется к <paramref name="interval"/>.</param>
            <param name="expression">Выражение колонки, содержащей исходную дату.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DateAddQueryFunction.#ctor(Terrasoft.Core.DB.DatePartQueryFunctionInterval,Terrasoft.Core.DB.IQueryColumnExpressionConvertible,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/> с заданными параметрами.
            </summary>
            <param name="interval">Часть даты, к которой добавляется временной промежуток.</param>
            <param name="numberExpression">Значение, которое добавляется к <paramref name="interval"/>.</param>
            <param name="expression">Выражение колонки, содержащей исходную дату.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DateAddQueryFunction.#ctor(Terrasoft.Core.DB.DatePartQueryFunctionInterval,System.Int32,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/> с заданными параметрами.
            </summary>
            <param name="interval">Часть даты, к которой добавляется временной промежуток.</param>
            <param name="number">Значение, которое добавляется к <paramref name="interval"/>.</param>
            <param name="expression">Выражение колонки, содержащей исходную дату.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра передано значение <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.DateAddQueryFunction.#ctor(Terrasoft.Core.DB.DateAddQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, являющийся клоном переданной функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateAddQueryFunction"/>, клон которой создается.</param>
        </member>
        <member name="F:Terrasoft.Core.DB.DateAddQueryFunction._number">
            <summary>
            Добавляемый временной промежуток.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.DateAddQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием заданных экземпляра <see cref="T:System.Text.StringBuilder"/> и 
            построителя запросов <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DateAddQueryFunction.AddUsingParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Добавляет в аргументы функции переданную коллекцию параметров.
            </summary>
            <param name="resultParameters">Коллекция параметров запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DateAddQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.DatePartQueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.DatePartQueryFunction"/>, являющийся клоном текущего экземпляра.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DB.DateAddQueryFunction.Expression">
            <summary>
            Выражение колонки, содержащей исходную дату.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.DateAddQueryFunction.Interval">
            <summary>
            Часть даты, к которой добавляется временной промежуток.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.DateAddQueryFunction.NumberExpression">
            <summary>
            Выражение, содержащие добавляемый временной промежуток.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.DateDiffQueryFunctionInterval">
            <summary>
            Единица измерения разницы дат.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.DateDiffQueryFunctionInterval.Year">
            <summary>
            Год.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.DateDiffQueryFunctionInterval.Month">
            <summary>
            Месяц.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.DateDiffQueryFunctionInterval.Day">
            <summary>
            День.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.DateDiffQueryFunctionInterval.Hour">
            <summary>
            Час.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.DateDiffQueryFunctionInterval.Minute">
            <summary>
            Минута.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.DateDiffQueryFunction">
            <summary>
            Функция выражения разницы дат, полученного путем вычитания заданных дат.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.DateDiffQueryFunction.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.DB.DateDiffQueryFunction"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.DateDiffQueryFunction.#ctor(Terrasoft.Core.DB.DateDiffQueryFunctionInterval,Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.DB.DateDiffQueryFunction"/> с заданными параметрами.
            </summary>
            <param name="interval">Единица измерения разницы дат.</param>
            <param name="startDateExpression">Выражение колонки, содержащей начальную дату.</param>
            <param name="endDateExpression">Выражение колонки, содержащей конечную дату.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DateDiffQueryFunction.#ctor(Terrasoft.Core.DB.DateDiffQueryFunctionInterval,Terrasoft.Core.DB.IQueryColumnExpressionConvertible,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.DB.DateDiffQueryFunction"/> с заданными параметрами.
            </summary>
            <param name="interval">Единица измерения разницы дат.</param>
            <param name="startDateExpression">Выражение колонки, содержащей начальную дату.</param>
            <param name="endDateExpression">Выражение колонки, содержащей конечную дату.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра передано значение <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.DB.DateDiffQueryFunction.#ctor(Terrasoft.Core.DB.DateDiffQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.DB.DateDiffQueryFunction"/>, являющийся клоном переданной функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.DB.DateDiffQueryFunction"/>, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DateDiffQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием заданных экземпляра <see cref="T:System.Text.StringBuilder"/> и 
            построителя запросов <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DateDiffQueryFunction.AddUsingParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Добавляет в аргументы функции переданную коллекцию параметров.
            </summary>
            <param name="resultParameters">Коллекция параметров запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DateDiffQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.DatePartQueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.DateDiffQueryFunction"/>, являющийся клоном текущего экземпляра.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DB.DateDiffQueryFunction.StartDateExpression">
            <summary>
            Выражение колонки, содержащей начальную дату.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.DateDiffQueryFunction.EndDateExpression">
            <summary>
            Выражение колонки, содержащей конечную дату.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.DateDiffQueryFunction.Interval">
            <summary>
            Единица измерения разницы дат, возвращаемая функцией.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.CastQueryFunction">
            <summary>
            Функция приведения выражения аргумента к заданному типу данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.CastQueryFunction.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.CastQueryFunction"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.CastQueryFunction.#ctor(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DBDataValueType)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.CastQueryFunction"/> с заданными выражением колонки и целевым 
            типом данных.
            </summary>
            <param name="expression">Выражение колонки.</param>
            <param name="castType">Целевой тип данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.CastQueryFunction.#ctor(Terrasoft.Core.DB.IQueryColumnExpressionConvertible,Terrasoft.Core.DBDataValueType)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.CastQueryFunction"/> с заданными выражением колонки и целевым 
            типом данных.
            </summary>
            <param name="expression">Выражение колонки.</param>
            <param name="castType">Целевой тип данных.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="expression"/> передано 
            значение <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.CastQueryFunction.#ctor(Terrasoft.Core.DB.CastQueryFunction)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.CastQueryFunction"/>, являющийся клоном переданной функции.
            </summary>
            <param name="source">Функция <see cref="T:Terrasoft.Core.DB.CastQueryFunction"/>, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.CastQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием заданных экземпляра <see cref="T:System.Text.StringBuilder"/> и 
            построителя запросов <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.CastQueryFunction.AddUsingParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Добавляет в аргументы функции переданную коллекцию параметров.
            </summary>
            <param name="resultParameters">Коллекция параметров запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.CastQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.CastQueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.CastQueryFunction"/>, являющийся клоном текущего экземпляра.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.CastQueryFunction.Expression">
            <summary>
            Выражение аргумента функции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.CastQueryFunction.CastType">
            <summary>
            Целевой тип данных.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.UpperQueryFunction">
            <summary>
            Функция для преобразования символов выражения аргумента к верхнему регистру.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.UpperQueryFunction.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.UpperQueryFunction"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.UpperQueryFunction.#ctor(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.UpperQueryFunction"/> для заданного выражения колонки.
            </summary>
            <param name="expression">Выражение колонки запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.UpperQueryFunction.#ctor(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.UpperQueryFunction"/> для заданного выражения колонки.
            </summary>
            <param name="expression">Выражение колонки запроса.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="expression"/> передано 
            значение <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.UpperQueryFunction.#ctor(Terrasoft.Core.DB.UpperQueryFunction)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.UpperQueryFunction"/>, являющийся клоном переданной функции.
            </summary>
            <param name="source">Функция <see cref="T:Terrasoft.Core.DB.UpperQueryFunction"/>, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.UpperQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием заданных экземпляра <see cref="T:System.Text.StringBuilder"/> и 
            построителя запросов <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.UpperQueryFunction.AddUsingParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Добавляет в аргументы функции переданную коллекцию параметров.
            </summary>
            <param name="resultParameters">Коллекция параметров запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.UpperQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.UpperQueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.UpperQueryFunction"/>, являющийся клоном текущего экземпляра.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.UpperQueryFunction.Expression">
            <summary>
            Выражение аргумента функции.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.CustomQueryFunction">
            <summary>
            Custom function.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.CustomQueryFunction.#ctor">
            <summary>
            Instantiates new intance of <see cref="T:Terrasoft.Core.DB.CustomQueryFunction"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.CustomQueryFunction.#ctor(System.String,Terrasoft.Core.DB.QueryColumnExpressionCollection)">
            <summary>
            Instantiates new intance of <see cref="T:Terrasoft.Core.DB.CustomQueryFunction"/> with function name 
            and given column expressions collection.
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="expressions">Column expressions.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.CustomQueryFunction.#ctor(System.String,Terrasoft.Core.DB.QueryColumnExpression[])">
            <summary>
            Instantiates new intance of <see cref="T:Terrasoft.Core.DB.CustomQueryFunction"/> with function name 
            and given column expressions collection.
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="expressions">Column expressions.</param>
            <exception cref="T:System.ArgumentNullException">expressions</exception>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">If array <paramref name="expressions"/> 
            is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If array <paramref name="expressions"/>
            is <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.CustomQueryFunction.#ctor(System.String,Terrasoft.Core.DB.IQueryColumnExpressionConvertible[])">
            <summary>
            Instantiates new intance of <see cref="T:Terrasoft.Core.DB.CustomQueryFunction"/> with function name 
            and given column expressions collection.
            </summary>
            <param name="functionName">Name of the function.</param>
            <param name="expressions">Column expressions.</param>
            <exception cref="T:System.ArgumentNullException">expressions</exception>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">If array <paramref name="expressions"/> is empty.</exception>
            <exception cref="T:System.ArgumentNullException">If array <paramref name="expressions"/> 
            is <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.CustomQueryFunction.#ctor(Terrasoft.Core.DB.CustomQueryFunction)">
            <summary>
            Instantiates new intance of <see cref="T:Terrasoft.Core.DB.CustomQueryFunction"/> with given custom function.
            </summary>
            <param name="source">Function <see cref="T:Terrasoft.Core.DB.CustomQueryFunction"/>, clone of which will be created.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.CustomQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Forms sql query text with given <see cref="T:System.Text.StringBuilder"/> and <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Instance of <see cref="T:System.Text.StringBuilder"/>, which forms sql text.</param>
            <param name="dbEngine">Instance of db engine.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.CustomQueryFunction.AddUsingParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Adds given parameters to collection.
            </summary>
            <param name="resultParameters">Query parameters сollection.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.CustomQueryFunction.Clone">
            <summary>
            Clones current instance of <see cref="T:Terrasoft.Core.DB.CustomQueryFunction"/>.
            </summary>
            <returns>New cloned instance of <see cref="T:Terrasoft.Core.DB.CustomQueryFunction"/>.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.CustomQueryFunction.Expressions">
            <summary>
            Function column expression.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.DataLengthQueryFunction">
            <summary>
            Функция для определения числа байтов, использованных для представления выражения.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.DataLengthQueryFunction.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.DataLengthQueryFunction"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.DataLengthQueryFunction.#ctor(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.DataLengthQueryFunction"/> для заданного выражения колонки.
            </summary>
            <param name="expression">Выражение колонки запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DataLengthQueryFunction.#ctor(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.DataLengthQueryFunction"/> для заданного выражения колонки.
            </summary>
            <param name="columnNameExpression">Выражение колонки запроса.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="columnNameExpression"/> 
            передано значение <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.DataLengthQueryFunction.#ctor(Terrasoft.Core.DB.DataLengthQueryFunction)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.DataLengthQueryFunction"/>, являющийся клоном переданной функции.
            </summary>
            <param name="source">Функция <see cref="T:Terrasoft.Core.DB.DataLengthQueryFunction"/>, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DataLengthQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием заданных экземпляра <see cref="T:System.Text.StringBuilder"/> и 
            построителя запросов <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DataLengthQueryFunction.AddUsingParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Добавляет в аргументы функции переданную коллекцию параметров.
            </summary>
            <param name="resultParameters">Коллекция параметров запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DataLengthQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.DataLengthQueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.DataLengthQueryFunction"/>, являющийся клоном текущего экземпляра.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DB.DataLengthQueryFunction.Expression">
            <summary>
            Выражение аргумента функции.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.TrimQueryFunction">
            <summary>
            Функция для удаления начальных и конечных пробелов из выражения.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.TrimQueryFunction.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.TrimQueryFunction"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.TrimQueryFunction.#ctor(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.TrimQueryFunction"/> для заданного выражения колонки.
            </summary>
            <param name="expression">Выражение колонки запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.TrimQueryFunction.#ctor(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.TrimQueryFunction"/> для заданного выражения колонки.
            </summary>
            <param name="expression">Выражение колонки запроса.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="expression"/> передано 
            значение <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.TrimQueryFunction.#ctor(Terrasoft.Core.DB.TrimQueryFunction)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.TrimQueryFunction"/>, являющийся клоном переданной функции.
            </summary>
            <param name="source">Функция <see cref="T:Terrasoft.Core.DB.TrimQueryFunction"/>, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.TrimQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием заданных экземпляра <see cref="T:System.Text.StringBuilder"/> и 
            построителя запросов <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.TrimQueryFunction.AddUsingParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Добавляет в аргументы функции переданную коллекцию параметров.
            </summary>
            <param name="resultParameters">Коллекция параметров запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.TrimQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.DataLengthQueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.DataLengthQueryFunction"/>, являющийся клоном текущего экземпляра.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DB.TrimQueryFunction.Expression">
            <summary>
            Выражение аргумента функции.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.LengthQueryFunction">
            <summary>
            Функция для возврата длины выражения.
            </summary>
            <remarks>Длина измеряется в единицах измерения, соответствующих типу данных выражения.</remarks>
        </member>
        <member name="M:Terrasoft.Core.DB.LengthQueryFunction.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.LengthQueryFunction"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.LengthQueryFunction.#ctor(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.LengthQueryFunction"/> для заданного выражения колонки.
            </summary>
            <param name="expression">Выражение колонки запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.LengthQueryFunction.#ctor(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.LengthQueryFunction"/> для заданного выражения колонки.
            </summary>
            <param name="expression">Выражение колонки запроса.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="expression"/> передано 
            значение <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.LengthQueryFunction.#ctor(Terrasoft.Core.DB.LengthQueryFunction)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.LengthQueryFunction"/>, являющийся клоном переданной функции.
            </summary>
            <param name="source">Функция <see cref="T:Terrasoft.Core.DB.LengthQueryFunction"/>, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.LengthQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием заданных экземпляра <see cref="T:System.Text.StringBuilder"/> и 
            построителя запросов <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.LengthQueryFunction.AddUsingParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Добавляет в аргументы функции переданную коллекцию параметров.
            </summary>
            <param name="resultParameters">Коллекция параметров запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.LengthQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.LengthQueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.LengthQueryFunction"/>, являющийся клоном текущего экземпляра.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DB.LengthQueryFunction.Expression">
            <summary>
            Выражение аргумента функции.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.SubstringQueryFunction">
            <summary>
            Function which gets part of a string.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.SubstringQueryFunction.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.DB.SubstringQueryFunction"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.SubstringQueryFunction.#ctor(Terrasoft.Core.DB.QueryColumnExpression,System.Int32,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.DB.SubstringQueryFunction"/> class with specified column expression,
            substring start position and length.
            </summary>
            <param name="expression">Column expression.</param>
            <param name="start">Substring start position.</param>
            <param name="length">Substring length</param>
        </member>
        <member name="M:Terrasoft.Core.DB.SubstringQueryFunction.#ctor(Terrasoft.Core.DB.IQueryColumnExpressionConvertible,System.Int32,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.DB.SubstringQueryFunction"/> class with specified column expression,
            substring start position and length.
            </summary>
            <param name="expression">Column expression.</param>
            <param name="start">Substring start position.</param>
            <param name="length">Substring length</param>
        </member>
        <member name="M:Terrasoft.Core.DB.SubstringQueryFunction.#ctor(Terrasoft.Core.DB.SubstringQueryFunction)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.DB.SubstringQueryFunction"/> class by source function cloning.
            </summary>
            <param name="source">Source function.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.SubstringQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Generates the request body using <see cref="T:System.Text.StringBuilder"/> and <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Instance of the <see cref="T:System.Text.StringBuilder"/>, which used in query builder.</param>
            <param name="dbEngine">Instance of the <see cref="T:Terrasoft.Core.DB.DBEngine"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.SubstringQueryFunction.AddUsingParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Adds collection of query parameters to the function.
            </summary>
            <param name="resultParameters">Collection of query parameters.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.SubstringQueryFunction.Clone">
            <summary>
            Creates clone of the current instance <see cref="T:Terrasoft.Core.DB.SubstringQueryFunction"/>
            </summary>
            <returns>New instance <see cref="T:Terrasoft.Core.DB.SubstringQueryFunction"/>, that is a clone of the current 
            instance</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.SubstringQueryFunction.Expression">
            <summary>
            Column expression.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.SubstringQueryFunction.StartExpression">
            <summary>
            Substring start position.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.SubstringQueryFunction.LengthExpression">
            <summary>
            Substring length
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.ConcatQueryFunction">
            <summary>
            Функция для формирования строки, являющейся результатом объединения строковых значений аргументов функции.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.ConcatQueryFunction.#ctor(Terrasoft.Core.DB.QueryColumnExpressionCollection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.ConcatQueryFunction"/> для переданной коллекции выражений.
            </summary>
            <param name="expressions">Коллекция выражений колонок.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="expressions"/> передано 
            значение <c>null</c> либо коллекция <paramref name="expressions"/> не содержит ни одного элемента.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.DB.ConcatQueryFunction.#ctor(Terrasoft.Core.DB.ConcatQueryFunction)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.ConcatQueryFunction"/>, являющийся клоном переданной функции.
            </summary>
            <param name="source">Функция <see cref="T:Terrasoft.Core.DB.ConcatQueryFunction"/>, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.ConcatQueryFunction.BuildSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.DBEngine)">
            <summary>
            Формирует текст запроса с использованием заданных экземпляра <see cref="T:System.Text.StringBuilder"/> и 
            построителя запросов <see cref="T:Terrasoft.Core.DB.DBEngine"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
            <param name="dbEngine">Экземпляр построителя запросов к базе данных.</param>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если коллекция аргументов функции не содержит ни одного 
            выражения.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.ConcatQueryFunction.AddUsingParameters(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Добавляет в аргументы функции переданную коллекцию параметров.
            </summary>
            <param name="resultParameters">Коллекция параметров запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.ConcatQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.ConcatQueryFunction"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.ConcatQueryFunction"/>, являющийся клоном текущего экземпляра.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DB.ConcatQueryFunction.Expressions">
            <summary>
            Коллекция выражений аргументов функции.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.QueryParameter">
            <summary>
            Представляет параметр запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameter.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryParameter"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameter.#ctor(System.Object)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryParameter"/> с заданным значением.
            </summary>
            <param name="value">Значение параметра запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameter.#ctor(System.String,System.Object)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryParameter"/> с заданными именем и значением.
            </summary>
            <param name="name">Имя параметра запроса.</param>
            <param name="value">Значение параметра запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameter.#ctor(System.String,System.Object,Terrasoft.Core.DataValueType)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryParameter"/> с заданным именем и заданным значением 
            определенного типа данных.
            </summary>
            <param name="name">Имя параметра запроса.</param>
            <param name="value">Значение параметра запроса.</param>
            <param name="valueType">Тип данных значения параметра запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameter.#ctor(System.String,System.Object,System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryParameter"/> с заданным именем и заданным значением 
            определенного типа данных.
            </summary>
            <param name="name">Имя параметра запроса.</param>
            <param name="value">Значение параметра запроса.</param>
            <param name="valueTypeName">Имя типа данных значения параметра запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameter.#ctor(System.String,System.IO.Stream)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryParameter"/> с заданным именем и заданным значением типа 
            <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="name">Имя параметра запроса.</param>
            <param name="streamValue">Значение параметра запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameter.#ctor(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryParameter"/>, являющийся клоном заданного экземпляра 
            <see cref="T:Terrasoft.Core.DB.QueryParameter"/>.
            </summary>
            <param name="source">Экземпляр <see cref="T:Terrasoft.Core.DB.QueryParameter"/>, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameter.Equals(System.Object)">
            <summary>
            Определяет, равны ли данный экземпляр <see cref="T:Terrasoft.Core.DB.QueryParameter"/> и заданный экземпляр 
            <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">Экземпляр <see cref="T:System.Object"/>, который сравнивается с текущим экземпляром 
            <see cref="T:Terrasoft.Core.DB.QueryParameter"/>.</param>
            <returns><c>true</c>, если сравниваемые объекты имеют непустые имена, и имя <paramref name="obj"/> 
            совпадает с именем текущего объекта <see cref="T:Terrasoft.Core.DB.QueryParameter"/>; иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameter.GetHashCode">
            <summary>
            Возвращает хэш-код объекта.
            </summary>
            <returns>Хэш-код объекта.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameter.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.QueryParameter"/>.
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryParameter"/>, являющийся клоном текущего экземпляра.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryParameter.Name">
            <summary>
            Имя параметра запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryParameter.IsAutoName">
            <summary>
            Признак, определяющий, генерировать ли имя параметра запроса автоматически.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryParameter.IsAutoAdded">
            <summary>
            Признак, является ли параметр запроса автоматически добавленным.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryParameter.Value">
            <summary>
            Значение параметра запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryParameter.ValueType">
            <summary>
            Тип значения параметра запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryParameter.ValueTypeName">
            <summary>
            Имя типа значения параметра запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryParameter.Direction">
            <summary>
            Направление передачи значения параметра.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryParameter.ParentParametrizedQuery">
            <summary>
            Родительский запрос, которому принадлежит параметр.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.QueryParameterCollection">
            <summary>
            Коллекция параметров запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryParameterCollection"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.#ctor(Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryParameterCollection"/>, являющийся клоном заданной 
            коллекции параметров запроса.
            </summary>
            <param name="source">Коллекция параметров запроса, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.QueryParameterCollection"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.QueryParameterCollection"/>, представляющий копию текущего экземпляра.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.ResetParameters">
            <summary>
            Очищает коллекцию параметров запроса, которые были добавлены автоматически.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.GenerateUniqueName(System.String)">
            <summary>
            По заданному префиксу генерирует уникальное имя параметра запроса.
            </summary>
            <param name="parameterNamePrefix">Префикс имени параметра запроса.</param>
            <returns>Уникальное имя параметра запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.GenerateUniqueNames">
            <summary>
            Генерирует уникальные имена для всех элементов текущей коллекции параметров запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.FindByName(System.String)">
            <summary>
            В текущей коллекции параметров запроса выполняет поиск параметра с заданным именем.
            </summary>
            <param name="name">Имя искомого параметра запроса.</param>
            <returns>Экземпляр параметра запроса <see cref="T:Terrasoft.Core.DB.QueryParameter"/> с именем <paramref name="name"/> либо 
            <c>null</c>, если параметр с таким именем не найден в коллекции.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.GetByName(System.String)">
            <summary>
            Из текущей коллекции параметров запроса возвращает параметр с заданным именем. Если параметр не найден в 
            коллекции, генерируется исключение.
            </summary>
            <param name="name">Имя возвращаемого параметра запроса.</param>
            <returns>Экземпляр параметра запроса <see cref="T:Terrasoft.Core.DB.QueryParameter"/> с именем <paramref name="name"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если в текущей коллекции параметров запроса не найден 
            параметр с именем <paramref name="name"/>.</exception>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="name"/> передано 
            пустое значение или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.Add(System.String,System.Object)">
            <summary>
            В текущую коллекцию параметров запроса добавляет параметр с заданными именем и значением.
            </summary>
            <param name="name">Имя добавляемого параметра запроса.</param>
            <param name="value">Значение добавляемого параметра запроса.</param>
            <returns>Добавленный в текущую коллекцию параметров запроса параметр <see cref="T:Terrasoft.Core.DB.QueryParameter"/> с 
            именем <paramref name="name"/> и значением <paramref name="value"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.Add(System.String,System.Object,Terrasoft.Core.DataValueType)">
            <summary>
            В текущую коллекцию параметров запроса добавляет параметр с заданным именем и заданным значением, который 
            имеет определенный тип данных.
            </summary>
            <param name="name">Имя добавляемого параметра запроса.</param>
            <param name="value">Значение добавляемого параметра запроса.</param>
            <param name="parameterType">Тип данных значения добавляемого параметра запроса.</param>
            <returns>Добавленный в текущую коллекцию параметров запроса параметр <see cref="T:Terrasoft.Core.DB.QueryParameter"/> с именем 
            <paramref name="name"/> и значением <paramref name="value"/>, который имеет тип данных 
            <paramref name="parameterType"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.Add(System.String,System.Object,System.String)">
            <summary>
            В текущую коллекцию параметров запроса добавляет параметр с заданным именем и заданным значением, которое 
            имеет тип данных с указанным именем.
            </summary>
            <param name="name">Имя добавляемого параметра запроса.</param>
            <param name="value">Значение добавляемого параметра запроса.</param>
            <param name="parameterTypeName">Имя типа данных значения параметра запроса.</param>
            <returns>Добавленный в текущую коллекцию параметров запроса параметр <see cref="T:Terrasoft.Core.DB.QueryParameter"/> с именем 
            <paramref name="name"/>, значением <paramref name="value"/>, которое имеет тип данных с именем 
            <paramref name="parameterTypeName"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.AddOut(System.String,Terrasoft.Core.DataValueType)">
            <summary>
            В текущую коллекцию параметров запроса добавляет исходящий параметр с заданным именем и заданным типом 
            данных значения параметра.
            </summary>
            <param name="name">Имя добавляемого параметра запроса.</param>
            <param name="parameterType">Тип данных значения параметра запроса.</param>
            <returns>Добавленный в текущую коллекцию параметров запроса исходящий параметр 
            <see cref="T:Terrasoft.Core.DB.QueryParameter"/>, значение которого имеет тип данных <paramref name="parameterType"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.AddOut(System.String,System.String)">
            <summary>
            В текущую коллекцию параметров запроса добавляет исходящий параметр с заданными именем параметра и именем 
            типа данных значения параметра.
            </summary>
            <param name="name">Имя добавляемого параметра запроса.</param>
            <param name="parameterTypeName">Имя типа данных значения параметра запроса.</param>
            <returns>Добавленный в текущую коллекцию параметров запроса параметр <see cref="T:Terrasoft.Core.DB.QueryParameter"/> с именем 
            <paramref name="name"/> и именем значения типа данных параметра <paramref name="parameterTypeName"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.AddVar(System.String,System.Object,Terrasoft.Core.DataValueType)">
            <summary>
            В текущую коллекцию параметров запроса добавляет входящий/исходящий параметр с заданными именем, значением 
            и типом значения.
            </summary>
            <param name="name">Имя добавляемого параметра запроса.</param>
            <param name="value">Значение добавляемого параметра запроса.</param>
            <param name="parameterType">Тип данных значения добавляемого параметра запроса.</param>
            <returns>Добавленный в текущую коллекцию параметров запроса параметр <see cref="T:Terrasoft.Core.DB.QueryParameter"/> с именем 
            <paramref name="name"/>, значением <paramref name="value"/> и типом значения 
            <paramref name="parameterType"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterCollection.AddVar(System.String,System.Object,System.String)">
            <summary>
            В текущую коллекцию параметров запросов добавляет входящий/исходящий параметр с заданными именем, значением 
            и именем типа данных значения параметра.
            </summary>
            <param name="name">Имя добавляемого параметра запроса.</param>
            <param name="value">Значение добавляемого параметра запроса.</param>
            <param name="parameterTypeName">Имя типа данных значения добавляемого параметра запроса.</param>
            <returns>Добавленный в текущую коллекцию параметров запроса параметр <see cref="T:Terrasoft.Core.DB.QueryParameter"/> с именем 
            <paramref name="name"/>, значением <paramref name="value"/> типа данных с именем 
            <paramref name="parameterTypeName"/>.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.QueryParameterCollection.ParentParametrizedQuery">
            <summary>
            Родительский запрос, которому принадлежит данная коллекция параметров запроса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.QueryParameterUtilities">
            <summary>
            Предоставляет служебные методы для работы с параметрами запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterUtilities.AddUsingParameters(Terrasoft.Core.DB.JoinCollection,Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Заполняет заданную коллекцию параметрами операторов <c>Join</c> из переданной коллекции операторов.
            </summary>
            <param name="joins">Коллекция операторов <c>Join</c> запросов.</param>
            <param name="resultParameters">Коллекция параметров запроса, в которую добавляются параметры операторов из 
            коллекции <paramref name="joins"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterUtilities.AddUsingParameters(Terrasoft.Core.DB.QueryColumnExpressionCollection,Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Заполняет заданную коллекцию параметрами выражений колонок из переданной коллекции выражений.
            </summary>
            <param name="columnExpressions">Коллекция выражений колонок запроса.</param>
            <param name="resultParameters">Коллекция параметров запроса, в которую добавляются параметры выражений из 
            коллекции <paramref name="columnExpressions"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterUtilities.AddUsingParameters(Terrasoft.Core.DB.QueryCase,Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Заполняет заданную коллекцию параметрами из переданного оператора <c>Case</c> запроса.
            </summary>
            <param name="queryCase">Оператор <c>Case</c> запроса.</param>
            <param name="resultParameters">Коллекция параметров запроса, в которую добавляются параметры из оператора 
            <paramref name="queryCase"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterUtilities.AddUsingParameters(Terrasoft.Core.DB.QuerySourceExpression,Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Заполняет заданную коллекцию параметрами из переданного выражения источника данных запроса.
            </summary>
            <param name="sourceExpression">Выражение источника данных запроса.</param>
            <param name="resultParameters">Коллекция параметров запроса, в которую добавляются параметра из выражения 
            <paramref name="sourceExpression"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterUtilities.AddUsingParameters(Terrasoft.Core.DB.QueryFunction,Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Заполняет заданную коллекцию параметрами из переданной функции запроса.
            </summary>
            <param name="queryFunction">Функция запроса.</param>
            <param name="resultParameters">Коллекция параметров запроса, в которую добавляются параметры из функции 
            <paramref name="queryFunction"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterUtilities.AddUsingParameters(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Заполняет заданную коллекцию параметрами из переданного выражения колонки запроса.
            </summary>
            <param name="columnExpression">Выражение колонки запроса.</param>
            <param name="resultParameters">Коллекция параметров, к которую добавляются параметры из выражения 
            <paramref name="columnExpression"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterUtilities.AddUsingParameters(Terrasoft.Core.DB.ModifyQueryColumnValueCollection,Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Заполняет заданную коллекцию параметрами значений колонок из переданной коллекции значений.
            </summary>
            <param name="columnValues">Коллекция значений колонок.</param>
            <param name="resultParameters">Коллекция параметров, в которую добавляются параметры значений колонок из 
            коллекции <paramref name="columnValues"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterUtilities.AddUsingParameters(Terrasoft.Core.DB.OrderByItemCollection,Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Заполняет заданную коллекцию параметрами выражений сортировки из переданной коллекции выражений. 
            </summary>
            <param name="orderByItems">Коллекция выражений запроса, по которым выполняется сортировка результатов.
            </param>
            <param name="resultParameters">Коллекция параметров запроса, в которую добавляются параметры выражений 
            сортировки из коллекции <paramref name="orderByItems"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterUtilities.AddUsingParameters(Terrasoft.Core.DB.QueryCondition,Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Заполняет заданную коллекцию параметрами из переданного условия запроса.
            </summary>
            <param name="condition">Условие запроса, в которое добавляется коллекция параметров.</param>
            <param name="resultParameters">Коллекция параметров запроса, в которую добавляются параметры из условия 
            <paramref name="condition"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QueryParameterUtilities.AddUsingParameters(Terrasoft.Core.DB.SelectQueryCollection,Terrasoft.Core.DB.QueryParameterCollection)">
            <summary>
            Заполняет заданную коллекцию параметрами запросов на выборку из переданной коллекции запросов.
            </summary>
            <param name="queries">Коллекция запросов на выборку.</param>
            <param name="resultParameters">Коллекция параметров запроса, в которую добавляются параметры запросов на 
            выборку из коллекции <paramref name="queries"/>.</param>
        </member>
        <member name="T:Terrasoft.Core.DB.QuerySourceExpressionType">
            <summary>
            Тип выражения источника данных запроса.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QuerySourceExpressionType.SchemaName">
            <summary>
            Имя схемы источника данных.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QuerySourceExpressionType.SubSelect">
            <summary>
            Подзапрос на выборку источника данных.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.QuerySourceExpressionType.SqlText">
            <summary>
            Sql-текст на выборку источника данных.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.QuerySourceExpression">
            <summary>
            Выражение источника данных запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QuerySourceExpression.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QuerySourceExpression"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.QuerySourceExpression.#ctor(System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QuerySourceExpression"/> для схемы с заданным именем.
            </summary>
            <param name="schemaName">Имя схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QuerySourceExpression.#ctor(System.String,System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QuerySourceExpression"/> для схемы с переданным именем и 
            заданным псевдонимом источника.
            </summary>
            <param name="schemaName">Имя схемы.</param>
            <param name="alias">Псевдоним источника.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QuerySourceExpression.#ctor(Terrasoft.Core.DB.Select)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QuerySourceExpression"/> для переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QuerySourceExpression.#ctor(Terrasoft.Core.DB.Select,System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QuerySourceExpression"/> для переданного подзапроса на выборку с 
            заданным псевдонимом источника.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <param name="alias">Псевдоним источника.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QuerySourceExpression.#ctor(Terrasoft.Core.DB.Query)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QuerySourceExpression"/> для переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <exception cref="T:Terrasoft.Common.InvalidTypeCastException">Если тип подзапроса <paramref name="subSelectQuery"/> является 
            не <see cref="T:Terrasoft.Core.DB.Select"/>.</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.QuerySourceExpression.#ctor(Terrasoft.Core.DB.Query,System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QuerySourceExpression"/> для переданного произвольного подзапроса 
            с заданным псевдонимом источника.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <param name="alias">Псевдоним источника.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QuerySourceExpression.#ctor(Terrasoft.Core.DB.QuerySourceExpression)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.QuerySourceExpression"/>, являющийся клоном переданного выражения.
            </summary>
            <param name="source">Выражение, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.QuerySourceExpression.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.QuerySourceExpression"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.QuerySourceExpression"/>, представляющий копию текущего экземпляра.
            </returns>
        </member>
        <member name="P:Terrasoft.Core.DB.QuerySourceExpression.ExpressionType">
            <summary>
            Тип выражения источника данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QuerySourceExpression.Alias">
            <summary>
            Псевдоним выражения источника данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QuerySourceExpression.SchemaName">
            <summary>
            Имя схемы источника данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QuerySourceExpression.SubSelect">
            <summary>
            Подзапрос на выборку, выступающий в качестве источника данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.QuerySourceExpression.SqlText">
            <summary>
            Sql-текст, определяющий источник данных.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.Source">
            <summary>
            Предоставляет служебные методы для работы с источником данных запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Source.SqlText(System.String)">
            <summary>
            Возвращает выражение источника данных запроса, который формируется переданным sql-выражением.
            </summary>
            <param name="value">Sql-выражение, которое формирует источник данных.</param>
            <returns>Выражение источника данных запроса, сформированное sql-выражением <paramref name="value"/>.
            </returns>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntityChangeType">
            <summary>
            Types of entity modifications.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntityColumnValue">
            <summary>
            Значение колонки объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValue.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntityColumnValue"/>, используя заданное пользовательское 
            подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValue.#ctor(Terrasoft.Core.Entities.EntityColumnValue)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntityColumnValue"/>, который является клоном заданного значения.
            </summary>
            <param name="source">Значение колонки объекта, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValue.LoadValue(System.Data.IDataReader,System.Int32,System.Int32)">
            <summary>
            Загружает значение из переданного экземпляра <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="dataReader">Экземпляр <see cref="T:System.Data.IDataReader"/>, из которого загружается 
            значение.</param>
            <param name="fieldIndex">Индекс поля в переданном <see cref="T:System.Data.IDataReader"/>, которое будет 
            загружено.</param>
            <param name="packageSize">Размер пакета.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValue.LoadValue(System.Object)">
            <summary>
            Загружает переданное значение типа <see cref="T:System.Object"/>.
            </summary>
            <param name="value">Загружаемое значение типа <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValue.ResetValue">
            <summary>
            Отменяет изменения, устанавливая предыдущее значение колонки объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValue.ResetOldValue">
            <summary>
            Заменяет старое значение колонки объекта текущим.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValue.Validate(Terrasoft.Core.Entities.EntityValidationMessageCollection)">
            <summary>
            Выполняет проверку корректности значения колонки.
            </summary>
            <param name="validationMessages">Коллекция сообщений о проверке корректности значения колонки.</param>
            <returns>
            <c>true</c>, если проверка корректности значения колонки завершилась успешно; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValue.Clone">
            <summary>
            Создает клон текущего значения колонки объекта.
            </summary>
            <returns>Клон текущего значения колонки объекта.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityColumnValue.UserConnection">
            <summary>
            Пользовательское подключение.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityColumnValue.Column">
            <summary>
            Колонка схемы, соответствующая текущему значению колонки объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityColumnValue.Name">
            <summary>
            Имя значения колонки объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityColumnValue.IsVirtual">
            <summary>
            Признак, является ли значение виртуальным, то есть не будет сохранено в базе данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityColumnValue.Value">
            <summary>
            Хранимое значение.
            </summary>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если значение колонки не загружено.</exception>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityColumnValue.StreamBytes">
            <summary>
            Хранимое значение в виде массива <see cref="T:System.Byte"/> для колонки бинарного типа.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityColumnValue.OldValue">
            <summary>
            Предыдущее значение.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityColumnValue.IsLoaded">
            <summary>
            Определяет, загружено ли значение.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityColumnValue.IsChanged">
            <summary>
            Признак, было ли изменено значение.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntityColumnValueCollection">
            <summary>
            Коллекция значений колонок объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValueCollection.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntityColumnValueCollection"/>, используя заданное 
            пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValueCollection.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.Entities.EntitySchemaColumnCollection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntityColumnValueCollection"/> на основании заданной коллекции 
            колонок схемы объекта, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="columns">Коллекция колонок схемы объекта, на основании которой создаются значения текущей 
            коллекции значений колонок объекта.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValueCollection.#ctor(Terrasoft.Core.Entities.EntityColumnValueCollection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntityColumnValueCollection"/>, являющийся клоном заданной 
            коллекции значений колонок объекта.
            </summary>
            <param name="source">Коллекция значений колонок объекта, клон которой создается. Каждый элемент создаваемой 
            коллекции является клоном соответствующего элемента коллекции <paramref name="source"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValueCollection.ForceLoadColumnValue(System.String,System.Object)">
            <summary>
            Загружает значение с заданным именем из переданного объекта <see cref="T:System.Object"/>. Если значение с 
            заданным именем не найдено, в коллекцию добавляется новый элемент с заданным именем.
            </summary>
            <param name="name">Имя значения колонки объекта.</param>
            <param name="value">Присваиваемое значение.</param>
            <remarks>Метод перегружен.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValueCollection.ForceLoadColumnValue(System.String,System.Data.IDataReader,System.Int32,System.Int32)">
            <summary>
            Загружает значение с заданным именем из переданного экземпляра 
            <see cref="T:System.Data.IDataReader"/>. Если значение с заданным именем не найдено, в коллекцию 
            добавляется новый элемент с таким именем.
            </summary>
            <param name="name">Имя значения колонки объекта.</param>
            <param name="dataReader">Экземпляр <see cref="T:System.Data.IDataReader"/>, с помощью которого загружается 
            значение.</param>
            <param name="fieldIndex">Позиция в переданном <see cref="T:System.Data.IDataReader"/>, из которой 
            загружается значение.</param>
            <param name="packageSize">Размер пакета.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValueCollection.ForceGetByName(System.String)">
            <summary>
            Возвращает из коллекции экземпляр <see cref="T:Terrasoft.Core.Entities.EntityColumnValue"/> с заданным именем. Если в коллекции нет 
            экземпляра с таким именем, он создается.
            </summary>
            <param name="name">Имя значения колонки объекта, поиск которого выполняется в коллекции.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntityColumnValue"/> с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValueCollection.Add(Terrasoft.Core.Entities.EntityColumnValue)">
            <summary>
            Добавляет в коллекцию заданный экземпляр <see cref="T:Terrasoft.Core.Entities.EntityColumnValue"/>.
            </summary>
            <param name="item">Экземпляр <see cref="T:Terrasoft.Core.Entities.EntityColumnValue"/>, который добавляется в коллекцию.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValueCollection.Clear">
            <summary>
            Удаляет из текущей коллекции все элементы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValueCollection.FindByName(System.String)">
            <summary>
            Осуществляет поиск в коллекции значения колонки объекта с заданным именем. Если значение колонки не найдено,
            возвращается <c>null</c>.
            </summary>
            <param name="name">Имя искомого значения колонки.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntityColumnValue"/> с именем <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValueCollection.GetByName(System.String)">
            <summary>
            Возвращает из коллекции значений колонок элемент с заданным именем. Если такой элемент не найден, 
            генерируется исключение.
            </summary>
            <param name="name">Имя искомого значения колонки.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntityColumnValue"/> с именем <paramref name="name"/>.</returns>
            <exceptions name="ItemNotFoundException">Если элемент с именем <paramref nmae="name"/> не найден в 
            текущей коллекции значений колонок.</exceptions>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValueCollection.Clone">
            <summary>
            Создает клон текущей коллекции значений колонок объекта.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей коллекции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValueCollection.GetEnumerator">
            <summary>
            Возвращает типизированный перечислитель значений колонок объекта.
            </summary>
            <returns>Типизированный перечислитель значений колонок объекта.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityColumnValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Возвращает перечислитель значений колонок объекта.
            </summary>
            <returns>Перечислитель значений колонок объекта.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityColumnValueCollection.Count">
            <summary>
            Количество элементов в коллекции значений колонок объекта.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaColumnRequirementType">
            <summary>
            Уровень проверки значений колонки, обязательных для заполнения.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnRequirementType.None">
            <summary>
            Проверка значений колонки не выполняется.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnRequirementType.ApplicationLevel">
            <summary>
            Проверка значений колонки на уровне приложения.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnRequirementType.DBLevel">
            <summary>
            Проверка значений колонки на уровне базы данных.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaColumnUsageType">
            <summary>
            Тип использования колонки.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnUsageType.General">
            <summary>
            Общая.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnUsageType.Advanced">
            <summary>
            Для использования в расширенном режиме.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaColumnUsageType.None">
            <summary>
            Не используется.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaColumn">
            <summary>
            Представляет колонку схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumn.#ctor">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumn"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumn.#ctor(Terrasoft.Core.Entities.EntitySchema,Terrasoft.Core.DataValueType)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumn"/> с заданным типом данных 
            в заданной схеме.
            </summary>
            <param name="entitySchema">Схема, в которой создается колонка.</param>
            <param name="dataValueType">Тип данных создаваемой колонки.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumn.#ctor(Terrasoft.Core.Entities.EntitySchemaColumn)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumn"/>, являющийся клоном заданной колонки.
            </summary>
            <param name="source">Колонка, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumn.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Инициализирует основные свойства колонки на основании метаданных.
            </summary>
            <param name="reader">Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется 
            вычитка метаданных.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumn.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Осуществляет запись метаданных схемы с помощью заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">
            Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого записываются метаданные схемы.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumn.Clone">
            <summary>
            Возвращает колонку - клон данной колонки.
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumn"/>, который является клоном текущей колонки.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumn.SetName(System.String)">
            <summary>
            Устанавливает для данной колонки заданное имя.
            </summary>
            <param name="name">Имя колонки.</param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.IsLocalizationText">
            <summary>
            Indicates whether column is localization column.
            </summary>
            <remarks>Is used only in localization schema.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.ParentSchema">
            <summary>
            Parent schema.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.UId">
            <summary>
            Column unique identifier.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.Name">
            <summary>
            Column name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.DataValueType">
            <summary>
            Тип данных колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.ReferenceSchema">
            <summary>
            Схема, на которую ссылается текущая колонка типа справочник.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.ReferenceSchemaUId">
            <summary>
            Уникальный идентификатор, на который ссылается текущая колонка типа справочник.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.ReferenceValueListSchemaUId">
            <summary>
            Уникальный идентификатор виртуального набора данных, на который ссылается текущая колонка с фиксированным 
            списком значений. 
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.ReferenceValueListSchema">
            <summary>
            Виртуальный набор данных, на который ссылается текущая колонка с фиксированным списком значений.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.Caption">
            <summary>
            Заголовок колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.Description">
            <summary>
            Описание колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.ReferenceSchemaList">
            <summary>
            Список ссылок на схемы, на которые ссылается данная колонка.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.HasReferenceSchemaList">
            <summary>
            Признак, ссылается ли данная колонка на другие схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.ColumnValueName">
            <summary>
            Имя колонки, сформированное на основании значения, которое она содержит.
            </summary>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если колонка не ссылается на другие схемы, то есть не 
            является типом справочник.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если для колонки типа справочник не указана ссылка на 
            схему - справочник.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если в схеме - справочнике, на который ссылается колонка, 
            не указана первичная колонка.</exception>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.DisplayColumnValueName">
            <summary>
            Формирует строку с значением колонки для отображения на основании значения, которое 
            она содержит.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.SourceSchemaUIdColumnValueName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.ParentCollection">
            <summary>
            Коллекция колонок схемы, которой принадлежит текущая колонка.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.RequirementType">
            <summary>
            Уровень обязательности колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.IsDBRequirement">
            <summary>
            Признак, является ли колонка обязательной на уровне базы данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.IsVirtual">
            <summary>
            Признак, является ли колонка виртуальной.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.IsDBReadOnly">
            <summary>
            Признак, будет ли значение данной колонки записано в таблицу базы данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.IsValueCloneable">
            <summary>
            Признак клонируемости колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.IsMultiLineText">
            <summary>
            Признак использования для колонки элемента управления MemoEdit.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.IsSimpleLookup">
            <summary>
            Признак использования для колонки элемента управления ComboBoxEdit.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.IsLocalizable">
            <summary>
            Признак использования локализуемого значения для колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.IsIndexed">
            <summary>
            Признак индексируемости колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.IsTrackChangesInDB">
            <summary>
            Признак журналируемости колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.Index">
            <summary>
            Индекс колонки. 
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.ValueType">
            <summary>
            Тип данных значения колонки, который соответствует системному типу среды .NET.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.DisplayValueType">
            <summary>
            Тип данных отображаемого значения колонки, который соответствует системному типу среды .NET.
            </summary>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если для колонки типа разнородный справочник не указана 
            список схем-справочников.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если в схеме-справочнике, на который ссылается колонка, 
            не указана первичная колонка.</exception>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.DefValue">
            <summary>
            Значение по умолчанию для колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.HasDefValue">
            <summary>
            Определяет, установлено ли для данной колонки значение по умолчанию.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.HasConstDefValue">
            <summary>
            Определяет, установлено ли для данной колонки константное значение по умолчанию.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.IsWeakReference">
            <summary>
            Определяет, что для колонки с типом справочник связь со справочником слабая на уровне базы данных, то есть 
            нет внешнего ключа для проверки целостности. 
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.IsCascade">
            <summary>
            Для колонки типа справочник определяет, связана ли она каскадной связью с записью из справочника.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.UsageType">
            <summary>
            Тип использования колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumn.IsOneToOneInheritedColumn">
            <summary>
            Признак наследования колонки один к одному.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaColumnCollection">
            <summary>
            Предоставляет методы работы с коллекцией колонок схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnCollection.#ctor(Terrasoft.Core.Entities.EntitySchema)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumnCollection"/> в заданной схеме.
            </summary>
            <param name="entitySchema">Схема, в которой создается новая коллекция колонок.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnCollection.#ctor(Terrasoft.Core.Entities.EntitySchemaColumnCollection)">
            <summary>
            Инициализирует новый экземпляр класса <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumnCollection"/>, являющийся клоном 
            заданной коллекции колонок.
            </summary>
            <param name="source">Коллекция колонок, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnCollection.InsertItem(System.Int32,Terrasoft.Core.Entities.EntitySchemaColumn)">
            <summary>
            Добавляет в текущую коллекцию колонок заданную колонку в заданную позицию.
            </summary>
            <param name="index">Позиция, в которую добавляется колонка <paramref name = "item"/>.</param>
            <param name="item">Колонка, которая добавляется в позицию <paramref name = "index"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnCollection.RemoveItem(System.Int32)">
            <summary>
            Удалает из текущей коллекции колонок колонку в заданной позиции.
            </summary>
            <param name="index">Позиция, из которой удаляется колонка.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnCollection.Clone">
            <summary>
            Возвращает коллекцию колонок - клон данной коллекции.
            </summary>
            <returns>
            Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumnCollection"/>, который является клоном текущей коллекции колонок.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnCollection.FindByCaption(System.String)">
            <summary>
            Осуществляет поиск колонки в коллекции по заданному заголовку колонки.
            </summary>
            <param name="caption">Заголовок искомой колонки.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumn"/> с заголовком <paramref name="caption"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnCollection.FindByColumnValueName(System.String)">
            <summary>
            Осуществляет поиск колонки в коллекции по заданному свойству колонки <c>ColumnValueName</c>.
            </summary>
            <param name="columnValueName">Значение свойства <c>ColumnValueName</c> для поиска.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumn"/> с именем значения 
            <paramref name="columnValueName"/>.
            Если такая колонка не найдена, возвращается <c>null</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaColumnCollection.GetByColumnValueName(System.String)">
            <summary>
            Возвращает колонку из коллекции по заданному свойству колонки <c>ColumnValueName</c>. Если такая колонка не 
            найдена, генерируется исключение.
            </summary>
            <param name="columnValueName">Значение свойства <c>ColumnValueName</c> для поиска.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumn"/> с именем значения 
            <paramref name="columnValueName"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если колонка с именем значения 
            <paramref name="columnValueName"/> не найдена в текущей коллекции.</exception>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaColumnCollection.EntitySchema">
            <summary>
            Схема текущей коллекции колонок.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.ClientEntitySchemaColumn.UId">
            <summary>
            Уникальный идентификатор колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.ClientEntitySchemaColumn.Name">
            <summary>
            Имя колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.ClientEntitySchemaColumn.Caption">
            <summary>
            Заголовок колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.ClientEntitySchemaColumn.DataValueTypeUId">
            <summary>
            Идентификатор типа данных колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.ClientEntitySchemaColumn.IsRequired">
            <summary>
            Признак, является ли колонка обязательной для заполнения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.ClientEntitySchemaColumn.IsLookup">
            <summary>
            Признак, является ли колонка справочником.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.ClientEntitySchemaColumn.ReferenceSchemaUId">
            <summary>
            Идентификатор схемы, на которую ссылается текущая колонка типа справочник. 
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaIndexColumn">
            <summary>
            Колонка индекса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexColumn.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaIndexColumn"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexColumn.#ctor(Terrasoft.Core.Entities.EntitySchemaIndexColumn)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaIndexColumn"/>, являющийся клоном заданной колонки 
            индекса.
            </summary>
            <param name="source">Колонка индекса, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexColumn.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Вычитка значений свойств колонки индекса из метаданных с помощью заданного 
            <see cref="T:Terrasoft.Common.DataReader"/>.
            </summary>
            <param name="reader">Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется 
            вычитка метаданных.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexColumn.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Осуществляет запись метаданных колонки индекса с помощью заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого записываются 
            метаданные колонки индекса.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexColumn.Clone">
            <summary>
            Возвращает клон текущей колонки индекса.
            </summary>
            <returns>Клон текущей колонки индекса.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndexColumn.Name">
            <summary>
            Имя колонки индекса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndexColumn.ParentCollection">
            <summary>
            Коллекция, которой принадлежит колонка индекса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndexColumn.ColumnUId">
            <summary>
            Идентификатор колонки индекса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndexColumn.Column">
            <summary>
            Экземпляр колонки индекса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndexColumn.OrderDirection">
            <summary>
            Порядок сортировки.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaIndexColumnCollection">
            <summary>
            Коллекция колонок индекса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexColumnCollection.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaIndexColumnCollection"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexColumnCollection.#ctor(Terrasoft.Core.Entities.EntitySchemaIndexColumnCollection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaIndexColumnCollection"/>, являющийся клоном заданной 
            коллекции колонок индекса.
            </summary>
            <param name="source">Коллекция колонок индекса, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexColumnCollection.InsertItem(System.Int32,Terrasoft.Core.Entities.EntitySchemaIndexColumn)">
            <summary>
            Добавляет в коллекцию заданную колонку индекса по указанному индексу.
            </summary>
            <param name="index">Индекс, по которому добавляется колонка индекса в коллекцию.</param>
            <param name="item">Колонка индекса, которая добавляется в коллекцию.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexColumnCollection.RemoveItem(System.Int32)">
            <summary>
            Удаляет из коллекции колонку индекса по указанному индексу.
            </summary>
            <param name="index">Индекс, по которому удаляется колонка индекса из коллекции.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexColumnCollection.Clone">
            <summary>
            Возвращает клон текущей коллекции колонок индекса.
            </summary>
            <returns>Клон текущей коллекции колонок индекса.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndexColumnCollection.ParentIndex">
            <summary>
            Индекс, содержащий данную коллекцию.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaIndex">
            <summary>
            Индекс схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndex.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaIndex"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndex.#ctor(Terrasoft.Core.Entities.EntitySchemaIndex)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaIndex"/>, являющийся клоном заданного индекса.
            </summary>
            <param name="source">Индекс схемы, клон которого создается.</param>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaIndex._getIndexPrefix">
            <summary>
            Свойство, содержащее делегат, позволяющий определить префикс индекса схемы по колонке на которую создается
            индекс.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndex.ApplyMetaDataValue(Terrasoft.Common.DataReader)">
            <summary>
            Вычитка значений свойств индекса схемы из метаданных с помощью заданного 
            <see cref="T:Terrasoft.Common.DataReader"/>.
            </summary>
            <param name="reader">Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого осуществляется 
            вычитка метаданных.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndex.GetIndexName(Terrasoft.Core.Entities.EntitySchema,Terrasoft.Core.Entities.EntitySchemaColumn)">
            <summary>
            Возвращает сформированное уникальное имя индекса по колонке таблицы базы данных, которое включает в себя 
            префикс, идентификатор схемы, идентификатор колонки.
            </summary>
            <param name="schema">Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/>, по которому 
            определяется идентификатор схемы, участвующий в формировании имени индекса.</param>
            <param name="column">Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumn"/>, по которой 
            определяются дополнительные параметры для формирования имени индекса.</param>
            <returns>Строка, представляющая уникальное имя индекса таблицы базы данных.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndex.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Осуществляет запись метаданных индекса схемы с помощью заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого записываются 
            метаданные индекса.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndex.Clone">
            <summary>
            Возвращает клон текущего индекса схемы.
            </summary>
            <returns>Клон текущего индекса схемы.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndex.UId">
            <summary>
            Идентификатор индекса схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndex.Name">
            <summary>
            Имя индекса схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndex.ParentMetaSchema">
            <summary>
            Родительский объект, содержащий индекс.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndex.NamePrefix">
            <summary>
            Префикс.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndex.ParentCollection">
            <summary>
            Родительская коллекция.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndex.IsAutoName">
            <summary>
            Признак автоматического присвоения имени индексу.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndex.IsUnique">
            <summary>
            Определяет, является ли индекс уникальным.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndex.IsClustered">
            <summary>
            Определяет, является ли индекс кластерным, то есть содержащим значения индексируемых колонок.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndex.Columns">
            <summary>
            Коллекция колонок индекса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIndex.IsInherited">
            <summary>
            Признак, является ли индекс унаследованным.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaIndexCollection">
            <summary>
            Коллекция индексов схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexCollection.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaIndexCollection"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexCollection.#ctor(Terrasoft.Core.Entities.EntitySchemaIndexCollection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaIndexCollection"/>, являющийся клоном заданной 
            коллекции индексов.
            </summary>
            <param name="source">Коллекция индексов, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexCollection.InsertItem(System.Int32,Terrasoft.Core.Entities.EntitySchemaIndex)">
            <summary>
            Добавляет в коллекцию заданный элемент в указанную позицию.
            </summary>
            <param name="index">Позиция, в которую добавляется <paramref name="item"/>.</param>
            <param name="item">Индекс, который добавляется в коллекцию.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexCollection.RemoveItem(System.Int32)">
            <summary>
            Удаляет элемент из коллекции из заданной позиции.
            </summary>
            <param name="index">Позиция, из которой удаляется элемент из коллекции.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIndexCollection.Clone">
            <summary>
            Возвращает клон текущей коллекции индексов.
            </summary>
            <returns>Клон текущей коллекции индексов.</returns>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaOppositeReferenceInfo">
            <summary>
            Связь схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaOppositeReferenceInfo.SchemaUId">
            <summary>
            Идентификатор схемы, по которой осуществляется связь.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaOppositeReferenceInfo.SchemaName">
            <summary>
            Имя схемы, по которой осуществляется связь.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaOppositeReferenceInfo.SchemaCaption">
            <summary>
            Заголовок схемы, по которой осуществляется связь.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaOppositeReferenceInfo.ColumnUId">
            <summary>
            Идентификатор колонки, по которой осуществляется связь.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaOppositeReferenceInfo.ColumnCaption">
            <summary>
            Заголовок колонки, по которой осуществляется связь.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaOppositeReferenceInfoCollection">
            <summary>
            Коллекция связей схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaOppositeReferenceInfoCollection.Contains(System.Guid)">
            <summary>
            Определяет, принадлежит ли схема с заданным идентификатором коллекции связей схемы.
            </summary>
            <param name="uid">Идентификатор схемы, наличие которой проверяется.</param>
            <returns><c>true</c>, если схема с идентификатором <paramref name="uid"/> найдена в коллекции 
            связей.</returns>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaOppositeReferenceInfoCollectionComparer">
            <summary>
            Предоставляет методы сравнения связей схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaOppositeReferenceInfoCollectionComparer.Compare(Terrasoft.Core.Entities.EntitySchemaOppositeReferenceInfo,Terrasoft.Core.Entities.EntitySchemaOppositeReferenceInfo)">
            <summary>
            Сравнивает между собой заданные связи по имени схемы.
            </summary>
            <param name="firstItem">Первая связь для сравнения.</param>
            <param name="secondItem">Вторая связь для сравнения.</param>
            <returns>Число, определяющее лексические отношения между <paramref name="firstItem"/> и 
            <paramref name="secondItem"/>.</returns>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType">
            <summary>
            Type of entity schema request macros.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.None">
            <summary>
            Macros type is not defined.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.CurrentUser">
            <summary>
            Current user.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.CurrentUserContact">
            <summary>
            Contact of current user.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.Yesterday">
            <summary>
            Yesterday.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.Today">
            <summary>
            Today.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.Tomorrow">
            <summary>
            Tomorrow.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.PreviousWeek">
            <summary>
            Previous week.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.CurrentWeek">
            <summary>
            Current week.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.NextWeek">
            <summary>
            Next week.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.PreviousMonth">
            <summary>
            Previous month.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.CurrentMonth">
            <summary>
            Текущий месяц.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.NextMonth">
            <summary>
            Следующий месяц.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.PreviousQuarter">
            <summary>
            Предыдущий квартал.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.CurrentQuarter">
            <summary>
            Текущий квартал.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.NextQuarter">
            <summary>
            Следующий квартал.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.PreviousHalfYear">
            <summary>
            Предыдущее полугодие.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.CurrentHalfYear">
            <summary>
            Текущее полугодие.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.NextHalfYear">
            <summary>
            Следующее полугодие.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.PreviousYear">
            <summary>
            Предыдущий год.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.CurrentYear">
            <summary>
            Текущий год.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.PreviousHour">
            <summary>
            Предыдущий час.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.CurrentHour">
            <summary>
            Текущий час.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.NextHour">
            <summary>
            Следующий час.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.NextYear">
            <summary>
            Следующий год.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.NextNDays">
            <summary>
            Следующие N дней.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.PreviousNDays">
            <summary>
            Предыдущие N дней.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.NextNHours">
            <summary>
            Следующие N часов.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.PreviousNHours">
            <summary>
            Предыдущие N часов.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.DayOfMonth">
            <summary>
            День месяца.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.DayOfWeek">
            <summary>
            День недели.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.Hour">
            <summary>
            Час.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.HourMinute">
            <summary>
            Время.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.Month">
            <summary>
            Месяц.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryMacrosType.Year">
            <summary>
            Год.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryLoadingEventArgs">
            <summary>
            Предоставляет данные для события, возникающего при загрузке данных запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryLoadingEventArgs.SelectQuery">
            <summary>
            Подзапрос на выборку.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryOptions">
            <summary>
            Класс настроек запроса к схеме объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryOptions.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryOptions"/>.
            </summary>
            <remarks>В конструкторе по умолчанию свойству <see cref="P:Terrasoft.Core.Entities.EntitySchemaQueryOptions.PageableRowCount"/> устанавливается значение 14.
            </remarks>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryOptions._rowsOffset">
            <summary>
            Number of rows to skip.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryOptions.PageableRowCount">
            <summary>
            Количество записей страницы результирующего набора данных, возвращаемого запросом.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryOptions.PageableDirection">
            <summary>
            Направление постраничного вывода.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryOptions.PageableConditionValues">
            <summary>
            Значения условий постраничного вывода.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryOptions.HierarchicalMaxDepth">
            <summary>
            Максимальный уровень вложенности иерархического запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryOptions.HierarchicalColumnName">
            <summary>
            Имя колонки, использующейся для построения иерархического запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryOptions.HierarchicalColumnValue">
            <summary>
            Начальное значение иерархической колонки, от которого будет строиться иерархия.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQuery">
            <summary>Представляет запрос к схеме объекта. Это высокоуровневый класс, позволяющий собирать сложные запросы, 
            используя только понятия путей к колонкам объекта таблицы (схемы) относительно корневой таблицы.</summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.#ctor">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>.</summary>
            <remarks>Используется исключительно для внутренних целей и не применим в конфигурации.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.#ctor(Terrasoft.Core.Entities.EntitySchema)">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/> с заданной корневой схемой.</summary>
            <param name="rootSchema">Корневая схема.</param>
            <remarks>В качестве корневой схемы устанавливается переданный экземпляр <paramref name="rootSchema"/>. В 
            качестве менеджера схем устанавливается менеджер переданного экземпляра корневой схемы.</remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.#ctor(Terrasoft.Core.Entities.EntitySchemaManager,System.String)">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/> с заданными менеджером схем и именем 
            корневой схемы.</summary>
            <param name="entitySchemaManager">Экземпляр менеджера схем.</param>
            <param name="sourceSchemaName">Имя корневой схемы.</param>
            <remarks>В менеджере схем <paramref name="entitySchemaManager"/> осуществляется поиск схемы с именем 
            <paramref name="sourceSchemaName"/> и в качестве корневой схемы принимается экземпляр найденной схемы.
            </remarks>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>, являющийся клоном переданного запроса 
            к схеме объекта.</summary>
            <param name="source">Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>, клон которого создается.</param>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQuery._useOffsetFetchPaging">
            <summary>
            Determines if offset-fetch paging enabled.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateSchemaColumnQueryExpression(System.String,Terrasoft.Core.Entities.EntitySchema,Terrasoft.Core.Entities.EntitySchemaColumn,System.Boolean)">
            <summary>
            Возвращает выражение запроса к схеме объекта по заданным пути к колонке, корневой схеме и экземпляру 
            колонки схемы. При этом для колонки можно определить, какой тип ее значения использовать в выражении - 
            хранимое значение или значение для отображения.
            </summary>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <param name="rootSchema">Экземпляр корневой схемы.</param>
            <param name="schemaColumn">Экземпляр колонки, для которой строится выражение.</param>
            <param name="useDisplayValue">Признак, использовать ли для колонки значение для отображения. 
            Необязательный параметр, по умолчанию равен <c>false</c>.</param>
            <returns>Выражение запроса к схеме объекта, построенное по пути к колонке <paramref name="columnPath"/>, 
            корневой схеме <paramref name="rootSchema"/>, колонке схемы <paramref name="schemaColumn"/> с учетом 
            значения признака <paramref name="useDisplayValue"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateSchemaColumnQueryExpression(System.String,Terrasoft.Core.Entities.EntitySchema,System.Boolean)">
            <summary>
            Возвращает выражение запроса к схеме объекта по заданным пути к колонке схемы и корневой схеме. При этом 
            для колонки можно определить, какой тип ее значения использовать в выражении - хранимое значение или 
            значение для отображения.
            </summary>
            <param name="columnPath">Путь к колонке схемы относительно корневой схемы.</param>
            <param name="rootSchema">Корневая схема.</param>
            <param name="useDisplayValue">Признак, использовать ли для колонки значение для отображения. 
            Необязательный параметр, по умолчанию равен <c>false</c>.</param>
            <returns>Выражение запроса к схеме объекта, построенное по пути к колонке <paramref name="columnPath"/>, 
            корневой схеме <paramref name="rootSchema"/> с учетом значения признака <paramref name="useDisplayValue"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateParameterExpression(System.Object)">
            <summary>
            Возвращает выражение запроса к схеме объекта для параметра с заданным значением.
            </summary>
            <param name="parameterValue">Значение параметра.</param>
            <returns>Выражение запроса к схеме объекта для параметра со значением <paramref name="parameterValue"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateParameterExpression(System.Object,Terrasoft.Core.DataValueType)">
            <summary>
            Возвращает выражение запроса к схеме объекта для параметра с заданным значением определенного типа.
            </summary>
            <param name="parameterValue">Значение параметра.</param>
            <param name="valueType">Тип значения параметра.</param>
            <returns>Выражение запроса к схеме объекта для параметра со значением <paramref name="parameterValue"/> 
            типа данных <paramref name="valueType"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateParameterExpression(System.Object,System.String,Terrasoft.Core.DataValueType)">
            <summary>
            Возвращает выражение запроса к схеме объекта для параметра с заданными значением, определенным типом 
            данных значения и указанным значением для отображения.
            </summary>
            <param name="parameterValue">Значение параметра.</param>
            <param name="displayValue">Значение для отображения параметра.</param>
            <param name="valueType">Тип значения параметра.</param>
            <returns>Выражение запроса к схеме объекта для параметра со значением <paramref name="parameterValue"/> 
            типа данных <paramref name="valueType"/> и значением для отображения <paramref name="displayValue"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateParameterExpressions(Terrasoft.Core.DataValueType,System.Object[])">
            <summary>
            Возвращает перечислитель выражений запросов для параметров с переданными значениями определенного типа 
            данных.</summary>
            <param name="valueType">Тип данных значений параметров.</param>
            <param name="parameterValues">Массив значений параметров.</param>
            <returns>Перечислитель выражений запросов для параметров со значениями <paramref name="parameterValues"/> 
            типа данных <paramref name="valueType"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateParameterExpressions(Terrasoft.Core.DataValueType,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Возвращает перечислитель выражений запросов для параметров с переданными значениями определенного типа 
            данных.</summary>
            <param name="valueType">Тип данных значений параметров.</param>
            <param name="parameterValues">Перечислитель значений параметров.</param>
            <returns>Перечислитель выражений запросов для параметров со значениями <paramref name="parameterValues"/> 
            типа данных <paramref name="valueType"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateCoalesceFunction(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchema,System.String[])">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction"/> для заданных родительского 
            запроса, корневой схемы и массива путей к колонкам.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, для которого создается экземпляр функции.</param>
            <param name="rootSchema">Корневая схема.</param>
            <param name="columnPaths">Массив путей к колонкам относительно корневой схемы.</param>
            <returns>Созданный экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">Если в качестве параметра <paramref name="columnPaths"/> передано 
            значение <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateCoalesceFunction(Terrasoft.Core.Entities.EntitySchema,System.String[])">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction"/> для заданных корневой схемы и 
            массива путей к колонкам.
            </summary>
            <param name="rootSchema">Корневая схема.</param>
            <param name="columnPaths">Массив путей к колонкам относительно корневой схемы.</param>
            <returns>Созданный экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateSchemaColumnExpression(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchema,System.String,System.Boolean,System.Boolean)">
            <summary>
            Возвращает выражение колонки схемы объекта для заданных запроса к схеме объекта, корневой схемы, пути к 
            колонке относительно корневой схемы.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, для которого создается выражение колонки.</param>
            <param name="rootSchema">Корневая схема.</param>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <param name="useCoalesceFunctionForMultiLookup">Признак, использовать ли для колонки типа справочник 
            функцию <c>COALESCE</c>. Необязательный параметр, по умолчанию равен <c>true</c>.</param>
            <param name="useDisplayValue">Признак, использовать ли для колонки значение для отображения. 
            Необязательный параметр, по умолчанию равен <c>false</c>.</param>
            <returns>Созданный экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateSchemaColumnExpression(Terrasoft.Core.Entities.EntitySchema,System.String,System.Boolean)">
            <summary>
            Возвращает выражение запроса к схеме объекта для заданных корневой схемы и пути к колонке относительно 
            корневой схемы.
            </summary>
            <param name="rootSchema">Корневая схема.</param>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <param name="useCoalesceFunctionForMultiLookup">Признак, использовать ли для колонки типа справочник 
            функцию <c>COALESCE</c>. Необязательный параметр, по умолчанию равен <c>true</c>.</param>
            <returns>Созданный экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilterWithParameters(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchema,Terrasoft.Core.Entities.FilterComparisonType,System.Boolean,System.String,System.Object[])">
            <summary>
            Возвращает фильтр с заданными параметрами для выражения запроса к схеме объекта.
            </summary>
            <param name="parentQuery">Родительский запрос, для которого создается фильтр.</param>
            <param name="rootSchema">Корневая схема.</param>
            <param name="comparisonType">Тип операции сравнения в фильтре.</param>
            <param name="useDisplayValue">Признак типа значения колонки, которое используется в фильтре: 
            <c>true</c> - значение для отображения; <c>false</c> - хранимое значение.
            </param>
            <param name="leftExpressionColumnPath">Путь к колонке, содержащей выражение левой части фильтра.
            </param>
            <param name="rightExpressionParameterValues">Массив значений выражений параметров в правой части фильтра.
            </param>
            <returns>Экземпляр фильтра <seealso cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilterWithParameters(Terrasoft.Core.Entities.EntitySchema,Terrasoft.Core.Entities.FilterComparisonType,System.Boolean,System.String,System.Object[])">
            <summary>
            Возвращает фильтр с заданными параметрами для выражения запроса к схеме объекта.
            </summary>
            <param name="rootSchema">Корневая схема.</param>
            <param name="comparisonType">Тип операции сравнения в фильтре.</param>
            <param name="useDisplayValue">Признак типа значения колонки, которое используется в фильтре: <c>true</c> - 
            значение для отображения; <c>false</c> - хранимое значение.
            </param>
            <param name="leftExpressionColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="rightExpressionParameterValues">Массив значений выражений параметров в правой части фильтра.
            </param>
            <returns>Экземпляр фильтра <seealso cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetDayOfWeekNumber(Terrasoft.Core.UserConnection,System.DayOfWeek)">
            <summary>
            Возвращает порядковый номер дня недели для заданного объекта <see cref="T:System.DayOfWeek"/> с учетом региональных 
            настроек.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="dayOfWeek">Экземпляр <see cref="T:System.DayOfWeek"/>, для которого определяется порядковый 
            номер.</param>
            <returns>Порядковый номер дня недели для объекта <paramref name="dayOfWeek"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.ClearDefCach(System.String)">
            <summary>
            Удаляет из кэша запроса элемент с заданным именем.
            </summary>
            <param name="cacheItemName">Имя удаляемого элемента кэша.</param>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="cacheItemName"/> 
            передано пустое значение или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.ClearCach">
            <summary>
            Очищает кэш текущего запроса.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего запроса к схеме объекта.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateSchemaColumnExpression(System.String,System.Boolean)">
            <summary>
            Возвращает выражение колонки схемы объекта по заданному пути к колонке относительно корневой схемы.
            </summary>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <param name="useCoalesceFunctionForMultiLookup">Признак, использовать ли для колонки типа множественный 
            справочник функцию <c>COALESCE</c>. Необязательный параметр, по умолчанию равен <c>true</c>.</param>
            <returns>Созданный экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateSchemaColumnExpressions(System.String[])">
            <summary>
            Возвращает перечислитель выражений колонок запроса к схеме объекта по заданному массиву путей к колонкам.
            </summary>
            <param name="columnPaths">Массив путей к колонкам относительно корневой схемы.</param>
            <returns>Перечислитель объектов <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/> для колонок, расположенных по 
            путям <paramref name="columnPaths"/> относительно корневой схемы.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateSchemaColumnExpressionsWithoutCoalesce(System.String[])">
            <summary>
            Возвращает перечислитель выражений колонок запроса к схеме объекта по заданному массиву путей к колонкам. 
            При этом, если колонка имеет тип множественный справочник, к ее значениям не применяется функция 
            <c>COALESCE</c>.</summary>
            <param name="columnPaths">Массив путей к колонкам относительно корневой схемы.</param>
            <returns>Перечислитель объектов <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/> для колонок, расположенных по 
            путям <paramref name="columnPaths"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateSchemaColumnExpressions(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Возвращает перечислитель выражений колонок запроса к схеме объекта по заданному набору путей к колонкам.
            </summary>
            <param name="columnPaths">Перечислитель путей к колонкам относительно корневой схемы.</param>
            <param name="useCoalesceFunctionForMultiLookup">Признак, определяющий использовать ли для колонки типа 
            множественный справочник функцию <c>COALESCE</c>. Необязательный параметр, по умолчанию равен <c>true</c>.
            </param>
            <returns>Перечислитель выражений <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/> для колонок, расположенных по 
            путям <paramref name="columnPaths"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateAggregationFunction(Terrasoft.Common.AggregationTypeStrict,System.String)">
            <summary>
            Возвращает экземпляр агрегирующей функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction"/> с заданным 
            типом для колонки по укзанному пути относительно корневой схемы.
            </summary>
            <param name="aggregationType">Тип агрегирующей функции.</param>
            <param name="columnPath">Путь к колонке схемы относительно корневой схемы.</param>
            <returns>Экземпляр созданной агрегирующей функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="columnPath"/> 
            передается пустая строка или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateIsNullFunction(System.String,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction"/> для колонок с проверяемым и 
            замещающим значениями, которые расположены по заданным путям относительно корневой схемы.
            </summary>
            <param name="checkColumnPath">Путь к колонке, содержащей проверяемое значение.</param>
            <param name="replacementColumnPath">Путь к колонке, содержащей значение, которое возвращается функцией в 
            случае, если проверяемое значение равно <c>null</c>.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве одного из параметров 
            <paramref name="checkColumnPath"/> или <paramref name="replacementColumnPath"/> передано пустое 
            значение или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateDatePartFunction(Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunctionInterval,System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>, возвращающей заданный 
            интервал даты для значения колонки, расположенной по указанному пути относительно корневой схемы.
            </summary>
            <param name="interval">Часть даты, возвращаемая функцией.</param>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>.
            </returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="columnPath"/> 
            передано пустое значение или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateDayFunction(System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>, возвращающей интервал даты 
            [День] для значения колонки, расположенной по указанному пути относительно корневой схемы.
            </summary>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateWeekFunction(System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>, возвращающей часть даты 
            [Неделя] для значения колонки, расположенной по указанному пути относительно корневой схемы.
            </summary>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateMonthFunction(System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>, возвращающей часть даты 
            [Месяц] для значения колонки, расположенной по указанному пути относительно корневой схемы.
            </summary>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateYearFunction(System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>, возвращающей часть даты 
            [Год] для значения колонки, расположенной по указанному пути относительно корневой схемы.
            </summary>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateWeekdayFunction(System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>, возвращающей часть даты 
            [День недели] для значения колонки, расположенной по указанному пути относительно корневой схемы.
            </summary>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateHourFunction(System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>, возвращающей часть даты 
            [Час] для значения колонки, расположенной по указанному пути относительно корневой схемы.
            </summary>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateHourMinuteFunction(System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>, возвращающей часть даты 
            [Минута] для значения колонки, расположенной по указанному пути относительно корневой схемы.
            </summary>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateCoalesceFunction(System.String[])">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction"/> для заданного массива путей к 
            колонкам относительно корневой схемы.
            </summary>
            <param name="columnPaths">Массив путей к колонкам относительно корневой схемы.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateCaseNotNullQueryFunctionWhenItem(System.String,System.Object)">
            <summary>
            Возвращает экземпляр выражения для sql-конструкции 
            вида <c>WHEN &lt;Выражение_1&gt; IS NOT NULL THEN &lt;Выражение_2&gt;</c>.</summary>
            <param name="whenColumnPath">Путь к колонке, содержащей выражение предложения <c>WHEN</c>.</param>
            <param name="thenParameterValue">Путь к колонке, содержащей выражение предложения <c>THEN</c>.</param>
            <returns>Экземпляр созданного выражения условия <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateCaseNotNullFunction(Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem[])">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction"/> для заданного массива 
            выражений условий.
            </summary>
            <param name="whenItems">Массив выражений условий создаваемой функции.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateCurrentDateTimeFunction">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateTimeQueryFunction"/>, возвращающей текущие 
            дату и время.
            </summary>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateTimeQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateCurrentDateFunction">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateQueryFunction"/> возвращающей текущую дату.
            </summary>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateQueryFunction"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateCurrentTimeFunction">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentTimeQueryFunction"/>, определяющей текущее 
            время.</summary>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentTimeQueryFunction"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateCurrentUserFunction">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserQueryFunction"/>, определяющей текущего 
            пользователя.
            </summary>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateCurrentUserContactFunction">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserContactQueryFunction"/>, определяющей 
            идентификатор контакта текущего пользователя.
            </summary>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserContactQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateCurrentUserAccountFunction">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserAccountQueryFunction"/>, определяющей 
            идентификатор контрагента текущего пользователя.
            </summary>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserAccountQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateUpperFunction(System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction"/> для выражения колонки по 
            заданному пути относительно корневой схемы.
            </summary>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateTrimFunction(System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction"/> для выражения колонки по 
            заданному пути относительно корневой схемы.
            </summary>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="columnPath"/> 
            передана пустая строка или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateTrimFunction(Terrasoft.Core.Entities.EntitySchemaQueryExpression[])">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction"/> для заданного массива выражений.
            </summary>
            <param name="expressions">Массив выражений.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="expressions"/> 
            передано значение <c>null</c> или если массив выражений не содержит ни одного элемента.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateLengthFunction(System.String)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction"/> для выражения колонки по 
            заданному пути относительно корневой схемы.
            </summary>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="columnPath"/> 
            передана пустая строка ли <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateLengthFunction(Terrasoft.Core.Entities.EntitySchemaQueryExpression[])">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction"/> для заданного массива выражений.
            </summary>
            <param name="expressions">Массив выражений.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="expressions"/> 
            передается значение <c>null</c> или если массив выражений не содержит ни одного элемента.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateConcatFunction(Terrasoft.Core.Entities.EntitySchemaQueryExpression[])">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction"/> для заданного массива выражений.
            </summary>
            <param name="expressions">Массив выражений.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="expressions"/> 
            передается значение <c>null</c> или если массив выражений не содержит ни одного элемента.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateCastFunction(System.String,Terrasoft.Core.DBDataValueType)">
            <summary>
            Возвращает экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction"/> для выражения колонки, 
            расположенной по заданному пути относительно корневой схемы, и указанным целевым типом данных.
            </summary>
            <param name="columnPath">Путь к колонке относительно корневой схемы.</param>
            <param name="castType">Целевой тип данных.</param>
            <returns>Экземпляр созданной функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="columnPath"/> 
            передана пустая строка или значение <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,System.String,System.String[])">
            <summary>
            Возвращает фильтр с заданным типом сравнения для выражений двух колонок, расположенных по указанным путям 
            относительно корневой схемы.</summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExpressionColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="rightExpressionColumnPaths">Массив путей к колонкам, содержащих выражения правой части фильтра.
            </param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,System.String,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для выражения колонки, расположенной по указанному пути 
            относительно корневой схемы, и переданного выражения.
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExpressionColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="rightExpression">Выражение в правой части фильтра.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,System.String,Terrasoft.Core.Entities.EntitySchemaQueryFunction)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для выражения колонки, расположенной по указанному пути 
            относительно корневой схемы, и переданного экземпляра функции.</summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExpressionColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="rightExpressionValue">Экземпляр функции выражения в правой части фильтра.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.Entities.EntitySchemaQueryMacrosType,System.Int32)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для заданных выражения левой части фильтра, типа макроса и 
            значения, которое обрабатывается макросом в правой части фильтра.
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExpression">Выражение в левой части фильтра.</param>
            <param name="macrosType">Тип макроса.</param>
            <param name="rightValue">Значение, которое обрабатывается макросом в правой части фильтра. Необязательный 
            параметр, по умолчанию равен <c>0</c>.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.Entities.EntitySchemaQueryMacrosType,System.DateTime)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для заданных параметров.
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExpression">Выражение в левой части фильтра.</param>
            <param name="macrosType">Тип макроса.</param>
            <param name="rightValue">Значение типа <see cref="T:System.DateTime"/>, которое обрабатывается макросом в 
            правой части фильтра.</param>
            <returns>Экземпляр созданного фильтра.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если в качестве параметра <paramref name="macrosType"/> передан 
            неподдерживаемый тип макроса.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.Entities.EntitySchemaQueryMacrosType,System.DayOfWeek)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для заданных выражения левой части фильтра, типа макроса и 
            значения типа <see cref="T:System.DayOfWeek"/>, которое обрабатывается макросом в правой части фильтра.
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExpression">Выражение в левой части фильтра.</param>
            <param name="macrosType">Тип макроса.</param>
            <param name="rightValue">Значение типа <see cref="T:System.DayOfWeek"/>, которое обрабатывается макросом в 
            правой части фильтра.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если в качестве параметра <paramref name="macrosType"/> передан 
            неподдерживаемый тип макроса.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,System.String,Terrasoft.Core.Entities.EntitySchemaQueryMacrosType,System.Int32)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для выражения колонки, расположенной по указанному пути, 
            заданных типа макроса и числового значения, которое обрабатывается макросом в правой части фильтра.
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExpressionColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="macrosType">Тип макроса.</param>
            <param name="rightValue">Значение, которое обрабатывается макросом в правой части фильтра. Используется для 
            типов макроса <c>NextNDays</c> и <c>PreviousNDays</c>. Необязательный параметр, по умолчанию равен <c>0</c>.
            </param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,System.String,Terrasoft.Core.Entities.EntitySchemaQueryMacrosType,System.DateTime)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для выражения колонки, расположенной по заданному пути, типа 
            макроса и значения типа <see cref="T:System.DateTime"/>, которое обрабатывается макросом в правой части 
            фильтра.
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExpressionColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="macrosType">Тип макроса.</param>
            <param name="rightValue">Значение типа <see cref="T:System.DateTime"/>, которое обрабатывается макросом в 
            правой части фильтра.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,System.String,Terrasoft.Core.Entities.EntitySchemaQueryMacrosType,System.DayOfWeek)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для выражения колонки, расположенной по указанному пути, 
            типа макроса и значения типа <see cref="T:System.DayOfWeek"/>, которое обрабатывается макросом в правой 
            части фильтра.
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExpressionColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="macrosType">Тип макроса.</param>
            <param name="rightValue">Значение типа <see cref="T:System.DayOfWeek"/>, которое обрабатывается макросом в 
            правой части фильтра.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,System.String,Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для выражения колонки, расположенной по заданному пути, и 
            переданного подзапроса.</summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExpressionColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="rightExpressionValue">Выражение подзапроса в правой части фильтра.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateAggregationEntitySchemaExpression(System.String,Terrasoft.Common.AggregationTypeStrict)">
            <summary>
            Возвращает выражение агрегирующей функции указанного типа для выражения колонки, расположенной по 
            заданному пути.
            </summary>
            <param name="leftExprColumnPath">Путь к колонке, для выражения которой строится агрегирующая функция.
            </param>
            <param name="leftExprAggregationType">Тип агрегирующей функции.</param>
            <returns>Экземпляр выражения созданной агрегирующей функции.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateSubEntitySchemaExpression(System.String)">
            <summary>
            Возвращает выражение подзапроса к схеме объекта для колонки, расположенной по заданному пути.
            </summary>
            <param name="leftExprColumnPath">Путь к колонке, для которой создается позапрос.</param>
            <returns>Экземпляр выражения подзапроса для колонки, расположенной по пути 
            <paramref name="leftExprColumnPath"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,System.String,Terrasoft.Common.AggregationTypeStrict,System.Int32)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для выражения колонки, расположенной по указанному пути, 
            заданного типа агрегирующей функции и переданного значения параметра типа <see cref="T:System.Int32"/>, к 
            которому применяется агрегируюшая функция в правой части фильтра.
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExprColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="leftExprAggregationType">Тип агрегирующей функции.</param>
            <param name="rightExprParameterValue">Значение параметра, к которому применяется агрегирующая функция в 
            правой части фильтра.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,System.String,Terrasoft.Common.AggregationTypeStrict,System.Double)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для выражения колонки, расположенной по указанному пути, 
            заданного типа агрегирующей функции и переданного значения параметра типа <see cref="T:System.Double"/>, к 
            которому применяется агрегирующая функция в правой части фильтра.
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExprColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="leftExprAggregationType">Тип агрегирующей функции.</param>
            <param name="rightExprParameterValue">Значение параметра, к которому применяется агрегирующая функция в 
            правой части фильтра.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,System.String,Terrasoft.Common.AggregationTypeStrict,System.DateTime)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для выражения колонки, расположенной по указанному пути, 
            заданного типа аргегирующей функции и переданного значения параметра типа <see cref="T:System.DateTime"/>, к 
            которому применяется агрегирующая функция в правой части фильтра.
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExprColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="leftExprAggregationType">Тип агрегирующей функции.</param>
            <param name="rightExprParameterValue">Значение параметра, к которому применяется агрегирующая функция в 
            правой части фильтра.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,System.String,Terrasoft.Common.AggregationTypeStrict,System.String)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для колонки, расположенной по указанному пути, заданного типа 
            агрегирующей функции и переданного значения параметра типа <see cref="T:System.String"/>, к которому 
            применяется агрегирующая функция в правой части фильтра.
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExprColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="leftExprAggregationType">Тип агрегирующей функции.</param>
            <param name="rightExprParameterValue">Значение параметра, к которому применяется агрегирующая функция в 
            правой части фильтра.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,System.String,Terrasoft.Common.AggregationTypeStrict,System.Object,Terrasoft.Core.Entities.EntitySchemaQuery@)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для выражения колонки, расположенной по указанному пути, 
            заданного типа агрегирующей функции и переданного значения параметра, к которому применяется агрегирующая 
            функция в правой части фильтра. При этом в исходящем параметре возвращается подзапрос для выражения из 
            левой части фильтра либо подзапрос для первого выражения из правой части фильтра, если левое выражение 
            фильтра равно <c>null</c>.
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExprColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="leftExprAggregationType">Тип агрегирующей функции.</param>
            <param name="rightExprParameterValue">Значение параметра, к которому применяется агрегирующая функция в 
            правой части фильтра.</param>
            <param name="leftExprSubQuery">Параметр, в котором возвращается подзапрос для выражения в левой части 
            фильтра (если он не равен <c>null</c>) либо подзапрос для первого выражения в правой части фильтра (если 
            выражение левой части фильтра равно <c>null</c>).</param>
            <returns>Экземпляр созданого фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,System.String,Terrasoft.Common.AggregationTypeStrict,Terrasoft.Core.Entities.EntitySchemaQueryMacrosType,System.Int32)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для выражения колонки, расположенной по указанному пути, 
            заданного типа агрегирующей функции, заданного типа макроса и значения, к которому применяется макрос в 
            правой части фильтра.
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExprColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="leftExprAggregationType">Тип агрегирующей функции.</param>
            <param name="macrosType">Тип макроса.</param>
            <param name="daysCount">Значение, к которому применяется макрос в правой части фильтра. Необязательный 
            параметр, по умолчанию равен <c>0</c>.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilter(Terrasoft.Core.Entities.FilterComparisonType,System.String,Terrasoft.Common.AggregationTypeStrict,Terrasoft.Core.Entities.EntitySchemaQueryMacrosType,Terrasoft.Core.Entities.EntitySchemaQuery@,System.Int32)">
            <summary>
            Возвращает фильтр с заданным типом сравнения для выражения колонки, расположенной по указанному пути, 
            заданного типа агрегирующей функции, заданного типа макроса и значения, к которому применяется макрос в 
            правой части фильтра. При этом в исходящем параметре возвращается подзапрос для выражения из левой части 
            фильтра.</summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExprColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="leftExprAggregationType">Тип агрегирующей функции.</param>
            <param name="macrosType">Тип макроса.</param>
            <param name="leftExprSubQuery">Параметр, в котором возвращается подзапрос для выражения в левой части 
            фильтра.</param>
            <param name="daysCount">Значение, которое обрабатывается макросом в правой части фильтра. Необязательный 
            параметр, по умолчанию равен <c>0</c>.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilterWithParameters(Terrasoft.Core.Entities.FilterComparisonType,System.Boolean,System.String,System.Object[])">
            <summary>
            Возвращает параметризированный фильтр с заданным типом сравнения для выражения колонки, расположенной по 
            указанному пути, и переданного списка значений параметров из правой части фильтра. При этом для колонки 
            типа справочник можно определить тип ее значения, используемого в фильтре.</summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="useDisplayValue">Признак типа значения колонки-справочника, которое используется в фильтре: 
            <c>true</c> - значение для отображения; <c>false</c> - хранимое значение.</param>
            <param name="leftExpressionColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="rightExpressionParameterValues">Список значений параметров из правой части фильтра.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilterWithParameters(Terrasoft.Core.Entities.FilterComparisonType,System.String,System.Object[])">
            <summary>
            Возвращает параметризированный фильтр с заданным типом сравнения для выражения колонки, расположенной по 
            указанному пути, и переданного списка значений параметров из правой части фильтра. 
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExpressionColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="rightExpressionParameterValues">Список значений параметров из правой части фильтра.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateFilterWithParameters(Terrasoft.Core.Entities.FilterComparisonType,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Возвращает параметризированный фильтр с заданным типом сравнения для выражения колонки, расположенной по 
            указанному пути, и списка значений параметров из переданного перечислителя. При этом для колонки типа 
            справочник можно определить тип ее значения, используемого в фильтре.
            </summary>
            <param name="comparisonType">Тип сравнения.</param>
            <param name="leftExpressionColumnPath">Путь к колонке, содержащей выражение левой части фильтра.</param>
            <param name="rightExpressionParameterValues">Перечислитель значений параметров из правой части фильтра.
            </param>
            <param name="useDisplayValue">Признак типа значения колонки-справочника, которое используется в фильтре: 
            <c>true</c> - значение для отображения; <c>false</c> - хранимое значение.
            </param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateIsNullFilter(System.String)">
            <summary>
            Для текущего запроса к схеме объекта возвращает фильтр сравнения типа [Является <c>null</c> в базе 
            данных], устанавливая в качестве условия проверки выражение колонки, расположенной по указанному пути.
            </summary>
            <param name="leftExpressionColumnPath">Путь к колонке, для выражения которой строится фильтр.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateIsNotNullFilter(System.String)">
            <summary>
            Для текщуего запроса к схеме объекта возвращает фильтр сравнения типа [Не является <c>null</c> в базе 
            данных], устанавливая в качестве проверяемого значения выражение колонки, расположенной по указанному пути.
            </summary>
            <param name="leftExpressionColumnPath">Путь к колонке, для которой строится фильтр.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateExistsFilter(System.String)">
            <summary>
            Для текущего запроса к схеме объекта возвращает фильтр сравнения типа [Существует по заданному условию] и 
            устанавливает в качестве проверяемого значения выражение колонки, расположенной по заданному пути.
            </summary>
            <param name="rightExpressionColumnPath">Путь к колонке, для выражения которой строится фильтр.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFilter"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.CreateNotExistsFilter(System.String)">
            <summary>
            Для текущего запроса к схеме объекта возвращает фильтр сравнения типа [Не существует по заданному условию] 
            и устанавливает в качестве проверяемого значения выражение колонки, расположенной по заданному пути.
            </summary>
            <param name="rightExpressionColumnPath">Путь к колонке, для выражения которой строится фильтр.</param>
            <returns>Экземпляр созданного фильтра <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFilter"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.RemoveColumn(System.String)">
            <summary>
            Удаляет колонку с заданным именем из коллекции колонок текущего запроса.</summary>
            <param name="columnName">Имя удаляемой колонки.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.AddColumn(System.String,Terrasoft.Common.AggregationTypeStrict,Terrasoft.Core.Entities.EntitySchemaQuery@)">
            <summary>
            Создает и добавляет колонку в текущий запрос к схеме объекта в виде подзапроса, возвращающего результат 
            указанной агрегирующей функции, по пути к колонке схемы относительно корневой схемы.
            </summary>
            <param name="columnPath">Путь к колонке схемы относительно корневой схемы.</param>
            <param name="aggregationType">Тип агрегирующей функции. В качестве параметра передаются значения 
            перечисления типов агрегирующей функции <see cref="T:Terrasoft.Common.AggregationTypeStrict"/>.</param>
            <param name="subQuery">Ссылка на созданный подзапрос, помещенный в колонку.</param>
            <returns>Экземпляр созданной колонки <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryColumn"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.AddColumn(Terrasoft.Core.Entities.EntitySchemaQueryColumn)">
            <summary>
            Добавляет переданную колонку в коллекцию колонок текущего запроса к схеме объекта.</summary>
            <param name="queryColumn">Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryColumn"/>, добавляемый в коллекцию колонок 
            текущего запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.AddColumn(System.String)">
            <summary>
            Создает и добавляет колонку в текущий запрос к схеме объекта по заданному пути к колонке относительно 
            корневой схемы.</summary>
            <param name="columnPath">Путь к колонке схемы относительно корневой схемы.</param>
            <returns>Экземпляр созданной колонки.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="columnPath"/> 
            передано пустое значение или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.AddColumn(Terrasoft.Core.Entities.EntitySchemaQueryFunction)">
            <summary>
            Создает и добавляет колонку в текущий запрос к схеме объекта по переданной функции.</summary>
            <param name="function">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFunction"/>.</param>
            <returns>Экземпляр созданной колонки <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryColumn"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.AddAllSchemaColumns(System.Boolean)">
            <summary>
            В коллекцию колонок текущего запроса к схеме объекта добавляет все колонки корневой схемы.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetSummaryColumns">
            <summary>
            Возвращает коллекцию выражений тех колонок запроса, для которых вычисляются итоговые значения.
            </summary>
            <returns>Коллекция выражений колонок запроса, для которых вычисляются итоговые значения.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetSummaryColumns(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Для заданного перечня имен колонок возвращает коллекцию выражений колонок, для которых вычисляются итоговые 
            значения.
            </summary>
            <param name="columnNames">Перечислитель имен колонок запроса.</param>
            <returns>Коллекция выражений колонок, для которых вычисляются итоговые значения.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если у колонки с именем из перечислителя 
            <paramref name="columnNames"/> не определен тип агрегирующей функции либо если данная колонка не 
            используется для построения результирующего sql-запроса.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetSelectQuery(Terrasoft.Core.UserConnection)">
            <summary>
            Возвращает запрос на выборку данных, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Select"/> для текущего запроса к схеме объекта.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если результирующий запрос на выборку не содержит ни одной
            колонки.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetSelectQuery(Terrasoft.Core.UserConnection,Terrasoft.Core.Entities.EntitySchemaQueryOptions)">
            <summary>
            Возвращает запрос на выборку данных, построенный с учетом заданных настроек, используя заданное 
            пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="options">Настройки запроса к схеме объекта.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Select"/> для текущего запроса к схеме объекта, построенный с учетом 
            настроек <paramref name="options"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.ResetSelectQuery">
            <summary>
            Очищает запрос на выборку для текущего запроса к схеме объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetSummarySelectQuery(Terrasoft.Core.UserConnection,Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection)">
            <summary>
            Возвращает запрос на выборку итоговых (агрегирующих) значений для заданной коллекции колонок текущего 
            экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="summaryColumns">Коллекция колонок, для которых строится запрос на выборку итоговых значений.
            </param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Select"/> построенного запроса на выборку.</returns>
            <exception cref="T:Terrasoft.Core.Entities.SelectFromVirtualSchemaException">При попытке построения запроса на выборку из виртуальной 
            схемы.</exception>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="summaryColumns"/> 
            передано значение <c>null</c> или если коллекция колонок не содержит ни одного элемента.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetSummarySelectQuery(Terrasoft.Core.UserConnection)">
            <summary>
            Возвращает запрос на выборку итоговых (агрегирующих) значений для всех колонок текущего экземпляра 
            <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Select"/> построенного запроса на выборку.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetSummarySelectQuery(Terrasoft.Core.UserConnection,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Возвращает запрос на выборку итоговых (агрегирующих) значений для колонок текущего экземпляра 
            <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/> с указанными именами, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="columnNames">Перечислитель имен колонок, для которых строится запрос на выборку итоговых 
            значений.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Select"/> построенного запроса на выборку.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetSummarySelectQuery(Terrasoft.Core.UserConnection,System.String[])">
            <summary>
            Возвращает запрос на выборку итоговых (агрегирующих) значений для колонок текущего экземпляра 
            <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/> с указанными именами, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="columnNames">Массив имен колонок, для которых строится запрос на выборку итоговых значений.
            </param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.Select"/> построенного запроса на выборку.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetSchema">
            <summary>
            Возвращает экземпляр схемы объекта текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>.
            </summary>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchema"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.ResetSchema">
            <summary>
            Очищает схему текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetEntity(Terrasoft.Core.UserConnection,System.Object)">
            <summary>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Entities.Entity"/> по заданному первичному ключу, используя заданное 
            пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="primaryColumnValue">Значение первичного ключа.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.Entity"/> с первичным ключом <paramref name="primaryColumnValue"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetEntityCollection(Terrasoft.Core.UserConnection,Terrasoft.Core.Entities.EntitySchemaQueryOptions)">
            <summary>
            Возвращает коллекцию объектов, являющихся результатом выполнения текущего запроса к схеме объекта с учетом 
            заданных настроек, используя переданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="options">Настройки запроса к схеме объекта.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntityCollection"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetEntityCollection(Terrasoft.Core.UserConnection)">
            <summary>
            Возвращает коллекцию экземпляров <see cref="T:Terrasoft.Core.Entities.Entity"/>, представляющих результаты выполнения текущего 
            запроса с использованием заданного пользовательского подключения.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntityCollection"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetSummaryEntity(Terrasoft.Core.UserConnection,Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection)">
            <summary>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Entities.Entity"/> для результата, возвращаемого запросом на выборку итоговых 
            значений для переданной коллекции колонок текущего запроса с использованием заданного 
            пользовательского подключения.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="summaryColumns">Коллекция колонок запроса, для которых выбираются итоговые значения.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.Entity"/> для результата, возвращаемого запросом на выборку итоговых значений 
            коллекции колонок <paramref name="summaryColumns"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetSummaryEntity(Terrasoft.Core.UserConnection)">
            <summary>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Entities.Entity"/> для результата, возвращаемого запросом на выборку итоговых 
            значений для всех колонок текущего запроса с использованием заданного пользовательского подключения.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.Entity"/> для результата, возвращаемого запросом на выборку итоговых значений 
            всех колонок текущего запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetSummaryEntity(Terrasoft.Core.UserConnection,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Entities.Entity"/> для результата, возвращаемого запросом на выборку итоговых 
            значений для колонок с заданными именами, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="columnNames">Перечислитель имен колонок.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.Entity"/> для результата, возвращаемого запросом на выборку итоговых значений 
            для колонок с именами <paramref name="columnNames"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetSummaryEntity(Terrasoft.Core.UserConnection,System.String[])">
            <summary>
            Возвращает экземпляр <see cref="T:Terrasoft.Core.Entities.Entity"/> для результата, возвращаемого запросом на выборку итоговых 
            значений для колонок с заданными именами, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="columnNames">Массив имен колонок.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.Entity"/> для результата, возвращаемого запросом на выборку итоговых значений 
            для колонок с именами <paramref name="columnNames"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetDataTable(Terrasoft.Core.UserConnection)">
            <summary>
            Возвращает результат выполнения текущего запроса к схеме объекта в виде таблицы данных в памяти, используя 
            заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <returns>Экземпляр <see cref="T:System.Data.DataTable"/>, представляющий результат выполнения текущего 
            запроса к схеме объекта.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.LoadDataTableData(Terrasoft.Core.UserConnection,System.Data.DataTable)">
            <summary>
            Загружает результат выполнения текущего запроса к схеме объекта в переданный объект 
            <see cref="T:System.Data.DataTable"/>, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="dataTable">Экземпляр <see cref="T:System.Data.DataTable"/>, в который загружается результат 
            выполнения запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.LoadDataTableData(Terrasoft.Core.UserConnection,System.Data.DataTable,Terrasoft.Core.Entities.EntitySchemaQueryOptions)">
            <summary>
            Загружает результат выполнения текущего запроса к схеме объекта в переданный объект 
            <see cref="T:System.Data.DataTable"/> с учетом заданных настроек, используя заданное пользовательское 
            подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="dataTable">Экземпляр <see cref="T:System.Data.DataTable"/>, в который загружается результат 
            выполнения запроса.</param>
            <param name="options">Настройки запроса к схеме объекта.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.GetTypedColumnValue``1(Terrasoft.Core.Entities.Entity,System.String)">
            <summary>
            Возвращает типизированное значение колонки с заданным именем из переданного экземпляра <see cref="T:Terrasoft.Core.Entities.Entity"/>.
            </summary>
            <typeparam name="T">Любой тип.</typeparam>
            <param name="entity">Экземпляр <see cref="T:Terrasoft.Core.Entities.Entity"/>, которому принадлежит колонка.</param>
            <param name="columnName">Имя колонки.</param>
            <returns>Типизированное значение колонки с именем <paramref name="columnName"/>, принадлежащей 
            <paramref name="entity"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="entity"/> передано 
            значение <c>null</c>. Или если в качестве параметра <paramref name="columnName"/> передано пустое значение 
            или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.AddColumn(System.Object,Terrasoft.Core.DataValueType)">
            <summary>
            Создает и добавляет в текущий запрос к схеме объекта колонку типа параметр с заданным значением 
            определенного типа.
            </summary>
            <param name="parameterValue">Значение параметра.</param>
            <param name="parameterDataValueType">Тип значения параметра.</param>
            <returns>Экземпляр созданной колонки <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryColumn"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.AddColumn(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Creates and adds given instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/> as a column of current query entity
            schema.
            </summary>
            <param name="subQuery">An instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>, which is added as a column of
            current query.</param>
            <returns>An instance of created column <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryColumn"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQuery.SetLocalizationCultureId(System.Guid)">
            <summary>
            Sets the localization culture Id.
            </summary>
            <param name="cultureId">The culture Id.</param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.Name">
            <summary>
            Имя.
            </summary>
            <exception cref="T:System.ArgumentException">При попытке изменения имени базового представления.</exception>
            <exception cref="T:System.ArgumentException">Если свойству присваивается значение, не являющееся действительным 
            идентификатором, или пустая строка.</exception>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.CacheItemName">
            <summary>
            Имя элемента кэша.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.ParentCollection">
            <summary>
            Коллекция запросов, которой принадлежит текущий запрос к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.ParentEntitySchema">
            <summary>
            Родительская схема запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.IsInherited">
            <summary>
            Признак, является ли запрос унаследованным.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.CanReadUncommitedData">
            <summary>
            Признак, определяющий, будут ли попадать в результаты запроса данные, для которых не завершена транзакция.
            </summary>
            <remarks>Если свойство равно <c>true</c>, то в результаты запроса попадают данные, для которых не завершена 
            транзакция; если <c>false</c> - в запрос попадают только данные, для которых завершена транзакция.
            Значение по умолчанию: <c>true</c>.
            </remarks>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.IgnoreDisplayValues">
            <summary>
            Признак, определяющий, что в запросе не будут использоваться отображаемые значения колонок.
            </summary>
            <remarks>Если свойство равно <c>true</c>, то в запросе возвращаются отображаемые значения колонок; если 
            свойство равно <c>false</c>, то запрос возвращает хранимые значения колонок.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.Caption">
            <summary>
            Заголовок.
            </summary>
            <remarks>По умолчанию инициализируется заголовком схемы запроса.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.ManagerItem">
            <summary>
            Элемент менеджера.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.Manager">
            <summary>
            Менеджер схем.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.EntitySchemaManager">
            <summary>
            Менеджер схем объектов.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.DataValueTypeManager">
            <summary>
            Менеджер значений типов данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.RootSchema">
            <summary>Корневая схема.</summary>
            <remarks>Все пути к колонкам схем задаются относительно этой корневой схемы. 
            Свойство инициализируется в конструкторе. Значение по умолчанию: <c>null</c>.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.PrimaryQueryColumn">
            <summary>Колонка, созданная по первичной колонке корневой схемы. 
            Заполняется при первом обращении.</summary>
            <remarks>Значение по умолчанию: экземпляр, созданный по первичной колонке корневой схемы.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.Columns">
            <summary>Коллекция колонок текущего запроса к схеме объекта.</summary>
            <remarks>Значение по умолчанию: содержит колонку из свойства <see cref="P:Terrasoft.Core.Entities.EntitySchemaQuery.PrimaryQueryColumn"/>.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.Filters">
            <summary>Коллекция фильтров текущего запроса к схеме объекта.</summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.UseAdminRights">
            <summary>Параметр, определяющий, будут ли учитываться права при построении запроса получения
            данных.</summary>
            <remarks>Значение по умолчанию: <c>true</c></remarks>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.UseLocalization">
            <summary>Параметр, определяющий, будут ли использоваться локализуемые данные.</summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.HideSecurityValue">
            <summary>
            Параметр, определяющий, будут ли скрываться значения зашифрованных колонок.
            </summary>
            <remarks>
            Значение по умолчанию: <c>false</c>.
            Если установить параметр в <c>true</c>, то значение зашифрованных колонок будет равно <c>null</c>.
            </remarks>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.JoinRightState">
            <summary>Параметр, определяющий условие наложения прав при использовании связанных таблиц,
            если схема администрируется по записям.</summary>
            <remarks>Значение по умолчанию: вычитывается из системной настройки <see cref="T:Terrasoft.Core.DB.QueryJoinRightLevel"/>.
            Если настройка не задана, то значение равно <see cref="F:Terrasoft.Core.DB.QueryJoinRightLevel.EnabledForAdditionalColumns"/>.
            </remarks>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.IsDistinct">
            <summary>Признак, определяющий, убирать ли дубли в результирующем наборе данных.</summary>
            <remarks>Значение по умолчанию: <c>false</c>.</remarks>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.RowCount">
            <summary>
            Количество строк, возвращаемых запросом.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.SkipRowCount">
            <summary>
            Количество строк, которые необходимо пропустить в результирующем наборе данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQuery.Cache">
            <summary>
            Кэш запроса.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQuery.Loading">
            <summary>
            Событие, возникающее при загрузке данных.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryCollection">
            <summary>
            Коллекция запросов к схеме объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryCollection.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryCollection"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryCollection.#ctor(Terrasoft.Core.Entities.EntitySchemaQueryCollection)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryCollection"/>, являющийся клоном переданной коллекции 
            запросов к схеме объекта.
            </summary>
            <param name="source">Экземпляр коллекции <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryCollection"/>, клон которой создается.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryCollection.Clone">
            <summary>
            Возвращает клон текущей коллекции запросов к схеме объекта.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей коллекции запросов к схеме 
            объекта.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryCollection.ParentEntitySchema">
            <summary>
            Схема объекта, которой принадлежит коллекция.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionType">
            <summary>
            Тип выражения запроса к схеме объекта.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryExpressionType.SchemaColumn">
            <summary>
            Колонка схемы.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryExpressionType.Function">
            <summary>
            Функция.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryExpressionType.Parameter">
            <summary>
            Параметр.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryExpressionType.SubQuery">
            <summary>
            Подзапрос.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaQueryExpressionType.ArithmeticOperation">
            <summary>
            Арифметическая операция.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionTypeChangedEventArgs">
            <summary>
            Предоставляет данные о состоянии для события изменения типа выражения запроса к схеме объекта. 
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionTypeChangedEventArgs.#ctor(Terrasoft.Core.Entities.EntitySchemaQueryExpressionType,Terrasoft.Core.Entities.EntitySchemaQueryExpressionType)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionTypeChangedEventArgs"/> с заданными 
            предыдущим и текущим типами выражения запроса к схеме объекта.
            </summary>
            <param name="oldValue">Предыдущий тип выражения запроса к схеме объекта.</param>
            <param name="value">Текущий тип выражения запроса к схеме объекта.</param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionTypeChangedEventArgs.OldValue">
            <summary>
            Предыдущий тип выражения запроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionTypeChangedEventArgs.Value">
            <summary>
            Текущий тип выражения запроса к схеме объекта.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionTypeBeforeChangedEventArgs">
            <summary>
            Предоставляет данные о состоянии для события перед изменением типа выражения запроса к схеме объекта. 
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionTypeBeforeChangedEventArgs.#ctor(Terrasoft.Core.Entities.EntitySchemaQueryExpressionType,Terrasoft.Core.Entities.EntitySchemaQueryExpressionType)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionTypeBeforeChangedEventArgs"/> с заданными
            предыдущим и текущим типами выражения запроса к схеме объекта.
            </summary>
            <param name="oldValue">Предыдущий тип выражения запроса к схеме объекта.</param>
            <param name="value">Текущий тип выражения запроса к схеме объекта.</param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionTypeBeforeChangedEventArgs.Cancel">
            <summary>
            Определяет, было ли отменено изменение типа выражения запроса к схеме объекта.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryPropertyChangedEventArgs`1">
            <summary>
            Предоставляет данные о состоянии для события изменения свойства запроса к схеме объекта.
            </summary>
            <typeparam name="T">Любой класс.</typeparam>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryPropertyChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryPropertyChangedEventArgs`1"/> с заданными 
            предыдущим и текущим значениями свойства запроса к схеме объекта.
            </summary>
            <param name="oldValue">Предыдущее значение свойства запроса к схеме объекта.</param>
            <param name="value">Текущее значение свойства запроса к схеме объекта.</param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryPropertyChangedEventArgs`1.OldValue">
            <summary>
            Предыдущее значение свойства запроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryPropertyChangedEventArgs`1.Value">
            <summary>
            Текущее значение свойства запроса к схеме объекта.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryPropertyBeforeChangedEventArgs`1">
            <summary>
            Предоставляет данные о состоянии для события перед изменением свойства запроса к схеме объекта.
            </summary>
            <typeparam name="T">Любой класс.</typeparam>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryPropertyBeforeChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryPropertyBeforeChangedEventArgs`1"/> с заданными 
            предыдущим и текущим значениями свойства запроса к схеме объекта.
            </summary>
            <param name="oldValue">Предыдущее значение свойства запроса к схеме объекта.</param>
            <param name="value">Текущее значение свойства запроса к схеме объекта.</param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryPropertyBeforeChangedEventArgs`1.Cancel">
            <summary>
            Определяет, было ли отменено изменение свойства запроса к схеме объекта.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionEventArgs">
            <summary>
            Предоставляет данные о состоянии для события изменения коллекции выражений запроса к схеме объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionEventArgs.#ctor(System.Int32,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionEventArgs"/> с заданными индексом 
            элемента коллекции и выражением запроса к схеме объекта.
            </summary>
            <param name="index">Индекс элемента в коллекции.</param>
            <param name="expression">Выражение запроса к схеме объекта.</param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionEventArgs.Index">
            <summary>
            Индекс элемента в коллекции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionEventArgs.Expression">
            <summary>
            Выражение запроса к схеме объекта.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionBeforeEventArgs">
            <summary>
            Предоставляет данные о состоянии для события перед изменением коллекции выражений запроса к схеме объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionBeforeEventArgs.#ctor(System.Int32,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionBeforeEventArgs"/> c заданными 
            индексом элемента в коллекции и выражением запроса к схеме объекта.
            </summary>
            <param name="index">Индекс элемента в коллекции.</param>
            <param name="expression">Выражение запроса к схеме объекта.</param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionBeforeEventArgs.Cancel">
            <summary>
            Определяет, было ли отменено изменение коллекции выражений запроса к схеме объекта.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionItemChangedEventArgs">
            <summary>
            Предоставляет данные о состоянии для события изменения элемента коллекции выражений запроса к схеме объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionItemChangedEventArgs.#ctor(System.Int32,Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionItemChangedEventArgs"/> с 
            заданными индексом элемента в коллекции, предыдущим и текущим значениями элемента коллекции.
            </summary>
            <param name="index">Индекс элемента в коллекции.</param>
            <param name="expression">Текущее значение элемента коллекции выражений запроса к схеме объекта.</param>
            <param name="oldExpression">Предыдущее значение элемента коллекции выражений запроса к схеме объекта.
            </param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionItemChangedEventArgs.OldExpression">
            <summary>
            Предыдущее значение элемента коллекции выражений запроса к схеме объекта.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionBeforeItemChangedEventArgs">
            <summary>
            Предоставляет данные о состоянии для события перед изменением элемента коллекции выражений запроса к схеме 
            объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionBeforeItemChangedEventArgs.#ctor(System.Int32,Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionBeforeItemChangedEventArgs"/> с 
            заданными индексом элемента в коллекции, предыдущим и текущим значениями элемента коллекции выражений 
            запроса к схеме объекта.
            </summary>
            <param name="index">Индекс элемента в коллекции.</param>
            <param name="expression">Текущее значение элемента коллекции выражений запроса к схеме объекта.</param>
            <param name="oldExpression">Предыдущее значение элемента коллекции выражений запроса к схеме объекта.
            </param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollectionBeforeItemChangedEventArgs.Cancel">
            <summary>
            Определяет, было ли отменено изменение элемента коллекции выражений запроса к схеме объекта.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression">
            <summary>
            Выражение запроса к схеме объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.#ctor(Terrasoft.Core.Entities.EntitySchemaQueryExpressionType)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/> с заданным типом выражения запроса к 
            схеме объекта.
            </summary>
            <param name="expressionType">Тип выражения запроса к схеме объекта.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.#ctor(Terrasoft.Core.Entities.EntitySchema,System.String)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/> для колонки, расположенной по указанному 
            пути относительно заданной корневой схемы.
            </summary>
            <param name="rootSchema">Корневая схема, относительно которой строится выражение.</param>
            <param name="schemaColumnPath">Строка пути к колонке, для которой строится выражение.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.#ctor(Terrasoft.Core.Entities.EntitySchema,Terrasoft.Core.Entities.EntitySchemaColumn,System.String)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/> для заданного экземпляра колонки схемы 
            объекта, расположенной по указанному пути относительно заданной корневой схемы.
            </summary>
            <param name="rootSchema">Корневая схема, относительно которой строится выражение.</param>
            <param name="schemaColumn">Экземпляр колонки схемы объекта, для которой строится выражение.</param>
            <param name="schemaColumnPath">Строка пути к колонке <paramref name="schemaColumn"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.#ctor(Terrasoft.Core.Entities.EntitySchemaQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/> для заданной функции запроса к схеме 
            объекта.
            </summary>
            <param name="function">Функция запроса к схеме объекта, для которой строится выражение.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/> для заданного подзапроса к схеме объекта.
            </summary>
            <param name="subQuery">Подзапрос к схеме объекта, для которого строится выражение.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.#ctor(Terrasoft.Common.ArithmeticOperation,Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/> для арифметической операции с заданными 
            операндами.
            </summary>
            <param name="arithmeticOperation">Арифметическая операция.</param>
            <param name="leftArithmeticOperand">Левый операнд арифметической операции.</param>
            <param name="rightArithmeticOperand">Правый операнд арифметической операции.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.#ctor(Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/>, являющийся клоном переданного выражения 
            запроса к схеме объекта.
            </summary>
            <param name="source">Выражение запроса к схеме объекта, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.op_Addition(Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Перегрузка оператора арифметического сложения для выражений запросов к схемам объектов.
            </summary>
            <param name="leftOperand">Выражение запроса к схеме объекта - левый операнд в операции сложения.</param>
            <param name="rightOperand">Выражение запроса к схеме объекта - правый операнд в операции сложения.</param>
            <returns>Новое выражение запроса к схеме объекта, представляющее сумму выражений-операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.op_Addition(Terrasoft.Core.Entities.EntitySchemaQueryExpression,System.Double)">
            <summary>
            Перегрузка оператора арифметического сложения для выражений запросов к схемам объектов.
            </summary>
            <param name="leftOperand">Выражение запроса к схеме объекта - правый операнд в операции сложения.</param>
            <param name="rightOperand">Значение типа <see cref="T:System.Double"/> - левый операнд в операции сложения.
            </param>
            <returns>Новое выражение запроса к схеме объекта, представляющее сумму операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.op_Subtraction(Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Перегрузка оператора арифметического вычитания для выражений запросов к схемам объектов.
            </summary>
            <param name="leftOperand">Выражение запроса к схеме объекта - левый операнд операции вычитания.</param>
            <param name="rightOperand">Выражение запроса к схеме объекта - правый операнд в операции вычитания.</param>
            <returns>Новое выражение запроса к схеме объекта, представляющее разность между операндами 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.op_Subtraction(Terrasoft.Core.Entities.EntitySchemaQueryExpression,System.Double)">
            <summary>
            Перегрузка оператора арифметического вычитания для выражений запросов к схемам объектов.
            </summary>
            <param name="leftOperand">Выражение запроса к схеме объекта - правый операнд в операции вычитания.</param>
            <param name="rightOperand">Значение типа <see cref="T:System.Double"/> - левый операнд значения выражения.
            </param>
            <returns>Новое выражение запроса к схеме объекта, представляющее разность между операндами 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.op_Multiply(Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Перегрузка оператора арифметического умножения для выражений запросов к схемам объектов.
            </summary>
            <param name="leftOperand">Выражение запроса к схеме объекта - левый операнд операции умножения.</param>
            <param name="rightOperand">Выражение запроса к схеме объекта - правый операнд операции умножения.</param>
            <returns>Новое выражение запроса к схеме объекта, представляющее произведение операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.op_Multiply(Terrasoft.Core.Entities.EntitySchemaQueryExpression,System.Double)">
            <summary>
            Перегрузка оператора арифметического умножения для выражений запросов к схемам объектов
            </summary>
            <param name="leftOperand">Выражение запроса к схеме объекта - левый операнд операции умножения.</param>
            <param name="rightOperand">Значение типа <see cref="T:System.Double"/> - правый операнд операции умножения.
            </param>
            <returns>Новое выражение запроса к схеме объекта, представляющее произведение операндов 
            <paramref name="leftOperand"/> и <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.op_Division(Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Перегрузка оператора арифметического деления для выражений запросов к схемам объектов.
            </summary>
            <param name="leftOperand">Выражение запроса к схеме объекта - левый операнд операции деления.</param>
            <param name="rightOperand">Выражение запроса к схеме объекта - правый операнд в операции деления.</param>
            <returns>Новое выражение запроса к схеме объекта, представляющее частное операнда 
            <paramref name="leftOperand"/> и операнда <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.op_Division(Terrasoft.Core.Entities.EntitySchemaQueryExpression,System.Double)">
            <summary>
            Перегрузка оператора арифметического деления для выражений запросов к схемам объектов.
            </summary>
            <param name="leftOperand">Выражение запроса к схеме объекта - левый операнд операции деления.</param>
            <param name="rightOperand">Значение типа <see cref="T:System.Double"/> - правый операнд в операции деления.
            </param>
            <returns>Новое выражение запроса к схеме объекта, представляющее частное операнда 
            <paramref name="leftOperand"/> и операнда <paramref name="rightOperand"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.GetJoinPath(System.String)">
            <summary>
            Возвращает путь к связанной таблице, из которой выбирается выражение колонки, по заданному полному пути к 
            колонке выражения.
            </summary>
            <param name="columnPath">Полный путь к колонке выражения.</param>
            <returns>Путь к связанной таблице колонки выражения.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="columnPath"/> 
            передано пустое значение или <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию выражения запроса к схеме объекта с помощью заданного экземпляра 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого 
            выполняется сериализация. </param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.Clone">
            <summary>
            Возвращает экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра 
            <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра 
            <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpression"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.CreateQueryColumnExpression(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Creates <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> for current expression with defined access rights.
            </summary>
            <param name="dbSecurityEngine">The instance of the <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/> class that defines
            database access rights to schemas object for current expression.</param>
            <returns>Query column expression.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.GetResultDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных текущего выражения запроса к схеме объекта, используя переданный менеджер типов 
            данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных текущего выражения запроса к схеме объекта.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если текущее выражение запроса имеет неподдерживаемый тип.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpression.GetCaption">
            <summary>
            Возвращает заголовок для отображения для текущего выражения запроса к схеме объекта.
            </summary>
            <returns>Заголовок для отображения для текущего выражения запроса к схеме объекта</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если текущее выражение запроса к схеме объекта имеет 
            неподдерживаемый тип.</exception>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ExpressionType">
            <summary>
            Тип выражения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.IsBlock">
            <summary>
            Определяет, помещается ли выражение в блок.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.IsNegative">
            <summary>
            Определяет, является ли выражение отрицанием.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.SourceName">
            <summary>
            Источник данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.SourceAlias">
            <summary>
            Псевдоним источника данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.Path">
            <summary>
            Полный путь к колонке выражения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.JoinPath">
            <summary>
            Путь к связанной таблице колонки выражения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.SchemaColumnName">
            <summary>
            Имя колонки схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.RootSchema">
            <summary>
            Корневая схема.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.SchemaColumn">
            <summary>
            Экземпляр колонки схемы.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.Function">
            <summary>
            Функция выражения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.IsAggregationFunction">
            <summary>
            Признак, является ли выражение агрегирующей функцией.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.IsSubQuery">
            <summary>
            Признак, является ли выражение подзапросом.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ParameterValue">
            <summary>
            Значение параметра.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ParameterValueForcedType">
            <summary>
            Типизированное значение параметра.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.DisplayValue">
            <exclude/>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.SubQuery">
            <summary>
            Подзапрос к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.SubQueryOptions">
            <summary>
            Параметры подзапроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.QueryColumnAlias">
            <summary>
            Псевдоним колонки запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ParentQuery">
            <summary>
            Родительский запрос к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ArithmeticOperation">
            <summary>
            Арифметическая операция.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.LeftArithmeticOperand">
            <summary>
            Левый операнд арифметической операции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.RightArithmeticOperand">
            <summary>
            Правый операнд арифметической операции.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ExpressionTypeChanging">
            <summary>
            Событие, возникающее перед изменением типа выражения запроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.IsInExpressionTypeChanging">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ExpressionTypeChanging"/>. 
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ExpressionTypeChanged">
            <summary>
            Событие, возникающее после изменения типа выражения запроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.IsInExpressionTypeChanged">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ExpressionTypeChanged"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.FunctionChanging">
            <summary>
            Событие, возникающее перед изменением функции запроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.IsInFunctionChanging">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.FunctionChanging"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.FunctionChanged">
            <summary>
            Событие, возникающее после изменения функции запроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.IsInFunctionChanged">
            <summary>
            Определяет, выполняется ли обработка <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.FunctionChanged"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ParameterValueChanging">
            <summary>
            Событие, возникающее перед изменением значения параметра запроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.IsInParameterValueChanging">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ParameterValueChanging"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ParameterValueChanged">
            <summary>
            Событие, возникающее после изменения значения параметра запроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.IsInParameterValueChanged">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ParameterValueChanged"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ParameterValueForcedTypeChanging">
            <summary>
            Событие, возникающее перед изменением типизированного значения параметра.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.IsInParameterValueForcedTypeChanging">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ParameterValueForcedTypeChanging"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ParameterValueForcedTypeChanged">
            <summary>
            Событие, возникающее после изменения типизированного значения параметра.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpression.IsInParameterValueForcedTypeChanged">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpression.ParameterValueForcedTypeChanged"/>.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection">
            <summary>
            Коллекция выражений запроса к схеме объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection"/> для заданного запроса к схеме 
            объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.#ctor(Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection"/>, являющийся клоном переданной 
            коллекции выражений.
            </summary>
            <param name="source">Экземпляр коллекции <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection"/>, клон которой 
            создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.GetMaxQueryColumnAliasLength(System.String)">
            <summary>
            Для текущей коллекции выражений возвращает максимальную длину псевдонима колонки запроса, расположенной по 
            заданному пути.
            </summary>
            <param name="joinPath">Путь к колонке запроса.</param>
            <returns>Максимальная длина псевдонима колонки запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.GetUniqueQueryColumnAlias(System.String)">
            <summary>
            Возвращает уникальный псевдоним для колонки запроса с заданным псевдонимом.
            </summary>
            <param name="alias">Псевдоним колонки, для которой возвращается уникальный псевдоним.</param>
            <returns>Уникальный псевдоним колонки запроса для псевдонима <paramref name="alias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.GetUniqueQueryColumnAlias(System.String,System.Int32)">
            <summary>
            Возвращает уникальный псевдоним указанной максимальной длины для колонки запроса с заданным псевдонимом.
            </summary>
            <param name="alias">Псевдоним колонки, для которой возвращается уникальный псевдоним.</param>
            <param name="aliasMaxLength">Максимальная длина возвращаемого уникального псевдонима.</param>
            <returns>Уникальный псевдоним с максимальной длиной <paramref name="aliasMaxLength"/> для колонки с 
            псевдонимом <paramref name="alias"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.GetUniqueQueryColumnAlias(System.String,System.String)">
            <summary>
            Возвращает уникальный псевдоним для колонки c заданным псевдонимом, расположенной по заданному пути.
            </summary>
            <param name="joinPath">Путь к колонке, для которой возвращается уникальный псевдоним.</param>
            <param name="alias">Псевдоним колонки, для которой возвращается уникальный псевдоним.</param>
            <returns>Уникальный псевдоним для колонки с псевдонимом <paramref name="alias"/>, расположенной по пути 
            <paramref name="joinPath"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.GetUniqueQueryColumnAlias(System.String,System.String,System.Int32)">
            <summary>
            Возвращает уникальный псевдоним с указанным максимальным ограничением по длине для колонки с заданным 
            псевдонимом, расположенной по заданному пути.
            </summary>
            <param name="joinPath">Путь к колонке, для которой возвращается уникальный псевдоним.</param>
            <param name="alias">Псевдоним колонки, для которой возвращается уникальный псевдоним.</param>
            <param name="aliasMaxLength">Максимальная длина возвращаемого уникального псевдонима.</param>
            <returns>Уникальный псевдоним с максимальной длиной <paramref name="aliasMaxLength"/> для колонки запроса с 
            псевдонимом <paramref name="alias"/>, расположенной по пути <paramref name="joinPath"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.GetUsingSchemaColumnExpressions">
            <summary>
            Для текущей коллекции выражений формирует коллекцию выражений, которые будут использованы при построении 
            sql-запроса.
            </summary>
            <returns>Коллекция выражений, которая будет использована при построении sql-запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.CreateQueryColumnExpression(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Для текущей коллекции выражений возвращает перечислитель выражений колонок запроса, сформированный с учетом 
            заданных прав доступа.
            </summary>
            <param name="dbSecurityEngine">Объект <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/>, определяющий права доступа к базе 
            данных для текущего выражения запроса к схеме объекта.</param>
            <returns>Перечислитель выражений колонок запроса для текущей коллекции выражений.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.ResetQueryColumnAliases">
            <summary>
            Сброс псевдонимов для всех элементов текущей коллекции. 
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.Clone">
            <summary>
            Возвращает экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей коллекции выражений запроса к 
            схеме объекта.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей коллекции выражений запроса к 
            схеме объекта.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.ParentQuery">
            <summary>
            Запрос к схеме объекта, которому принадлежит данная коллекция выражений.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.QueryExpressionInserting">
            <summary>
            Событие, возникающее перед добавлением элемента в коллекцию выражений запроса к схеме объекта. 
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.IsInQueryExpressionInserting">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.QueryExpressionInserting"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.QueryExpressionInserted">
            <summary>
            Событие, возникающее после добавления элемента в коллекцию выражений запроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.IsInQueryExpressionInserted">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.QueryExpressionInserted"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.QueryExpressionChanging">
            <summary>
            Событие, возникающее перед изменением элемента коллекции выражений запроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.IsInQueryExpressionChanging">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.QueryExpressionChanging"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.QueryExpressionChanged">
            <summary>
            Событие, возникающее после изменения элемента коллекции выражений запроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.IsInQueryExpressionChanged">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.QueryExpressionChanged"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.QueryExpressionRemoving">
            <summary>
            Событие, возникающее перед удалением элемента из коллекции выражений к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.IsInQueryExpressionRemoving">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.QueryExpressionRemoving"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.QueryExpressionRemoved">
            <summary>
            Событие, возникающее после удаления элемента из коллекции выражений запроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.IsInQueryExpressionRemoved">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.QueryExpressionRemoved"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.CollectionClearing">
            <summary>
            Событие, возникающее перед удалением всех элементов коллекции выражений запроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.IsInCollectionClearing">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.CollectionClearing"/>.
            </summary>
        </member>
        <member name="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.CollectionCleared">
            <summary>
            Событие, возникающее после удаления всех элементов коллекции выражений запроса к схеме объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.IsInCollectionCleared">
            <summary>
            Определяет, выполняется ли обработка события <see cref="E:Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection.CollectionCleared"/>.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryColumn">
            <summary>
            Колонка запроса к схеме объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryColumn"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.#ctor(System.String)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryColumn"/> с заданным именем.
            </summary>
            <param name="name">Имя колонки запроса к схеме объекта.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.#ctor(Terrasoft.Core.Entities.EntitySchemaQueryColumn)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryColumn"/>, являющийся клоном переданной колонки 
            запроса к схеме объекта.
            </summary>
            <param name="source">Колонка запроса к схеме объекта, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию текущей колонки запроса к схеме объекта, используя переданный экземпляр 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого выполняется 
            сериализация текущей колонки запроса к схеме объекта.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.Clone">
            <summary>
            Возвращает экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей колонки запроса к схеме объекта.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей колонки запроса к схеме объекта.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.CreateSummaryQueryColumnExpression(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Создает выражение агрегирующей функции для заданного выражения колонки.
            </summary>
            <param name="queryColumnExpression">Выражение колонки запроса.</param>
            <returns>Выражение агрегирующей функции для выражения колонки запроса 
            <paramref name="queryColumnExpression"/>.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если для текущей колонки запроса не указан тип агрегирующей 
            функции.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.GetResultDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных хранимого значения колонки, используя переданный менеджер типов данных. 
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных значения колонки.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.GetResultDataDisplayValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных значения для отображения колонки, используя переданный менеджер типов данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных значения для отображения колонки.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.OrderByAsc">
            <summary>
            Для текущей колонки устанавливает порядок сортировки по возрастанию.
            </summary>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryColumn"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.OrderByAsc(System.Int32)">
            <summary>
            Для текущей колонки устанавливает порядок сортировки по возрастанию в заданной позиции.
            </summary>
            <param name="orderPosition">Позиция сортировки.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryColumn"/> с установленным порядком сортировки по 
            возрастанию.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.OrderByDesc">
            <summary>
            Для текущей колонки устанавливает порядок сортировки по убыванию.
            </summary>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryColumn"/></returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.OrderByDesc(System.Int32)">
            <summary>
            Для текущей колонки устанавливает порядок сортировки по убыванию в заданной позиции.
            </summary>
            <param name="orderPosition">Позиция сортировки.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryColumn"/> с установленным порядком сортировки по 
            убыванию.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.GetResultSummaryDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных итогового значения колонки, используя переданный менеджер типов данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных итогового значения колонки.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если для текущей колонки не задан тип итоговой агрегирующей 
            функции.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.SetForcedQueryColumnValueAlias(System.String)">
            <summary>
            Specifies alias for query column value.
            </summary>
            <param name="alias">Alias for query column with value.</param>
            <returns>Returns true if alias has been changed.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumn.SetForcedQueryDisplayColumnValueAlias(System.String)">
            <summary>
            Specifies alias for query column display value.
            </summary>
            <param name="alias">Alias for query column with display value.</param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.Caption">
            <summary>
            Заголовок колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.ValueExpression">
            <summary>
            Выражение хранимого значения колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.ValueQueryAlias">
            <summary>
            Псевдоним хранимого значения в sql-запросе.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.DisplayExpression">
            <summary>
            Выражение значения для отображения колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.DisplayValueQueryAlias">
            <summary>
            Псевдоним значения для отображения в sql-запросе.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.SourceSchemaUIdExpression">
            <summary>
            Выражение для уникального идентификатора схемы - источника.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.ParentQuery">
            <summary>
            Запрос к схеме объекта, которому принадлежит колонка.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.IsLookup">
            <summary>
            Признак, является ли колонка справочником.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.IsVisible">
            <summary>
            Признак, будет ли данная колонка присутствовать в результирующем наборе данных запроса. 
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.IsAlwaysSelect">
            <summary>
            Признак, будет ли данная колонка всегда присутствовать в результирующем sql-запросе.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.IsSelecting">
            <summary>
            Признак, использовать ли данную колонку для построения результирующего sql-запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.UseDisplayValue">
            <summary>
            Признак, использовать ли для колонки значение для отображения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.OrderDirection">
            <summary>
            Порядок сортировки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.OrderPosition">
            <summary>
            Позиция сортировки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.IsAggregated">
            <summary>
            Признак, применяется ли к колонке агрегирующая функция.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.SummaryType">
            <summary>
            Тип агрегирующей функции для колонки.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumn.Path">
            <summary>
            Путь к колонке.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection">
            <summary>
            Коллекция колонок запроса к схеме объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection"/> для заданного запроса к схеме 
            объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection.#ctor(Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection"/>, являющийся клоном переданной 
            коллекции колонок запроса к схеме объекта.
            </summary>
            <param name="source">Коллекция колонок запроса к схеме объекта, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection.GetUniqueName(System.String)">
            <summary>
            Генерирует уникальное для текущей коллекции имя колонки по заданному имени.
            </summary>
            <param name="name">Имя колонки, для которой генерируется уникальное имя.</param>
            <returns>Уникальное в контексте текущей коллекции имя для <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection.RemoveByName(System.String)">
            <summary>
            Удаляет из коллекции колонку с заданным именем.
            </summary>
            <param name="name">Имя удаляемой колонки.</param>
            <exception cref="T:System.ArgumentNullException">Если в качестве параметра <paramref name="name"/> передано пустое 
            значение или <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если в текущей коллекции нет колонки с именем 
            <paramref name="name"/>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection.GetSelectingExpressions">
            <summary>
            Для текущей коллекции колонок возвращает коллекцию выражений колонок, которые будут использоваться для 
            построения результирующего sql-запроса.
            </summary>
            <returns>Коллекция выражений колонок, которые будут использованы для построения 
            результирующего sql-запроса. </returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection.GetSelectingValueExpressions">
            <summary>
            Из текущей коллекции возвращает коллекцию колонок, хранимые значения которых выбираются в запросе к схеме 
            объекта.
            </summary>
            <returns>Коллекция колонок, хранимые значения которых выбираются в запросе к схеме объекта.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection.FindSchemaColumnByName(System.String)">
            <summary>
            Осуществляет поиск в коллекции колонки схемы с заданным именем. Если колонка схемы не найдена, возвращается 
            <c>null</c>.
            </summary>
            <param name="name">Имя искомой колонки схемы.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaColumn"/> с именем 
            <paramref name="name"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection.HasAggregationSelectingColumn">
            <summary>
            Определяет, есть ли в коллекции колонка, участвующая в построении запроса, к которой применена агрегирующая
            функция.
            </summary>
            <returns><c>true</c>, если в текущей коллекции есть хотя бы одна колонка, участвующая в построении запроса,
            к которой применена агрегирующая функцияЖ иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection.ExistsByPath(System.String)">
            <summary>
            Определяет, есть ли в текущей коллекции колонка с заданным путем.
            </summary>
            <param name="path">Путь к колонке.</param>
            <returns><c>true</c>, если в текущей коллекции колонок есть колонка с путем <paramref name="path"/>;
            иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection.Clone">
            <summary>
            Возвращает экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей коллекции колонок запроса к
            схеме объекта.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей коллекции колонок запроса к
            схеме объекта.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryColumnCollection.ParentQuery">
            <summary>
            Запрос к схеме объекта, которому принадлежит коллекция колонок.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryExpressionUtilities">
            <summary>
            Предоставляет служебные методы для работы с выражениями запросов к схемам объектов.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionUtilities.AddUsingSchemaColumnExpressions(Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection)">
            <summary>
            Добавляет все выражения колонок запроса из переданного выражения в указанную коллекцию выражений.
            </summary>
            <param name="queryExpression">Выражение.</param>
            <param name="resultExpressions">Коллекция результирующих выражений колонок запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryExpressionUtilities.AddUsingSchemaColumnExpressions(Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection,Terrasoft.Core.Entities.EntitySchemaQueryExpressionCollection)">
            <summary>
            Добавляет все выражения колонок запроса из переданной коллекции выражений в указанную коллекцию выражений.
            </summary>
            <param name="queryExpressions">Коллекция выражений.</param>
            <param name="resultExpressions">Коллекция результирующих выражений колонок запроса.</param>
        </member>
        <member name="T:Terrasoft.Core.Entities.FilterComparisonType">
            <summary>
            Тип операции сравнения в фильтре.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.Between">
            <summary>
            Диапазон значений.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.IsNull">
            <summary>
            Является <c>null</c> в базе данных.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.IsNotNull">
            <summary>
            Не является <c>null</c> в базе данных.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.Equal">
            <summary>
            Равно.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.NotEqual">
            <summary>
            Не равно.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.Less">
            <summary>
            Меньше.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.LessOrEqual">
            <summary>
            Меньше или равно.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.Greater">
            <summary>
            Больше.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.GreaterOrEqual">
            <summary>
            Больше или равно.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.StartWith">
            <summary>
            Начинается выражением.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.NotStartWith">
            <summary>
            Не начинается выражением.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.Contain">
            <summary>
            Содержит выражение.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.NotContain">
            <summary>
            Не содержит выражение.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.EndWith">
            <summary>
            Заканчивается выражением.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.NotEndWith">
            <summary>
            Не заканчивается выражением.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.Exists">
            <summary>
            Существует по заданному условию.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterComparisonType.NotExists">
            <summary>
            Не существует по заданному условию.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.FilterAggregationType">
            <summary>
            Тип агрегирующей функции в фильтре.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterAggregationType.None">
            <summary>
            Тип агрегирующей функции не определен.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterAggregationType.Min">
            <summary>
            Минимальное значение.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterAggregationType.Max">
            <summary>
            Максимальное значение.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterAggregationType.Sum">
            <summary>
            Сумма.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterAggregationType.Avg">
            <summary>
            Среднее значение.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.FilterAggregationType.Count">
            <summary>
            Количество.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem">
            <summary>
            Интерфейс элемента фильтра запроса к схеме объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem.AddUsingJoinedExpressions(System.Collections.ObjectModel.Collection{Terrasoft.Core.Entities.EntitySchemaQueryExpression})">
            <summary>
            Заполняет переданную коллекцию выражениями колонок элемента фильтра, которые выбираются из связанных таблиц.
            </summary>
            <param name="expressions">Коллекция выражений колонок.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem.GetFilterInstances">
            <summary>
            Возвращает перечисление экземпляров фильтра.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem.Name">
            <summary>
            Имя.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem.IsEnabled">
            <summary>
            Определяет, использовать ли элемент в построении результирующего sql-запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem.ParentQuery">
            <summary>
            Запрос к схеме объекта, которому принадлежит фильтр.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryFilter">
            <summary>
            Представляет фильтр запроса к схеме объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilter.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFilter"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilter.#ctor(Terrasoft.Core.Entities.FilterComparisonType)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFilter"/> с заданным типом операции сравнения.
            </summary>
            <param name="comparisonType">Тип операции сравнения в фильтре.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilter.#ctor(Terrasoft.Core.Entities.EntitySchemaQueryFilter)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFilter"/>, являющийся клоном переданного фильтра.
            </summary>
            <param name="source">Экземпляр фильтра <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFilter"/>, клон которого создается.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilter.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию фильтра, используя переданный экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого выполняется 
            сериализация.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilter.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFilter"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра фильтра.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilter.CreateQueryCondition(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Creates query condition for the filter with the defined access rights.
            </summary>
            <param name="dbSecurityEngine">The instance of the <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/> class that defines
            database access rights to schemas object for current expression.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilter.SetEnabled(System.Boolean)">
            <summary>
            Устанавливает свойству <see cref="P:Terrasoft.Core.Entities.EntitySchemaQueryFilter.IsEnabled"/> переданное значение.
            </summary>
            <param name="isEnabled">Значение, устанавливаемое свойству <see cref="P:Terrasoft.Core.Entities.EntitySchemaQueryFilter.IsEnabled"/>.</param>
            <returns>Текущий экземпляр фильтра.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilter.Terrasoft#Core#Entities#IEntitySchemaQueryFilterItem#AddUsingJoinedExpressions(System.Collections.ObjectModel.Collection{Terrasoft.Core.Entities.EntitySchemaQueryExpression})">
            <summary>
            Заполняет переданную коллекцию выражениями колонок фильтра, которые выбираются из связанных таблиц. 
            </summary>
            <param name="expressions">Коллекция выражений колонок.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilter.Terrasoft#Core#Entities#IEntitySchemaQueryFilterItem#GetFilterInstances">
            <summary>
            Возвращает перечисление экземпляров фильтра. 
            </summary>
            <returns>Перечислитель экземпляров фильтра.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryFilter.LeftExpression">
            <summary>
            Выражение левой части условия фильтра.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryFilter.RightExpressions">
            <summary>
            Выражение правой части условия фильтра.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryFilter.ComparisonType">
            <summary>
            Тип операции сравнения в фильтре.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryFilter.AggregationType">
            <summary>
            Тип агрегирующей функции в фильтре.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryFilter.IsEnabled">
            <summary>
            Определяет, использовать ли фильтр в построении результирующего sql-запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryFilter.ParentQuery">
            <summary>
            Запрос к схеме объекта, которому принадлежит фильтр.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryFilter.TrimDateTimeParameterToDate">
            <summary>
            Определяет, выполнять ли преобразование выражений фильтра типа Дата/Время к типу Дата.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection">
            <summary>
            Коллекция фильтров запроса к схеме объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection"/> для заданного запроса к схеме 
            объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит текущая коллекция фильтров.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Common.LogicalOperationStrict)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection"/>, фильтры в которой объединяются с 
            указанной логической операцией, для заданного запроса к схеме объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит текущая коллекция фильтров.</param>
            <param name="logicalOperation">Тип логической операции, которой объединяются фильтры в текущей коллекции.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Common.LogicalOperationStrict,Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem[])">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection"/> с заданными массивом добавляемых в
            коллекцию элементов и типом логической операции, которой объединяются фильтры коллекции.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит текущая коллекция фильтров.</param>
            <param name="logicalOperation">Тип логической операции, которой объединяются фильтры в коллекции.</param>
            <param name="items">Массив элементов, которые добавляются в текущую коллекцию фильтров.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.IEntitySchemaQueryFilterItem[])">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection"/> с указанным массивом элементов, 
            которые добавляются в текущую коллекцию, для заданного запроса к схеме объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит текущая коллекция фильтров.</param>
            <param name="items">Массив элементов, которые добавляются в текущую коллекцию фильтров.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.#ctor(Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection"/>, являющейся клоном переданной 
            коллекцией фильтров.
            </summary>
            <param name="source">Экземпляр коллекции фильтров <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection"/>, клон 
            которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию коллекции фильтров, используя переданный экземпляр 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого выполняется 
            сериализация коллекции фильтров.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.ReadMetaData(Terrasoft.Common.DataReader)">
            <summary>
            Выполняет десериализацию коллекции фильтров, используя переданный экземпляр 
            <see cref="T:Terrasoft.Common.DataReader"/>.
            </summary>
            <param name="reader">Экземпляр <see cref="T:Terrasoft.Common.DataReader"/>, с помощью которого выполняется 
            десериализация коллекции фильтров.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.SetEnabled(System.Boolean)">
            <summary>
            Устанавливает свойству <see cref="P:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.IsEnabled"/> переданное значение.
            </summary>
            <param name="isEnabled">Значение, устанавливаемое свойству <see cref="P:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.IsEnabled"/>.</param>
            <returns>Текущий экземпляр фильтра.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.FindByName(System.String)">
            <summary>
            Осуществляет поиск элемента с заданным именем.
            </summary>
            <param name="name">Имя элемента.</param>
            <returns>Элемент с именем <paramref name="name"/> или <c>null</c>, если такой элемент не найден.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.GetByName(System.String)">
            <summary>
            Возвращает элемент с заданным именем. Если такой элемент не найден, генерируется исключение.
            </summary>
            <param name="name">Имя элемента.</param>
            <returns>Элемент с именем <paramref name="name"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра <paramref name="name"/> передано 
            пустое значение или <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.ItemNotFoundException">Если элемент с именем <paramref name="name"/> не найден в коллекции.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей коллекции фильтров.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.AddUsingJoinedExpressions(System.Collections.ObjectModel.Collection{Terrasoft.Core.Entities.EntitySchemaQueryExpression})">
            <summary>
            Заполняет переданную коллекцию выражениями колонок коллекции фильтров, которые выбираются из связанных 
            таблиц.
            </summary>
            <param name="expressions">Коллекция выражения колонок.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.Terrasoft#Core#Entities#IEntitySchemaQueryFilterItem#GetFilterInstances">
            <summary>
            Возвращает перечисление экземпляров фильтров в коллекции.
            </summary>
            <returns>Перечисление экземпляров фильтров в коллекции.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.Name">
            <summary>
            Имя.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.IsEnabled">
            <summary>
            Определяет, использовать ли коллекцию фильтров в построении результирующего sql-запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.IsNot">
            <summary>
            Определяет, использовать ли оператор NOT перед коллекцией фильтров.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.LogicalOperation">
            <summary>
            Тип логической операции, которой объединяются фильтры в коллекции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryFilterCollection.ParentQuery">
            <summary>
            Запрос к схеме объекта, которому принадлежит коллекция фильтров.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaQueryFunction">
            <summary>
            Базовый класс функции выражения запроса к схеме объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFunction.CreateQueryColumnExpression(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Возвращает выражение колонки запроса для текущей функции, сформированное с учетом заданных прав доступа.
            </summary>
            <param name="dbSecurityEngine">Объект <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/>, определяющий права 
            доступа.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для текущей функции запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFunction.GetResultDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных возвращаемого функцией результата, используя переданный менеджер типов данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных возвращаемого функцией результата.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFunction.GetIsSupportedDataValueType(Terrasoft.Core.DataValueType)">
            <summary>
            Определяет, имеет ли возвращаемый функцией результат указанный тип данных.
            </summary>
            <param name="dataValueType">Тип данных.</param>
            <returns><c>true</c>, если функция возвращает результат типа данных <paramref name="dataValueType"/>; 
            иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFunction.GetArguments">
            <summary>
            Возвращает коллекцию выражений аргументов функции.
            </summary>
            <returns>Коллекция выражений аргументов функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaQueryFunction.CheckIsSupportedDataValueType(Terrasoft.Core.DataValueType)">
            <summary>
            Проверяет, имеет ли возвращаемый функцией результат указанный тип данных. В противном случае генерируется 
            исключение.
            </summary>
            <param name="dataValueType">Тип данных.</param>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если возвращаемый функцией результат имеет тип данных, отличный 
            от <paramref name="dataValueType"/>.</exception>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryFunction.QueryAlias">
            <summary>
            Псевдоним функции в sql-запросе.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaQueryFunction.ParentQuery">
            <summary>
            Запрос к схеме объекта, которому принадлежит функция.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction">
            <summary>
            Агрегирующая функция выражения.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction"/> для заданного запроса к схеме 
            объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.#ctor(Terrasoft.Common.AggregationTypeStrict,Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction"/> заданного типа агрегирующей 
            функции для заданного запроса к схеме объекта.
            </summary>
            <param name="aggregationType">Тип агрегирующей функции.</param>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.#ctor(Terrasoft.Common.AggregationTypeStrict,Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction"/> для заданных типа агрегирующей
            функции, выражения и запроса к схеме объекта.</summary>
            <param name="aggregationType">Тип агрегирующей функции.</param>
            <param name="expression">Выражение запроса.</param>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction"/>, являющийся клоном переданного 
            экземпляра агрегирующей функции выражения.
            </summary>
            <param name="source">Экземпляр агрегирующей функции выражения, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию агрегирующей функции, используя заданный экземпляр 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого выполняется 
            сериализация.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.CreateQueryColumnExpression(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Возвращает выражение колонки запроса для агрегирующей функции, сформированное с учетом заданных прав 
            доступа.</summary>
            <param name="dbSecurityEngine">Объект <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/>, определяющий права 
            доступа.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для агрегирующей функции выражения, сформированный с 
            учетом прав доступа <paramref name="dbSecurityEngine"/>.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если выражение аргумента функции является <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.GetArguments">
            <summary>
            Возвращает коллекцию выражений аргументов агрегирующей функции.
            </summary>
            <returns>Коллекция выражений аргументов агрегирующей функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.GetResultDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных возвращаемого агрегирующей функцией результата, используя заданный менеджер типов 
            данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных возвращаемого агрегирующей функцией результата.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.GetIsSupportedDataValueType(Terrasoft.Core.DataValueType)">
            <summary>
            Определяет, имеет ли возвращаемый агрегирующей функцией результат указанный тип данных.
            </summary>
            <param name="dataValueType">Тип данных.</param>
            <returns><c>true</c>, если агрегирующая функция возвращает результат типа данных 
            <paramref name="dataValueType"/>; иначе - <c>false</c>.</returns>
            <exception cref="T:Terrasoft.Common.UnsupportedTypeException">Если результат агрегирующей функции имеет неподдерживаемый тип 
            данных.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка агрегирующей функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.All">
            <summary>
            Устанавливает для текущей агрегирующей функции область применения [Ко всем значениям].
            </summary>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.Distinct">
            <summary>
            Устанавливает для текущей агрегирующей функции область применения [К уникальным значениям].
            </summary>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction"/>.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.QueryAlias">
            <summary>
            Псевдоним функции в sql-запросе.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.AggregationType">
            <summary>
            Тип агрегирующей функции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.AggregationEvalType">
            <summary>
            Область применения агрегирующей функции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaAggregationQueryFunction.Expression">
            <summary>
            Выражение аргумента агрегирующей функции.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction">
            <summary>
            Функция для замены значения <c>null</c> замещающим выражением.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction"/> для заданного запроса к схеме 
            объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction"/> для заданных запроса к схеме 
            объекта, проверяемого выражения и замещающего выражения.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
            <param name="checkExpression">Выражение, которое проверяется на равенство <c>null</c>.</param>
            <param name="replacementExpression">Выражение, которое возвращается функцией, если 
            <paramref name="checkExpression"/> равно <c>null</c>.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction"/>, являющийся клоном переданной 
            функции выражения.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction"/>, клон которой 
            создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию функции выражения, используя переданный экземпляр 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого выполняется 
            сериализация функции выражения.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction.CreateQueryColumnExpression(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Возвращает выражение колонки запроса для текущей функции, сформированное с учетом заданных прав доступа.
            </summary>
            <param name="dbSecurityEngine">Объект <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/>, определяющий права 
            доступа.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для текущей функции запроса.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если проверяемое или замещающее выражение функции 
            равно <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction.GetArguments">
            <summary>
            Возвращает коллекцию выражений аргументов функции.
            </summary>
            <returns>Коллекция выражения аргументов функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction.GetResultDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных возвращаемого функцией результата, используя переданный менеджер типов данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных возвращаемого функцией результата.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction.GetIsSupportedDataValueType(Terrasoft.Core.DataValueType)">
            <summary>
            Определяет, имеет ли возвращаемый функцией результат указанный тип данных.
            </summary>
            <param name="dataValueType">Тип данных.</param>
            <returns>Всегда возвращает <c>true</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction.QueryAlias">
            <summary>
            Псевдоним функции в sql-запросе.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction.CheckExpression">
            <summary>
            Выражение аргумента функции, которое проверяется на равенство значению <c>null</c>.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaIsNullQueryFunction.ReplacementExpression">
            <summary>
            Выражение аргумента функции, которое возвращается функцией, если проверяемое выражение равно <c>null</c>.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction">
            <summary>
            Функция, возвращающая первое не равное <c>null</c> выражение из списка аргументов.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction"/> для заданного запроса к схеме 
            объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction"/>, являющийся клоном переданной 
            функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction"/>, клон которой 
            создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию функции выражения, используя переданный экземпляр 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого выполняется 
            сериализация функции выражения.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction.CreateQueryColumnExpression(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Возвращает выражение колонки запроса для текущей функции, сформированное с учетом заданных прав доступа.
            </summary>
            <param name="dbSecurityEngine">Экземпляр <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/>, определяющий 
            права доступа.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для текущей функции, сформированный с учетом прав 
            доступа <paramref name="dbSecurityEngine"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">Если в качестве параметра <paramref name="dbSecurityEngine"/> 
            передано значение <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если коллекция выражений агрументов функции не имеет ни 
            одного элемента или равна <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction.GetArguments">
            <summary>
            Возвращает коллекцию выражений аргументов функции.
            </summary>
            <returns>Коллекция выражений аргументов функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction.GetResultDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных возвращаемого функцией результата, используя заданный менеджер типов данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных возвращаемого функцией результата.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если коллекция выражений аргументов функции не имеет ни 
            одного элемента или равна <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction.GetIsSupportedDataValueType(Terrasoft.Core.DataValueType)">
            <summary>
            Определяет, имеет ли возвращаемый функцией результат указанный тип данных.
            </summary>
            <param name="dataValueType">Тип данных.</param>
            <returns>Всегда возвращает <c>true</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction.SpecifyQueryAlias(System.String)">
            <summary>
            Определяет для текущей функции выражения заданный псевдоним в результирующем sql-запросе.
            </summary>
            <param name="queryAlias">Псевдоним, определяемый для текущей функции.</param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction.QueryAlias">
            <summary>
            Псевдоним функции в sql-запросе.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction.Expressions">
            <summary>
            Коллекция выражений аргументов функции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCoalesceQueryFunction.HasExpressions">
            <summary>
            Признак, определяющий наличие хотя бы одного элемента в коллекции выражений аргументов функции. 
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem">
            <summary>
            Класс, описывающий выражение условия sql-оператора CASE.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem.#ctor(Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem"/> для заданных выражений
            предложений WHEN и THEN.</summary>
            <param name="whenExpression">Выражение предложения WHEN условия.</param>
            <param name="thenExpression">Выражение предложения THEN условия.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem.#ctor(Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem"/>, являющийся клоном 
            переданного экземпляра.
            </summary>
            <param name="source">Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem"/>, клон которого 
            создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию условия, используя переданный экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>. 
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого выполняется 
            сериализация.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра условия.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem.WhenExpression">
            <summary>
            Выражение предложения WHEN.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItem.ThenExpression">
            <summary>
            Выражение предложения THEN.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItems">
            <summary>
            Коллекция выражений условий sql-оператора CASE.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItems.#ctor">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItems"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItems.#ctor(Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItems)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItems"/>, являющийся клоном 
            переданной коллекции условий.
            </summary>
            <param name="source">Коллекция условий, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItems.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunctionWhenItems"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущей коллекции условий.</returns>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction">
            <summary>
            Функция, возвращающая одно из множества возможных значений в зависимости от указанных условий.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction"/> для заданного запроса к схеме 
            объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction"/>, являющийся клоном переданной 
            функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction"/>, клон которой 
            создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию функции выражения, используя переданный экземпляр 
            <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого выполняется 
            сериализация.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction.CreateQueryColumnExpression(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Возвращает выражение колонки запроса для текущей функции, сформированное с учетом заданных прав доступа.
            </summary>
            <param name="dbSecurityEngine">Экземпляр <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/>, определяющий 
            права доступа.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для текущей функции, сформированный с учетом прав 
            доступа <paramref name="dbSecurityEngine"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">Если в качестве параметра 
            <paramref name="dbSecurityEngine"/> передано пустое значение или <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если коллекция выражений условий функции не имеет ни одного 
            элемента или равна <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction.GetArguments">
            <summary>
            Возвращает коллекцию выражений агрументов функции.
            </summary>
            <returns>Коллекция выражений аргументов функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction.GetResultDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных возвращаемого функцией результата, используя заданный менеджер типов данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных возвращаемого функцией результата.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если коллекция выражений условий функции не имеет ни одного 
            элемента или равна <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction.GetIsSupportedDataValueType(Terrasoft.Core.DataValueType)">
            <summary>
            Определяет, имеет ли возвращаемый функцией результат указанный тип данных.
            </summary>
            <param name="dataValueType">Тип данных.</param>
            <returns>Всегда возвращает <c>true</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction.SpecifyQueryAlias(System.String)">
            <summary>
            Определяет для текущей функции выражения заданный псевдоним в результирующем sql-запросе.
            </summary>
            <param name="queryAlias">Псевдоним, определяемый для текущей функции.</param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction.QueryAlias">
            <summary>
            Псевдоним функции в sql-запросе.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction.WhenItems">
            <summary>
            Коллекция условий функции выражения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction.HasWhenItems">
            <summary>
            Признак, имеет ли функция хотя бы одно условие.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCaseNotNullQueryFunction.ElseExpression">
            <summary>
            Выражение предложения ELSE. 
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaSystemValueQueryFunction">
            <summary>
            Функция, возвращающая выражение системного значения.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaSystemValueQueryFunction.CreateQueryColumnExpression(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Возвращает выражение колонки запроса для текущей функции, сформированное с учетом заданных прав доступа.
            </summary>
            <param name="dbSecurityEngine">Экземпляр <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/>, определяющий 
            права доступа.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для текущей функции, сформированный с учетом прав 
            доступа <paramref name="dbSecurityEngine"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaSystemValueQueryFunction.GetArguments">
            <summary>
            Возвращает коллекцию выражений аргументов функции.
            </summary>
            <returns>Коллекция выражений агрументов функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaSystemValueQueryFunction.GetResultDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных возвращаемого функцией результата, используя заданный менеджер типов данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных возвращаемого функцией результата.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaSystemValueQueryFunction.GetIsSupportedDataValueType(Terrasoft.Core.DataValueType)">
            <summary>
            Определяет, имеет ли возвращаемый функцией результат указанный тип данных.
            </summary>
            <param name="dataValueType">Тип данных.</param>
            <returns><c>true</c>, если функция возвращает результат типа данных <paramref name="dataValueType"/>; 
            иначе - <c>false</c>.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaSystemValueQueryFunction.SystemValueName">
            <summary>
            Имя системного значения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaSystemValueQueryFunction.QueryAlias">
            <summary>
            Псевдоним функции в sql-запросе.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateTimeQueryFunction">
            <summary>
            Функция выражения текущей даты и времени.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentDateTimeQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateTimeQueryFunction"/> для заданного запроса к 
            схеме объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentDateTimeQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaCurrentDateTimeQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateTimeQueryFunction"/>, являющийся клоном 
            переданной функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateTimeQueryFunction"/>, клон которой 
            создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentDateTimeQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentDateTimeQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateTimeQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCurrentDateTimeQueryFunction.SystemValueName">
            <summary>
            Имя системного значения.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaBaseCurrentDateQueryFunction">
            <summary>
            Базовый класс функции выражения для базовой даты.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaBaseCurrentDateQueryFunction.SystemValueName">
            <summary>
            Имя системного значения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaBaseCurrentDateQueryFunction.Offset">
            <summary>
            Смещение.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateQueryFunction">
            <summary>
            Функция выражения текущей даты.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentDateQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateQueryFunction"/> with specified offset
            relatively to base date for a given schema query object.
            </summary>
            <param name="parentQuery">Request to schema object the function belongs to.</param>
            <param name="offset">Offset in days relatively to reference date. Default value is zero.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentDateQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchemaQueryExpression,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateQueryFunction"/> with specified offset
            relatively to base date for a given schema query object.
            </summary>
            <param name="parentQuery">Request to schema object the function belongs to.</param>
            <param name="expression">Query expression.</param>
            <param name="offset">Offset in days relatively to reference date. Default value is zero.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentDateQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaCurrentDateQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateQueryFunction"/>, являющийся клоном переданной 
            функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateQueryFunction"/>, клон которой 
            создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentDateQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentDateQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentDateQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentWeekQueryFunction">
            <summary>
            Функция выражения даты начала текущей недели.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentWeekQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentWeekQueryFunction"/> with specified offset
            relatively to base date for a given schema query object.
            </summary>
            <param name="parentQuery">Request to schema object the function belongs to.</param>
            <param name="offset">Offset in days relatively to reference date. Default value is zero.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentWeekQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchemaQueryExpression,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentWeekQueryFunction"/> with specified offset
            relatively to base date for a given schema query object.
            </summary>
            <param name="parentQuery">Request to schema object the function belongs to.</param>
            <param name="expression">Query expression.</param>
            <param name="offset">Offset in days relatively to reference date. Default value is zero.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentWeekQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaStartOfCurrentWeekQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentWeekQueryFunction"/>, являющийся клоном 
            переданной функции выражения.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentWeekQueryFunction"/>, клон 
            которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentWeekQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentWeekQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentWeekQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentMonthQueryFunction">
            <summary>
            Функция выражения даты начала текущего месяца.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentMonthQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentMonthQueryFunction"/> with specified offset
            relatively to base date for a given schema query object.
            </summary>
            <param name="parentQuery">Request to schema object the function belongs to.</param>
            <param name="offset">Offset in days relatively to reference date. Default value is zero.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentMonthQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchemaQueryExpression,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentMonthQueryFunction"/> with specified offset
            relatively to base date for a given schema query object.
            </summary>
            <param name="parentQuery">Request to schema object the function belongs to.</param>
            <param name="expression">Query expression.</param>
            <param name="offset">Offset in days relatively to reference date. Default value is zero.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentMonthQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaStartOfCurrentMonthQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentMonthQueryFunction"/>, являющийся клоном 
            переданной функции выражения.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentMonthQueryFunction"/>, клон 
            которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentMonthQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentMonthQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentMonthQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentQuarterQueryFunction">
            <summary>
            Функция выражения даты начала текущего квартала.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentQuarterQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentQuarterQueryFunction"/> with specified
            offset relatively to base date for a given schema query object.
            </summary>
            <param name="parentQuery">Request to schema object the function belongs to.</param>
            <param name="offset">Offset in days relatively to reference date. Default value is zero.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentQuarterQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchemaQueryExpression,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentQuarterQueryFunction"/> with specified
            offset relatively to base date for a given schema query object.
            </summary>
            <param name="parentQuery">Request to schema object the function belongs to.</param>
            <param name="expression">Query expression.</param>
            <param name="offset">Offset in days relatively to reference date. Default value is zero.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentQuarterQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaStartOfCurrentQuarterQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentQuarterQueryFunction"/>, являющийся клоном 
            переданной функции выражения.
            </summary>
            <param name="source">Экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentQuarterQueryFunction"/>, клон которого 
            создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentQuarterQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentQuarterQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentQuarterQueryFunction"/>.
            </summary>
            <returns>экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHalfYearQueryFunction">
            <summary>
            Функция выражения даты начала текущего полугодия.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHalfYearQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHalfYearQueryFunction"/> with specified
            offset relatively to base date for a given schema query object.
            </summary>
            <param name="parentQuery">Request to schema object the function belongs to.</param>
            <param name="offset">Offset in days relatively to reference date. Default value is zero.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHalfYearQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchemaQueryExpression,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHalfYearQueryFunction"/> with specified
            offset relatively to base date for a given schema query object.
            </summary>
            <param name="parentQuery">Request to schema object the function belongs to.</param>
            <param name="expression">Query expression.</param>
            <param name="offset">Offset in days relatively to reference date. Default value is zero.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHalfYearQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHalfYearQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHalfYearQueryFunction"/>, являющийся клоном 
            переданной функции выражения.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHalfYearQueryFunction"/>, клон 
            которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHalfYearQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHalfYearQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHalfYearQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentYearQueryFunction">
            <summary>
            Функция выражения даты начала текущего года.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentYearQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentYearQueryFunction"/> with specified offset
            relatively to base date for a given schema query object.
            </summary>
            <param name="parentQuery">Request to schema object the function belongs to.</param>
            <param name="offset">Offset in days relatively to reference date. Default value is zero.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentYearQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchemaQueryExpression,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentYearQueryFunction"/> with specified offset
            relatively to base date for a given schema query object.
            </summary>
            <param name="parentQuery">Request to schema object the function belongs to.</param>
            <param name="expression">Query expression.</param>
            <param name="offset">Offset in days relatively to reference date. Default value is zero.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentYearQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaStartOfCurrentYearQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentYearQueryFunction"/>, являющийся клоном 
            переданной функции выражения. 
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentYearQueryFunction"/>, клон 
            которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentYearQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentYearQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentYearQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaBaseCurrentDateTimeQueryFunction">
            <summary>
            Базовый класс функции выражения базовых даты и времени.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaBaseCurrentDateTimeQueryFunction.SystemValueName">
            <summary>
            Имя системного значения.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHourQueryFunction">
            <summary>
            Represents function for current hour start expression.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHourQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHourQueryFunction"/> which is part of 
            provided <paramref name="parentQuery"/> and has specified <paramref name="offset"/> relatively to base date.
            </summary>
            <param name="parentQuery">Instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>.</param>
            <param name="offset">Offset in hours relatively to base date.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHourQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchemaQueryExpression,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHourQueryFunction"/> which is part of 
            provided <paramref name="parentQuery"/>, has specified function argument <paramref name="expression"/> 
            and <paramref name="offset"/> relatively to base date.
            </summary>
            <param name="parentQuery">Instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>.</param>
            <param name="expression">Function argument expression.</param>
            <param name="offset">Offset in hours relatively to base date.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHourQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHourQueryFunction)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHourQueryFunction"/> which is clone of 
            other instance.
            </summary>
            <param name="source">Instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHourQueryFunction"/> to be cloned.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHourQueryFunction.GetCaption">
            <summary>
            Gets function caption.
            </summary>
            <returns>Function caption string.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHourQueryFunction.Clone">
            <summary>
            Clones current instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaStartOfCurrentHourQueryFunction"/>.
            </summary>
            <returns>Clone of current instance.</returns>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaCurrentTimeQueryFunction">
            <summary>
            Функция выражения текущего времени.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentTimeQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentTimeQueryFunction"/> для заданного запроса к схеме 
            объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentTimeQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaCurrentTimeQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentTimeQueryFunction"/>, являющийся клоном переданного 
            экземпляра функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentTimeQueryFunction"/>, клон которой 
            создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentTimeQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentTimeQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentTimeQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCurrentTimeQueryFunction.SystemValueName">
            <summary>
            Имя системного значения.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserQueryFunction">
            <summary>
            Функция выражения текущего пользователя.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentUserQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserQueryFunction"/> для заданного запроса 
            к схеме объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentUserQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaCurrentUserQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserQueryFunction"/>, являющийся клоном переданного 
            экземпляра функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserQueryFunction"/>, клон которой 
            создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentUserQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentUserQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCurrentUserQueryFunction.SystemValueName">
            <summary>
            Имя системного значения.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserContactQueryFunction">
            <summary>
            Функция выражения контакта текущего пользователя.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentUserContactQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserContactQueryFunction"/> для заданного запроса 
            к схеме объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentUserContactQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaCurrentUserContactQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserContactQueryFunction"/>, являющийся клоном 
            переданного экземпляра функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserContactQueryFunction"/>, клон 
            которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentUserContactQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentUserContactQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserContactQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCurrentUserContactQueryFunction.SystemValueName">
            <summary>
            Имя системного значения.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserAccountQueryFunction">
            <summary>
            Функция выражения контрагента текущего пользователя.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentUserAccountQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserAccountQueryFunction"/> для заданного запроса к 
            схеме объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentUserAccountQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaCurrentUserAccountQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserAccountQueryFunction"/>, являющийся клоном 
            переданного экземпляра функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserAccountQueryFunction"/>, клон 
            которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentUserAccountQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCurrentUserAccountQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaCurrentUserAccountQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCurrentUserAccountQueryFunction.SystemValueName">
            <summary>
            Имя системного значения.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunctionInterval">
            <summary>
            Часть даты.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunctionInterval.Day">
            <summary>
            День.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunctionInterval.Week">
            <summary>
            Неделя.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunctionInterval.Month">
            <summary>
            Месяц.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunctionInterval.Year">
            <summary>
            Год.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunctionInterval.Weekday">
            <summary>
            День недели.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunctionInterval.Hour">
            <summary>
            Час.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunctionInterval.HourMinute">
            <summary>
            Минута.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction">
            <summary>
            Represents query function for part of date.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/> which is part of provided 
            <paramref name="parentQuery"/>.
            </summary>
            <param name="parentQuery">Instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunctionInterval,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/> which is part of provided 
            <paramref name="parentQuery"/> with specified part of date <paramref name="interval"/> for query to 
            entity schema and query expression <paramref name="expression"/>.
            </summary>
            <param name="parentQuery">Instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaQuery"/>.</param>
            <param name="interval">Part of date.</param>
            <param name="expression">Query expression.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction)">
            <summary>
            Initializes new instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/> which is clone of other 
            instance.
            </summary>
            <param name="source">Instance of <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/> to be cloned.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию функции, используя заданный экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого выполняется 
            сериализация.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction.CreateQueryColumnExpression(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Возвращает выражение колонки запроса для текущей функции, сформированное с учетом заданных прав доступа.
            </summary>
            <param name="dbSecurityEngine">Объект <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/>, определяющий 
            права доступа.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для текущей функции, сформированный 
            с учетом прав доступа <paramref name="dbSecurityEngine"/>.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если выражение аргумента функции является <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction.GetResultDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных возвращаемого функцией результата, используя переданный менеджер типов данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных возвращаемого функцией результата.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction.GetIsSupportedDataValueType(Terrasoft.Core.DataValueType)">
            <summary>
            Определяет, имеет ли возвращаемый функцией результат указанный тип данных.
            </summary>
            <param name="dataValueType">Тип данных.</param>
            <returns><c>true</c>, если функция возвращает результат типа данных <paramref name="dataValueType"/>; 
            иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction.GetArguments">
            <summary>
            Возвращает коллекцию выражений агрументов функции.
            </summary>
            <returns>Коллекция выражений аргументов функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction.SpecifyQueryAlias(System.String)">
            <summary>
            Specifies alias of function column in result of sql query.
            </summary>
            <param name="queryAlias">Alias for current function.</param>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction.QueryAlias">
            <summary>
            Псевдоним функции в sql-запросе.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction.Interval">
            <summary>
            Часть даты, возвращаемая функцией.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaDatePartQueryFunction.Expression">
            <summary>
            Выражение аргумента функции.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction">
            <summary>
            Функция для преобразования символов выражения аргумента к верхнему регистру.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction"/> для заданного запроса к схеме объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction"/> для заданных выражения и запроса к 
            схеме объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
            <param name="expression">Выражение запроса к схеме объекта.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction"/>, являющийся клоном переданного 
            экземпляра функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction"/>, клон которой создается.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию функции, используя заданный экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого выполняется 
            сериализация.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction.CreateQueryColumnExpression(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Возвращает выражение колонки запроса для текущей функции, сформированное с учетом заданных прав доступа.
            </summary>
            <param name="dbSecurityEngine">Экземпляр <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/>, определяющий 
            права доступа.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для текущей функции, сформированный с 
            учетом прав доступа <paramref name="dbSecurityEngine"/>.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если выражение аргумента функции является <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction.GetResultDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных возвращаемого функцией результата, используя заданный менеджер типов данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных возвращаемого функцией результата.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction.GetIsSupportedDataValueType(Terrasoft.Core.DataValueType)">
            <summary>
            Определяет, имеет ли возвращаемый функцией результат указанный тип данных.
            </summary>
            <param name="dataValueType">Тип данных.</param>
            <returns><c>true</c>, если функция возвращает результат типа данных <paramref name="dataValueType"/>; 
            иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction.GetArguments">
            <summary>
            Возвращает коллекцию выражений аргументов функции.
            </summary>
            <returns>Коллекция выражений аргументов функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction.QueryAlias">
            <summary>
            Псевдоним функции в sql-запросе.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaUpperQueryFunction.Expression">
            <summary>
            Выражение аргумента функции.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction">
            <summary>
            Функция приведения выражения аргумента к заданному типу данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.DBDataValueType)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction"/> для заданного запроса к схеме объекта 
            с указанным целевым типом данных.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
            <param name="castType">Целевой тип данных.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchemaQueryExpression,Terrasoft.Core.DBDataValueType)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction"/> с заданными выражением и целевым типом 
            данных.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
            <param name="expression">Выражение запроса.</param>
            <param name="castType">Целевой тип данных.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaCastQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction"/>, являющийся клоном переданного 
            экземпляра функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction"/>, клон которой создается.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию функции, используя переданный экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого выполняется 
            сериализация.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction.CreateQueryColumnExpression(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Возвращает выражение колонки запроса для текущей функции,сформированное с учетом заданных прав доступа.
            </summary>
            <param name="dbSecurityEngine">Экземпляр <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/>, определяющий 
            права доступа.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для текущей функции, сформированный с учетом прав 
            доступа <paramref name="dbSecurityEngine"/>.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если выражение аргумента функции является <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction.GetResultDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных возвращаемого функцией результата, используя заданный менеджер типов данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных возвращаемого функцией результата.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction.GetIsSupportedDataValueType(Terrasoft.Core.DataValueType)">
            <summary>
            Определяет, имеет ли возвращаемый функцией результат указанный тип данных.
            </summary>
            <param name="dataValueType">Тип данных.</param>
            <returns><c>true</c>, если функция возвращает результат типа данных <paramref name="dataValueType"/>; 
            иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction.GetArguments">
            <summary>
            Возвращает коллекцию выражений аргументов функции.
            </summary>
            <returns>Коллекция выражений аргументов функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction.QueryAlias">
            <summary>
            Псевдоним функции в sql-запросе.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction.Expression">
            <summary>
            Выражение аргумента функции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaCastQueryFunction.CastType">
            <summary>
            Целевой тип данных.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction">
            <summary>
            Функция для удаления начальных и конечных пробелов из выражения.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction"/> для заданного запроса к схеме объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction"/> для заданных выражения и запроса к 
            схеме объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
            <param name="expression">Выражение запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction"/>, являющийся клоном переданного 
            экземпляра функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction"/>, клон которой создается.
            </param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию функции, используя переданный экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого выполняется 
            сериализация.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction.CreateQueryColumnExpression(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Возвращает выражение колонки запроса для текущей функции, сформированное с учетом переданных прав доступа.
            </summary>
            <param name="dbSecurityEngine">Экземпляр <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/>, определяющий 
            права доступа.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для текущей функции, сформированный с учетом прав 
            доступа <paramref name="dbSecurityEngine"/>.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если выражение аргумента функции является <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction.GetResultDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных возвращаемого функцией результата, используя заданный менеджер типов данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных возвращаемого функцией результата.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction.GetIsSupportedDataValueType(Terrasoft.Core.DataValueType)">
            <summary>
            Определяет, имеет ли возвращаемый функцией результат указанный тип данных.
            </summary>
            <param name="dataValueType">Тип данных.</param>
            <returns><c>true</c>, если функция возвращает результат типа данных <paramref name="dataValueType"/>; 
            иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction.GetArguments">
            <summary>
            Возвращает коллекцию выражений аргументов функции.
            </summary>
            <returns>Коллекция выражений аргументов функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction.QueryAlias">
            <summary>
            Псевдоним функции в sql-запросе.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaTrimQueryFunction.Expression">
            <summary>
            Выражение аргумента функции.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction">
            <summary>
            Функция для возврата длины выражения.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction"/> для заданного запроса к схеме 
            объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchemaQueryExpression)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction"/> для заданных выражения и запроса к 
            схеме объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
            <param name="expression">Выражение запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction"/>, являющийся клоном переданного 
            экземпляра функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction"/>, клон которой 
            создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию функции с помощью переданного экземпляра <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого выполняется 
            сериализация.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction.CreateQueryColumnExpression(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Возвращает выражение колонки для текущей функции, сформированное с учетом заданных прав доступа.
            </summary>
            <param name="dbSecurityEngine">Экземпляр <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/>, определяющий права доступа.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для текущей функции, сформированный с учетом прав 
            доступа <paramref name="dbSecurityEngine"/>.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если выражение аргумента функции является <c>null</c>.
            </exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction.GetResultDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных возвращаемого функцией результата, используя заданный менеджер типов данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных возвращаемого функцией результата.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction.GetIsSupportedDataValueType(Terrasoft.Core.DataValueType)">
            <summary>
            Определяет, имеет ли возвращаемый функцией результат указанный тип данных.
            </summary>
            <param name="dataValueType">Тип данных.</param>
            <returns><c>true</c>, если функция возвращает результат типа данных <paramref name="dataValueType"/>; 
            иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction.GetArguments">
            <summary>
            Возвращает коллекцию выражений аргументов функции.
            </summary>
            <returns>Коллекция выражений аргументов функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction.QueryAlias">
            <summary>
            Псевдоним функции в sql-запросе.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaLengthQueryFunction.Expression">
            <summary>
            Выражение аргумента функции.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction">
            <summary>
            Функция для формирования строки, являющейся результатом объединения строковых значений аргументов функции.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction"/> для заданного запроса к схеме 
            объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaQuery,Terrasoft.Core.Entities.EntitySchemaQueryExpression[])">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction"/> для заданных массива выражений и 
            запроса к схеме объекта.
            </summary>
            <param name="parentQuery">Запрос к схеме объекта, которому принадлежит функция.</param>
            <param name="expressions">Массив выражений.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction.#ctor(Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction)">
            <summary>
            Инициализирует экземпляр <see cref="T:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction"/>, являющийся клоном переданного 
            экземпляра функции.
            </summary>
            <param name="source">Экземпляр функции <see cref="T:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction"/>, клон которой 
            создается.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction.WriteMetaData(Terrasoft.Common.DataWriter)">
            <summary>
            Выполняет сериализацию функции, используя переданный экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>.
            </summary>
            <param name="writer">Экземпляр <see cref="T:Terrasoft.Common.DataWriter"/>, с помощью которого выполняется 
            сериализация.</param>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction.CreateQueryColumnExpression(Terrasoft.Core.DB.DBSecurityEngine)">
            <summary>
            Возвращает выражение колонки запроса для текущей функции, сформированное с учетом заданных прав доступа.
            </summary>
            <param name="dbSecurityEngine">Экземпляр <see cref="T:Terrasoft.Core.DB.DBSecurityEngine"/>, определяющий 
            права доступа.</param>
            <returns>Экземпляр <see cref="T:Terrasoft.Core.DB.QueryColumnExpression"/> для текущей функции, сформированный с учетом прав 
            доступа <paramref name="dbSecurityEngine"/>.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentEmptyException">Если в качестве параметра <paramref name="dbSecurityEngine"/> 
            передано значение <c>null</c>.</exception>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если коллекция выражений аргументов функции не содержит ни 
            одного элемента или равна <c>null</c>.</exception>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction.GetArguments">
            <summary>
            Возвращает коллекцию выражений аргументов функции.
            </summary>
            <returns>Коллекция выражений аргументов функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction.GetResultDataValueType(Terrasoft.Core.DataValueTypeManager)">
            <summary>
            Возвращает тип данных возвращаемого функцией результата, используя заданный менеджер типов данных.
            </summary>
            <param name="dataValueTypeManager">Менеджер типов данных.</param>
            <returns>Тип данных возвращаемого функцией результата.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction.GetIsSupportedDataValueType(Terrasoft.Core.DataValueType)">
            <summary>
            Определяет, имеет ли возвращаемый функцией результат указанный тип данных.
            </summary>
            <param name="dataValueType">Тип данных.</param>
            <returns><c>true</c>, функция возвращает результат типа данных <paramref name="dataValueType"/>; 
            иначе - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction.GetCaption">
            <summary>
            Возвращает заголовок функции выражения.
            </summary>
            <returns>Строка заголовка функции.</returns>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction"/>.
            </summary>
            <returns>Экземпляр <see cref="T:System.Object"/>, являющийся клоном текущего экземпляра функции.</returns>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction.QueryAlias">
            <summary>
            Псевдоним функции в sql-запросе.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction.Expressions">
            <summary>
            Коллекция выражений аргументов функции.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntitySchemaConcatQueryFunction.HasExpressions">
            <summary>
            Определяет, есть ли в коллекции аргументов функции хотя бы один элемент.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntityValidationMessage">
            <summary>
            Сообщение о проверке объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityValidationMessage.MassageType">
            <summary>
            Тип сообщения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityValidationMessage.Text">
            <summary>
            Текст сообщения.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityValidationMessage.Column">
            <summary>
            Колонка схемы объекта.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityDcmRequiredElementValidationMessage.Text">
            <summary>
            Message text.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Entities.EntityDcmRequiredElementValidationMessage.Elements">
            <summary>
            Dcm element caption.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Entities.EntityValidationMessageCollection">
            <summary>
            Коллекция сообщений о проверке объекта.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityValidationMessageCollection.ToString">
            <summary>
            Returns concatenated validation messages text.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Entities.EntityValidationMessageCollection.HasErrors">
            <summary>
            Определяет наличие в коллекции сообщений об ошибках.
            </summary>
            <returns>
            <c>true</c>, если в коллекции сообщений есть сообщения об ошибках; иначе - <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.BuildOrderByItemsSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.Select)">
            <summary>
            Adds items for sorting from <paramref name="select"/> to <paramref name="sb"/>.
            </summary>
            <param name="sb">Builder for sql text string.</param>
            <param name="select">Select.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.BuildOffsetFetchSqlText(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Adds offset-fetch clause to <paramref name="sb"/>.
            </summary>
            <param name="sb">Builder for sql text string.</param>
            <param name="offset">Offset value. Number of rows to skip.</param>
            <param name="fetch">Number of rows to select.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.AddAdditionalSqlInfo(System.Text.StringBuilder)">
            <summary>
            Adds an additional information about sql query.
            </summary>
            <param name="sb">
            The instance of the <see cref="T:System.Text.StringBuilder"/> class, which helps to generate sql query.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.InternalBuildCreateSequenceQuerySqlText(System.Text.StringBuilder,Terrasoft.Core.DB.Sequence)">
            <summary>
            Builds SQL text for creating sequence in DB. <paramref name="sb"/>.
            </summary>
            <param name="sb">Builder for SQL text string.</param>
            <param name="sequence">Sequence object.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.InternalBuildDropSequenceQuerySqlText(System.Text.StringBuilder,Terrasoft.Core.DB.Sequence)">
            <summary>
            Builds SQL text for dropping sequence from DB. <paramref name="sb"/>.
            </summary>
            <param name="sb">Builder for SQL text string.</param>
            <param name="sequence">Sequence object.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.BuildRowLockHintSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.RowLockHint)">
            <summary>
            Forms query text for the table hint "Rowlock".
            </summary>
            <param name="sb">Instance of <see cref="T:System.Text.StringBuilder"/>, which builds query text.</param>
            <param name="rowLockSqlHint">Table hint "Rowlock".</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.BuildNextValueSequenceQuerySqlText(System.Text.StringBuilder,Terrasoft.Core.DB.Sequence)">
            <summary>
            Builds SQL text for getting next value for sequence. <paramref name="sb"/>.
            </summary>
            <param name="sb">Builder for SQL text string.</param>
            <param name="sequence">Sequence object.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.BuildCreateSequenceQuerySqlText(System.Text.StringBuilder,Terrasoft.Core.DB.Sequence)">
            <summary>
            Builds SQL text for creating sequence in DB. <paramref name="sb"/>.
            </summary>
            <param name="sb">Builder for SQL text string.</param>
            <param name="sequence">Sequence object.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.BuildExistSequenceQuerySqlText(System.Text.StringBuilder,Terrasoft.Core.DB.Sequence)">
            <summary>
            Builds SQL text for checking existence sequence in DB. <paramref name="sb"/>.
            </summary>
            <param name="sb">Builder for SQL text string.</param>
            <param name="sequence">Sequence object.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.BuildDropSequenceQuerySqlText(System.Text.StringBuilder,Terrasoft.Core.DB.Sequence)">
            <summary>
            Builds SQL text for dropping sequence from DB. <paramref name="sb"/>.
            </summary>
            <param name="sb">Builder for SQL text string.</param>
            <param name="sequence">Sequence object.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.GetColumnDefValue(Terrasoft.Core.Entities.EntitySchemaColumn)">
            <summary>
            Returns SQL text for default value of a column.
            </summary>
            <param name="entitySchemaColumn">Column.</param>
            <returns>SQL text for default value of a column.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.GetColumnDefValue(Terrasoft.Core.Entities.EntitySchemaColumn,System.Boolean)">
            <summary>
            Returns SQL text for default value of a column.
            </summary>
            <param name="entitySchemaColumn">Column.</param>
            <param name="isWrapped">Flag that indicates whether value in text is wrapped in parentheses.</param>
            <returns>SQL text for default value of a column.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.GetColumnDefValue(Terrasoft.Core.Entities.EntitySchemaColumn,System.String)">
            <summary>
            Returns SQL text for default value of a column.
            </summary>
            <param name="entitySchemaColumn">Column.</param>
            <param name="dbDefValue">Default value format on database level.</param>
            <returns>SQL text for default value of a column.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.BuildQueryFunctionSqlText(System.Text.StringBuilder,Terrasoft.Core.DB.CustomQueryFunction)">
            <summary>
            Builds the query function SQL text.
            </summary>
            <param name="sb">String builder.</param>
            <param name="customQueryFunction">Custom query function.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.DBEngine.GetQuerySqlText(Terrasoft.Core.DB.Sequence,System.Action{System.Text.StringBuilder,Terrasoft.Core.DB.Sequence})">
            <summary>
            Returns SQL text depending on build sequence action.
            </summary>
            <param name="sequence">Sequence object.</param>
            <param name="buildSequenceFunc">Sequence action in DBEngine. </param>
            <returns>SQL text for sequence query.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.DBExecutor.ServerVersion">
            <summary>
            Server version.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.Delete">
            <summary>
            Запрос на удаление данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Delete.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DB.Delete"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Delete.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.Delete"/>, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Delete.#ctor(Terrasoft.Core.DB.Delete)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.Delete"/>, являющийся клоном переданного запроса.
            </summary>
            <param name="source">Запрос на удаление, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Delete.GetSqlText">
            <summary>
            Возвращает sql-текст текущего запроса.
            </summary>
            <returns>Sql-текст текущего запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Delete.BuildSqlText(System.Text.StringBuilder)">
            <summary>
            Формирует текст запроса с использование заданного экземпляра <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Delete.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.Delete"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.Delete"/>, являющийся клоном текущего экземпляра.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Delete.From(System.String)">
            <summary>
            К текущему запросу добавляет в качестве источника данных схему с заданным именем.
            </summary>
            <param name="schemaName">Имя схемы.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Delete"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Delete.From(Terrasoft.Core.DB.ModifyQuerySource)">
            <summary>
            К текущему запросу добавляет в качестве источника данных заданный источник.
            </summary>
            <param name="source">Источник данных.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Delete"/>.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.Delete.Source">
            <summary>
            Источник данных запроса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.Insert">
            <summary>
            Запрос на добавление данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Insert.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DB.Insert"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Insert.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.Insert"/>, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Insert.#ctor(Terrasoft.Core.DB.Insert)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.Insert"/>, являющийся клоном переданного запроса.
            </summary>
            <param name="source">Запрос на добавление, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Insert.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.Insert"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.Insert"/>, являющийся клоном текущего экземпляра.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Insert.GetSqlText">
            <summary>
            Возвращает sql-текст текущего запроса.
            </summary>
            <returns>Sql-текст текущего запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Insert.BuildSqlText(System.Text.StringBuilder)">
            <summary>
            Формирует текст запроса с использованием заданного экземпляра <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Insert.GetUsingParameters">
            <summary>
            Возвращает коллекцию параметров запроса.
            </summary>
            <returns>Коллекция параметров запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Insert.Into(System.String)">
            <summary>
            Добавляет в текущий запрос предложение INTO, определяющее в качестве источника данных запроса схему с 
            заданным именем.
            </summary>
            <param name="schemaName">Имя схемы.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Insert"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Insert.Into(Terrasoft.Core.DB.ModifyQuerySource)">
            <summary>
            Добавляет в текущий запрос предложение INTO, определяющее в качестве источника данных запроса переданный 
            источник данных.
            </summary>
            <param name="source">Источник данных.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Insert"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Insert.Set(System.String,Terrasoft.Core.DB.Select)">
            <summary>
            Добавляет в текущий запрос предложение SET для присвоения колонке с заданным псевдонимом выражения для 
            переданного подзапроса на выборку.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Insert"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Insert.Set(System.String,Terrasoft.Core.DB.Query)">
            <summary>
            Добавляет в текущий запрос предложение SET для присвоения колонке с заданным псевдонимом выражения для 
            произвольного подзапроса.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Insert"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Insert.Set(System.String,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Добавляет в текущий запрос предложение SET для присвоения колонке с заданным псевдонимом переданного 
            выражения колонки.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <param name="columnExpression">Выражение колонки.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Insert"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Insert.Set(System.String,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Добавляет в текущий запрос предложение SET для присвоения колонке с заданным псевдонимом переданного 
            выражения.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <param name="expression">Выражение.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Insert"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Insert.Set(System.String,Terrasoft.Core.DB.QueryParameter)">
            <summary>
            Добавляет в текущий запрос предложения SET для присвоения колонке с заданным псевдонимом выражения для 
            переданного параметра.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <param name="parameter">Параметр запроса.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Insert"/>.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.Insert.ColumnValues">
            <summary>
            Коллекция значений колонок запроса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.PageableSelectDirection">
            <summary>
            Направление постраничного вывода.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.PageableSelectDirection.Prior">
            <summary>
            Предыдущая страница.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.PageableSelectDirection.First">
            <summary>
            Первая страница.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.PageableSelectDirection.Current">
            <summary>
            Текущая страница.
            </summary>
        </member>
        <member name="F:Terrasoft.Core.DB.PageableSelectDirection.Next">
            <summary>
            Следующая страница.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.PageableSelectCondition">
            <summary>
            Представляет условие для запроса с постраничным выводом.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectCondition.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectCondition"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectCondition.#ctor(Terrasoft.Core.DB.PageableSelectCondition)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectCondition"/>, являющийся клоном переданного 
            условия запроса.
            </summary>
            <param name="source">Условие запроса, клон которого создается.</param>
        </member>
        <member name="P:Terrasoft.Core.DB.PageableSelectCondition.LeftExpression">
            <summary>
            Выражение левой части условия.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.PageableSelectCondition.OrderByItem">
            <summary>
            Выражение, по которому выполняется сортировка результатов запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.PageableSelectCondition.LastValueParameter">
            <summary>
            Параметр, определяющий значение последней записи предыдущей страницы данных.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.PageableSelectOptions">
            <summary>
            Параметры постраничного вывода результатов запроса. 
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(System.Int32,Terrasoft.Core.DB.PageableSelectDirection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/> с заданными количеством записей на 
            странице данных и направлением постраничного вывода.
            </summary>
            <param name="rowCount">Количество записей страницы данных.</param>
            <param name="direction">Направление постраничного вывода.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(System.String,System.String,System.Object,System.Int32,Terrasoft.Core.DB.PageableSelectDirection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/> заданными параметрами.
            </summary>
            <param name="primaryConditionColumnName">Имя колонки, для которой добавляется условие запроса.</param>
            <param name="primaryConditionLastValueParameterName">Имя параметра, который содержит значение 
            последней записи предыдущей страницы данных.</param>
            <param name="primaryConditionLastValueParameterValue">Значение последней записи предыдущей страницы данных.
            </param>
            <param name="rowCount">Количество записей страницы данных.</param>
            <param name="direction">Направление постраничного вывода.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(System.String,System.String,System.Object,Terrasoft.Core.DataValueType,System.Int32,Terrasoft.Core.DB.PageableSelectDirection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/> заданными параметрами.
            </summary>
            <param name="primaryConditionColumnName">Имя колонки, для которой добавляется условие запроса.</param>
            <param name="primaryConditionLastValueParameterName">Имя параметра, который содержит значение 
            последней записи предыдущей страницы.</param>
            <param name="primaryConditionLastValueParameterValue">Значение последней записи предыдущей страницы.</param>
            <param name="primaryConditionLastValueParameterValueType">Тип данных значения последней записи предыдущей 
            страницы данных.</param>
            <param name="rowCount">Количество записей страницы данных.</param>
            <param name="direction">Направление постраничного вывода.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(System.String,System.String,System.Object,System.String,System.Int32,Terrasoft.Core.DB.PageableSelectDirection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/> заданными параметрами.
            </summary>
            <param name="primaryConditionColumnName">Имя колонки, для которой добавляется условие запроса.</param>
            <param name="primaryConditionLastValueParameterName">Имя параметра, который содержит значение 
            последней записи предыдущей страницы.</param>
            <param name="primaryConditionLastValueParameterValue">Значение последней записи предыдущей страницы.</param>
            <param name="primaryConditionLastValueParameterValueTypeName">Имя типа данных значения последней записи 
            предыдущей страницы.</param>
            <param name="rowCount">Количество записей страницы данных.</param>
            <param name="direction">Направление постраничного вывода.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/> заданными параметрами.
            </summary>
            <param name="primaryConditionColumnName">Имя колонки, для которой добавляется условие запроса.</param>
            <param name="primaryConditionLastValueParameterName">Имя параметра, который содержит сохраняемое значение 
            последней записи предыдущей страницы.</param>
            <param name="primaryConditionLastValueParameterValue">Значение последней записи предыдущей страницы.</param>
            <param name="rowCount">Количество записей страницы данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(System.String,System.String,System.Object,Terrasoft.Core.DataValueType,System.Int32)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/> заданными параметрами.
            </summary>
            <param name="primaryConditionColumnName">Имя колонки, для которой добавляется условие запроса.</param>
            <param name="primaryConditionLastValueParameterName">Имя параметра, который содержит сохраняемое значение 
            последней записи предыдущей страницы.</param>
            <param name="primaryConditionLastValueParameterValue">Значение последней записи предыдущей страницы.</param>
            <param name="primaryConditionLastValueParameterValueType">Тип данных значения последней записи предыдущей 
            страницы.</param>
            <param name="rowCount">Количество записей страницы данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(System.String,System.String,System.Object,System.String,System.Int32)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/> заданными параметрами.
            </summary>
            <param name="primaryConditionColumnName">Имя колонки, для которой добавляется условие запроса.</param>
            <param name="primaryConditionLastValueParameterName">Имя параметра, который содержит сохраняемое значение 
            последней записи предыдущей страницы данных.</param>
            <param name="primaryConditionLastValueParameterValue">Значение последней записи предыдущей страницы.</param>
            <param name="primaryConditionLastValueParameterValueTypeName">Имя типа данных значения последней записи 
            предыдущей страницы.</param>
            <param name="rowCount">Количество записей страницы данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(Terrasoft.Core.DB.QueryColumnExpression,System.String,System.Object,System.Int32,Terrasoft.Core.DB.PageableSelectDirection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/> заданными параметрами.
            </summary>
            <param name="primaryConditionSourceExpression">Выражение колонки, для которой добавляется условие запроса.
            </param>
            <param name="primaryConditionLastValueParameterName">Имя параметра, который содержит сохраняемое значение 
            последней записи предыдущей страницы данных.</param>
            <param name="primaryConditionLastValueParameterValue">Значение последней записи предыдущей страницы.</param>
            <param name="rowCount">Количество записей страницы данных.</param>
            <param name="direction">Направление постраничного вывода.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(Terrasoft.Core.DB.QueryColumnExpression,System.String,System.Object,Terrasoft.Core.DataValueType,System.Int32,Terrasoft.Core.DB.PageableSelectDirection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/> заданными параметрами.
            </summary>
            <param name="primaryConditionSourceExpression">Выражение колонки, для которой добавляется условие запроса.
            </param>
            <param name="primaryConditionLastValueParameterName">Имя параметра, который содержит сохраняемое значение 
            последней записи предыдущей страницы данных.</param>
            <param name="primaryConditionLastValueParameterValue">Значение последней записи предыдущей страницы данных.
            </param>
            <param name="primaryConditionLastValueParameterValueType">Тип данных значения последней страницы данных.
            </param>
            <param name="rowCount">Количество записей страницы данных.</param>
            <param name="direction">Направление постраничного вывода.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(Terrasoft.Core.DB.QueryColumnExpression,System.String,System.Object,System.String,System.Int32,Terrasoft.Core.DB.PageableSelectDirection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/> заданными параметрами.
            </summary>
            <param name="primaryConditionSourceExpression">Выражение колонки, для которой добавляется условие запроса.
            </param>
            <param name="primaryConditionLastValueParameterName">Имя параметра, который содержит значение последней 
            записи предыдущей страницы данных.</param>
            <param name="primaryConditionLastValueParameterValue">Значение последней записи предыдущей страницы данных.
            </param>
            <param name="primaryConditionLastValueParameterValueTypeName">Имя типа данных значения последней записи 
            предыдущей страницы данных.</param>
            <param name="rowCount">Количество записей страницы данных.</param>
            <param name="direction">Направление постраничного вывода.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(Terrasoft.Core.DB.QueryColumnExpression,System.String,System.Object,System.Int32)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/> заданными параметрами.
            </summary>
            <param name="primaryConditionSourceExpression">Выражение колонки, для которой добавляется условие запроса.
            </param>
            <param name="primaryConditionLastValueParameterName">Имя параметра, который содержит значение последней 
            записи предыдущей страницы.</param>
            <param name="primaryConditionLastValueParameterValue">Значение последней записи предыдущей страницы данных.
            </param>
            <param name="rowCount">Количество записей страницы данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(Terrasoft.Core.DB.QueryColumnExpression,System.String,System.Object,Terrasoft.Core.DataValueType,System.Int32)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/> заданными параметрами.
            </summary>
            <param name="primaryConditionSourceExpression">Выражение колонки, для которой добавляется условие запроса.
            </param>
            <param name="primaryConditionLastValueParameterName">Имя параметра, который содержит значение последней 
            записи предыдущей страницы.</param>
            <param name="primaryConditionLastValueParameterValue">Значение записи предыдущей страницы данных.</param>
            <param name="primaryConditionLastValueParameterValueType">Тип данных значения последней записи предыдущей 
            страницы данных.</param>
            <param name="rowCount">Количество записей страницы данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(Terrasoft.Core.DB.QueryColumnExpression,System.String,System.Object,System.String,System.Int32)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/> заданными параметрами.
            </summary>
            <param name="primaryConditionSourceExpression">Выражение колонки, для которой добавляется условие запроса.
            </param>
            <param name="primaryConditionLastValueParameterName">Имя параметра, который содержит значение последней 
            записи предыдущей страницы данных.</param>
            <param name="primaryConditionLastValueParameterValue">Значение записи предыдущей страницы данных.</param>
            <param name="primaryConditionLastValueParameterValueTypeName">Имя типа значения последней записи 
            предыдущей страницы данных.</param>
            <param name="rowCount">Количество записей страницы данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(Terrasoft.Core.DB.PageableSelectCondition,System.Int32,Terrasoft.Core.DB.PageableSelectDirection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/> заданными параметрами.
            </summary>
            <param name="primaryCondition">Условие запроса.</param>
            <param name="rowCount">Количество записей страницы данных.</param>
            <param name="direction">Направление постраничного вывода.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.#ctor(Terrasoft.Core.DB.PageableSelectOptions)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/>, являющийся клоном переданного 
            экземпляра.
            </summary>
            <param name="source">Экземпляр <see cref="T:Terrasoft.Core.DB.PageableSelectOptions"/>, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.SetPrimaryConditionProperties(Terrasoft.Core.DB.QueryColumnExpression,System.String,System.Object)">
            <summary>
            Устанавливает свойствам первичного условия запроса с постраничным выводом переданные значения.
            </summary>
            <param name="leftExpression">Выражение левой части условия.</param>
            <param name="lastValueParameterName">Имя параметра значения последней записи предыдущей страницы данных.
            </param>
            <param name="lastValueParameterValue">Значение первичной последней записи предыдущей страницы данных.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.SetPrimaryConditionProperties(Terrasoft.Core.DB.QueryColumnExpression,System.String,System.Object,Terrasoft.Core.DataValueType)">
            <summary>
            Устанавливает свойствам первичного условия запроса с постраничным выводом переданные значения.
            </summary>
            <param name="leftExpression">Выражение левой части условия.</param>
            <param name="lastValueParameterName">Имя параметра значения последней записи предыдущей страницы данных.
            </param>
            <param name="lastValueParameterValue">Значение последней записи предыдущей страницы данных.</param>
            <param name="lastValueParameterValueType">Тип данных значения последней записи предыдущей страницы данных.
            </param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.SetPrimaryConditionProperties(Terrasoft.Core.DB.QueryColumnExpression,System.String,System.Object,System.String)">
            <summary>
            Устанавливает свойствам первичного условия запроса с постраничным выводом переданные значения.
            </summary>
            <param name="leftExpression">Выражение левой части условия.</param>
            <param name="lastValueParameterName">Имя параметра значения последней записи предыдущей страницы данных.
            </param>
            <param name="lastValueParameterValue">Значение последней записи предыдущей страницы данных.</param>
            <param name="lastValueParameterValueTypeName">Имя типа данных значения последней записи предыдущей страницы 
            данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.AddCondition(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.OrderByItem,Terrasoft.Core.DB.QueryParameter)">
            <summary>
            Добавляет условие с заданными свойствами для переданного выражения сортировки результатов запроса.
            </summary>
            <param name="leftExpression">Выражение левой части условия.</param>
            <param name="orderByItem">Выражение, по которому выполняется сортировка результатов запроса.</param>
            <param name="lastValueParameter">Параметр, определяющий значение последней записи предыдущей страницы 
            данных.</param>
            <returns>Условие для выражения сортировки <paramref name="orderByItem"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.AddCondition(Terrasoft.Core.DB.QueryColumnExpression,Terrasoft.Core.DB.QueryParameter)">
            <summary>
            Добавляет условие с заданными свойствами для выражений, по которым будет выполняться сортировка 
            результатов запроса.
            </summary>
            <param name="leftExpression">Выражение левой части условия.</param>
            <param name="lastValueParameter">Параметр, определяющий значение последней записи предыдущей страницы 
            данных.</param>
            <returns>Условие для выражений сортировки результатов запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.AddCondition(System.String,System.String,System.Object)">
            <summary>
            Добавляет условие с заданными свойствами для выражения колонки с указанным именем, по которой будет 
            выполняться сортировка результатов запроса.
            </summary>
            <param name="columnName">Имя колонки, для которой добавляется выражение левой части условия.</param>
            <param name="lastValueParameterName">Имя параметра, определяющего значение последней записи предыдущей 
            страницы данных.</param>
            <param name="lastValueParameterValue">Значение последней записи предыдущей страницы данных.</param>
            <returns>Условие для выражения сортировки результатов запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.AddCondition(System.String,System.String,System.Object,Terrasoft.Core.DataValueType)">
            <summary>
            Добавляет условие с заданными свойствами для выражения колонки с указанным именем, по которой будет 
            выполняться сортировка результатов запроса.
            </summary>
            <param name="columnName">Имя колонки, для которой добавляется выражение левой части условия.</param>
            <param name="lastValueParameterName">Имя параметра, определяющего значение последней записи предыдущей 
            страницы данных.</param>
            <param name="lastValueParameterValue">Значение последней записи предыдущей страницы данных.</param>
            <param name="lastValueParameterValueType">Тип данных значения последней записи предыдущей 
            страницы данных.</param>
            <returns>Условие для выражения сортировки результатов запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.AddCondition(System.String,System.String,System.Object,System.String)">
            <summary>
            Добавляет условие с заданными свойствами для выражения колонки с указанным именем, по 
            которой будет выполняться сортировка результатов запроса.
            </summary>
            <param name="columnName">Имя колонки, для которой добавляется выражение левой части условия.</param>
            <param name="lastValueParameterName">Имя параметра, определяющего значение последней записи 
            предыдущей страницы данных.</param>
            <param name="lastValueParameterValue">Значение последней записи предыдущей страницы данных.</param>
            <param name="lastValueParameterValueTypeName">Имя типа данных значения последней записи страницы данных.
            </param>
            <returns>Условие для выражения сортировки результатов запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.AddCondition(System.String,System.String,System.String,System.Object,Terrasoft.Core.DataValueType)">
            <summary>
            Добавляет условие с заданными свойствами для выражения колонки с указанным именем из 
            указанного источника, по которой будет выполняться сортировка результатов запроса.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnName">Имя колонки, для которой добавляет выражение левой части условия.</param>
            <param name="lastValueParameterName">Имя параметра, определяющего значение последней записи страницы данных.
            </param>
            <param name="lastValueParameterValue">Значение последней записи предыдущей страницы данных.</param>
            <param name="lastValueParameterValueType">Тип данных значения последней записи страницы данных.</param>
            <returns>Условие для выражения сортировки результатов запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.PageableSelectOptions.AddCondition(System.String,System.String,System.String,System.Object,System.String)">
            <summary>
            Добавляет условие с заданными свойствами для выражения колонки с указанным именем из указанного источника, 
            по которой будет выполняться сортировка результатов запроса.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnName">Имя колонки, для которой добавляется выражение левой части условия.</param>
            <param name="lastValueParameterName">Имя параметра, определяющего значение последней записи страницы данных.
            </param>
            <param name="lastValueParameterValue">Значение последней записи предыдущей страницы данных.</param>
            <param name="lastValueParameterValueTypeName">Имя типа значения последней записи страницы данных.</param>
            <returns>Условие для выражения сортировки результатов запроса.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.PageableSelectOptions.PrimaryCondition">
            <summary>
            Первичное условие запроса с постраничным выводом.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.PageableSelectOptions.HasPrimaryCondition">
            <summary>
            Признак, определяющий, имеет ли запрос с постраничным выводом первичное условие.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.PageableSelectOptions.RowCount">
            <summary>
            Количество записей страницы данных.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.PageableSelectOptions.RowsOffset">
            <summary>
            Number of rows to skip.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.PageableSelectOptions.Direction">
            <summary>
            Направление постраничного вывода.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.PageableSelectOptions.OrderByItemsConditions">
            <summary>
            Коллекция условий для выражений, по которым выполняется сортировка результатов запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.PageableSelectOptions.HasOrderByItemsConditions">
            <summary>
            Определяет, присутствуют ли в запросе условия для выражений, по которым выполняется сортировка результатов 
            запроса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.HierarchicalSelectOptions">
            <summary>
            Параметры построения иерархических запросов.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.HierarchicalSelectOptions.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.HierarchicalSelectOptions"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.HierarchicalSelectOptions.#ctor(Terrasoft.Core.DB.HierarchicalSelectOptions)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.HierarchicalSelectOptions"/>, являющийся клоном переданного 
            экземпляра.
            </summary>
            <param name="source">Экземпляр <see cref="T:Terrasoft.Core.DB.HierarchicalSelectOptions"/>, клон которого создается.</param>
        </member>
        <member name="P:Terrasoft.Core.DB.HierarchicalSelectOptions.RootSourceAlias">
            <summary>
            Root table alias. Should be used for avoiding column name ambiguity.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.HierarchicalSelectOptions.PrimaryColumnName">
            <summary>
            Primary key column name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.HierarchicalSelectOptions.ParentColumnName">
            <summary>
            Parent column name.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.HierarchicalSelectOptions.StartingPrimaryColumnCondition">
            <summary>
            Условие по первичной колонке, определяющее стартовую запись в иерархии.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.HierarchicalSelectOptions.HasStartingPrimaryColumnCondition">
            <summary>
            Признак определяющий, имеет ли запрос условие для определения стартовой записи в иерархии.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.HierarchicalSelectOptions.SelectType">
            <summary>
            Hierarchical select type.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.HierarchicalSelectOptions.MaxDepthParameter">
            <summary>
            Максимальный уровень вложенности иерархии.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.HierarchicalSelectOptions.IsDistinct">
            <summary>
            Определяет, возвращает ли запрос только уникальные записи.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.HierarchicalSelectOptions.IncludeLevelColumn">
            <summary>
            Определяет, будет ли запрос возвращать колонку с номером уровня записи в иерархии.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.HierarchicalSelectOptions.LevelColumnAlias">
            <summary>
            Псевдоним колонки с номером уровня записи в иерархии.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.HierarchicalSelectOptions.CreateCommonTableExpression">
            <summary>
            Определяет, будет ли создано для данного иерархического запроса обобщенное табличное выражение.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.HierarchicalSelectOptions.CommonTableExpressionName">
            <summary>
            Имя обобщенного табличного выражения иерархического запроса.
            </summary>
            <remarks>По умолчанию равно &lt;HierarchicalSelect&gt;</remarks>
        </member>
        <member name="T:Terrasoft.Core.DB.Select">
            <summary>
            Запрос на выборку данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DB.Select"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.#ctor(Terrasoft.Core.DB.Select)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>, являющийся клоном переданного запроса.
            </summary>
            <param name="source">Запрос на выборку данных, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.GetSqlText">
            <summary>
            Возвращает sql-текст текущего запроса.
            </summary>
            <returns>Sql-текст текущего запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.BuildSqlText(System.Text.StringBuilder)">
            <summary>
            Формирует текст запроса с использованием заданного экземпляра <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.GetUsingParameters">
            <summary>
            Возвращает коллекцию используемых запросом параметров.
            </summary>
            <returns>Коллекция параметров, используемых запросом.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.Select"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>, представляющий копию текущего экземпляра.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.ExecuteReader(Terrasoft.Core.DB.DBExecutor)">
            <summary>
            Используя переданный экземпляр <see cref="T:Terrasoft.Core.DB.DBExecutor"/>, выполняет запрос на выборку и возвращает 
            <see cref="T:System.Data.IDataReader"/> с результирующим набором записей.
            </summary>
            <param name="dbExecutor">Экземпляр <see cref="T:Terrasoft.Core.DB.DBExecutor"/>, с помощью которого выполняется запрос к базе 
            данных.</param>
            <returns>Экземпляр <see cref="T:System.Data.IDataReader"/> с результирующим набором записей.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.ExecuteReader(Terrasoft.Core.DB.Select.ExecuteReaderReadMethod)">
            <summary>
            Выполняет запрос на выборку и вызывает переданный метод делегата для каждой записи набора.
            </summary>
            <param name="readMethod"></param>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.ExecuteScalar``1">
            <summary>
            Выполняет текущий запрос на выборку и возвращает типизированный первый столбец первой записи 
            результирующего набора, возвращаемого запросом.
            </summary>
            <typeparam name="TResult">Тип возвращаемого значения столбца.</typeparam>
            <returns>Первый столбец первой записи в результирующем наборе типа <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.ExecuteScalar``1(Terrasoft.Core.DB.DBExecutor)">
            <summary>
            Используя переданный экземпляр <see cref="T:Terrasoft.Core.DB.DBExecutor"/>, выполняет текущий запрос на выборку и возвращает 
            типизированный первый столбец первой записи результирующего набора, возвращаемого запросом.
            </summary>
            <typeparam name="TResult">Тип возвращаемого значения столбца.</typeparam>
            <param name="dbExecutor">Экземпляр <see cref="T:Terrasoft.Core.DB.DBExecutor"/>, с помощью которого выполняется запрос к базе 
            данных.</param>
            <returns>Первый столбец первой записи в результирующем наборе данных типа <typeparamref name="TResult"/>.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.Distinct">
            <summary>
            Добавляет к текущему запросу на выборку ключевое слово Distinct. 
            </summary>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.Top(System.Int32)">
            <summary>
            Устанавливает количество первых записей, возвращаемых результирующим набором данных.
            </summary>
            <param name="rowCount">Количество первых записей результирующего набора.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.As(System.String)">
            <summary>
            Добавляет указанный псевдоним для последнего заданного выражения запроса.
            </summary>
            <param name="alias">Псевдоним выражения запроса.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
            <exception cref="T:Terrasoft.Common.InvalidObjectStateException">Если метод вызывается до вызова одного из методов [From] или 
            [Columns].</exception>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.Column(System.String)">
            <summary>
            Добавляет в коллекцию выражений колонок текущего запроса выражение для колонки с заданным псевдонимом.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.Column(System.String,System.String)">
            <summary>
            Добавляет в коллекцию выражений колонок текущего запроса выражение для колонки с заданным псевдонимом из 
            указанного источника.
            </summary>
            <param name="sourceAlias">Псевдоним источника.</param>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.Column(Terrasoft.Core.DB.Select)">
            <summary>
            Добавляет в коллекцию выражений колонок текущего запроса выражение для переданного подзапроса на выборку.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.Column(Terrasoft.Core.DB.Query)">
            <summary>
            Добавляет в коллекцию выражений колонок текущего запроса выражение для переданного произвольного подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.Column(Terrasoft.Core.DB.QueryCase)">
            <summary>
            Добавляет в коллекцию выражений колонок текущего запроса выражение для переданного оператора Case.
            </summary>
            <param name="queryCase">Оператор Case запроса.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.Column(Terrasoft.Core.DB.QueryParameter)">
            <summary>
            Добавляет в текущую коллекцию выражений колонок выражения для переданного параметра запроса.
            </summary>
            <param name="queryParameter">Параметр запроса.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.Column(Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Добавляет в текущую коллекцию выражений колонок переданное выражение колонки.
            </summary>
            <param name="columnExpression">Выражение колонки запроса.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.Column(Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Добавляет в текущую коллекцию выражений колонок переданное выражение.
            </summary>
            <param name="expression">Выражение.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.From(System.String)">
            <summary>
            Добавляет в качестве выражения источника данных текущего запроса схему с указанным именем.
            </summary>
            <param name="schemaName">Имя схемы.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.From(Terrasoft.Core.DB.Select)">
            <summary>
            Добавляет в качестве выражения источника данных текущего запроса выражение для переданного подзапроса на 
            выборку.
            </summary>
            <param name="subSelect">ПОдзапрос на выборку.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.From(Terrasoft.Core.DB.Query)">
            <summary>
            Добавляет в качестве выражения источника данных текущего запроса выражение для переданного произвольного 
            подзапроса.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.From(Terrasoft.Core.DB.QuerySourceExpression)">
            <summary>
            Добавляет в качестве выражения источника данных текущего запроса переданное выражение.
            </summary>
            <param name="sourceExpression">Выражение источника данных запроса.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.CrossJoin(System.String)">
            <summary>
            Связывает с текущим запросом схему с указанным именем, используя перекрестное соединение.
            </summary>
            <param name="schemaName">Имя связываемой схемы.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.CrossJoin(Terrasoft.Core.DB.Select)">
            <summary>
            Связывает с текущим запросом указанный подзапрос на выборку, используя перекрестное соединение.
            </summary>
            <param name="subSelect">Подзапрос на выборку.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.CrossJoin(Terrasoft.Core.DB.Query)">
            <summary>
            Связывает с текущим запросом указанный произвольный подзапроса, используя перекрестное соединение.
            </summary>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.CrossJoin(Terrasoft.Core.DB.QuerySourceExpression)">
            <summary>
            Связывает с текущим запросом указанное выражение, используя перекрестное соединение.
            </summary>
            <param name="sourceExpression">Выражение для присоединяемого источника данных.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Select"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.ToPageable(Terrasoft.Core.DB.PageableSelectOptions)">
            <summary>
            Преобразует текущий запрос к запросу с возможностью постраничного вывода с заданными параметрами.
            </summary>
            <param name="options">Параметры постраничного вывода результатов запроса.</param>
            <returns>Запрос на выборку данных с постраничным выводом.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Select.OffsetFetch(System.Int32,System.Int32)">
            <summary>
            Adds offset-fetch clause to select.
            </summary>
            <param name="rowsOffset">Number of rows to skip.</param>
            <param name="rowsCount">Number of rows to select.</param>
            <returns>Modified select.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.Select.IsDistinct">
            <summary>
            Определяет, возвращает ли запрос только уникальные записи.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Select.Columns">
            <summary>
            Коллекция выражений колонок запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Select.SourceExpression">
            <summary>
            Выражение источника данных запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Select.CanReadUncommitedData">
            <summary>
            Признак, определяющий, будут ли попадать в результаты запроса данные, для которых не завершена транзакция.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Select.OffsetFetchPaging">
            <summary>
            Determines if offset-fetch paging is using.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Select.RowsOffset">
            <summary>
            Number of rows to skip.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.DB.Select.ExecuteReaderReadMethod">
            <summary>
            Определяет сигнатуру метода делегата, вызываемого при чтении записей данных запроса.
            </summary>
            <param name="dataReader"></param>
        </member>
        <member name="T:Terrasoft.Core.DB.SelectQueryCollection">
            <summary>
            Коллекция запросов на выборку данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.SelectQueryCollection.#ctor">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.SelectQueryCollection"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.SelectQueryCollection.#ctor(Terrasoft.Core.DB.SelectQueryCollection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.SelectQueryCollection"/>, являющийся клоном переданной коллекции.
            </summary>
            <param name="source">Коллекция запросов на выборку, клон которой создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.SelectQueryCollection.Clone">
            <summary>
            Создает клон текущей коллекции запросов на выборку.
            </summary>
            <returns>Новый экземпляр коллекции запросов на выборку <see cref="T:Terrasoft.Core.DB.SelectQueryCollection"/>, являющийся 
            клоном текущей коллекции.</returns>
        </member>
        <member name="T:Terrasoft.Core.DB.Update">
            <summary>
            Запрос на обновление данных.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.DB.Update.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.DB.Update"/> class.
            </summary>
            <param name="schemaName">Schema name.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Update.#ctor(Terrasoft.Core.UserConnection)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.Update"/>, используя заданное пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Update.#ctor(Terrasoft.Core.UserConnection,System.String)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.Update"/> для схемы с указанным именем, используя заданное 
            пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="schemaName">Имя схемы.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Update.#ctor(Terrasoft.Core.UserConnection,Terrasoft.Core.DB.ModifyQuerySource)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.Update"/> для указанного источника данных, используя заданное 
            пользовательское подключение.
            </summary>
            <param name="userConnection">Пользовательское подключение.</param>
            <param name="source">Источник данных.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Update.#ctor(Terrasoft.Core.DB.Update)">
            <summary>
            Инициализирует новый экземпляр <see cref="T:Terrasoft.Core.DB.Update"/>, являющийся клоном переданного запроса.
            </summary>
            <param name="source">Запрос на обновление, клон которого создается.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Update.GetSqlText">
            <summary>
            Возвращает sql-текст текущего запроса.
            </summary>
            <returns>Sql-текст текущего запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Update.BuildSqlText(System.Text.StringBuilder)">
            <summary>
            Формирует текст запроса с использованием заданного экземпляра <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="sb">Экземпляр <see cref="T:System.Text.StringBuilder"/>, с помощью которого формируется текст 
            запроса.</param>
        </member>
        <member name="M:Terrasoft.Core.DB.Update.GetUsingParameters">
            <summary>
            Возвращает коллекцию параметров запроса.
            </summary>
            <returns>Коллекция параметров запроса.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Update.Clone">
            <summary>
            Создает клон текущего экземпляра <see cref="T:Terrasoft.Core.DB.Update"/>.
            </summary>
            <returns>Новый экземпляр <see cref="T:Terrasoft.Core.DB.Update"/>, являющийся клоном текущего экземпляра.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Update.Set(System.String,Terrasoft.Core.DB.Select)">
            <summary>
            Добавляет в текущий запрос предложение SET для присвоения колонке с заданным псевдонимом выражения для 
            переданного подзапроса на выборку.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <param name="subSelect">Подзапрос на выборку</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Update"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Update.Set(System.String,Terrasoft.Core.DB.Query)">
            <summary>
            Добавляет в текущий запрос предложение SET для присвоения колонке с заданным псевдонимом выражения для 
            переданного произвольного подзапроса.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <param name="subSelectQuery">Произвольный подзапрос.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Update"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Update.Set(System.String,Terrasoft.Core.DB.QueryColumnExpression)">
            <summary>
            Добавляет в текущий запрос предложение SET для присвоения колонке с заданным псевдонимом переданного 
            выражения колонки.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <param name="columnExpression">Выражение колонки.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Update"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Update.Set(System.String,Terrasoft.Core.DB.IQueryColumnExpressionConvertible)">
            <summary>
            Добавляет в текущий запрос предложение SET для присвоения колонке с заданным псевдонимом переданного 
            выражения.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <param name="expression">Выражение.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Update"/>.</returns>
        </member>
        <member name="M:Terrasoft.Core.DB.Update.Set(System.String,Terrasoft.Core.DB.QueryParameter)">
            <summary>
            Добавляет в текущий запрос предложение SET для присвоения колонке с заданным псевдонимом переданного 
            параметра.
            </summary>
            <param name="sourceColumnAlias">Псевдоним колонки.</param>
            <param name="parameter">Параметр запроса.</param>
            <returns>Текущий экземпляр <see cref="T:Terrasoft.Core.DB.Update"/>.</returns>
        </member>
        <member name="P:Terrasoft.Core.DB.Update.Source">
            <summary>
            Источник данных запроса.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.DB.Update.ColumnValues">
            <summary>
            Коллекция значений колонок запроса.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.SchemaManagerItemActionEventArgs">
            <summary>
            Base class for classes that contain state data for the schema manager events.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemActionEventArgs.Item">
            <summary>
            Manager item.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.SchemaManagerItemBeforeAddEventArgs">
            <summary>
            Provides data about status for event before adding a manager item.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemBeforeAddEventArgs.#ctor(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Initializes a new <see cref="T:Terrasoft.Core.SchemaManagerItemBeforeAddEventArgs" /> 
            instance using the specified manager item.
            </summary>
            <param name="item">The manager item that is being added.</param>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemBeforeAddEventArgs.IsCanceled">
            <summary>
            Determines whether adding a manager item was cancelled.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.SchemaManagerItemAfterAddEventArgs">
            <summary>
            Provides data about the status for the event after adding a manager item.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemAfterAddEventArgs.#ctor(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Initializes a new <see cref="T:Terrasoft.Core.SchemaManagerItemAfterAddEventArgs" /> 
            instance using the specified manager item.
            </summary>
            <param name="item">The manager item that was added.</param>
        </member>
        <member name="T:Terrasoft.Core.SchemaManagerItemBeforeRemoveEventArgs">
            <summary>
            Provides data about the status for the event before deleting of a manager item.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemBeforeRemoveEventArgs.#ctor(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Initializes a new <see cref="T:Terrasoft.Core.SchemaManagerItemBeforeRemoveEventArgs" /> 
            instance using the specified manager item.
            </summary>
            <param name="item">The manager item that is being deleted.</param>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemBeforeRemoveEventArgs.IsCanceled">
            <summary>
            Determines whether deleting a manager item was cancelled.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.SchemaManagerItemAfterRemoveEventArgs">
            <summary>
            Provides data about the status for the event after deleting a manager item.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemAfterRemoveEventArgs.#ctor(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Initializes a new <see cref="T:Terrasoft.Core.SchemaManagerItemAfterRemoveEventArgs" /> 
            instance using the specified manager item.
            </summary>
            <param name="item">Deleted manager item.</param>
        </member>
        <member name="T:Terrasoft.Core.SchemaManagerItemBeforeSaveEventArgs">
            <summary>
            Provides data about the status for the event before saving of a manager item.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemBeforeSaveEventArgs.#ctor(Terrasoft.Core.ISchemaManagerItem)">
            <summary>
            Creates instance of <see cref="T:Terrasoft.Core.SchemaManagerItemBeforeSaveEventArgs"/>, using specified item
            of manager.
            </summary>
            <param name="item">Saving item of manager.</param>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemBeforeSaveEventArgs.IsCanceled">
            <summary>
            Determines if canceled saving of a manager item.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.SchemaManagerItemAfterSaveEventArgs">
            <summary>
            Provides data about the status for the event after saving a manager item.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.SchemaManagerItemAfterSaveEventArgs.#ctor(Terrasoft.Core.ISchemaManagerItem,System.Boolean)">
            <summary>
            Creates instance of <see cref="T:Terrasoft.Core.SchemaManagerItemAfterSaveEventArgs"/>, using specified item.
            </summary>
            <param name="item">Saving item of manager.</param>
            <param name="isNew">Determines if <paramref name="item"/> is new.</param>
        </member>
        <member name="P:Terrasoft.Core.SchemaManagerItemAfterSaveEventArgs.IsNew">
            <summary>
            Determines if saving item is new.
            </summary>
        </member>
        <member name="T:Terrasoft.Core.Process.ProcessSchemaManager">
            <summary>
            The schema manager, that works with <see cref="T:Terrasoft.Core.Process.ProcessSchema"/> items.
            </summary>
            <seealso cref="T:Terrasoft.Core.Process.BaseProcessSchemaManager`1"/>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Terrasoft.Core.Process.ProcessSchemaManager"/> class.
            </summary>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.CreateInterpretationValidator(Terrasoft.Core.UserConnection)">
            <summary>
            Gets the interpretation validator for process schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns>
            Interpretation validator instance.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.InitializeDefSchema">
            <summary>
            Initializes the default schema.
            </summary>
            <returns>
            The default schema.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.InternalCreateSchema(System.String,Terrasoft.Core.Process.ProcessSchema,Terrasoft.Core.UserConnection,System.Guid,System.Boolean)">
            <summary>
            Internally creates new manager item.
            </summary>
            <param name="name">The item name.</param>
            <param name="baseSchema">The base schema.</param>
            <param name="userConnection">The user connection.</param>
            <param name="uid">The unique identifier.</param>
            <param name="fromMetaData"><c>true</c> if can use metadata, otherwise - <e>false</e>.</param>
            <returns>
            The new manager item.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.SaveFlowSchema(Terrasoft.Core.Process.ProcessSchema,Terrasoft.Core.UserConnection)">
            <summary>
            Saves the flow schema for the given process schema.
            </summary>
            <param name="schema">The process schema.</param>
            <param name="connection">The user connection.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetSchemaSources(Terrasoft.Core.Process.ProcessSchema,System.Guid,Terrasoft.Core.UserConnection)">
            <summary>
            Returns the schema sources.
            </summary>
            <param name="schema">The schema.</param>
            <param name="schemaId">The schema identifier.</param>
            <param name="connection">The connection.</param>
            <returns>The schema sources.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.CreateSchemaInstance(Terrasoft.Core.ISchemaManagerItem,System.Reflection.Assembly)">
            <summary>
            Creates the schema instance.
            </summary>
            <param name="schemaManagerItem">The schema manager item.</param>
            <param name="assembly">Assembly contains instance type.</param>
            <returns>Created instance.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetIsCreatedInInterpretableVersion(Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Flag that indicates whether the process schema was created in the interpreted environment.
            </summary>
            <param name="processSchema">Process schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetInstanceByItem(Terrasoft.Core.ISchemaManagerItem{Terrasoft.Core.Process.ProcessSchema})">
            <summary>
            Gets the schema by the given manager item.
            </summary>
            <param name="managerItem">The manager item.</param>
            <returns>The instance of the schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetCanUseFlowEngine(Terrasoft.Core.ISchemaManagerItem{Terrasoft.Core.Process.ProcessSchema})">
            <summary>
            Gets a value indicating whether the schema can use flow engine.
            </summary>
            <param name="item">The process schema item.</param>
            <returns><c>true</c> if the schema can use flow engine. Otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetCanUseFlowEngine(System.Guid)">
            <summary>
            Gets a value indicating whether the schema can use flow engine.
            </summary>
            <param name="processSchemaId">The process schema identifier.</param>
            <returns><c>true</c> if the schema can use flow engine. Otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetProcessFullTypeName(System.String)">
            <summary>
            Returns process FyllTypeName in Assembly.
            </summary>
            <param name="processName"></param>
            <returns>Process FyllTypeName in Assembly.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.ActualizeSchemaMetaData(Terrasoft.Core.Entities.EntityCollection)">
            <summary>
            Actualizes the schema meta data.
            </summary>
            <param name="schemas">The schemas.</param>
            <returns>
            The actualized metadata.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.CheckOperationUserRights(Terrasoft.Core.UserConnection)">
            <summary>
            Checks whether the current user can modify the manager elements.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns><c>True</c> if the user can modify the manager elements.</returns>
            <exception cref="T:System.Security.SecurityException">The user doesn't have right to modify the process
            schema manager elements.</exception>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetCanUseFlowEngine(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Gets a value indicating whether the process can be executed in the interpreted environment according to
            the given process schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="processSchema">The process schema.</param>
            <returns><c>true</c> if the process can be executed in the interpreted environment.
            Otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetCanUseFlowEngine(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.BaseProcessSchema)">
            <summary>
            Gets a value indicating whether the process can be executed in the interpreted environment according to
            the given base process schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="schema">The base process schema.</param>
            <returns><c>true</c> if the process can be executed in the interpreted environment.
            Otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetCanUseFlowEngine(Terrasoft.Core.UserConnection,Terrasoft.Core.ISchemaManagerItem{Terrasoft.Core.Process.ProcessSchema})">
            <summary>
            Gets a value indicating whether the process can be executed in the interpreted environment according to
            the schema manager element.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="item">The item of the process schema manager.</param>
            <returns><c>true</c> if the process can be executed in the interpreted environment.
            Otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetGenerator(Terrasoft.Core.UserConnection)">
            <summary>
            Returns the source code generator for the manager schemas.
            </summary>
            <param name="userConnection">The user connection.</param>
            <returns>
            The source code generator.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.Initialize(Terrasoft.Core.SchemaManagerProvider,Terrasoft.Core.SchemaManagerProviderConfigurationElement)">
            <summary>
            Performs manager initialization, using the specified schema manager provider and information from
            application configuration.
            </summary>
            <param name="provider">Schema manager provider.</param>
            <param name="configuration">Configuration information.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetInstanceByUId(System.Guid)">
            <summary>
            Gets the instance by the unique identifier.
            </summary>
            <param name="schemaUId">The unique identifier of the schema.</param>
            <returns>The instance of the schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetInstanceByName(System.String)">
            <summary>
            Gets the instance by the name.
            </summary>
            <param name="name">The name of the schema.</param>
            <returns>
            The instance of the schema.
            </returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetProcessValidationResult(Terrasoft.Core.Process.ProcessSchema,Terrasoft.Core.UserConnection)">
            <summary>
            Validates schema for ability to interpretation.
            </summary>
            <param name="process">Process schema.</param>
            <param name="userConnection">User connection.</param>
            <returns>Results of analyzes for ability to interpretation.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetIsProcessExistsInAssembly(Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Returns flag that indicates if process compiled at least once and exists in assembly.
            </summary>
            <returns>Flag that indicates if process compiled at least once and exists in assembly.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.CreateDefEventHandlerSchema(Terrasoft.Core.Process.ProcessBasedSchema,Terrasoft.Core.DesignModeEventDescriptor)">
            <summary>
            Creates the default event handler embedded process schema.
            </summary>
            <param name="ownerSchema">The owner schema.</param>
            <param name="eventDescriptor">The event descriptor.</param>
            <returns>The embedded process schema with the default event handler.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetItemsFromMetaDataByParentId(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Gets the items from meta data by the parent schema identifier.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="parentSchemaId">The parent schema identifier.</param>
            <returns>The manager item instance.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.AddEventHandler(Terrasoft.Core.Process.ProcessSchema,System.String)">
            <summary>
            Adds the event handler for the given event in the given process schema.
            Event never be throwed to the base element.
            </summary>
            <param name="processSchema">The process schema.</param>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.AddEventHandler(Terrasoft.Core.Process.ProcessSchema,System.String,System.Boolean)">
            <summary>
            Adds the event handler for the given event in the given process schema.
            </summary>
            <param name="processSchema">The process schema.</param>
            <param name="eventName">Name of the event.</param>
            <param name="isOverride"><c>true</c> if the handler is inherrited and the event should be throwed to the
            base element.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.BuildDefEventHandlerSchemaProperties(Terrasoft.Core.Process.ProcessSchema,Terrasoft.Core.DesignModeEventDescriptor)">
            <summary>
            Prepares the default event handler schema properties.
            </summary>
            <param name="processSchema">The process schema.</param>
            <param name="eventDescriptor">The event descriptor.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.SaveDesignedSchema(Terrasoft.Core.UserConnection,Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Saves the designed process schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="processSchema">The process schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.Save(Terrasoft.Core.UserConnection,Terrasoft.Core.ISchemaManagerItem{Terrasoft.Core.Process.ProcessSchema},System.Boolean)">
            <summary>
            Saves the process schema instance of the specified item.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="managerItem">The manager item.</param>
            <param name="isNewSchema"><c>true</c> if it is a new schema, otherwise - <c>false</c>.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.LoadDesignedSchema(Terrasoft.Core.UserConnection,System.Guid)">
            <summary>
            Loads the designed process schema from the database.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="schemaUId">The schema unique identifier.</param>
            <returns>The instance of the process schema.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetMaxVersionByParentUId(System.Guid)">
            <summary>
            Gets the maximum version by parent schema unique identifier.
            </summary>
            <param name="parentUId">The parent schema unique identifier.</param>
            <returns>The version number.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetVersion(Terrasoft.Core.ISchemaManagerItem{Terrasoft.Core.Process.ProcessSchema})">
            <summary>
            Gets the version of the given manager item.
            </summary>
            <param name="schemaManagerItem">The schema manager item.</param>
            <returns>The version number.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.GetMaxVersionSchemaManagerItemByParentUId(System.Guid)">
            <summary>
            Gets the maximum version schema manager item by parent schema unique identifier.
            </summary>
            <param name="parentUId">The parent schema unique identifier.</param>
            <returns>The manager item, that has the maximum version number.</returns>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.ClearQuickModelData(Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Clears the quick model data information for the given process schema.
            </summary>
            <param name="process">The process schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.ConvertProcessSchema(Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Converts the old format process schema item to the new format.
            </summary>
            <param name="designedItem">The process schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.ConvertPolylinePointPositions(Terrasoft.Core.Process.ProcessSchema)">
            <summary>
            Performs convertion for the process flow elements coordinates.
            </summary>
            <param name="designedItem">The process schema.</param>
        </member>
        <member name="M:Terrasoft.Core.Process.ProcessSchemaManager.CopyProcessSchema(Terrasoft.Core.UserConnection,System.Guid,System.String,System.String,System.Guid)">
            <summary>
            Copies the process schema.
            </summary>
            <param name="userConnection">The user connection.</param>
            <param name="sourceSchemaUId">The unique identifier of the source schema.</param>
            <param name="name">The name of the new schema.</param>
            <param name="caption">The caption of the new schema.</param>
            <param name="packageUId">The package identifier of the new schema.</param>
            <returns>The new process schema instance.</returns>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaManager.ProcessSchemaUtilities">
            <summary>
            Gets the process schema utilities instance.
            </summary>
            <value>
            The process schema utilities.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaManager.ItemTypeName">
            <summary>
            Gets the name of the item type.
            </summary>
            <value>
            The name of the item type.
            </value>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaManager.CanUseUserProperties">
            <summary>
            Gets a value indicating whether this instance can use user properties.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaManager.ItemCaption">
            <summary>
            The caption for the schema manager item.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaManager.ResourceManagerName">
            <summary>
            The name of the resource manager.
            </summary>
        </member>
        <member name="P:Terrasoft.Core.Process.ProcessSchemaManager.DefEmbeddedProcessSchema">
            <summary>
            Gets or sets the default embedded process schema.
            </summary>
            <value>
            The default embedded process schema.
            </value>
        </member>
    </members>
</doc>
